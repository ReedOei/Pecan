#load("ostrowski/add_2.txt", "walnut", add2(alpha, a, b, c))
#load("ostrowski/recog_2.txt", "walnut", recog2(alpha, x))
#load("ostrowski/all_ones_2.txt", "walnut", all_ones2(a))
#load("ostrowski/lt_2.txt", "walnut", lt2(a, b))
#load("sturmian2.txt", "walnut", sturmian(n))

Execute genFinite 3.
Execute genEqual 3.
Execute genZero 3.

x is ostrowski(a) := x is finite_3 & recog2(a, x)

Structure ostrowski(a) defining {
    "adder": add2(a, any, any, any),
    "less": lt2(any, any),
    "zero": zero_3(any),
    "equal": equal_3(any, any)
}

x is zeckendorf := exists o. all_ones2(o) & x is ostrowski(o)
zeck_add(a, b, c) := exists o. all_ones2(o) & add2(o, a, b, c)

Structure zeckendorf defining {
    "adder": zeck_add(any, any, any),
    "less": lt2(any, any),
    "equal": equal_3(any, any),
    "zero": zero_3(any)
}

Restrict x, y, z are ostrowski(alpha).

// These tests of arithmetic properties are relevant because they use bases other than binary
add_comm() := forall alpha. forall x. forall y. x + y = y + x
#assert_prop(true, add_comm)

zero_add_refl() := forall alpha. forall x. x + 0 = x
#assert_prop(true, zero_add_refl)

add_assoc_const() := forall alpha. forall x. x + (1 + 1) = (x + 1) + 1
#assert_prop(true, add_assoc_const)

typ_add(alpha, x, y, z) := add2(alpha, x, y, z)

// add_assoc() := forall alpha. forall x. forall y. forall z. x + (y + z) = (x + y) + z
// add_assoc() := forall alpha. forall x. forall y. forall z. exists xy is ostrowski(alpha). exists yz is ostrowski(alpha). typ_add(alpha, xy, z, typ_add(alpha, x, yz))
add_assoc() := forall alpha. forall x,y,z. forall xy, yz, s are ostrowski(alpha). (typ_add(alpha, x, y, xy) & typ_add(alpha, y, z, yz)) => (typ_add(alpha, xy, z, s) <=> typ_add(alpha, x, yz, s))
#assert_prop(true, add_assoc)

