#import("reals.pn")

Restrict x, y, z, w are real.

Execute equivalenceRelationCheck integral_equal real.
Execute totalOrderCheck integral_less integral_equal real.
Execute equivalenceRelationCheck real_equal real.
Execute totalOrderCheck real_less real_equal real.

real_add_same_sign_closed() := forall x. x is positive => forall y. y is positive => exists z. real_add_same_sign(x, y, z)
#assert_prop(true, real_add_same_sign_closed)

real_add_same_sign_comm() := forall x. x is positive => forall y. y is positive => forall z. (real_add_same_sign(x, y, z) <=> real_add_same_sign(y, x, z))
#assert_prop(true, real_add_same_sign_comm)

real_add_same_sign_assoc() := forall x.
                        forall y.
                        forall z.
                        forall xy is real.
                        forall yz is real. (x is real & y is real & z is real & real_add_same_sign(x, y, xy) & real_add_same_sign(y, z, yz)) =>
                            real_add_same_sign(x, yz, real_add_same_sign(xy, z))
#assert_prop(true, real_add_same_sign_assoc)

can_sub_if_lt() := forall x. x is positive => forall y. (y is positive & real_less(y, x)) => exists w. real_add_same_sign(w, y, x)
#assert_prop(true, can_sub_if_lt)

real_add_neg_pos_closed() := forall x. forall y. (x is negative & x is real & y is positive) => exists z. real_add_neg_pos(x, y, z)
#assert_prop(true, real_add_neg_pos_closed)

real_add_closed() := forall x. forall y. (x is real & y is real) => exists z. real_add(x, y, z)
#assert_prop(true, real_add_closed)

real_add_comm() := forall x. forall y. x is real => x + y = y + x
#assert_prop(true, real_add_comm)

real_add_unique() := forall x. forall y. forall z. forall w. (x + y = z & x + y = w) => z = w
#assert_prop(true, real_add_unique)

real_add_assoc() := forall x.
                    forall y.
                    forall z.
                    forall xy is real.
                    forall yz is real.
                    (y is real & xy is real & real_add(x, y, xy) & real_add(y, z, yz) & x is real & z is real) =>
                    real_add(x, yz, xy + z)
#assert_prop(true, real_add_assoc)

reals_dense() := forall x. forall y. x < y => exists z. x < z & z < y
#assert_prop(true, reals_dense)

can_divide_by_2() := forall x. exists y. x=2*y
#assert_prop(true, can_divide_by_2)

can_divide_by_negative_10() := forall x. exists y. x=(-10)*y
#assert_prop(true, can_divide_by_negative_10)

can_divide_by_17() := forall x. exists y. x=17*y
#assert_prop(true, can_divide_by_17)

