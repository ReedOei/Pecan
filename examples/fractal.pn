#load("fractal/cantor-3-self-similar.txt", "walnut", cantor3(x))
#load("fractal/sierpinski-3-self-similar.txt", "walnut", sierpinski3(x, y))
#load("fractal/sierpinski-5-self-similar.txt", "walnut", sierpinski5(x, y))
#load("fractal/menger-3-self-similar.txt", "walnut", menger3(x, y, z))
#load("fractal/cantor-dust-3-self-similar.txt", "walnut", cantor_dust3(x, y, z))
#load("fractal/pascal-mod-2.txt", "walnut", pascal2(x, y))
#load("fractal/pascal-mod-2-3d.txt", "walnut", pascal2_3d(x, y, z))
#load("fractal/pascal-mod-3.txt", "walnut", pascal3(x, y))
#load("fractal/peano.txt", "walnut", peano(x, y, z, w))
#load("fractal/hilbert.txt", "walnut", hilbert(x, y, z, w))

// #plot(peano, alphabet_x=3, alphabet_y=3, alphabet_z=3, alphabet_w=3, layer=2)
#plot(hilbert, alphabet_x=2, alphabet_y=2, alphabet_z=2, alphabet_w=2, layer=4)

// #plot(pascal2, alphabet_x=2, alphabet_y=2, layer=7)
// #plot(pascal3, alphabet_x=3, alphabet_y=3, layer=5)

// #plot(pascal2_3d, alphabet_x=2, alphabet_y=2, alphabet_z=2, layer=5)

// #plot(sierpinski5, alphabet_x=3, alphabet_y=3, save_to="sierpinski5.png")
// #plot(sierpinski5, alphabet_x=3, alphabet_y=3, layer=5)
// #plot(sierpinski3, alphabet_x=3, alphabet_y=3, layer=4)

// #plot(cantor3, alphabet_x=3, layer_from=0, layer_to=10)

// #plot(menger3, alphabet_x=3, alphabet_y=3, alphabet_z=3, layer=3)

// #plot(cantor_dust3, alphabet_x=3, alphabet_y=3, alphabet_z=3, layer=3)

// test(n is nat, a is nat) := n < a

// #import("../SturmianWords/ostrowski_defs.pn")
// #load("../SturmianWords/automata/pow_5.aut", "hoa", pow_5(a, i, n))
// #load("../SturmianWords/automata/pow_6.aut", "hoa", pow_6(a, i, n))
// #load("../SturmianWords/automata/pow_7.aut", "hoa", pow_7(a, i, n))
// #load("../SturmianWords/automata/pow_8.aut", "hoa", pow_8(a, i, n))

// has_pow_5(a) := exists i, n. bco_positive(n) & pow_5(a, i, n)
// has_pow_6(a) := exists i, n. bco_positive(n) & pow_6(a, i, n)
// has_pow_7(a) := exists i, n. bco_positive(n) & pow_7(a, i, n)
// has_pow_8(a) := exists i, n. bco_positive(n) & pow_8(a, i, n) & pow_7(a, i, n) & pow_6(a, i, n) & pow_5(a, i, n)

// what() := not (exists a. has_pow_8(a))

// #assert_prop(false, what)

// #import("reals.pn")

// huaaaah(a is nat, b is nat) := a != b * 2 // or (exists b is nat. a = b * 4) // and (not (exists b is nat. a = b * 2))

// // #plot(ostrowski, alphabet_alpha=3, alphabet_x=3, layer=5)
// // #plot(bco_eq, alphabet_x=3, alphabet_y=3, layer=5)

// #plot(huaaaah, alphabet_a=2, alphabet_b=2, layer=5)

// #plot(has_pow_8, alphabet_a=3, layer=5)

// line(a is real, b is real, c is real) := a + b = c

// lt(a is real, b is real) := a = b

// #plot(lt, alphabet_a=2, alphabet_b=2, layer=5)
