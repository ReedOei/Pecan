#load("ostrowski/add_2.txt", "walnut", add2(alpha, a, b, c))
#load("ostrowski/recog_2.txt", "walnut", recog2(alpha, x))
#load("ostrowski/all_ones_2.txt", "walnut", all_ones2(a))
#load("ostrowski/lt_2.txt", "walnut", lt2(a, b))
#load("sturmian2.txt", "walnut", sturmian(n))

Execute genFinite 3.
Execute genEqual 3.
Execute genZero 3.

x is ostrowski(a) := x is finite_3 & recog2(a, x)
x is zeckendorf := exists o. all_ones2(o) & x is ostrowski(o)
zeck_add(a, b, c) := exists o. all_ones2(o) & add2(o, a, b, c)

#type(zeckendorf, {
    "adder": zeck_add(any, any, any),
    "less": lt2(any, any),
    "equal": equal_3(any, any),
    "zero": zero_3(any)
})

Restrict i, j, k, n are zeckendorf.

// The Fibonacci word (i.e., characteristic Sturmian word with slope = 1/phi)
F(n) := sturmian(n)

square(i, n) := i is zeckendorf & n is zeckendorf & n > 0 & forall k. k < n => F[i + k] = F[i + k + n]
// As a memorial to the optimizer, the only reasonable way to define square so that it would finish in time was:
// square(i, n) := i is zeckendorf & n is zeckendorf & n > 0 & !(exists k. k < n & (exists ik is zeckendorf. ik = i + k & exists ikn is zeckendorf. ikn = ik + n & ((F(ik) & (!F(ikn))) | (F(ikn) & (!F(ik))))))
squares_exist() := exists i. exists n. square(i, n)
#assert_prop(true, squares_exist)

cube(i, n) := square(i, n) & square(i + n, n)
cubes_exist() := exists i. exists n. cube(i, n)
#assert_prop(true, cubes_exist)

fourth_power(i, n) := square(i, n) & square(i + n, n) & square(i + 2*n, n)
fourth_power_exist() := exists i. exists n. fourth_power(i, n)
#assert_prop(false, fourth_power_exist)

