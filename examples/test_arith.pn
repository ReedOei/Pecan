double(x, y) := x+x=y

is_even(x) := exists y. double(y, x)

finite_num(x) := "F(G(!x))"

test() := forall x. (finite_num(x) & is_even(x)) => (exists y. exists z. y + y = x & y = z)
#assert_prop(true, test)

test2() := forall x. finite_num(x) =>  0 + x = x
#assert_prop(true, test2)

test3() := 0+0=0
#assert_prop(true, test3)

test4() := forall x. forall y. (finite_num(x) & finite_num(y)) => (x + y = y + x)
#assert_prop(true, test4)

test5() := forall x. finite_num(x) =>  x - 0 = x
#assert_prop(true, test5)

test6() := forall x. forall y. (finite_num(x) & finite_num(y)) => (y + x - y = x)
#assert_prop(true, test6)

test7() := 3 + 4 = 7
#assert_prop(true, test7)

test8() := 255 - 128 = 127
#assert_prop(true, test8)

test9() := 2 > 1
#assert_prop(true, test9)

test10() := forall x. forall y. (finite_num(x) & finite_num(y)) => ((x + y) >= x)
#assert_prop(true, test10)

test11() := forall x. forall y. (finite_num(x) & finite_num(y)) => ((x > y) <=> !(x <= y))
#assert_prop(true, test11)

test12() := forall x. forall y. (finite_num(x) & finite_num(y)) => ((x > y) <=> (y < x))
#assert_prop(true, test12)

test13() := (2 / 1) = 2
#assert_prop(true, test13)

test14() := 1024 * 2048 / 2 + 512 - 512 * (2 * 2048 / 2 + 1) = 0
#assert_prop(true, test14)

test15() := 1024 * 2048 / 2 + 512 = 512 * (2 * 2048 / 2 + 1)
#assert_prop(true, test15)

test18() := forall x.   ((finite_num(x)) => ((x + y) = x) => (y = 0))
#assert_prop(true, test18)

test19() := forall x. forall y.  ((x <= y) <=> (x < y | x = y))
#assert_prop(true, test19)

test20() := forall x. forall y.  ((x >= y) <=> (x > y | x = y))
#assert_prop(true, test20)

test21() := forall x. forall y. (finite_num(x) & finite_num(y)) => ((x < y) | (x >= y))
#assert_prop(true, test21)

test22() := forall x. forall y.  (finite_num(x) & finite_num(y)) => ((x >= y) => (! (x < y)))
#assert_prop(true, test22)

test23() := forall x. forall y.  (finite_num(x) & finite_num(y)) => ( (! (x < y)) => (x >= y) )
#assert_prop(true, test23)

test24() := forall x. forall y.  (finite_num(x) & finite_num(y)) =>  ((!(!(x<y))) <=> (x < y))
#assert_prop(true, test24)
