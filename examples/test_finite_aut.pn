#load("automata/binary.fsa", "fsa-dict", fsa_binary(n))
#load("bin_add.fsa", "fsa-dict", fsa_bin_add(x,y,z))
#load("bin_less.fsa", "fsa-dict", fsa_bin_less(x,y))
#load("bin_equal.fsa", "fsa-dict", fsa_bin_equal(x,y))

Structure fsa_binary defining {
    "adder": fsa_bin_add(any, any, any),
    "less": fsa_bin_less(any, any),
    "equal": fsa_bin_equal(any, any)
}

Restrict a,b,c,d,x,y,z are fsa_binary.

Prove that {
    forall x,y,z. fsa_bin_add(x,y,z) <=> fsa_bin_add(y,x,z)
}.

Prove that {
    forall x,y,z,c.
        (exists a. fsa_bin_add(x,y,a) & fsa_bin_add(a,z,c)) <=> (exists b. fsa_bin_add(x,b,c) & fsa_bin_add(y,z,b))
}.

x is even := exists y. fsa_bin_add(y,y,x)
x is succ(y) := x < y & forall z. z <= x | y <= z

Prove that {
    forall x.
        if x is even then !(succ(x) is even)
}.

// Prove that {
//     forall x.
//         if !(x is even) then exists z. z is even & x is succ(z)
// }.

