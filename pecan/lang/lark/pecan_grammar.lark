?start: def* -> prog

?def: pred_definition
    | "#" "save_aut" "(" ( string | var ) "," var ")" -> directive_save_aut
    | "#" "save_aut_img" "(" string "," var ")" -> directive_save_aut_img
    | "#" "context" "(" string "," string ")" -> directive_context
    | "#" "end_context" "(" string ")" -> directive_end_context
    | "#" "load" "(" string "," string "," formal ")" -> directive_load_aut
    | "#" "assert_prop" "(" prop_val "," var ")" -> directive_assert_prop
    | "#" "import" "(" string ")" -> directive_import
    | "#" "forget" "(" var ")" -> directive_forget
    | "Structure" formal "defining" val_dict ["."] -> directive_structure
    | "#" "shuffle" "(" formal "," formal "," formal ")" -> directive_shuffle
    | "#" "shuffle_or" "(" formal "," formal "," formal ")" -> directive_shuffle_or
    | "#" "plot" "(" var ")" -> directive_plot
    | ("Restrict" | "Let") restriction "."
    | praline

prop_val: PROP_VAL -> prop_val_tok

?praline: "Define" praline_operator _DEFEQ term "." -> praline_def
        | "Alias" string EQ EQ GT directive_name term "." -> praline_alias
        | directive_name term "." -> praline_directive

directive_name: /(?!(Define|Alias|Restrict)\b)[A-Z][a-zA-Z_0-9]*/

?term: "if" term "then" term "else" term -> praline_if
     | "\\" app _IMPLIES term -> praline_lambda
     | "let" var _IS term "in" term -> praline_let_pecan
     | "let" match_expr _DEFEQ term "in" term -> praline_let
     | "match" term "with" (match_arm)+ "end" -> praline_match
     | "do" term (";" term)* [";"] -> praline_do
     | praline_operator
     | praline_operator operator_sym -> partial_op_fst
     | operator_sym praline_operator -> partial_op_snd

?match_arm: "case" match_expr _IMPLIES term -> praline_match_arm

?match_expr: int -> praline_match_int
    | string -> praline_match_string
    | var -> praline_match_var
    | "[" ( match_expr ("," match_expr)* )? "]" -> praline_match_list
    | match_expr COLON COLON match_expr -> praline_match_prepend
    | "(" (match_expr ",")+ (match_expr)? ")" -> praline_match_tuple
    | "(" match_expr ")"
    | pecan_term -> praline_match_pecan

?praline_operator: praline_operator operator_sym praline_operator -> praline_operator
                 | praline_arith

?operator_sym: operator_sym_char+ -> operator_sym
?operator_sym_char: PERCENT | EQ | GT | LT | COLON | DISJ | CONJ | COMP | /[^\x00-\xFF]/ | "@"

PERCENT: "%"
_DEFEQ: ":="
EQ: "="
GT: ">"
LT: "<"
COLON: ":"

?praline_arith: "-" praline_sub -> praline_neg
                 | praline_sub

?praline_sub: praline_add ("-" praline_add)* -> praline_sub
?praline_add: praline_mul ("+" praline_mul)* -> praline_add
?praline_mul: praline_div ("*" praline_div)* -> praline_mul
?praline_div: praline_exponent ("/" praline_exponent)* -> praline_div
?praline_exponent: app ("^" app)* -> praline_exponent

?app: app praline_atom -> praline_app
    | praline_atom

?praline_atom: var -> praline_var
     | int -> praline_int
     | string -> praline_string
     | "true" -> praline_true
     | "false" -> praline_false
     | "(" term ")"
     | pecan_term
     | praline_list
     | praline_tuple

?pecan_term: "{" pred "}" -> praline_pecan_term
           | "{" def "}" -> praline_pecan_term

?praline_list: "[" (term ("," term)*)? "]" -> praline_list_literal
             | "[" term "." "." ["."] term "]" -> praline_list_gen

?praline_tuple: "(" (term ",")+ (term)? ")"

val_dict: "{" (kv_pair ("," kv_pair )*)? "}"
?kv_pair: string COLON var "(" args ")" -> kv_pair

?restriction: varlist _IS var -> restrict_is
            | varlist _IS var "(" varlist ")" -> restrict_call

_IS: "are" | "is" | "∈" | "be"

?pred_definition: var "(" args ")" _DEFEQ pred -> def_pred_standard
                | var _IS var _DEFEQ pred -> def_pred_is
                | var _IS var "(" args ")" _DEFEQ pred -> def_pred_is_call

formal: var -> formal_var
      | var "(" varlist ")" -> formal_call
      | var _IS var -> formal_is
      | var _IS var "(" varlist ")" -> formal_is_call

quant_formal: varlist -> quant_formal_list
            | varlist _IS var -> quant_formal_is
            | varlist _IS var "(" varlist ")" -> quant_formal_is_call

varlist: var ("," var)*

?pred: bool
     | pred _IMPLIES pred                -> implies
     | "if" pred "then" pred ["else" pred] -> if_then_else
     | bool _IFF pred                    -> iff
     | bool DISJ pred -> disj
     | bool CONJ pred -> conj
     | forall_sym quant_formal "." pred       -> forall
     | exists_sym quant_formal "." pred       -> exists

?bool: expr
     | "true"  -> formula_true
     | "false" -> formal_false
     | string                           -> spot_formula
     | "(" pred ")"
     | comparison
     | COMP bool -> comp
     | "distinct" "{" varlist "}" -> distinct
     | var "in" "{" varlist "}" -> elementof
     | var "not" "in" "{" varlist "}" -> not_elementof

?comparison: expr EQ expr                     -> equal
           | expr ne expr                     -> not_equal
           | expr LT expr                     -> less
           | expr GT expr                     -> greater
           | expr le expr                     -> less_equal
           | expr ge expr                     -> greater_equal

?expr: arith
     | var "[" arith "]"  -> index
     | var "[" arith "." "." ["."] arith "]" -> index_range

?arith: sub_expr

?sub_expr: add_expr ("-" add_expr)* -> sub
?add_expr: mul_expr ("+" mul_expr)* -> add
?mul_expr: div_expr ("*" div_expr)* -> mul
?div_expr: atom ("/" atom)* -> div

?atom: var -> var_ref
     | int -> int_const
     | "-" atom  -> neg
     | "(" arith ")"
     | call
     | "min" "{" var ":" pred "}" -> min_func
     | "max" "{" var ":" pred "}" -> max_func
     | "inf" "{" var ":" pred "}" -> inf_func
     | "sup" "{" var ":" pred "}" -> sup_func
     | ANNOTATION "[" pred "]" -> annotation

args: (arg ("," arg)*)?
?arg: expr

call: var "(" args ")" -> call_args
     | atom _IS var     -> call_is
     | atom _IS "not" var -> call_is_not
     | atom _IS var "(" args ")" -> call_is_args
     | atom _IS "not" var "(" args ")" -> call_is_not_args

int: INT -> int_tok

var: VAR -> var_tok

string: ESCAPED_STRING -> escaped_str

PROP_VAL: "sometimes"i | "true"i | "false"i // case insensitive

ne: COMP EQ -> elim_ne
   | "/" EQ | "≠"
COMP: "!" | "~" | "¬" | "not"
ge: GT EQ -> elim_ge
   | "≥" -> elim_ge
le: LT EQ -> elim_le
   | "≤" -> elim_ge

_IMPLIES: "=>" | "⇒" | "⟹ "
_IFF: "<=>" | "⟺" | "⇔" | "iff"

CONJ: "&" | "/\\" | "∧" | "and"
DISJ: "|" | "\\/" | "∨" | "or"

?forall_sym: "forall" | "∀"
?exists_sym: "exists" | "∃"

VAR: /(?!(be|sup|inf|distinct|min|max|case|end|match|with|do|if|then|else|otherwise|iff|is|are|forall|exists|not|or|and|sometimes|true|false)\b)[a-z_$][\$a-zA-Z_0-9]*/

ANNOTATION: /@[A-Za-z0-9_]+/

%import common.INT
%import common.WS
%import common.ESCAPED_STRING

COMMENT: /\/\/[^\n]*/

%ignore WS
%ignore COMMENT

