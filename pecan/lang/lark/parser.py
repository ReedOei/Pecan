# The file was automatically generated by Lark v0.8.1
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark.
#
#    It is licensed under GPLv2 or above.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, contact me via email.
#
#    If GPL is incompatible with your free or open-source project,
#    contact me and we'll work it out (for free).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    See <http://www.gnu.org/licenses/>.
#
#

import os
from io import open

class LarkError(Exception):
    pass

class GrammarError(LarkError):
    pass

class ParseError(LarkError):
    pass

class LexError(LarkError):
    pass

class UnexpectedEOF(ParseError):
    def __init__(self, expected):
        self.expected = expected

        message = ("Unexpected end-of-input. Expected one of: \n\t* %s\n" % '\n\t* '.join(x.name for x in self.expected))
        super(UnexpectedEOF, self).__init__(message)


class UnexpectedInput(LarkError):
    pos_in_stream = None

    def get_context(self, text, span=40):
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        before = text[start:pos].rsplit('\n', 1)[-1]
        after = text[pos:end].split('\n', 1)[0]
        return before + after + '\n' + ' ' * len(before) + '^\n'

    def match_examples(self, parse_fn, examples):
        """ Given a parser instance and a dictionary mapping some label with
            some malformed syntax examples, it'll return the label for the
            example that bests matches the current error.
        """
        assert self.state is not None, "Not supported for this exception"

        candidate = None
        for label, example in examples.items():
            assert not isinstance(example, STRING_TYPE)

            for malformed in example:
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        try:
                            if ut.token == self.token:  # Try exact match first
                                return label
                        except AttributeError:
                            pass
                        if not candidate:
                            candidate = label

        return candidate


class UnexpectedCharacters(LexError, UnexpectedInput):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None):
        message = "No terminal defined for '%s' at line %d col %d" % (seq[lex_pos], line, column)

        self.line = line
        self.column = column
        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.pos_in_stream = lex_pos
        self.state = state

        message += '\n\n' + self.get_context(seq)
        if allowed:
            message += '\nExpecting: %s\n' % allowed
        if token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in token_history)

        super(UnexpectedCharacters, self).__init__(message)



class UnexpectedToken(ParseError, UnexpectedInput):
    def __init__(self, token, expected, considered_rules=None, state=None):
        self.token = token
        self.expected = expected     # XXX str shouldn't necessary
        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.considered_rules = considered_rules
        self.state = state
        self.pos_in_stream = getattr(token, 'pos_in_stream', None)

        message = ("Unexpected token %r at line %s, column %s.\n"
                   "Expected one of: \n\t* %s\n"
                   % (token, self.line, self.column, '\n\t* '.join(self.expected)))

        super(UnexpectedToken, self).__init__(message)

class VisitError(LarkError):
    def __init__(self, rule, obj, orig_exc):
        self.obj = obj
        self.orig_exc = orig_exc

        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

def classify(seq, key=None, value=None):
    d = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data, namespace, memo):
    if isinstance(data, dict):
        if '__type__' in data: # Object
            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


class Serialize(object):
    def memo_serialize(self, types_to_memoize):
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None):
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        postprocess = getattr(self, '_serialize', None)
        if postprocess:
            postprocess(res, memo)
        return res

    @classmethod
    def deserialize(cls, data, memo):
        namespace = getattr(cls, '__serialize_namespace__', {})
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)
        postprocess = getattr(inst, '_deserialize', None)
        if postprocess:
            postprocess()
        return inst


class SerializeMemoizer(Serialize):
    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize):
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value):
        return isinstance(value, self.types_to_memoize)

    def serialize(self):
        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data, namespace, memo):
        return _deserialize(data, namespace, memo)



try:
    STRING_TYPE = basestring
except NameError:   # Python 3
    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')
try:
    classtype = types.ClassType # Python2
except AttributeError:
    classtype = type    # Python3

def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (classtype, type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        return wraps(f.func)(create_decorator(lambda *args, **kw: f(*args[1:], **kw), True))

    else:
        return create_decorator(f.__func__.__call__, True)

import sys, re
Py36 = (sys.version_info[:2] >= (3, 6))

import sre_parse
import sre_constants
def get_regexp_width(regexp):
    try:
        return [int(x) for x in sre_parse.parse(regexp).getwidth()]
    except sre_constants.error:
        raise ValueError(regexp)


class Meta:
    def __init__(self):
        self.empty = True

class Tree(object):
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self):
        # TODO: Re-write as a more efficient version

        visited = set()
        q = [self]

        l = []
        while q:
            subtree = q.pop()
            l.append( subtree )
            if id(subtree) in visited:
                continue    # already been here from another branch
            visited.add(id(subtree))
            q += [c for c in subtree.children if isinstance(c, Tree)]

        seen = set()
        for x in reversed(l):
            if id(x) not in seen:
                yield x
                seen.add(id(x))

    def find_pred(self, pred):
        "Find all nodes where pred(tree) == True"
        return filter(pred, self.iter_subtrees())

    def find_data(self, data):
        "Find all nodes where tree.data == data"
        return self.find_pred(lambda t: t.data == data)


from inspect import getmembers, getmro

class Discard(Exception):
    pass

# Transformers

class Transformer:
    """Visits the tree recursively, starting with the leaves and finally the root (bottom-up)

    Calls its methods (provided by user via inheritance) according to tree.data
    The returned value replaces the old one in the structure.

    Can be used to implement map or reduce.
    """

    __visit_tokens__ = True   # For backwards compatibility
    def __init__(self,  visit_tokens=True):
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)


    def _transform_children(self, children):
        for c in children:
            try:
                if isinstance(c, Tree):
                    yield self._transform_tree(c)
                elif self.__visit_tokens__ and isinstance(c, Token):
                    yield self._call_userfunc_token(c)
                else:
                    yield c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        return self._transform_tree(tree)

    def __mul__(self, other):
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        "Default operation on tree (for override)"
        return Tree(data, children, meta)

    def __default_token__(self, token):
        "Default operation on token (for override)"
        return token


    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            # Make sure the function isn't inherited (unless it's overwritten)
            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(cls.__dict__[name]):
                continue

            # Skip if v_args already applied (at the function level)
            if hasattr(cls.__dict__[name], 'vargs_applied'):
                continue

            static = isinstance(cls.__dict__[name], (staticmethod, classmethod))
            setattr(cls, name, decorator(value, static=static, **kwargs))
        return cls


class InlineTransformer(Transformer):   # XXX Deprecated
    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    "Non-recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):           # Cancel recursion
        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_InPlaceRecursive(Transformer):
    "Recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)



# Visitors

class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        "Default operation on tree (for override)"
        return tree


class Visitor(VisitorBase):
    """Bottom-up visitor, non-recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """


    def visit(self, tree):
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self,tree):
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree

class Visitor_Recursive(VisitorBase):
    """Bottom-up visitor, recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree):
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree



def visit_children_decor(func):
    "See Interpreter"
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter:
    """Top-down visitor, recursive

    Visits the tree, starting with the root and finally the leaves (top-down)
    Calls its methods (provided by user via inheritance) according to tree.data

    Unlike Transformer and Visitor, the Interpreter doesn't automatically visit its sub-branches.
    The user has to explicitly call visit_children, or use the @visit_children_decor
    """
    def visit(self, tree):
        return getattr(self, tree.data)(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)




# Decorators

def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)



def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   # XXX Deprecated
    return _apply_decorator(obj, _inline_args__func)



def _visitor_args_func_dec(func, visit_wrapper=None, static=False):
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    if static:
        f = wraps(func)(create_decorator(func, False))
    else:
        f = smart_decorator(func, create_decorator)
    f.vargs_applied = True
    f.visit_wrapper = visit_wrapper
    return f


def _vargs_inline(f, data, children, meta):
    return f(*children)
def _vargs_meta_inline(f, data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, data, children, meta):
    return f(children, meta)   # TODO swap these for consistency? Backwards incompatible!
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))

def v_args(inline=False, meta=False, tree=False, wrapper=None):
    "A convenience decorator factory, for modifying the behavior of user-supplied visitor methods"
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, visit_wrapper=func)
    return _visitor_args_dec



class Indenter:
    def __init__(self):
        self.paren_level = None
        self.indent_level = None
        assert self.tab_len > 0

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)



class Symbol(Serialize):
    __slots__ = ('name',)

    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)



class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term = False



class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'empty_indices'

    def __init__(self, keep_all_tokens=False, expand1=False, priority=None, empty_indices=()):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
        )


class Rule(Serialize):
    """
        origin : a symbol
        expansion : a list of symbols
        order : index of this expansion amongst all rules of the same name
    """
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion





class Pattern(Serialize):

    def __init__(self, value, flags=()):
        self.value = value
        self.flags = frozenset(flags)

    def __repr__(self):
        return repr(self.to_regexp())

    # Pattern Hashing assumes all subclasses have a different priority!
    def __hash__(self):
        return hash((type(self), self.value, self.flags))
    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    def to_regexp(self):
        raise NotImplementedError()

    if Py36:
        # Python 3.6 changed syntax for flags in regular expression
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s:%s)' % (f, value))
            return value

    else:
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s)' % f) + value
            return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type = "str"

    def to_regexp(self):
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self):
        return len(self.value)
    max_width = min_width

class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type = "re"

    def to_regexp(self):
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self):
        return self._get_width()[0]
    @property
    def max_width(self):
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    def __init__(self, name, pattern, priority=1):
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)



class Token(Str):
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        try:
            self = super(Token, cls).__new__(cls, value)
        except UnicodeDecodeError:
            value = value.decode('latin1')
            self = super(Token, cls).__new__(cls, value)

        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        self.end_line = end_line
        self.end_column = end_column
        self.end_pos = end_pos
        return self

    def update(self, type_=None, value=None):
        return Token.new_borrow_pos(
            type_ if type_ is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer, state=None):
        self.lexer = lexer
        self.state = state

    def lex(self, stream, newline_types, ignore_types):
        newline_types = frozenset(newline_types)
        ignore_types = frozenset(ignore_types)
        line_ctr = LineCounter()
        last_token = None

        while line_ctr.char_pos < len(stream):
            lexer = self.lexer
            res = lexer.match(stream, line_ctr.char_pos)
            if not res:
                allowed = {v for m, tfi in lexer.mres for v in tfi.values()} - ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column, allowed=allowed, state=self.state, token_history=last_token and [last_token])

            value, type_ = res

            if type_ not in ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                line_ctr.feed(value, type_ in newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in lexer.callback:
                    t = lexer.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise ValueError("Callbacks must return a token (returned %r)" % t)
                yield t
                last_token = t
            else:
                if type_ in lexer.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    lexer.callback[type_](t2)
                line_ctr.feed(value, type_ in newline_types)




class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t

class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2





def _create_unless(terminals):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = [] # {}
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority > retok.priority:
                continue
            s = strtok.pattern.value
            m = re.match(retok.pattern.to_regexp(), s)
            if m and m.group(0) == s:
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(build_mres(unless, match_whole=True))

    terminals = [t for t in terminals if t not in embedded_strs]
    return terminals, callback


def _build_mres(terminals, max_size, match_whole):
    # Python sets an unreasonable group limit (currently 100) in its re module
    # Worse, the only way to know we reached it is by catching an AssertionError!
    # This function recursively tries less and less groups until it's successful.
    postfix = '$' if match_whole else ''
    mres = []
    while terminals:
        try:
            mre = re.compile(u'|'.join(u'(?P<%s>%s)'%(t.name, t.pattern.to_regexp()+postfix) for t in terminals[:max_size]))
        except AssertionError:  # Yes, this is what Python provides us.. :/
            return _build_mres(terminals, max_size//2, match_whole)

        # terms_from_name = {t.name: t for t in terminals[:max_size]}
        mres.append((mre, {i:n for n,i in mre.groupindex.items()} ))
        terminals = terminals[max_size:]
    return mres

def build_mres(terminals, match_whole=False):
    return _build_mres(terminals, len(terminals), match_whole)

def _regexp_has_newline(r):
    r"""Expressions that may indicate newlines in a regexp:
        - newlines (\n)
        - escaped newline (\\n)
        - anything but ([^...])
        - any-char (.) when the flag (?s) exists
        - spaces (\s)
    """
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)

class Lexer(object):
    """Lexer interface

    Method Signatures:
        lex(self, stream) -> Iterator[Token]
    """
    lex = NotImplemented


class TraditionalLexer(Lexer):

    def __init__(self, terminals, ignore=(), user_callbacks={}):
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        terminals = list(terminals)

        # Sanitization
        for t in terminals:
            try:
                re.compile(t.pattern.to_regexp())
            except re.error:
                raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

            if t.pattern.min_width == 0:
                raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

        assert set(ignore) <= {t.name for t in terminals}

        # Init
        self.newline_types = [t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp())]
        self.ignore_types = list(ignore)

        terminals.sort(key=lambda x:(-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = user_callbacks
        self.build()

    def build(self):
        terminals, self.callback = _create_unless(self.terminals)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                # Already a callback there, probably UnlessCallback
                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self.mres = build_mres(terminals)

    def match(self, stream, pos):
        for mre, type_from_index in self.mres:
            m = mre.match(stream, pos)
            if m:
                return m.group(0), type_from_index[m.lastindex]

    def lex(self, stream):
        return _Lex(self).lex(stream, self.newline_types, self.ignore_types)




class ContextualLexer(Lexer):

    def __init__(self, terminals, states, ignore=(), always_accept=(), user_callbacks={}):
        tokens_by_name = {}
        for t in terminals:
            assert t.name not in tokens_by_name, t
            tokens_by_name[t.name] = t

        lexer_by_tokens = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(ignore) | set(always_accept)
                state_tokens = [tokens_by_name[n] for n in accepts if n and n in tokens_by_name]
                lexer = TraditionalLexer(state_tokens, ignore=ignore, user_callbacks=user_callbacks)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        self.root_lexer = TraditionalLexer(terminals, ignore=ignore, user_callbacks=user_callbacks)

    def lex(self, stream, get_parser_state):
        parser_state = get_parser_state()
        l = _Lex(self.lexers[parser_state], parser_state)
        try:
            for x in l.lex(stream, self.root_lexer.newline_types, self.root_lexer.ignore_types):
                yield x
                parser_state = get_parser_state()
                l.lexer = self.lexers[parser_state]
                l.state = parser_state # For debug only, no need to worry about multithreading
        except UnexpectedCharacters as e:
            # In the contextual lexer, UnexpectedCharacters can mean that the terminal is defined,
            # but not in the current context.
            # This tests the input against the global context, to provide a nicer error.
            root_match = self.root_lexer.match(stream, e.pos_in_stream)
            if not root_match:
                raise

            value, type_ = root_match
            t = Token(type_, value, e.pos_in_stream, e.line, e.column)
            raise UnexpectedToken(t, e.allowed, state=e.state)



class LexerConf(Serialize):
    __serialize_fields__ = 'tokens', 'ignore'
    __serialize_namespace__ = TerminalDef,

    def __init__(self, tokens, ignore=(), postlex=None, callbacks=None):
        self.tokens = tokens
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}

    def _deserialize(self):
        self.callbacks = {} # TODO


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)

class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            for c in children:
                if isinstance(c, Tree) and not c.meta.empty:
                    res.meta.line = c.meta.line
                    res.meta.column = c.meta.column
                    res.meta.start_pos = c.meta.start_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.line = c.line
                    res.meta.column = c.column
                    res.meta.start_pos = c.pos_in_stream
                    res.meta.empty = False
                    break

            for c in reversed(children):
                if isinstance(c, Tree) and not c.meta.empty:
                    res.meta.end_line = c.meta.end_line
                    res.meta.end_column = c.meta.end_column
                    res.meta.end_pos = c.meta.end_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.end_line = c.end_line
                    res.meta.end_column = c.end_column
                    res.meta.end_pos = c.end_pos
                    res.meta.empty = False
                    break

        return res


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR_NoPlaceholders(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)

def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')

def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices):
    # Prepare empty_indices as: How many Nones to insert at each index?
    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            # LALR without placeholders
            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])

class AmbiguousExpander:
    """Deal with the case where we're expanding children ('_rule') into a parent but the children
       are ambiguous. i.e. (parent->_ambig->_expand_this_rule). In this case, make the parent itself
       ambiguous with as many copies as their are ambiguous children, and then copy the ambiguous children
       into the right parents in the right places, essentially shifting the ambiguiuty up the tree."""
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(child):
            return hasattr(child, 'data') and child.data == '_ambig'

        #### When we're repeatedly expanding ambiguities we can end up with nested ambiguities.
        #    All children of an _ambig node should be a derivation of that ambig node, hence
        #    it is safe to assume that if we see an _ambig node nested within an ambig node
        #    it is safe to simply expand it into the parent _ambig node as an alternative derivation.
        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                to_expand = [j for j, grandchild in enumerate(child.children) if _is_ambig_tree(grandchild)]
                child.expand_kids_by_index(*to_expand)

        if not ambiguous:
            return self.node_builder(children)

        expand = [ iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children) ]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])

def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)

def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f

def inplace_transformer(func):
    @wraps(func)
    def f(children):
        # function name in a Transformer is a rule name.
        tree = Tree(func.__name__, children)
        return func(tree)
    return f

def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")
    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, keep_all_tokens=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                self.propagate_positions and PropagatePositions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
            ]))

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callbacks = {}

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                # XXX InlineTransformer is deprecated!
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                else:
                    if isinstance(transformer, InlineTransformer):
                        f = ptb_inline_args(f)
                    elif isinstance(transformer, Transformer_InPlace):
                        f = inplace_transformer(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks


class LALR_Parser(object):
    def __init__(self, parser_conf, debug=False):
        assert all(r.options.priority is None for r in parser_conf.rules), "LALR doesn't yet support prioritization"
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks)

    @classmethod
    def deserialize(cls, data, memo, callbacks):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks)
        return inst

    def serialize(self, memo):
        return self._parse_table.serialize(memo)

    def parse(self, *args):
        return self.parser.parse(*args)


class _Parser:
    def __init__(self, parse_table, callbacks):
        self.states = parse_table.states
        self.start_states = parse_table.start_states
        self.end_states = parse_table.end_states
        self.callbacks = callbacks

    def parse(self, seq, start, set_state=None):
        token = None
        stream = iter(seq)
        states = self.states

        start_state = self.start_states[start]
        end_state = self.end_states[start]

        state_stack = [start_state]
        value_stack = []

        if set_state: set_state(start_state)

        def get_action(token):
            state = state_stack[-1]
            try:
                return states[state][token.type]
            except KeyError:
                expected = [s for s in states[state].keys() if s.isupper()]
                raise UnexpectedToken(token, expected, state=state)

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = states[state_stack[-1]][rule.origin.name]
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        for token in stream:
            while True:
                action, arg = get_action(token)
                assert arg != end_state

                if action is Shift:
                    state_stack.append(arg)
                    value_stack.append(token)
                    if set_state: set_state(arg)
                    break # next token
                else:
                    reduce(arg)

        token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
        while True:
            _action, arg = get_action(token)
            assert(_action is Reduce)
            reduce(arg)
            if state_stack[-1] == end_state:
                return value_stack[-1]



class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()
        rules = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def get_frontend(parser, lexer):
    if parser=='lalr':
        if lexer is None:
            raise ValueError('The LALR parser requires use of a lexer')
        elif lexer == 'standard':
            return LALR_TraditionalLexer
        elif lexer == 'contextual':
            return LALR_ContextualLexer
        elif issubclass(lexer, Lexer):
            return partial(LALR_CustomLexer, lexer)
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser=='earley':
        if lexer=='standard':
            return Earley
        elif lexer=='dynamic':
            return XEarley
        elif lexer=='dynamic_complete':
            return XEarley_CompleteLex
        elif lexer=='contextual':
            raise ValueError('The Earley parser does not support the contextual parser')
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser == 'cyk':
        if lexer == 'standard':
            return CYK
        else:
            raise ValueError('CYK parser requires using standard parser.')
    else:
        raise ValueError('Unknown parser: %s' % parser)


class _ParserFrontend(Serialize):
    def _parse(self, input, start, *args):
        if start is None:
            start = self.start
            if len(start) > 1:
                raise ValueError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start)
            start ,= start
        return self.parser.parse(input, start, *args)


class WithLexer(_ParserFrontend):
    lexer = None
    parser = None
    lexer_conf = None
    start = None

    __serialize_fields__ = 'parser', 'lexer_conf', 'start'
    __serialize_namespace__ = LexerConf,

    def __init__(self, lexer_conf, parser_conf, options=None):
        self.lexer_conf = lexer_conf
        self.start = parser_conf.start
        self.postlex = lexer_conf.postlex

    @classmethod
    def deserialize(cls, data, memo, callbacks, postlex):
        inst = super(WithLexer, cls).deserialize(data, memo)
        inst.postlex = postlex
        inst.parser = LALR_Parser.deserialize(inst.parser, memo, callbacks)
        inst.init_lexer()
        return inst

    def _serialize(self, data, memo):
        data['parser'] = data['parser'].serialize(memo)

    def lex(self, *args):
        stream = self.lexer.lex(*args)
        return self.postlex.process(stream) if self.postlex else stream

    def parse(self, text, start=None):
        token_stream = self.lex(text)
        return self._parse(token_stream, start)

    def init_traditional_lexer(self):
        self.lexer = TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks)

class LALR_WithLexer(WithLexer):
    def __init__(self, lexer_conf, parser_conf, options=None):
        debug = options.debug if options else False
        self.parser = LALR_Parser(parser_conf, debug=debug)
        WithLexer.__init__(self, lexer_conf, parser_conf, options)

        self.init_lexer()

    def init_lexer(self):
        raise NotImplementedError()

class LALR_TraditionalLexer(LALR_WithLexer):
    def init_lexer(self):
        self.init_traditional_lexer()

class LALR_ContextualLexer(LALR_WithLexer):
    def init_lexer(self):
        states = {idx:list(t.keys()) for idx, t in self.parser._parse_table.states.items()}
        always_accept = self.postlex.always_accept if self.postlex else ()
        self.lexer = ContextualLexer(self.lexer_conf.tokens, states,
                                     ignore=self.lexer_conf.ignore,
                                     always_accept=always_accept,
                                     user_callbacks=self.lexer_conf.callbacks)


    def parse(self, text, start=None):
        parser_state = [None]
        def set_parser_state(s):
            parser_state[0] = s

        token_stream = self.lex(text, lambda: parser_state[0])
        return self._parse(token_stream, start, set_parser_state)


class LarkOptions(Serialize):
    """Specifies the options for Lark

    """
    OPTIONS_DOC = """
        parser - Decides which parser engine to use, "earley" or "lalr". (Default: "earley")
                 Note: "lalr" requires a lexer

        lexer - Decides whether or not to use a lexer stage
            "standard": Use a standard lexer
            "contextual": Stronger lexer (only works with parser="lalr")
            "dynamic": Flexible and powerful (only with parser="earley")
            "dynamic_complete": Same as dynamic, but tries *every* variation
                                of tokenizing possible. (only with parser="earley")
            "auto" (default): Choose for me based on grammar and parser

        ambiguity - Decides how to handle ambiguity in the parse. Only relevant if parser="earley"
            "resolve": The parser will automatically choose the simplest derivation
                       (it chooses consistently: greedy for tokens, non-greedy for rules)
            "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).

        transformer - Applies the transformer to every parse tree
        debug - Affects verbosity (default: False)
        keep_all_tokens - Don't automagically remove "punctuation" tokens (default: False)
        cache_grammar - Cache the Lark grammar (Default: False)
        postlex - Lexer post-processing (Default: None) Only works with the standard and contextual lexers.
        start - The start symbol, either a string, or a list of strings for multiple possible starts (Default: "start")
        priority - How priorities should be evaluated - auto, none, normal, invert (Default: auto)
        propagate_positions - Propagates [line, column, end_line, end_column] attributes into all tree branches.
        lexer_callbacks - Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
        maybe_placeholders - Experimental feature. Instead of omitting optional rules (i.e. rule?), replace them with None
    """
    if __doc__:
        __doc__ += OPTIONS_DOC

    _defaults = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache_grammar': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': False,
        'edit_terminals': None,
    }

    def __init__(self, options_dict):
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], STRING_TYPE):
            options['start'] = [options['start']]

        self.__dict__['options'] = options

        assert self.parser in ('earley', 'lalr', 'cyk', None)

        if self.parser == 'earley' and self.transformer:
            raise ValueError('Cannot specify an embedded transformer when using the Earley algorithm.'
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ValueError("Unknown options: %s" % o.keys())

    def __getattr__(self, name):
        try:
            return self.options[name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name, value):
        assert name in self.options
        self.options[name] = value

    def serialize(self, memo):
        return self.options

    @classmethod
    def deserialize(cls, data, memo):
        return cls(data)


class Lark(Serialize):
    def __init__(self, grammar, **options):
        """
            grammar : a string or file-object containing the grammar spec (using Lark's ebnf syntax)
            options : a dictionary controlling various aspects of Lark.
        """
        self.options = LarkOptions(options)

        # Some, but not all file-like objects have a 'name' attribute
        try:
            self.source = grammar.name
        except AttributeError:
            self.source = '<string>'

        # Drain file-like objects to get their contents
        try:
            read = grammar.read
        except AttributeError:
            pass
        else:
            grammar = read()

        assert isinstance(grammar, STRING_TYPE)

        if self.options.cache_grammar:
            raise NotImplementedError("Not available yet")

        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'standard'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        assert lexer in ('standard', 'contextual', 'dynamic', 'dynamic_complete') or issubclass(lexer, Lexer)

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            disambig_parsers = ['earley', 'cyk']
            assert self.options.parser in disambig_parsers, (
                'Only %s supports disambiguation right now') % ', '.join(disambig_parsers)

        if self.options.priority == 'auto':
            if self.options.parser in ('earley', 'cyk', ):
                self.options.priority = 'normal'
            elif self.options.parser in ('lalr', ):
                self.options.priority = None
        elif self.options.priority in ('invert', 'normal'):
            assert self.options.parser in ('earley', 'cyk'), "priorities are not supported for LALR at this time"

        assert self.options.priority in ('auto', None, 'normal', 'invert'), 'invalid priority option specified: {}. options are auto, none, normal, invert.'.format(self.options.priority)
        assert self.options.ambiguity not in ('resolve__antiscore_sum', ), 'resolve__antiscore_sum has been replaced with the option priority="invert"'
        assert self.options.ambiguity in ('resolve', 'explicit', 'auto', )

        # Parse the grammar file and compose the grammars (TODO)
        self.grammar = load_grammar(grammar, self.source)

        # Compile the EBNF grammar into BNF
        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name:t for t in self.terminals}

        # If the user asked to invert the priorities, negate them all here.
        # This replaces the old 'resolve__antiscore_sum' option.
        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
        # Else, if the user asked to disable priorities, strip them from the
        # rules. This allows the Earley parsers to skip an extra forest walk
        # for improved performance, if you don't need them (or didn't specify any).
        elif self.options.priority == None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None

        # TODO Deprecate lexer_callbacks?
        lexer_callbacks = dict(self.options.lexer_callbacks)
        if self.options.transformer:
            t = self.options.transformer
            for term in self.terminals:
                if hasattr(t, term.name):
                    lexer_callbacks[term.name] = getattr(t, term.name)

        self.lexer_conf = LexerConf(self.terminals, self.ignore_tokens, self.options.postlex, lexer_callbacks)

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

    if __init__.__doc__:
        __init__.__doc__ += "\nOPTIONS:" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self):
        return TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks)

    def _prepare_callbacks(self):
        self.parser_class = get_frontend(self.options.parser, self.options.lexer)
        self._parse_tree_builder = ParseTreeBuilder(self.rules, self.options.tree_class or Tree, self.options.propagate_positions, self.options.keep_all_tokens, self.options.parser!='lalr' and self.options.ambiguity=='explicit', self.options.maybe_placeholders)
        self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)

    def _build_parser(self):
        self._prepare_callbacks()
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return self.parser_class(self.lexer_conf, parser_conf, options=self.options)

    @classmethod
    def deserialize(cls, data, namespace, memo, transformer=None, postlex=None):
        if memo:
            memo = SerializeMemoizer.deserialize(memo, namespace, {})
        inst = cls.__new__(cls)
        options = dict(data['options'])
        options['transformer'] = transformer
        options['postlex'] = postlex
        inst.options = LarkOptions.deserialize(options, memo)
        inst.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        inst.source = '<deserialized>'
        inst._prepare_callbacks()
        inst.parser = inst.parser_class.deserialize(data['parser'], memo, inst._callbacks, inst.options.postlex)
        return inst


    @classmethod
    def open(cls, grammar_filename, rel_to=None, **options):
        """Create an instance of Lark with the grammar given by its filename

        If rel_to is provided, the function will find the grammar filename in relation to it.

        Example:

            >>> Lark.open("grammar_file.lark", rel_to=__file__, parser="lalr")
            Lark(...)

        """
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source, self.options.parser, self.options.lexer)


    def lex(self, text):
        "Only lex (and postlex) the text, without parsing it. Only relevant when lexer='standard'"
        if not hasattr(self, 'lexer'):
            self.lexer = self._build_lexer()
        stream = self.lexer.lex(text)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name):
        "Get information about a terminal"
        return self._terminals_dict[name]

    def parse(self, text, start=None):
        """Parse the given text, according to the options provided.

        The 'start' parameter is required if Lark was given multiple possible start symbols (using the start option).

        Returns a tree, unless specified otherwise.
        """
        return self.parser.parse(text, start=start)


DATA = (
{'parser': {'parser': {'tokens': {0: 'praline', 1: 'DEFINE', 2: 'HASH', 3: 'VAR', 4: 'EXECUTE', 5: 'var', 6: 'RESTRICT', 7: 'def', 8: 'DISPLAY', 9: 'pred_definition', 10: '$END', 11: '_IS', 12: '__div_expr_star_18', 13: 'SLASH', 14: 'EQ', 15: '__ANON_8', 16: 'THEN', 17: 'STAR', 18: 'DISJ', 19: 'COMP', 20: '_IMPLIES', 21: '__ANON_7', 22: 'LT', 23: '__ANON_6', 24: 'PLUS', 25: 'CONJ', 26: '_IFF', 27: 'MINUS', 28: 'GT', 29: 'RPAR', 30: 'COMMA', 31: 'RBRACE', 32: 'ELSE', 33: 'RSQB', 34: 'DOT', 35: 'CIRCUMFLEX', 36: 'COLON', 37: 'AT', 38: 'PERCENT', 39: '__ANON_5', 40: '_DEFEQ', 41: 'WITH', 42: 'IN', 43: 'SEMICOLON', 44: 'CASE', 45: 'END', 46: 'LPAR', 47: 'LSQB', 48: 'TRUE', 49: 'ESCAPED_STRING', 50: 'LBRACE', 51: 'FALSE', 52: 'INT', 53: '__start_star_0', 54: 'start', 55: 'bool', 56: 'IF', 57: 'comparison', 58: '__ANON_9', 59: 'atom', 60: 'add_expr', 61: 'sub_expr', 62: 'arith', 63: 'pred', 64: 'forall_sym', 65: 'mul_expr', 66: 'EXISTS', 67: '__ANON_10', 68: 'int', 69: 'expr', 70: 'div_expr', 71: 'FORALL', 72: 'string', 73: 'call', 74: 'exists_sym', 75: '__varlist_star_14', 76: 'praline_sub', 77: '__operator_sym_plus_5', 78: 'app', 79: 'praline_operator', 80: 'praline_exponent', 81: 'operator_sym', 82: 'MATCH', 83: 'praline_arith', 84: 'praline_add', 85: 'pecan_term', 86: 'praline_div', 87: 'praline_mul', 88: 'BACKSLASH', 89: 'LET', 90: 'DO', 91: 'praline_tuple', 92: 'praline_list', 93: 'operator_sym_char', 94: 'praline_atom', 95: 'term', 96: 'args', 97: 'arg', 98: 'BE', 99: 'restriction', 100: 'varlist', 101: 'LOAD', 102: 'IMPORT', 103: '__ANON_2', 104: '__ANON_3', 105: 'FORGET', 106: 'CONTEXT', 107: 'SHUFFLE', 108: '__ANON_0', 109: '__ANON_4', 110: 'TYPE', 111: '__ANON_1', 112: '__sub_expr_star_15', 113: 'prop_val', 114: 'PROP_VAL', 115: '__val_dict_star_13', 116: 'formal', 117: 'kv_pair', 118: 'match_expr', 119: '__term_star_2', 120: '__args_star_19', 121: 'le', 122: 'ge', 123: '_ne', 124: 'match_arm', 125: '__term_plus_1', 126: '__praline_sub_star_6', 127: '__praline_mul_star_8', 128: '__add_expr_star_16', 129: '__match_expr_plus_4', 130: '__praline_add_star_7', 131: '__match_expr_star_3', 132: '__mul_expr_star_17', 133: '__praline_list_star_11', 134: '__praline_exponent_star_10', 135: '__praline_div_star_9', 136: '__praline_tuple_plus_12', 137: 'val_dict'}, 'states': {0: {0: (0, 6), 1: (0, 20), 2: (0, 30), 3: (0, 26), 4: (0, 12), 5: (0, 18), 6: (0, 28), 7: (0, 10), 8: (0, 21), 9: (0, 33), 10: (1, {'@': 71})}, 1: {11: (0, 304), 12: (0, 325), 13: (0, 318), 14: (1, {'@': 72}), 15: (1, {'@': 72}), 16: (1, {'@': 72}), 17: (1, {'@': 72}), 18: (1, {'@': 72}), 19: (1, {'@': 72}), 20: (1, {'@': 72}), 21: (1, {'@': 72}), 22: (1, {'@': 72}), 23: (1, {'@': 72}), 24: (1, {'@': 72}), 25: (1, {'@': 72}), 26: (1, {'@': 72}), 27: (1, {'@': 72}), 28: (1, {'@': 72}), 29: (1, {'@': 72}), 30: (1, {'@': 72}), 31: (1, {'@': 72}), 8: (1, {'@': 72}), 1: (1, {'@': 72}), 32: (1, {'@': 72}), 2: (1, {'@': 72}), 33: (1, {'@': 72}), 10: (1, {'@': 72}), 3: (1, {'@': 72}), 6: (1, {'@': 72}), 4: (1, {'@': 72}), 34: (1, {'@': 72})}, 2: {35: (0, 134), 22: (1, {'@': 73}), 14: (1, {'@': 73}), 36: (1, {'@': 73}), 13: (1, {'@': 73}), 37: (1, {'@': 73}), 24: (1, {'@': 73}), 17: (1, {'@': 73}), 27: (1, {'@': 73}), 19: (1, {'@': 73}), 38: (1, {'@': 73}), 39: (1, {'@': 73}), 25: (1, {'@': 73}), 18: (1, {'@': 73}), 34: (1, {'@': 73}), 28: (1, {'@': 73}), 40: (1, {'@': 73}), 41: (1, {'@': 73}), 42: (1, {'@': 73}), 16: (1, {'@': 73}), 32: (1, {'@': 73}), 43: (1, {'@': 73}), 33: (1, {'@': 73}), 44: (1, {'@': 73}), 29: (1, {'@': 73}), 45: (1, {'@': 73}), 30: (1, {'@': 73})}, 3: {46: (0, 157), 11: (0, 13), 47: (0, 146), 31: (1, {'@': 74}), 14: (1, {'@': 74}), 15: (1, {'@': 74}), 13: (1, {'@': 74}), 17: (1, {'@': 74}), 18: (1, {'@': 74}), 19: (1, {'@': 74}), 20: (1, {'@': 74}), 21: (1, {'@': 74}), 22: (1, {'@': 74}), 23: (1, {'@': 74}), 24: (1, {'@': 74}), 25: (1, {'@': 74}), 26: (1, {'@': 74}), 27: (1, {'@': 74}), 28: (1, {'@': 74})}, 4: {14: (1, {'@': 75}), 36: (1, {'@': 75}), 13: (1, {'@': 75}), 34: (1, {'@': 75}), 37: (1, {'@': 75}), 17: (1, {'@': 75}), 35: (1, {'@': 75}), 38: (1, {'@': 75}), 48: (1, {'@': 75}), 18: (1, {'@': 75}), 19: (1, {'@': 75}), 49: (1, {'@': 75}), 22: (1, {'@': 75}), 50: (1, {'@': 75}), 3: (1, {'@': 75}), 24: (1, {'@': 75}), 47: (1, {'@': 75}), 25: (1, {'@': 75}), 39: (1, {'@': 75}), 51: (1, {'@': 75}), 27: (1, {'@': 75}), 28: (1, {'@': 75}), 46: (1, {'@': 75}), 52: (1, {'@': 75}), 42: (1, {'@': 75}), 16: (1, {'@': 75}), 40: (1, {'@': 75}), 32: (1, {'@': 75}), 43: (1, {'@': 75}), 29: (1, {'@': 75}), 45: (1, {'@': 75}), 30: (1, {'@': 75}), 41: (1, {'@': 75}), 33: (1, {'@': 75}), 44: (1, {'@': 75}), 20: (1, {'@': 75})}, 5: {0: (0, 6), 1: (0, 20), 2: (0, 30), 3: (0, 26), 4: (0, 12), 7: (0, 14), 53: (0, 0), 5: (0, 18), 6: (0, 28), 8: (0, 21), 54: (0, 34), 9: (0, 33), 10: (1, {'@': 76})}, 6: {1: (1, {'@': 77}), 2: (1, {'@': 77}), 6: (1, {'@': 77}), 10: (1, {'@': 77}), 4: (1, {'@': 77}), 8: (1, {'@': 77}), 3: (1, {'@': 77}), 31: (1, {'@': 77})}, 7: {52: (0, 295), 55: (0, 242), 56: (0, 7), 46: (0, 163), 57: (0, 11), 58: (0, 362), 5: (0, 153), 59: (0, 1), 27: (0, 364), 60: (0, 31), 48: (0, 313), 61: (0, 289), 62: (0, 298), 63: (0, 307), 51: (0, 222), 64: (0, 183), 65: (0, 224), 66: (0, 201), 67: (0, 174), 68: (0, 168), 69: (0, 177), 70: (0, 283), 3: (0, 26), 71: (0, 317), 72: (0, 360), 49: (0, 228), 73: (0, 216), 19: (0, 170), 74: (0, 308)}, 8: {49: (1, {'@': 78}), 22: (1, {'@': 78}), 14: (1, {'@': 78}), 50: (1, {'@': 78}), 51: (1, {'@': 78}), 48: (1, {'@': 78}), 36: (1, {'@': 78}), 37: (1, {'@': 78}), 3: (1, {'@': 78}), 47: (1, {'@': 78}), 27: (1, {'@': 78}), 38: (1, {'@': 78}), 39: (1, {'@': 78}), 25: (1, {'@': 78}), 18: (1, {'@': 78}), 19: (1, {'@': 78}), 28: (1, {'@': 78}), 46: (1, {'@': 78}), 52: (1, {'@': 78}), 41: (1, {'@': 78}), 42: (1, {'@': 78}), 16: (1, {'@': 78}), 32: (1, {'@': 78}), 43: (1, {'@': 78}), 33: (1, {'@': 78}), 44: (1, {'@': 78}), 29: (1, {'@': 78}), 45: (1, {'@': 78}), 30: (1, {'@': 78}), 34: (1, {'@': 78})}, 9: {30: (0, 139), 75: (0, 142), 11: (1, {'@': 79}), 29: (1, {'@': 79})}, 10: {2: (1, {'@': 80}), 10: (1, {'@': 80}), 8: (1, {'@': 80}), 3: (1, {'@': 80}), 1: (1, {'@': 80}), 6: (1, {'@': 80}), 4: (1, {'@': 80})}, 11: {20: (1, {'@': 81}), 25: (1, {'@': 81}), 18: (1, {'@': 81}), 26: (1, {'@': 81}), 16: (1, {'@': 81}), 31: (1, {'@': 81}), 32: (1, {'@': 81}), 2: (1, {'@': 81}), 10: (1, {'@': 81}), 8: (1, {'@': 81}), 3: (1, {'@': 81}), 29: (1, {'@': 81}), 4: (1, {'@': 81}), 1: (1, {'@': 81}), 6: (1, {'@': 81})}, 12: {52: (0, 295), 76: (0, 353), 36: (0, 312), 77: (0, 301), 72: (0, 300), 38: (0, 63), 51: (0, 310), 5: (0, 346), 78: (0, 306), 79: (0, 61), 80: (0, 340), 50: (0, 311), 81: (0, 46), 39: (0, 44), 82: (0, 38), 83: (0, 357), 68: (0, 361), 48: (0, 356), 46: (0, 348), 84: (0, 204), 27: (0, 173), 85: (0, 233), 47: (0, 193), 37: (0, 41), 14: (0, 56), 86: (0, 221), 87: (0, 238), 88: (0, 58), 89: (0, 48), 22: (0, 36), 3: (0, 26), 56: (0, 37), 90: (0, 55), 18: (0, 43), 19: (0, 16), 91: (0, 197), 92: (0, 231), 93: (0, 8), 94: (0, 192), 28: (0, 19), 25: (0, 32), 49: (0, 228), 95: (0, 15)}, 13: {3: (0, 26), 5: (0, 160)}, 14: {2: (1, {'@': 82}), 10: (1, {'@': 82}), 8: (1, {'@': 82}), 3: (1, {'@': 82}), 1: (1, {'@': 82}), 6: (1, {'@': 82}), 4: (1, {'@': 82})}, 15: {34: (0, 154)}, 16: {14: (1, {'@': 83}), 36: (1, {'@': 83}), 37: (1, {'@': 83}), 38: (1, {'@': 83}), 48: (1, {'@': 83}), 18: (1, {'@': 83}), 19: (1, {'@': 83}), 49: (1, {'@': 83}), 22: (1, {'@': 83}), 50: (1, {'@': 83}), 3: (1, {'@': 83}), 47: (1, {'@': 83}), 25: (1, {'@': 83}), 39: (1, {'@': 83}), 51: (1, {'@': 83}), 27: (1, {'@': 83}), 28: (1, {'@': 83}), 46: (1, {'@': 83}), 52: (1, {'@': 83}), 41: (1, {'@': 83}), 42: (1, {'@': 83}), 16: (1, {'@': 83}), 32: (1, {'@': 83}), 43: (1, {'@': 83}), 33: (1, {'@': 83}), 44: (1, {'@': 83}), 29: (1, {'@': 83}), 45: (1, {'@': 83}), 30: (1, {'@': 83}), 34: (1, {'@': 83})}, 17: {52: (0, 295), 47: (0, 193), 78: (0, 152), 72: (0, 300), 3: (0, 26), 46: (0, 348), 51: (0, 310), 5: (0, 346), 91: (0, 197), 92: (0, 231), 50: (0, 311), 94: (0, 192), 68: (0, 361), 48: (0, 356), 85: (0, 233), 49: (0, 228)}, 18: {11: (0, 13), 46: (0, 25)}, 19: {14: (1, {'@': 84}), 36: (1, {'@': 84}), 37: (1, {'@': 84}), 38: (1, {'@': 84}), 48: (1, {'@': 84}), 18: (1, {'@': 84}), 19: (1, {'@': 84}), 49: (1, {'@': 84}), 22: (1, {'@': 84}), 50: (1, {'@': 84}), 3: (1, {'@': 84}), 47: (1, {'@': 84}), 25: (1, {'@': 84}), 39: (1, {'@': 84}), 51: (1, {'@': 84}), 27: (1, {'@': 84}), 28: (1, {'@': 84}), 46: (1, {'@': 84}), 52: (1, {'@': 84}), 41: (1, {'@': 84}), 42: (1, {'@': 84}), 16: (1, {'@': 84}), 32: (1, {'@': 84}), 43: (1, {'@': 84}), 33: (1, {'@': 84}), 44: (1, {'@': 84}), 29: (1, {'@': 84}), 45: (1, {'@': 84}), 30: (1, {'@': 84}), 34: (1, {'@': 84})}, 20: {52: (0, 295), 76: (0, 353), 72: (0, 300), 51: (0, 310), 5: (0, 346), 78: (0, 306), 80: (0, 340), 50: (0, 311), 68: (0, 361), 83: (0, 357), 48: (0, 356), 46: (0, 348), 85: (0, 233), 84: (0, 204), 27: (0, 173), 47: (0, 193), 86: (0, 221), 87: (0, 238), 3: (0, 26), 91: (0, 197), 92: (0, 231), 79: (0, 200), 94: (0, 192), 49: (0, 228)}, 21: {52: (0, 295), 76: (0, 353), 36: (0, 312), 77: (0, 301), 72: (0, 300), 38: (0, 63), 51: (0, 310), 5: (0, 346), 78: (0, 306), 79: (0, 61), 80: (0, 340), 50: (0, 311), 81: (0, 46), 39: (0, 44), 82: (0, 38), 83: (0, 357), 68: (0, 361), 48: (0, 356), 46: (0, 348), 84: (0, 204), 27: (0, 173), 85: (0, 233), 47: (0, 193), 37: (0, 41), 14: (0, 56), 86: (0, 221), 87: (0, 238), 88: (0, 58), 89: (0, 48), 22: (0, 36), 3: (0, 26), 56: (0, 37), 90: (0, 55), 18: (0, 43), 19: (0, 16), 95: (0, 27), 91: (0, 197), 92: (0, 231), 93: (0, 8), 94: (0, 192), 28: (0, 19), 25: (0, 32), 49: (0, 228)}, 22: {13: (0, 149), 22: (1, {'@': 85}), 14: (1, {'@': 85}), 36: (1, {'@': 85}), 34: (1, {'@': 85}), 37: (1, {'@': 85}), 24: (1, {'@': 85}), 17: (1, {'@': 85}), 19: (1, {'@': 85}), 38: (1, {'@': 85}), 39: (1, {'@': 85}), 25: (1, {'@': 85}), 18: (1, {'@': 85}), 27: (1, {'@': 85}), 28: (1, {'@': 85}), 40: (1, {'@': 85}), 16: (1, {'@': 85}), 41: (1, {'@': 85}), 42: (1, {'@': 85}), 32: (1, {'@': 85}), 43: (1, {'@': 85}), 33: (1, {'@': 85}), 44: (1, {'@': 85}), 29: (1, {'@': 85}), 45: (1, {'@': 85}), 30: (1, {'@': 85})}, 23: {11: (0, 145)}, 24: {34: (0, 137)}, 25: {52: (0, 295), 68: (0, 168), 46: (0, 151), 70: (0, 283), 3: (0, 26), 5: (0, 153), 59: (0, 1), 65: (0, 224), 27: (0, 364), 60: (0, 31), 96: (0, 148), 61: (0, 289), 69: (0, 155), 62: (0, 298), 73: (0, 216), 97: (0, 159), 29: (1, {'@': 86})}, 26: {11: (1, {'@': 87}), 46: (1, {'@': 87}), 14: (1, {'@': 87}), 15: (1, {'@': 87}), 13: (1, {'@': 87}), 16: (1, {'@': 87}), 17: (1, {'@': 87}), 18: (1, {'@': 87}), 19: (1, {'@': 87}), 20: (1, {'@': 87}), 21: (1, {'@': 87}), 22: (1, {'@': 87}), 23: (1, {'@': 87}), 24: (1, {'@': 87}), 47: (1, {'@': 87}), 25: (1, {'@': 87}), 26: (1, {'@': 87}), 27: (1, {'@': 87}), 28: (1, {'@': 87}), 36: (1, {'@': 87}), 34: (1, {'@': 87}), 37: (1, {'@': 87}), 35: (1, {'@': 87}), 38: (1, {'@': 87}), 48: (1, {'@': 87}), 49: (1, {'@': 87}), 50: (1, {'@': 87}), 3: (1, {'@': 87}), 39: (1, {'@': 87}), 51: (1, {'@': 87}), 52: (1, {'@': 87}), 40: (1, {'@': 87}), 42: (1, {'@': 87}), 32: (1, {'@': 87}), 43: (1, {'@': 87}), 29: (1, {'@': 87}), 45: (1, {'@': 87}), 30: (1, {'@': 87}), 41: (1, {'@': 87}), 33: (1, {'@': 87}), 44: (1, {'@': 87}), 31: (1, {'@': 87}), 8: (1, {'@': 87}), 1: (1, {'@': 87}), 2: (1, {'@': 87}), 10: (1, {'@': 87}), 6: (1, {'@': 87}), 4: (1, {'@': 87}), 98: (1, {'@': 87})}, 27: {34: (0, 132)}, 28: {5: (0, 9), 99: (0, 24), 100: (0, 23), 3: (0, 26)}, 29: {52: (0, 295), 47: (0, 193), 72: (0, 300), 3: (0, 26), 46: (0, 348), 51: (0, 310), 5: (0, 346), 91: (0, 197), 92: (0, 231), 78: (0, 306), 50: (0, 311), 94: (0, 192), 68: (0, 361), 80: (0, 150), 48: (0, 356), 85: (0, 233), 49: (0, 228)}, 30: {101: (0, 321), 102: (0, 291), 103: (0, 323), 104: (0, 328), 105: (0, 303), 106: (0, 349), 107: (0, 297), 108: (0, 358), 109: (0, 332), 110: (0, 337), 111: (0, 343)}, 31: {112: (0, 334), 27: (0, 351), 20: (1, {'@': 88}), 21: (1, {'@': 88}), 22: (1, {'@': 88}), 23: (1, {'@': 88}), 14: (1, {'@': 88}), 15: (1, {'@': 88}), 13: (1, {'@': 88}), 16: (1, {'@': 88}), 25: (1, {'@': 88}), 18: (1, {'@': 88}), 26: (1, {'@': 88}), 19: (1, {'@': 88}), 28: (1, {'@': 88}), 29: (1, {'@': 88}), 30: (1, {'@': 88}), 31: (1, {'@': 88}), 8: (1, {'@': 88}), 1: (1, {'@': 88}), 32: (1, {'@': 88}), 2: (1, {'@': 88}), 10: (1, {'@': 88}), 3: (1, {'@': 88}), 6: (1, {'@': 88}), 4: (1, {'@': 88}), 33: (1, {'@': 88}), 34: (1, {'@': 88})}, 32: {14: (1, {'@': 89}), 36: (1, {'@': 89}), 37: (1, {'@': 89}), 38: (1, {'@': 89}), 48: (1, {'@': 89}), 18: (1, {'@': 89}), 19: (1, {'@': 89}), 49: (1, {'@': 89}), 22: (1, {'@': 89}), 50: (1, {'@': 89}), 3: (1, {'@': 89}), 47: (1, {'@': 89}), 25: (1, {'@': 89}), 39: (1, {'@': 89}), 51: (1, {'@': 89}), 27: (1, {'@': 89}), 28: (1, {'@': 89}), 46: (1, {'@': 89}), 52: (1, {'@': 89}), 41: (1, {'@': 89}), 42: (1, {'@': 89}), 16: (1, {'@': 89}), 32: (1, {'@': 89}), 43: (1, {'@': 89}), 33: (1, {'@': 89}), 44: (1, {'@': 89}), 29: (1, {'@': 89}), 45: (1, {'@': 89}), 30: (1, {'@': 89}), 34: (1, {'@': 89})}, 33: {1: (1, {'@': 90}), 2: (1, {'@': 90}), 6: (1, {'@': 90}), 10: (1, {'@': 90}), 4: (1, {'@': 90}), 8: (1, {'@': 90}), 3: (1, {'@': 90}), 31: (1, {'@': 90})}, 34: {}, 35: {30: (0, 350), 29: (0, 293)}, 36: {14: (1, {'@': 91}), 36: (1, {'@': 91}), 37: (1, {'@': 91}), 38: (1, {'@': 91}), 48: (1, {'@': 91}), 18: (1, {'@': 91}), 19: (1, {'@': 91}), 49: (1, {'@': 91}), 22: (1, {'@': 91}), 50: (1, {'@': 91}), 3: (1, {'@': 91}), 47: (1, {'@': 91}), 25: (1, {'@': 91}), 39: (1, {'@': 91}), 51: (1, {'@': 91}), 27: (1, {'@': 91}), 28: (1, {'@': 91}), 46: (1, {'@': 91}), 52: (1, {'@': 91}), 41: (1, {'@': 91}), 42: (1, {'@': 91}), 16: (1, {'@': 91}), 32: (1, {'@': 91}), 43: (1, {'@': 91}), 33: (1, {'@': 91}), 44: (1, {'@': 91}), 29: (1, {'@': 91}), 45: (1, {'@': 91}), 30: (1, {'@': 91}), 34: (1, {'@': 91})}, 37: {52: (0, 295), 76: (0, 353), 36: (0, 312), 77: (0, 301), 72: (0, 300), 38: (0, 63), 51: (0, 310), 5: (0, 346), 78: (0, 306), 79: (0, 61), 80: (0, 340), 50: (0, 311), 81: (0, 46), 39: (0, 44), 82: (0, 38), 83: (0, 357), 68: (0, 361), 48: (0, 356), 46: (0, 348), 84: (0, 204), 27: (0, 173), 85: (0, 233), 47: (0, 193), 37: (0, 41), 14: (0, 56), 86: (0, 221), 87: (0, 238), 95: (0, 141), 88: (0, 58), 89: (0, 48), 22: (0, 36), 3: (0, 26), 56: (0, 37), 90: (0, 55), 18: (0, 43), 19: (0, 16), 91: (0, 197), 92: (0, 231), 93: (0, 8), 94: (0, 192), 28: (0, 19), 25: (0, 32), 49: (0, 228)}, 38: {52: (0, 295), 76: (0, 353), 36: (0, 312), 77: (0, 301), 72: (0, 300), 38: (0, 63), 51: (0, 310), 5: (0, 346), 78: (0, 306), 79: (0, 61), 80: (0, 340), 50: (0, 311), 81: (0, 46), 39: (0, 44), 82: (0, 38), 83: (0, 357), 68: (0, 361), 48: (0, 356), 46: (0, 348), 84: (0, 204), 27: (0, 173), 85: (0, 233), 47: (0, 193), 37: (0, 41), 14: (0, 56), 86: (0, 221), 87: (0, 238), 95: (0, 133), 88: (0, 58), 89: (0, 48), 22: (0, 36), 3: (0, 26), 56: (0, 37), 90: (0, 55), 18: (0, 43), 19: (0, 16), 91: (0, 197), 92: (0, 231), 93: (0, 8), 94: (0, 192), 28: (0, 19), 25: (0, 32), 49: (0, 228)}, 39: {20: (0, 223), 16: (1, {'@': 92}), 31: (1, {'@': 92}), 8: (1, {'@': 92}), 1: (1, {'@': 92}), 32: (1, {'@': 92}), 2: (1, {'@': 92}), 10: (1, {'@': 92}), 3: (1, {'@': 92}), 29: (1, {'@': 92}), 6: (1, {'@': 92}), 4: (1, {'@': 92})}, 40: {52: (0, 295), 65: (0, 100), 68: (0, 168), 70: (0, 283), 46: (0, 151), 59: (0, 1), 3: (0, 26), 5: (0, 406), 73: (0, 216), 27: (0, 364)}, 41: {14: (1, {'@': 93}), 36: (1, {'@': 93}), 37: (1, {'@': 93}), 38: (1, {'@': 93}), 48: (1, {'@': 93}), 18: (1, {'@': 93}), 19: (1, {'@': 93}), 49: (1, {'@': 93}), 22: (1, {'@': 93}), 50: (1, {'@': 93}), 3: (1, {'@': 93}), 47: (1, {'@': 93}), 25: (1, {'@': 93}), 39: (1, {'@': 93}), 51: (1, {'@': 93}), 27: (1, {'@': 93}), 28: (1, {'@': 93}), 46: (1, {'@': 93}), 52: (1, {'@': 93}), 41: (1, {'@': 93}), 42: (1, {'@': 93}), 16: (1, {'@': 93}), 32: (1, {'@': 93}), 43: (1, {'@': 93}), 33: (1, {'@': 93}), 44: (1, {'@': 93}), 29: (1, {'@': 93}), 45: (1, {'@': 93}), 30: (1, {'@': 93}), 34: (1, {'@': 93})}, 42: {14: (1, {'@': 94}), 13: (1, {'@': 94}), 16: (1, {'@': 94}), 8: (1, {'@': 94}), 18: (1, {'@': 94}), 20: (1, {'@': 94}), 21: (1, {'@': 94}), 22: (1, {'@': 94}), 32: (1, {'@': 94}), 2: (1, {'@': 94}), 24: (1, {'@': 94}), 3: (1, {'@': 94}), 29: (1, {'@': 94}), 25: (1, {'@': 94}), 6: (1, {'@': 94}), 30: (1, {'@': 94}), 27: (1, {'@': 94}), 34: (1, {'@': 94}), 28: (1, {'@': 94}), 31: (1, {'@': 94}), 15: (1, {'@': 94}), 4: (1, {'@': 94}), 1: (1, {'@': 94}), 19: (1, {'@': 94}), 23: (1, {'@': 94}), 33: (1, {'@': 94}), 10: (1, {'@': 94}), 26: (1, {'@': 94})}, 43: {14: (1, {'@': 95}), 36: (1, {'@': 95}), 37: (1, {'@': 95}), 38: (1, {'@': 95}), 48: (1, {'@': 95}), 18: (1, {'@': 95}), 19: (1, {'@': 95}), 49: (1, {'@': 95}), 22: (1, {'@': 95}), 50: (1, {'@': 95}), 3: (1, {'@': 95}), 47: (1, {'@': 95}), 25: (1, {'@': 95}), 39: (1, {'@': 95}), 51: (1, {'@': 95}), 27: (1, {'@': 95}), 28: (1, {'@': 95}), 46: (1, {'@': 95}), 52: (1, {'@': 95}), 41: (1, {'@': 95}), 42: (1, {'@': 95}), 16: (1, {'@': 95}), 32: (1, {'@': 95}), 43: (1, {'@': 95}), 33: (1, {'@': 95}), 44: (1, {'@': 95}), 29: (1, {'@': 95}), 45: (1, {'@': 95}), 30: (1, {'@': 95}), 34: (1, {'@': 95})}, 44: {14: (1, {'@': 96}), 36: (1, {'@': 96}), 37: (1, {'@': 96}), 38: (1, {'@': 96}), 48: (1, {'@': 96}), 18: (1, {'@': 96}), 19: (1, {'@': 96}), 49: (1, {'@': 96}), 22: (1, {'@': 96}), 50: (1, {'@': 96}), 3: (1, {'@': 96}), 47: (1, {'@': 96}), 25: (1, {'@': 96}), 39: (1, {'@': 96}), 51: (1, {'@': 96}), 27: (1, {'@': 96}), 28: (1, {'@': 96}), 46: (1, {'@': 96}), 52: (1, {'@': 96}), 41: (1, {'@': 96}), 42: (1, {'@': 96}), 16: (1, {'@': 96}), 32: (1, {'@': 96}), 43: (1, {'@': 96}), 33: (1, {'@': 96}), 44: (1, {'@': 96}), 29: (1, {'@': 96}), 45: (1, {'@': 96}), 30: (1, {'@': 96}), 34: (1, {'@': 96})}, 45: {20: (1, {'@': 97}), 25: (1, {'@': 97}), 18: (1, {'@': 97}), 26: (1, {'@': 97}), 16: (1, {'@': 97}), 31: (1, {'@': 97}), 32: (1, {'@': 97}), 2: (1, {'@': 97}), 10: (1, {'@': 97}), 8: (1, {'@': 97}), 3: (1, {'@': 97}), 29: (1, {'@': 97}), 4: (1, {'@': 97}), 1: (1, {'@': 97}), 6: (1, {'@': 97})}, 46: {79: (0, 158), 52: (0, 295), 76: (0, 353), 72: (0, 300), 51: (0, 310), 5: (0, 346), 78: (0, 306), 80: (0, 340), 50: (0, 311), 68: (0, 361), 83: (0, 357), 48: (0, 356), 46: (0, 348), 85: (0, 233), 84: (0, 204), 27: (0, 173), 47: (0, 193), 86: (0, 221), 87: (0, 238), 3: (0, 26), 91: (0, 197), 92: (0, 231), 94: (0, 192), 49: (0, 228)}, 47: {20: (0, 223), 16: (1, {'@': 98}), 31: (1, {'@': 98}), 8: (1, {'@': 98}), 1: (1, {'@': 98}), 32: (1, {'@': 98}), 2: (1, {'@': 98}), 10: (1, {'@': 98}), 3: (1, {'@': 98}), 29: (1, {'@': 98}), 6: (1, {'@': 98}), 4: (1, {'@': 98})}, 48: {5: (0, 131), 3: (0, 26)}, 49: {27: (1, {'@': 99}), 3: (1, {'@': 99}), 46: (1, {'@': 99}), 52: (1, {'@': 99})}, 50: {20: (1, {'@': 100}), 25: (1, {'@': 100}), 18: (1, {'@': 100}), 26: (1, {'@': 100}), 16: (1, {'@': 100}), 31: (1, {'@': 100}), 32: (1, {'@': 100}), 2: (1, {'@': 100}), 10: (1, {'@': 100}), 8: (1, {'@': 100}), 3: (1, {'@': 100}), 29: (1, {'@': 100}), 4: (1, {'@': 100}), 1: (1, {'@': 100}), 6: (1, {'@': 100})}, 51: {27: (1, {'@': 101}), 3: (1, {'@': 101}), 46: (1, {'@': 101}), 52: (1, {'@': 101})}, 52: {20: (0, 223), 16: (1, {'@': 102}), 31: (1, {'@': 102}), 8: (1, {'@': 102}), 1: (1, {'@': 102}), 32: (1, {'@': 102}), 2: (1, {'@': 102}), 10: (1, {'@': 102}), 3: (1, {'@': 102}), 29: (1, {'@': 102}), 6: (1, {'@': 102}), 4: (1, {'@': 102})}, 53: {52: (0, 295), 55: (0, 242), 56: (0, 7), 46: (0, 163), 57: (0, 11), 58: (0, 362), 5: (0, 153), 59: (0, 1), 27: (0, 364), 60: (0, 31), 63: (0, 74), 48: (0, 313), 61: (0, 289), 62: (0, 298), 51: (0, 222), 64: (0, 183), 65: (0, 224), 66: (0, 201), 67: (0, 174), 69: (0, 177), 70: (0, 283), 68: (0, 168), 3: (0, 26), 71: (0, 317), 72: (0, 360), 49: (0, 228), 73: (0, 216), 19: (0, 170), 74: (0, 308)}, 54: {14: (1, {'@': 103}), 13: (1, {'@': 103}), 16: (1, {'@': 103}), 8: (1, {'@': 103}), 18: (1, {'@': 103}), 20: (1, {'@': 103}), 21: (1, {'@': 103}), 22: (1, {'@': 103}), 32: (1, {'@': 103}), 2: (1, {'@': 103}), 3: (1, {'@': 103}), 29: (1, {'@': 103}), 25: (1, {'@': 103}), 6: (1, {'@': 103}), 30: (1, {'@': 103}), 27: (1, {'@': 103}), 34: (1, {'@': 103}), 28: (1, {'@': 103}), 26: (1, {'@': 103}), 31: (1, {'@': 103}), 15: (1, {'@': 103}), 1: (1, {'@': 103}), 19: (1, {'@': 103}), 23: (1, {'@': 103}), 10: (1, {'@': 103}), 33: (1, {'@': 103}), 4: (1, {'@': 103})}, 55: {95: (0, 147), 52: (0, 295), 76: (0, 353), 38: (0, 63), 5: (0, 346), 80: (0, 340), 50: (0, 311), 39: (0, 44), 83: (0, 357), 48: (0, 356), 84: (0, 204), 27: (0, 173), 14: (0, 56), 86: (0, 221), 46: (0, 348), 77: (0, 301), 47: (0, 193), 89: (0, 48), 3: (0, 26), 56: (0, 37), 91: (0, 197), 92: (0, 231), 79: (0, 61), 94: (0, 192), 90: (0, 55), 25: (0, 32), 49: (0, 228), 37: (0, 41), 36: (0, 312), 72: (0, 300), 51: (0, 310), 78: (0, 306), 81: (0, 46), 68: (0, 361), 82: (0, 38), 85: (0, 233), 87: (0, 238), 88: (0, 58), 22: (0, 36), 18: (0, 43), 19: (0, 16), 93: (0, 8), 28: (0, 19)}, 56: {14: (1, {'@': 104}), 36: (1, {'@': 104}), 37: (1, {'@': 104}), 38: (1, {'@': 104}), 48: (1, {'@': 104}), 18: (1, {'@': 104}), 19: (1, {'@': 104}), 49: (1, {'@': 104}), 22: (1, {'@': 104}), 50: (1, {'@': 104}), 3: (1, {'@': 104}), 47: (1, {'@': 104}), 25: (1, {'@': 104}), 39: (1, {'@': 104}), 51: (1, {'@': 104}), 27: (1, {'@': 104}), 28: (1, {'@': 104}), 46: (1, {'@': 104}), 52: (1, {'@': 104}), 41: (1, {'@': 104}), 42: (1, {'@': 104}), 16: (1, {'@': 104}), 32: (1, {'@': 104}), 43: (1, {'@': 104}), 33: (1, {'@': 104}), 44: (1, {'@': 104}), 29: (1, {'@': 104}), 45: (1, {'@': 104}), 30: (1, {'@': 104}), 34: (1, {'@': 104})}, 57: {20: (1, {'@': 105}), 25: (1, {'@': 105}), 18: (1, {'@': 105}), 26: (1, {'@': 105}), 16: (1, {'@': 105}), 31: (1, {'@': 105}), 32: (1, {'@': 105}), 2: (1, {'@': 105}), 10: (1, {'@': 105}), 8: (1, {'@': 105}), 3: (1, {'@': 105}), 29: (1, {'@': 105}), 4: (1, {'@': 105}), 1: (1, {'@': 105}), 6: (1, {'@': 105})}, 58: {52: (0, 295), 47: (0, 193), 72: (0, 300), 3: (0, 26), 46: (0, 348), 51: (0, 310), 5: (0, 346), 91: (0, 197), 92: (0, 231), 50: (0, 311), 94: (0, 192), 78: (0, 140), 68: (0, 361), 48: (0, 356), 85: (0, 233), 49: (0, 228)}, 59: {5: (0, 118), 3: (0, 26)}, 60: {27: (1, {'@': 106}), 3: (1, {'@': 106}), 46: (1, {'@': 106}), 52: (1, {'@': 106})}, 61: {36: (0, 312), 77: (0, 301), 22: (0, 36), 38: (0, 63), 18: (0, 43), 19: (0, 16), 93: (0, 8), 39: (0, 44), 28: (0, 19), 14: (0, 56), 25: (0, 32), 37: (0, 41), 81: (0, 161), 34: (1, {'@': 107}), 16: (1, {'@': 107}), 41: (1, {'@': 107}), 42: (1, {'@': 107}), 32: (1, {'@': 107}), 43: (1, {'@': 107}), 33: (1, {'@': 107}), 44: (1, {'@': 107}), 29: (1, {'@': 107}), 45: (1, {'@': 107}), 30: (1, {'@': 107})}, 62: {5: (0, 9), 100: (0, 70), 3: (0, 26)}, 63: {14: (1, {'@': 108}), 36: (1, {'@': 108}), 37: (1, {'@': 108}), 38: (1, {'@': 108}), 48: (1, {'@': 108}), 18: (1, {'@': 108}), 19: (1, {'@': 108}), 49: (1, {'@': 108}), 22: (1, {'@': 108}), 50: (1, {'@': 108}), 3: (1, {'@': 108}), 47: (1, {'@': 108}), 25: (1, {'@': 108}), 39: (1, {'@': 108}), 51: (1, {'@': 108}), 27: (1, {'@': 108}), 28: (1, {'@': 108}), 46: (1, {'@': 108}), 52: (1, {'@': 108}), 41: (1, {'@': 108}), 42: (1, {'@': 108}), 16: (1, {'@': 108}), 32: (1, {'@': 108}), 43: (1, {'@': 108}), 33: (1, {'@': 108}), 44: (1, {'@': 108}), 29: (1, {'@': 108}), 45: (1, {'@': 108}), 30: (1, {'@': 108}), 34: (1, {'@': 108})}, 64: {52: (0, 295), 76: (0, 353), 36: (0, 312), 77: (0, 301), 72: (0, 300), 38: (0, 63), 51: (0, 310), 5: (0, 346), 78: (0, 306), 79: (0, 61), 80: (0, 340), 50: (0, 311), 81: (0, 46), 39: (0, 44), 82: (0, 38), 83: (0, 357), 68: (0, 361), 48: (0, 356), 46: (0, 348), 84: (0, 204), 27: (0, 173), 85: (0, 233), 47: (0, 193), 37: (0, 41), 95: (0, 344), 14: (0, 56), 86: (0, 221), 87: (0, 238), 88: (0, 58), 89: (0, 48), 22: (0, 36), 3: (0, 26), 56: (0, 37), 90: (0, 55), 18: (0, 43), 19: (0, 16), 91: (0, 197), 92: (0, 231), 93: (0, 8), 94: (0, 192), 28: (0, 19), 25: (0, 32), 49: (0, 228)}, 65: {1: (1, {'@': 109}), 2: (1, {'@': 109}), 6: (1, {'@': 109}), 10: (1, {'@': 109}), 4: (1, {'@': 109}), 8: (1, {'@': 109}), 3: (1, {'@': 109}), 31: (1, {'@': 109})}, 66: {49: (1, {'@': 110}), 3: (1, {'@': 110}), 47: (1, {'@': 110}), 29: (1, {'@': 110}), 46: (1, {'@': 110}), 52: (1, {'@': 110})}, 67: {3: (0, 26), 5: (0, 94)}, 68: {30: (0, 384)}, 69: {30: (1, {'@': 111})}, 70: {29: (0, 375)}, 71: {1: (1, {'@': 112}), 2: (1, {'@': 112}), 6: (1, {'@': 112}), 10: (1, {'@': 112}), 4: (1, {'@': 112}), 8: (1, {'@': 112}), 3: (1, {'@': 112}), 31: (1, {'@': 112})}, 72: {113: (0, 87), 114: (0, 69)}, 73: {39: (0, 44), 36: (0, 312), 28: (0, 19), 77: (0, 301), 14: (0, 56), 22: (0, 36), 38: (0, 63), 25: (0, 32), 18: (0, 43), 19: (0, 16), 37: (0, 41), 81: (0, 126), 93: (0, 8), 34: (1, {'@': 113}), 40: (1, {'@': 113}), 16: (1, {'@': 113}), 41: (1, {'@': 113}), 42: (1, {'@': 113}), 32: (1, {'@': 113}), 43: (1, {'@': 113}), 33: (1, {'@': 113}), 44: (1, {'@': 113}), 29: (1, {'@': 113}), 45: (1, {'@': 113}), 30: (1, {'@': 113})}, 74: {20: (0, 223), 16: (1, {'@': 114}), 31: (1, {'@': 114}), 8: (1, {'@': 114}), 1: (1, {'@': 114}), 32: (1, {'@': 114}), 2: (1, {'@': 114}), 10: (1, {'@': 114}), 3: (1, {'@': 114}), 29: (1, {'@': 114}), 6: (1, {'@': 114}), 4: (1, {'@': 114})}, 75: {11: (0, 304), 14: (1, {'@': 115}), 13: (1, {'@': 115}), 16: (1, {'@': 115}), 8: (1, {'@': 115}), 17: (1, {'@': 115}), 18: (1, {'@': 115}), 20: (1, {'@': 115}), 21: (1, {'@': 115}), 22: (1, {'@': 115}), 32: (1, {'@': 115}), 2: (1, {'@': 115}), 24: (1, {'@': 115}), 3: (1, {'@': 115}), 29: (1, {'@': 115}), 25: (1, {'@': 115}), 6: (1, {'@': 115}), 30: (1, {'@': 115}), 27: (1, {'@': 115}), 34: (1, {'@': 115}), 28: (1, {'@': 115}), 31: (1, {'@': 115}), 15: (1, {'@': 115}), 4: (1, {'@': 115}), 1: (1, {'@': 115}), 19: (1, {'@': 115}), 23: (1, {'@': 115}), 33: (1, {'@': 115}), 10: (1, {'@': 115}), 26: (1, {'@': 115})}, 76: {1: (1, {'@': 116}), 2: (1, {'@': 116}), 6: (1, {'@': 116}), 10: (1, {'@': 116}), 4: (1, {'@': 116}), 8: (1, {'@': 116}), 3: (1, {'@': 116}), 31: (1, {'@': 116})}, 77: {5: (0, 268), 3: (0, 26)}, 78: {14: (1, {'@': 117}), 36: (1, {'@': 117}), 13: (1, {'@': 117}), 34: (1, {'@': 117}), 37: (1, {'@': 117}), 17: (1, {'@': 117}), 35: (1, {'@': 117}), 38: (1, {'@': 117}), 48: (1, {'@': 117}), 18: (1, {'@': 117}), 19: (1, {'@': 117}), 49: (1, {'@': 117}), 22: (1, {'@': 117}), 50: (1, {'@': 117}), 3: (1, {'@': 117}), 24: (1, {'@': 117}), 47: (1, {'@': 117}), 25: (1, {'@': 117}), 39: (1, {'@': 117}), 51: (1, {'@': 117}), 27: (1, {'@': 117}), 28: (1, {'@': 117}), 46: (1, {'@': 117}), 52: (1, {'@': 117}), 42: (1, {'@': 117}), 16: (1, {'@': 117}), 40: (1, {'@': 117}), 32: (1, {'@': 117}), 43: (1, {'@': 117}), 29: (1, {'@': 117}), 45: (1, {'@': 117}), 30: (1, {'@': 117}), 41: (1, {'@': 117}), 33: (1, {'@': 117}), 44: (1, {'@': 117}), 20: (1, {'@': 117})}, 79: {49: (0, 228), 72: (0, 115)}, 80: {1: (1, {'@': 118}), 2: (1, {'@': 118}), 6: (1, {'@': 118}), 10: (1, {'@': 118}), 4: (1, {'@': 118}), 8: (1, {'@': 118}), 3: (1, {'@': 118}), 31: (1, {'@': 118})}, 81: {115: (0, 123), 30: (0, 91), 31: (0, 129)}, 82: {20: (0, 223), 16: (1, {'@': 119}), 31: (1, {'@': 119}), 8: (1, {'@': 119}), 1: (1, {'@': 119}), 32: (1, {'@': 119}), 2: (1, {'@': 119}), 10: (1, {'@': 119}), 3: (1, {'@': 119}), 29: (1, {'@': 119}), 6: (1, {'@': 119}), 4: (1, {'@': 119})}, 83: {24: (0, 359), 22: (1, {'@': 120}), 14: (1, {'@': 120}), 36: (1, {'@': 120}), 34: (1, {'@': 120}), 37: (1, {'@': 120}), 19: (1, {'@': 120}), 38: (1, {'@': 120}), 39: (1, {'@': 120}), 25: (1, {'@': 120}), 18: (1, {'@': 120}), 27: (1, {'@': 120}), 28: (1, {'@': 120}), 40: (1, {'@': 120}), 16: (1, {'@': 120}), 41: (1, {'@': 120}), 42: (1, {'@': 120}), 32: (1, {'@': 120}), 43: (1, {'@': 120}), 33: (1, {'@': 120}), 44: (1, {'@': 120}), 29: (1, {'@': 120}), 45: (1, {'@': 120}), 30: (1, {'@': 120})}, 84: {14: (1, {'@': 121}), 13: (1, {'@': 121}), 16: (1, {'@': 121}), 8: (1, {'@': 121}), 18: (1, {'@': 121}), 20: (1, {'@': 121}), 21: (1, {'@': 121}), 22: (1, {'@': 121}), 32: (1, {'@': 121}), 2: (1, {'@': 121}), 3: (1, {'@': 121}), 29: (1, {'@': 121}), 25: (1, {'@': 121}), 6: (1, {'@': 121}), 30: (1, {'@': 121}), 27: (1, {'@': 121}), 34: (1, {'@': 121}), 28: (1, {'@': 121}), 26: (1, {'@': 121}), 31: (1, {'@': 121}), 15: (1, {'@': 121}), 1: (1, {'@': 121}), 19: (1, {'@': 121}), 23: (1, {'@': 121}), 10: (1, {'@': 121}), 33: (1, {'@': 121}), 4: (1, {'@': 121})}, 85: {5: (0, 342), 116: (0, 110), 3: (0, 26)}, 86: {30: (0, 367)}, 87: {30: (0, 388)}, 88: {29: (0, 262)}, 89: {17: (0, 309), 22: (1, {'@': 122}), 14: (1, {'@': 122}), 36: (1, {'@': 122}), 37: (1, {'@': 122}), 24: (1, {'@': 122}), 27: (1, {'@': 122}), 19: (1, {'@': 122}), 38: (1, {'@': 122}), 39: (1, {'@': 122}), 25: (1, {'@': 122}), 18: (1, {'@': 122}), 34: (1, {'@': 122}), 28: (1, {'@': 122}), 40: (1, {'@': 122}), 16: (1, {'@': 122}), 41: (1, {'@': 122}), 42: (1, {'@': 122}), 32: (1, {'@': 122}), 43: (1, {'@': 122}), 33: (1, {'@': 122}), 44: (1, {'@': 122}), 29: (1, {'@': 122}), 45: (1, {'@': 122}), 30: (1, {'@': 122})}, 90: {14: (1, {'@': 123}), 15: (1, {'@': 123}), 13: (1, {'@': 123}), 11: (1, {'@': 123}), 16: (1, {'@': 123}), 17: (1, {'@': 123}), 18: (1, {'@': 123}), 19: (1, {'@': 123}), 20: (1, {'@': 123}), 21: (1, {'@': 123}), 22: (1, {'@': 123}), 23: (1, {'@': 123}), 24: (1, {'@': 123}), 25: (1, {'@': 123}), 26: (1, {'@': 123}), 27: (1, {'@': 123}), 28: (1, {'@': 123}), 29: (1, {'@': 123}), 30: (1, {'@': 123}), 31: (1, {'@': 123}), 8: (1, {'@': 123}), 34: (1, {'@': 123}), 4: (1, {'@': 123}), 1: (1, {'@': 123}), 32: (1, {'@': 123}), 2: (1, {'@': 123}), 33: (1, {'@': 123}), 10: (1, {'@': 123}), 3: (1, {'@': 123}), 6: (1, {'@': 123})}, 91: {117: (0, 271), 72: (0, 112), 49: (0, 228)}, 92: {72: (0, 86), 49: (0, 228)}, 93: {52: (0, 295), 68: (0, 168), 46: (0, 151), 70: (0, 283), 96: (0, 392), 3: (0, 26), 5: (0, 153), 59: (0, 1), 65: (0, 224), 27: (0, 364), 60: (0, 31), 61: (0, 289), 69: (0, 155), 62: (0, 298), 73: (0, 216), 97: (0, 159), 29: (1, {'@': 86})}, 94: {29: (0, 404)}, 95: {36: (0, 258), 30: (0, 66)}, 96: {116: (0, 116), 5: (0, 342), 3: (0, 26)}, 97: {52: (0, 295), 47: (0, 193), 72: (0, 300), 3: (0, 26), 46: (0, 348), 51: (0, 310), 86: (0, 319), 5: (0, 346), 91: (0, 197), 92: (0, 231), 78: (0, 306), 80: (0, 340), 50: (0, 311), 94: (0, 192), 68: (0, 361), 48: (0, 356), 85: (0, 233), 49: (0, 228)}, 98: {30: (0, 417)}, 99: {52: (0, 295), 47: (0, 193), 86: (0, 221), 72: (0, 300), 3: (0, 26), 46: (0, 348), 51: (0, 310), 5: (0, 346), 91: (0, 197), 92: (0, 231), 78: (0, 306), 80: (0, 340), 50: (0, 311), 94: (0, 192), 68: (0, 361), 48: (0, 356), 85: (0, 233), 49: (0, 228), 87: (0, 320)}, 100: {14: (1, {'@': 124}), 13: (1, {'@': 124}), 16: (1, {'@': 124}), 8: (1, {'@': 124}), 18: (1, {'@': 124}), 20: (1, {'@': 124}), 21: (1, {'@': 124}), 22: (1, {'@': 124}), 32: (1, {'@': 124}), 2: (1, {'@': 124}), 24: (1, {'@': 124}), 3: (1, {'@': 124}), 29: (1, {'@': 124}), 25: (1, {'@': 124}), 6: (1, {'@': 124}), 30: (1, {'@': 124}), 27: (1, {'@': 124}), 34: (1, {'@': 124}), 28: (1, {'@': 124}), 31: (1, {'@': 124}), 15: (1, {'@': 124}), 4: (1, {'@': 124}), 1: (1, {'@': 124}), 19: (1, {'@': 124}), 23: (1, {'@': 124}), 33: (1, {'@': 124}), 10: (1, {'@': 124}), 26: (1, {'@': 124})}, 101: {72: (0, 104), 49: (0, 228)}, 102: {29: (1, {'@': 125})}, 103: {30: (0, 272), 29: (0, 273), 36: (0, 258)}, 104: {29: (0, 409)}, 105: {14: (1, {'@': 126}), 13: (1, {'@': 126}), 16: (1, {'@': 126}), 8: (1, {'@': 126}), 17: (1, {'@': 126}), 18: (1, {'@': 126}), 20: (1, {'@': 126}), 21: (1, {'@': 126}), 22: (1, {'@': 126}), 32: (1, {'@': 126}), 2: (1, {'@': 126}), 24: (1, {'@': 126}), 3: (1, {'@': 126}), 29: (1, {'@': 126}), 25: (1, {'@': 126}), 6: (1, {'@': 126}), 30: (1, {'@': 126}), 27: (1, {'@': 126}), 34: (1, {'@': 126}), 28: (1, {'@': 126}), 31: (1, {'@': 126}), 15: (1, {'@': 126}), 4: (1, {'@': 126}), 1: (1, {'@': 126}), 19: (1, {'@': 126}), 23: (1, {'@': 126}), 10: (1, {'@': 126}), 33: (1, {'@': 126}), 26: (1, {'@': 126})}, 106: {52: (0, 295), 46: (0, 237), 68: (0, 191), 47: (0, 203), 29: (0, 108), 118: (0, 103), 3: (0, 26), 49: (0, 228), 5: (0, 176), 72: (0, 241)}, 107: {20: (1, {'@': 127}), 21: (1, {'@': 127}), 22: (1, {'@': 127}), 23: (1, {'@': 127}), 14: (1, {'@': 127}), 15: (1, {'@': 127}), 13: (1, {'@': 127}), 16: (1, {'@': 127}), 25: (1, {'@': 127}), 18: (1, {'@': 127}), 26: (1, {'@': 127}), 19: (1, {'@': 127}), 28: (1, {'@': 127}), 29: (1, {'@': 127}), 30: (1, {'@': 127}), 31: (1, {'@': 127}), 8: (1, {'@': 127}), 1: (1, {'@': 127}), 32: (1, {'@': 127}), 2: (1, {'@': 127}), 10: (1, {'@': 127}), 3: (1, {'@': 127}), 6: (1, {'@': 127}), 4: (1, {'@': 127})}, 108: {29: (1, {'@': 128}), 30: (1, {'@': 128}), 36: (1, {'@': 128}), 33: (1, {'@': 128}), 20: (1, {'@': 128})}, 109: {34: (0, 403)}, 110: {29: (0, 265)}, 111: {5: (0, 9), 100: (0, 420), 3: (0, 26)}, 112: {36: (0, 77)}, 113: {33: (0, 386)}, 114: {49: (0, 228), 72: (0, 127)}, 115: {30: (0, 394)}, 116: {29: (0, 267)}, 117: {30: (0, 411)}, 118: {46: (0, 408), 29: (1, {'@': 129}), 30: (1, {'@': 129}), 34: (1, {'@': 129})}, 119: {1: (1, {'@': 130}), 2: (1, {'@': 130}), 6: (1, {'@': 130}), 10: (1, {'@': 130}), 4: (1, {'@': 130}), 8: (1, {'@': 130}), 3: (1, {'@': 130}), 31: (1, {'@': 130})}, 120: {14: (1, {'@': 131}), 36: (1, {'@': 131}), 13: (1, {'@': 131}), 34: (1, {'@': 131}), 37: (1, {'@': 131}), 17: (1, {'@': 131}), 35: (1, {'@': 131}), 38: (1, {'@': 131}), 48: (1, {'@': 131}), 18: (1, {'@': 131}), 19: (1, {'@': 131}), 49: (1, {'@': 131}), 22: (1, {'@': 131}), 50: (1, {'@': 131}), 3: (1, {'@': 131}), 24: (1, {'@': 131}), 47: (1, {'@': 131}), 25: (1, {'@': 131}), 39: (1, {'@': 131}), 51: (1, {'@': 131}), 27: (1, {'@': 131}), 28: (1, {'@': 131}), 46: (1, {'@': 131}), 52: (1, {'@': 131}), 42: (1, {'@': 131}), 16: (1, {'@': 131}), 40: (1, {'@': 131}), 32: (1, {'@': 131}), 43: (1, {'@': 131}), 29: (1, {'@': 131}), 45: (1, {'@': 131}), 30: (1, {'@': 131}), 41: (1, {'@': 131}), 33: (1, {'@': 131}), 44: (1, {'@': 131}), 20: (1, {'@': 131})}, 121: {30: (0, 414)}, 122: {116: (0, 125), 5: (0, 342), 3: (0, 26)}, 123: {30: (0, 269), 31: (0, 270)}, 124: {32: (0, 372), 20: (0, 223), 16: (1, {'@': 132}), 31: (1, {'@': 132}), 8: (1, {'@': 132}), 1: (1, {'@': 132}), 2: (1, {'@': 132}), 10: (1, {'@': 132}), 3: (1, {'@': 132}), 29: (1, {'@': 132}), 6: (1, {'@': 132}), 4: (1, {'@': 132})}, 125: {29: (0, 263)}, 126: {52: (0, 295), 76: (0, 353), 72: (0, 300), 51: (0, 310), 5: (0, 346), 79: (0, 73), 78: (0, 306), 80: (0, 340), 50: (0, 311), 68: (0, 361), 83: (0, 357), 48: (0, 356), 46: (0, 348), 85: (0, 233), 84: (0, 204), 27: (0, 173), 47: (0, 193), 86: (0, 221), 87: (0, 238), 3: (0, 26), 91: (0, 197), 92: (0, 231), 94: (0, 192), 49: (0, 228)}, 127: {29: (0, 378)}, 128: {40: (0, 380), 31: (1, {'@': 133}), 14: (1, {'@': 133}), 15: (1, {'@': 133}), 13: (1, {'@': 133}), 11: (1, {'@': 133}), 17: (1, {'@': 133}), 18: (1, {'@': 133}), 19: (1, {'@': 133}), 20: (1, {'@': 133}), 21: (1, {'@': 133}), 22: (1, {'@': 133}), 23: (1, {'@': 133}), 24: (1, {'@': 133}), 25: (1, {'@': 133}), 26: (1, {'@': 133}), 27: (1, {'@': 133}), 28: (1, {'@': 133})}, 129: {29: (1, {'@': 134})}, 130: {30: (0, 405)}, 131: {40: (0, 172), 98: (0, 244)}, 132: {1: (1, {'@': 135}), 2: (1, {'@': 135}), 6: (1, {'@': 135}), 10: (1, {'@': 135}), 4: (1, {'@': 135}), 8: (1, {'@': 135}), 3: (1, {'@': 135}), 31: (1, {'@': 135})}, 133: {41: (0, 179)}, 134: {52: (0, 295), 47: (0, 193), 72: (0, 300), 3: (0, 26), 46: (0, 348), 51: (0, 310), 5: (0, 346), 91: (0, 197), 92: (0, 231), 50: (0, 311), 94: (0, 192), 78: (0, 327), 68: (0, 361), 48: (0, 356), 85: (0, 233), 49: (0, 228)}, 135: {116: (0, 130), 5: (0, 342), 3: (0, 26)}, 136: {5: (0, 342), 3: (0, 26), 116: (0, 121)}, 137: {1: (1, {'@': 136}), 2: (1, {'@': 136}), 6: (1, {'@': 136}), 10: (1, {'@': 136}), 4: (1, {'@': 136}), 8: (1, {'@': 136}), 3: (1, {'@': 136}), 31: (1, {'@': 136})}, 138: {116: (0, 68), 5: (0, 342), 3: (0, 26)}, 139: {3: (0, 26), 5: (0, 352)}, 140: {52: (0, 295), 47: (0, 193), 72: (0, 300), 3: (0, 26), 46: (0, 348), 51: (0, 310), 5: (0, 346), 91: (0, 197), 92: (0, 231), 50: (0, 311), 68: (0, 361), 48: (0, 356), 85: (0, 233), 49: (0, 228), 20: (0, 167), 94: (0, 4)}, 141: {16: (0, 187)}, 142: {30: (0, 322), 11: (1, {'@': 137}), 29: (1, {'@': 137})}, 143: {72: (0, 117), 49: (0, 228)}, 144: {49: (1, {'@': 138}), 22: (1, {'@': 138}), 14: (1, {'@': 138}), 50: (1, {'@': 138}), 51: (1, {'@': 138}), 48: (1, {'@': 138}), 36: (1, {'@': 138}), 37: (1, {'@': 138}), 3: (1, {'@': 138}), 47: (1, {'@': 138}), 27: (1, {'@': 138}), 38: (1, {'@': 138}), 39: (1, {'@': 138}), 25: (1, {'@': 138}), 18: (1, {'@': 138}), 19: (1, {'@': 138}), 28: (1, {'@': 138}), 46: (1, {'@': 138}), 52: (1, {'@': 138}), 41: (1, {'@': 138}), 42: (1, {'@': 138}), 16: (1, {'@': 138}), 32: (1, {'@': 138}), 43: (1, {'@': 138}), 33: (1, {'@': 138}), 44: (1, {'@': 138}), 29: (1, {'@': 138}), 45: (1, {'@': 138}), 30: (1, {'@': 138}), 34: (1, {'@': 138})}, 145: {5: (0, 354), 3: (0, 26)}, 146: {52: (0, 295), 68: (0, 168), 70: (0, 283), 46: (0, 151), 65: (0, 224), 3: (0, 26), 62: (0, 294), 5: (0, 406), 59: (0, 1), 27: (0, 364), 60: (0, 31), 61: (0, 289), 73: (0, 216)}, 147: {43: (0, 246), 119: (0, 196), 34: (1, {'@': 139}), 16: (1, {'@': 139}), 41: (1, {'@': 139}), 42: (1, {'@': 139}), 32: (1, {'@': 139}), 33: (1, {'@': 139}), 44: (1, {'@': 139}), 29: (1, {'@': 139}), 45: (1, {'@': 139}), 30: (1, {'@': 139})}, 148: {29: (0, 162)}, 149: {52: (0, 295), 47: (0, 193), 72: (0, 300), 3: (0, 26), 46: (0, 348), 51: (0, 310), 5: (0, 346), 91: (0, 197), 92: (0, 231), 78: (0, 306), 50: (0, 311), 94: (0, 192), 80: (0, 331), 68: (0, 361), 48: (0, 356), 85: (0, 233), 49: (0, 228)}, 150: {14: (1, {'@': 140}), 42: (1, {'@': 140}), 36: (1, {'@': 140}), 13: (1, {'@': 140}), 16: (1, {'@': 140}), 37: (1, {'@': 140}), 17: (1, {'@': 140}), 40: (1, {'@': 140}), 18: (1, {'@': 140}), 32: (1, {'@': 140}), 22: (1, {'@': 140}), 43: (1, {'@': 140}), 24: (1, {'@': 140}), 29: (1, {'@': 140}), 25: (1, {'@': 140}), 45: (1, {'@': 140}), 30: (1, {'@': 140}), 27: (1, {'@': 140}), 34: (1, {'@': 140}), 28: (1, {'@': 140}), 41: (1, {'@': 140}), 38: (1, {'@': 140}), 19: (1, {'@': 140}), 33: (1, {'@': 140}), 44: (1, {'@': 140}), 39: (1, {'@': 140})}, 151: {52: (0, 295), 68: (0, 168), 70: (0, 283), 46: (0, 151), 3: (0, 26), 65: (0, 224), 5: (0, 406), 59: (0, 1), 27: (0, 364), 60: (0, 31), 61: (0, 289), 62: (0, 214), 73: (0, 216)}, 152: {52: (0, 295), 47: (0, 193), 72: (0, 300), 3: (0, 26), 46: (0, 348), 51: (0, 310), 5: (0, 346), 91: (0, 197), 92: (0, 231), 50: (0, 311), 68: (0, 361), 48: (0, 356), 85: (0, 233), 49: (0, 228), 94: (0, 4), 14: (1, {'@': 141}), 42: (1, {'@': 141}), 36: (1, {'@': 141}), 13: (1, {'@': 141}), 16: (1, {'@': 141}), 37: (1, {'@': 141}), 17: (1, {'@': 141}), 35: (1, {'@': 141}), 40: (1, {'@': 141}), 18: (1, {'@': 141}), 32: (1, {'@': 141}), 22: (1, {'@': 141}), 43: (1, {'@': 141}), 24: (1, {'@': 141}), 29: (1, {'@': 141}), 25: (1, {'@': 141}), 45: (1, {'@': 141}), 30: (1, {'@': 141}), 27: (1, {'@': 141}), 34: (1, {'@': 141}), 28: (1, {'@': 141}), 41: (1, {'@': 141}), 38: (1, {'@': 141}), 19: (1, {'@': 141}), 33: (1, {'@': 141}), 44: (1, {'@': 141}), 39: (1, {'@': 141})}, 153: {47: (0, 146), 46: (0, 181), 14: (1, {'@': 74}), 15: (1, {'@': 74}), 13: (1, {'@': 74}), 11: (1, {'@': 74}), 16: (1, {'@': 74}), 17: (1, {'@': 74}), 18: (1, {'@': 74}), 19: (1, {'@': 74}), 20: (1, {'@': 74}), 21: (1, {'@': 74}), 22: (1, {'@': 74}), 23: (1, {'@': 74}), 24: (1, {'@': 74}), 25: (1, {'@': 74}), 26: (1, {'@': 74}), 27: (1, {'@': 74}), 28: (1, {'@': 74}), 29: (1, {'@': 74}), 30: (1, {'@': 74}), 31: (1, {'@': 74}), 8: (1, {'@': 74}), 1: (1, {'@': 74}), 32: (1, {'@': 74}), 2: (1, {'@': 74}), 10: (1, {'@': 74}), 3: (1, {'@': 74}), 6: (1, {'@': 74}), 4: (1, {'@': 74})}, 154: {1: (1, {'@': 142}), 2: (1, {'@': 142}), 6: (1, {'@': 142}), 10: (1, {'@': 142}), 4: (1, {'@': 142}), 8: (1, {'@': 142}), 3: (1, {'@': 142}), 31: (1, {'@': 142})}, 155: {29: (1, {'@': 143}), 30: (1, {'@': 143})}, 156: {72: (0, 98), 49: (0, 228)}, 157: {52: (0, 295), 68: (0, 168), 46: (0, 151), 70: (0, 283), 96: (0, 345), 3: (0, 26), 5: (0, 153), 59: (0, 1), 65: (0, 224), 27: (0, 364), 60: (0, 31), 61: (0, 289), 69: (0, 155), 62: (0, 298), 73: (0, 216), 97: (0, 159), 29: (1, {'@': 86})}, 158: {39: (0, 44), 36: (0, 312), 28: (0, 19), 77: (0, 301), 14: (0, 56), 22: (0, 36), 38: (0, 63), 25: (0, 32), 18: (0, 43), 19: (0, 16), 37: (0, 41), 81: (0, 126), 93: (0, 8), 34: (1, {'@': 144}), 16: (1, {'@': 144}), 41: (1, {'@': 144}), 42: (1, {'@': 144}), 32: (1, {'@': 144}), 43: (1, {'@': 144}), 33: (1, {'@': 144}), 44: (1, {'@': 144}), 29: (1, {'@': 144}), 45: (1, {'@': 144}), 30: (1, {'@': 144})}, 159: {120: (0, 208), 30: (0, 339), 29: (1, {'@': 145})}, 160: {46: (0, 211), 40: (0, 225)}, 161: {52: (0, 295), 76: (0, 353), 72: (0, 300), 51: (0, 310), 5: (0, 346), 79: (0, 73), 78: (0, 306), 80: (0, 340), 50: (0, 311), 68: (0, 361), 83: (0, 357), 48: (0, 356), 46: (0, 348), 85: (0, 233), 84: (0, 204), 27: (0, 173), 47: (0, 193), 86: (0, 221), 87: (0, 238), 3: (0, 26), 91: (0, 197), 92: (0, 231), 94: (0, 192), 49: (0, 228), 34: (1, {'@': 146}), 16: (1, {'@': 146}), 41: (1, {'@': 146}), 42: (1, {'@': 146}), 32: (1, {'@': 146}), 43: (1, {'@': 146}), 33: (1, {'@': 146}), 44: (1, {'@': 146}), 29: (1, {'@': 146}), 45: (1, {'@': 146}), 30: (1, {'@': 146})}, 162: {40: (0, 380)}, 163: {52: (0, 295), 55: (0, 242), 56: (0, 7), 46: (0, 163), 57: (0, 11), 58: (0, 362), 5: (0, 153), 59: (0, 1), 27: (0, 364), 60: (0, 31), 48: (0, 313), 61: (0, 289), 62: (0, 171), 51: (0, 222), 64: (0, 183), 65: (0, 224), 66: (0, 201), 67: (0, 174), 68: (0, 168), 69: (0, 177), 70: (0, 283), 3: (0, 26), 71: (0, 317), 63: (0, 186), 72: (0, 360), 49: (0, 228), 73: (0, 216), 19: (0, 170), 74: (0, 308)}, 164: {20: (1, {'@': 147}), 25: (1, {'@': 147}), 18: (1, {'@': 147}), 26: (1, {'@': 147}), 16: (1, {'@': 147}), 31: (1, {'@': 147}), 32: (1, {'@': 147}), 2: (1, {'@': 147}), 10: (1, {'@': 147}), 8: (1, {'@': 147}), 3: (1, {'@': 147}), 29: (1, {'@': 147}), 4: (1, {'@': 147}), 1: (1, {'@': 147}), 6: (1, {'@': 147})}, 165: {29: (0, 76)}, 166: {20: (0, 260), 36: (0, 258)}, 167: {52: (0, 295), 76: (0, 353), 36: (0, 312), 77: (0, 301), 72: (0, 300), 38: (0, 63), 51: (0, 310), 5: (0, 346), 78: (0, 306), 95: (0, 389), 79: (0, 61), 80: (0, 340), 50: (0, 311), 81: (0, 46), 39: (0, 44), 82: (0, 38), 83: (0, 357), 68: (0, 361), 48: (0, 356), 46: (0, 348), 84: (0, 204), 27: (0, 173), 85: (0, 233), 47: (0, 193), 37: (0, 41), 14: (0, 56), 86: (0, 221), 87: (0, 238), 88: (0, 58), 89: (0, 48), 22: (0, 36), 3: (0, 26), 56: (0, 37), 90: (0, 55), 18: (0, 43), 19: (0, 16), 91: (0, 197), 92: (0, 231), 93: (0, 8), 94: (0, 192), 28: (0, 19), 25: (0, 32), 49: (0, 228)}, 168: {14: (1, {'@': 148}), 15: (1, {'@': 148}), 13: (1, {'@': 148}), 11: (1, {'@': 148}), 16: (1, {'@': 148}), 17: (1, {'@': 148}), 18: (1, {'@': 148}), 19: (1, {'@': 148}), 20: (1, {'@': 148}), 21: (1, {'@': 148}), 22: (1, {'@': 148}), 23: (1, {'@': 148}), 24: (1, {'@': 148}), 25: (1, {'@': 148}), 26: (1, {'@': 148}), 27: (1, {'@': 148}), 28: (1, {'@': 148}), 29: (1, {'@': 148}), 30: (1, {'@': 148}), 31: (1, {'@': 148}), 8: (1, {'@': 148}), 34: (1, {'@': 148}), 4: (1, {'@': 148}), 1: (1, {'@': 148}), 32: (1, {'@': 148}), 2: (1, {'@': 148}), 33: (1, {'@': 148}), 10: (1, {'@': 148}), 3: (1, {'@': 148}), 6: (1, {'@': 148})}, 169: {14: (1, {'@': 149}), 15: (1, {'@': 149}), 13: (1, {'@': 149}), 11: (1, {'@': 149}), 16: (1, {'@': 149}), 17: (1, {'@': 149}), 18: (1, {'@': 149}), 19: (1, {'@': 149}), 20: (1, {'@': 149}), 21: (1, {'@': 149}), 22: (1, {'@': 149}), 23: (1, {'@': 149}), 24: (1, {'@': 149}), 25: (1, {'@': 149}), 26: (1, {'@': 149}), 27: (1, {'@': 149}), 28: (1, {'@': 149}), 29: (1, {'@': 149}), 30: (1, {'@': 149}), 31: (1, {'@': 149}), 8: (1, {'@': 149}), 34: (1, {'@': 149}), 4: (1, {'@': 149}), 1: (1, {'@': 149}), 32: (1, {'@': 149}), 2: (1, {'@': 149}), 33: (1, {'@': 149}), 10: (1, {'@': 149}), 3: (1, {'@': 149}), 6: (1, {'@': 149})}, 170: {52: (0, 295), 55: (0, 242), 56: (0, 7), 46: (0, 163), 57: (0, 11), 58: (0, 362), 5: (0, 153), 59: (0, 1), 27: (0, 364), 60: (0, 31), 48: (0, 313), 61: (0, 289), 62: (0, 298), 51: (0, 222), 64: (0, 183), 65: (0, 224), 66: (0, 201), 67: (0, 174), 69: (0, 177), 70: (0, 283), 68: (0, 168), 3: (0, 26), 71: (0, 317), 63: (0, 229), 72: (0, 360), 49: (0, 228), 73: (0, 216), 19: (0, 170), 74: (0, 308)}, 171: {29: (0, 169), 20: (1, {'@': 150}), 21: (1, {'@': 150}), 22: (1, {'@': 150}), 23: (1, {'@': 150}), 14: (1, {'@': 150}), 15: (1, {'@': 150}), 13: (1, {'@': 150}), 25: (1, {'@': 150}), 18: (1, {'@': 150}), 26: (1, {'@': 150}), 19: (1, {'@': 150}), 28: (1, {'@': 150})}, 172: {52: (0, 295), 76: (0, 353), 36: (0, 312), 77: (0, 301), 72: (0, 300), 38: (0, 63), 51: (0, 310), 5: (0, 346), 78: (0, 306), 79: (0, 61), 80: (0, 340), 50: (0, 311), 81: (0, 46), 39: (0, 44), 82: (0, 38), 83: (0, 357), 68: (0, 361), 48: (0, 356), 46: (0, 348), 84: (0, 204), 27: (0, 173), 85: (0, 233), 47: (0, 193), 37: (0, 41), 14: (0, 56), 86: (0, 221), 87: (0, 238), 88: (0, 58), 89: (0, 48), 22: (0, 36), 3: (0, 26), 56: (0, 37), 90: (0, 55), 18: (0, 43), 19: (0, 16), 95: (0, 391), 91: (0, 197), 92: (0, 231), 93: (0, 8), 94: (0, 192), 28: (0, 19), 25: (0, 32), 49: (0, 228)}, 173: {52: (0, 295), 72: (0, 300), 51: (0, 310), 5: (0, 346), 78: (0, 306), 80: (0, 340), 50: (0, 311), 68: (0, 361), 48: (0, 356), 85: (0, 233), 46: (0, 348), 47: (0, 193), 84: (0, 204), 86: (0, 221), 87: (0, 238), 76: (0, 341), 3: (0, 26), 91: (0, 197), 92: (0, 231), 94: (0, 192), 49: (0, 228)}, 174: {3: (1, {'@': 151})}, 175: {14: (1, {'@': 152}), 36: (1, {'@': 152}), 13: (1, {'@': 152}), 34: (1, {'@': 152}), 37: (1, {'@': 152}), 17: (1, {'@': 152}), 35: (1, {'@': 152}), 38: (1, {'@': 152}), 48: (1, {'@': 152}), 18: (1, {'@': 152}), 19: (1, {'@': 152}), 49: (1, {'@': 152}), 22: (1, {'@': 152}), 50: (1, {'@': 152}), 3: (1, {'@': 152}), 24: (1, {'@': 152}), 47: (1, {'@': 152}), 25: (1, {'@': 152}), 39: (1, {'@': 152}), 51: (1, {'@': 152}), 27: (1, {'@': 152}), 28: (1, {'@': 152}), 46: (1, {'@': 152}), 52: (1, {'@': 152}), 42: (1, {'@': 152}), 16: (1, {'@': 152}), 40: (1, {'@': 152}), 32: (1, {'@': 152}), 43: (1, {'@': 152}), 29: (1, {'@': 152}), 45: (1, {'@': 152}), 30: (1, {'@': 152}), 41: (1, {'@': 152}), 33: (1, {'@': 152}), 44: (1, {'@': 152}), 20: (1, {'@': 152})}, 176: {29: (1, {'@': 153}), 30: (1, {'@': 153}), 36: (1, {'@': 153}), 33: (1, {'@': 153}), 20: (1, {'@': 153})}, 177: {28: (0, 299), 121: (0, 286), 122: (0, 234), 13: (0, 210), 19: (0, 189), 15: (0, 184), 22: (0, 178), 23: (0, 206), 21: (0, 235), 123: (0, 243), 14: (0, 217), 20: (1, {'@': 154}), 25: (1, {'@': 154}), 18: (1, {'@': 154}), 26: (1, {'@': 154}), 16: (1, {'@': 154}), 31: (1, {'@': 154}), 32: (1, {'@': 154}), 2: (1, {'@': 154}), 10: (1, {'@': 154}), 8: (1, {'@': 154}), 3: (1, {'@': 154}), 29: (1, {'@': 154}), 4: (1, {'@': 154}), 1: (1, {'@': 154}), 6: (1, {'@': 154})}, 178: {52: (0, 295), 68: (0, 168), 46: (0, 151), 70: (0, 283), 3: (0, 26), 5: (0, 153), 14: (0, 180), 59: (0, 1), 65: (0, 224), 27: (0, 364), 60: (0, 31), 61: (0, 289), 62: (0, 298), 69: (0, 164), 73: (0, 216)}, 179: {124: (0, 422), 125: (0, 401), 44: (0, 369)}, 180: {27: (1, {'@': 155}), 3: (1, {'@': 155}), 46: (1, {'@': 155}), 52: (1, {'@': 155})}, 181: {52: (0, 295), 68: (0, 168), 46: (0, 151), 70: (0, 283), 96: (0, 410), 3: (0, 26), 5: (0, 153), 59: (0, 1), 65: (0, 224), 27: (0, 364), 60: (0, 31), 61: (0, 289), 69: (0, 155), 62: (0, 298), 73: (0, 216), 97: (0, 159), 29: (1, {'@': 86})}, 182: {52: (0, 295), 76: (0, 353), 36: (0, 312), 77: (0, 301), 72: (0, 300), 38: (0, 63), 51: (0, 310), 5: (0, 346), 78: (0, 306), 79: (0, 61), 80: (0, 340), 50: (0, 311), 81: (0, 46), 39: (0, 44), 95: (0, 407), 82: (0, 38), 83: (0, 357), 68: (0, 361), 48: (0, 356), 46: (0, 348), 84: (0, 204), 27: (0, 173), 85: (0, 233), 47: (0, 193), 14: (0, 56), 86: (0, 221), 87: (0, 238), 37: (0, 41), 88: (0, 58), 89: (0, 48), 22: (0, 36), 3: (0, 26), 56: (0, 37), 90: (0, 55), 18: (0, 43), 19: (0, 16), 91: (0, 197), 92: (0, 231), 93: (0, 8), 94: (0, 192), 28: (0, 19), 25: (0, 32), 49: (0, 228)}, 183: {116: (0, 355), 5: (0, 342), 3: (0, 26)}, 184: {27: (1, {'@': 156}), 3: (1, {'@': 156}), 46: (1, {'@': 156}), 52: (1, {'@': 156})}, 185: {14: (1, {'@': 157}), 36: (1, {'@': 157}), 37: (1, {'@': 157}), 48: (1, {'@': 157}), 18: (1, {'@': 157}), 49: (1, {'@': 157}), 22: (1, {'@': 157}), 3: (1, {'@': 157}), 29: (1, {'@': 157}), 25: (1, {'@': 157}), 51: (1, {'@': 157}), 27: (1, {'@': 157}), 28: (1, {'@': 157}), 38: (1, {'@': 157}), 19: (1, {'@': 157}), 56: (1, {'@': 157}), 50: (1, {'@': 157}), 88: (1, {'@': 157}), 89: (1, {'@': 157}), 47: (1, {'@': 157}), 82: (1, {'@': 157}), 90: (1, {'@': 157}), 39: (1, {'@': 157}), 46: (1, {'@': 157}), 52: (1, {'@': 157})}, 186: {20: (0, 223), 29: (0, 220)}, 187: {52: (0, 295), 76: (0, 353), 36: (0, 312), 77: (0, 301), 72: (0, 300), 38: (0, 63), 51: (0, 310), 5: (0, 346), 78: (0, 306), 79: (0, 61), 80: (0, 340), 50: (0, 311), 81: (0, 46), 39: (0, 44), 82: (0, 38), 83: (0, 357), 68: (0, 361), 48: (0, 356), 46: (0, 348), 84: (0, 204), 27: (0, 173), 85: (0, 233), 47: (0, 193), 37: (0, 41), 14: (0, 56), 86: (0, 221), 87: (0, 238), 88: (0, 58), 89: (0, 48), 22: (0, 36), 3: (0, 26), 56: (0, 37), 90: (0, 55), 18: (0, 43), 19: (0, 16), 91: (0, 197), 92: (0, 231), 93: (0, 8), 94: (0, 192), 28: (0, 19), 95: (0, 377), 25: (0, 32), 49: (0, 228)}, 188: {45: (1, {'@': 158}), 44: (1, {'@': 158})}, 189: {14: (0, 60)}, 190: {30: (0, 85)}, 191: {29: (1, {'@': 159}), 30: (1, {'@': 159}), 36: (1, {'@': 159}), 33: (1, {'@': 159}), 20: (1, {'@': 159})}, 192: {14: (1, {'@': 160}), 36: (1, {'@': 160}), 13: (1, {'@': 160}), 34: (1, {'@': 160}), 37: (1, {'@': 160}), 17: (1, {'@': 160}), 35: (1, {'@': 160}), 38: (1, {'@': 160}), 48: (1, {'@': 160}), 18: (1, {'@': 160}), 19: (1, {'@': 160}), 49: (1, {'@': 160}), 22: (1, {'@': 160}), 50: (1, {'@': 160}), 3: (1, {'@': 160}), 24: (1, {'@': 160}), 47: (1, {'@': 160}), 25: (1, {'@': 160}), 39: (1, {'@': 160}), 51: (1, {'@': 160}), 27: (1, {'@': 160}), 28: (1, {'@': 160}), 46: (1, {'@': 160}), 52: (1, {'@': 160}), 42: (1, {'@': 160}), 16: (1, {'@': 160}), 40: (1, {'@': 160}), 32: (1, {'@': 160}), 43: (1, {'@': 160}), 29: (1, {'@': 160}), 45: (1, {'@': 160}), 30: (1, {'@': 160}), 41: (1, {'@': 160}), 33: (1, {'@': 160}), 44: (1, {'@': 160}), 20: (1, {'@': 160})}, 193: {95: (0, 287), 52: (0, 295), 76: (0, 353), 38: (0, 63), 5: (0, 346), 80: (0, 340), 50: (0, 311), 39: (0, 44), 83: (0, 357), 48: (0, 356), 84: (0, 204), 27: (0, 173), 14: (0, 56), 86: (0, 221), 46: (0, 348), 77: (0, 301), 33: (0, 120), 47: (0, 193), 89: (0, 48), 3: (0, 26), 56: (0, 37), 91: (0, 197), 92: (0, 231), 79: (0, 61), 94: (0, 192), 90: (0, 55), 25: (0, 32), 49: (0, 228), 37: (0, 41), 36: (0, 312), 72: (0, 300), 51: (0, 310), 78: (0, 306), 81: (0, 46), 68: (0, 361), 82: (0, 38), 85: (0, 233), 87: (0, 238), 88: (0, 58), 22: (0, 36), 18: (0, 43), 19: (0, 16), 93: (0, 8), 28: (0, 19)}, 194: {31: (0, 213)}, 195: {20: (1, {'@': 161}), 25: (1, {'@': 161}), 18: (1, {'@': 161}), 26: (1, {'@': 161}), 16: (1, {'@': 161}), 31: (1, {'@': 161}), 32: (1, {'@': 161}), 2: (1, {'@': 161}), 10: (1, {'@': 161}), 8: (1, {'@': 161}), 3: (1, {'@': 161}), 29: (1, {'@': 161}), 4: (1, {'@': 161}), 1: (1, {'@': 161}), 6: (1, {'@': 161})}, 196: {43: (0, 387), 34: (1, {'@': 162}), 16: (1, {'@': 162}), 41: (1, {'@': 162}), 42: (1, {'@': 162}), 32: (1, {'@': 162}), 33: (1, {'@': 162}), 44: (1, {'@': 162}), 29: (1, {'@': 162}), 45: (1, {'@': 162}), 30: (1, {'@': 162})}, 197: {14: (1, {'@': 163}), 36: (1, {'@': 163}), 13: (1, {'@': 163}), 34: (1, {'@': 163}), 37: (1, {'@': 163}), 17: (1, {'@': 163}), 35: (1, {'@': 163}), 38: (1, {'@': 163}), 48: (1, {'@': 163}), 18: (1, {'@': 163}), 19: (1, {'@': 163}), 49: (1, {'@': 163}), 22: (1, {'@': 163}), 50: (1, {'@': 163}), 3: (1, {'@': 163}), 24: (1, {'@': 163}), 47: (1, {'@': 163}), 25: (1, {'@': 163}), 39: (1, {'@': 163}), 51: (1, {'@': 163}), 27: (1, {'@': 163}), 28: (1, {'@': 163}), 46: (1, {'@': 163}), 52: (1, {'@': 163}), 42: (1, {'@': 163}), 16: (1, {'@': 163}), 40: (1, {'@': 163}), 32: (1, {'@': 163}), 43: (1, {'@': 163}), 29: (1, {'@': 163}), 45: (1, {'@': 163}), 30: (1, {'@': 163}), 41: (1, {'@': 163}), 33: (1, {'@': 163}), 44: (1, {'@': 163}), 20: (1, {'@': 163})}, 198: {14: (1, {'@': 164}), 13: (1, {'@': 164}), 16: (1, {'@': 164}), 8: (1, {'@': 164}), 17: (1, {'@': 164}), 18: (1, {'@': 164}), 20: (1, {'@': 164}), 21: (1, {'@': 164}), 22: (1, {'@': 164}), 32: (1, {'@': 164}), 2: (1, {'@': 164}), 24: (1, {'@': 164}), 3: (1, {'@': 164}), 29: (1, {'@': 164}), 25: (1, {'@': 164}), 6: (1, {'@': 164}), 30: (1, {'@': 164}), 27: (1, {'@': 164}), 34: (1, {'@': 164}), 28: (1, {'@': 164}), 31: (1, {'@': 164}), 15: (1, {'@': 164}), 4: (1, {'@': 164}), 1: (1, {'@': 164}), 19: (1, {'@': 164}), 23: (1, {'@': 164}), 10: (1, {'@': 164}), 33: (1, {'@': 164}), 26: (1, {'@': 164})}, 199: {29: (0, 65)}, 200: {39: (0, 44), 36: (0, 312), 28: (0, 19), 77: (0, 301), 14: (0, 56), 22: (0, 36), 40: (0, 64), 38: (0, 63), 25: (0, 32), 18: (0, 43), 19: (0, 16), 37: (0, 41), 81: (0, 126), 93: (0, 8)}, 201: {3: (1, {'@': 165})}, 202: {33: (1, {'@': 166}), 30: (1, {'@': 166})}, 203: {52: (0, 295), 46: (0, 237), 68: (0, 191), 47: (0, 203), 118: (0, 281), 3: (0, 26), 49: (0, 228), 5: (0, 176), 72: (0, 241), 33: (0, 278)}, 204: {126: (0, 324), 27: (0, 333), 22: (1, {'@': 167}), 14: (1, {'@': 167}), 36: (1, {'@': 167}), 34: (1, {'@': 167}), 37: (1, {'@': 167}), 38: (1, {'@': 167}), 39: (1, {'@': 167}), 25: (1, {'@': 167}), 18: (1, {'@': 167}), 19: (1, {'@': 167}), 28: (1, {'@': 167}), 40: (1, {'@': 167}), 16: (1, {'@': 167}), 41: (1, {'@': 167}), 42: (1, {'@': 167}), 32: (1, {'@': 167}), 43: (1, {'@': 167}), 33: (1, {'@': 167}), 44: (1, {'@': 167}), 29: (1, {'@': 167}), 45: (1, {'@': 167}), 30: (1, {'@': 167})}, 205: {31: (0, 239), 20: (0, 223)}, 206: {27: (1, {'@': 168}), 3: (1, {'@': 168}), 46: (1, {'@': 168}), 52: (1, {'@': 168})}, 207: {29: (0, 71)}, 208: {30: (0, 374), 29: (1, {'@': 169})}, 209: {72: (0, 112), 31: (0, 102), 117: (0, 81), 49: (0, 228)}, 210: {14: (0, 49)}, 211: {52: (0, 295), 68: (0, 168), 46: (0, 151), 70: (0, 283), 3: (0, 26), 5: (0, 153), 59: (0, 1), 65: (0, 224), 27: (0, 364), 60: (0, 31), 61: (0, 289), 69: (0, 155), 62: (0, 298), 96: (0, 397), 73: (0, 216), 97: (0, 159), 29: (1, {'@': 86})}, 212: {52: (0, 295), 55: (0, 242), 56: (0, 7), 46: (0, 163), 57: (0, 11), 58: (0, 362), 5: (0, 153), 59: (0, 1), 27: (0, 364), 60: (0, 31), 48: (0, 313), 63: (0, 232), 61: (0, 289), 62: (0, 298), 51: (0, 222), 64: (0, 183), 65: (0, 224), 66: (0, 201), 67: (0, 174), 69: (0, 177), 70: (0, 283), 68: (0, 168), 3: (0, 26), 71: (0, 317), 72: (0, 360), 49: (0, 228), 73: (0, 216), 19: (0, 170), 74: (0, 308)}, 213: {14: (1, {'@': 170}), 36: (1, {'@': 170}), 13: (1, {'@': 170}), 34: (1, {'@': 170}), 37: (1, {'@': 170}), 17: (1, {'@': 170}), 35: (1, {'@': 170}), 38: (1, {'@': 170}), 48: (1, {'@': 170}), 18: (1, {'@': 170}), 19: (1, {'@': 170}), 49: (1, {'@': 170}), 22: (1, {'@': 170}), 50: (1, {'@': 170}), 3: (1, {'@': 170}), 24: (1, {'@': 170}), 47: (1, {'@': 170}), 25: (1, {'@': 170}), 39: (1, {'@': 170}), 51: (1, {'@': 170}), 27: (1, {'@': 170}), 28: (1, {'@': 170}), 46: (1, {'@': 170}), 52: (1, {'@': 170}), 42: (1, {'@': 170}), 16: (1, {'@': 170}), 40: (1, {'@': 170}), 32: (1, {'@': 170}), 43: (1, {'@': 170}), 29: (1, {'@': 170}), 45: (1, {'@': 170}), 30: (1, {'@': 170}), 41: (1, {'@': 170}), 33: (1, {'@': 170}), 44: (1, {'@': 170}), 20: (1, {'@': 170})}, 214: {29: (0, 169)}, 215: {29: (0, 119)}, 216: {14: (1, {'@': 171}), 15: (1, {'@': 171}), 13: (1, {'@': 171}), 11: (1, {'@': 171}), 16: (1, {'@': 171}), 17: (1, {'@': 171}), 18: (1, {'@': 171}), 19: (1, {'@': 171}), 20: (1, {'@': 171}), 21: (1, {'@': 171}), 22: (1, {'@': 171}), 23: (1, {'@': 171}), 24: (1, {'@': 171}), 25: (1, {'@': 171}), 26: (1, {'@': 171}), 27: (1, {'@': 171}), 28: (1, {'@': 171}), 29: (1, {'@': 171}), 30: (1, {'@': 171}), 31: (1, {'@': 171}), 8: (1, {'@': 171}), 34: (1, {'@': 171}), 4: (1, {'@': 171}), 1: (1, {'@': 171}), 32: (1, {'@': 171}), 2: (1, {'@': 171}), 33: (1, {'@': 171}), 10: (1, {'@': 171}), 3: (1, {'@': 171}), 6: (1, {'@': 171})}, 217: {52: (0, 295), 68: (0, 168), 46: (0, 151), 70: (0, 283), 3: (0, 26), 69: (0, 226), 5: (0, 153), 59: (0, 1), 65: (0, 224), 27: (0, 364), 60: (0, 31), 61: (0, 289), 62: (0, 298), 73: (0, 216)}, 218: {30: (0, 122)}, 219: {30: (0, 96)}, 220: {20: (1, {'@': 172}), 25: (1, {'@': 172}), 18: (1, {'@': 172}), 26: (1, {'@': 172}), 16: (1, {'@': 172}), 31: (1, {'@': 172}), 32: (1, {'@': 172}), 2: (1, {'@': 172}), 10: (1, {'@': 172}), 8: (1, {'@': 172}), 3: (1, {'@': 172}), 29: (1, {'@': 172}), 4: (1, {'@': 172}), 1: (1, {'@': 172}), 6: (1, {'@': 172})}, 221: {17: (0, 97), 127: (0, 89), 22: (1, {'@': 173}), 14: (1, {'@': 173}), 36: (1, {'@': 173}), 37: (1, {'@': 173}), 24: (1, {'@': 173}), 27: (1, {'@': 173}), 19: (1, {'@': 173}), 38: (1, {'@': 173}), 39: (1, {'@': 173}), 25: (1, {'@': 173}), 18: (1, {'@': 173}), 34: (1, {'@': 173}), 28: (1, {'@': 173}), 40: (1, {'@': 173}), 16: (1, {'@': 173}), 41: (1, {'@': 173}), 42: (1, {'@': 173}), 32: (1, {'@': 173}), 43: (1, {'@': 173}), 33: (1, {'@': 173}), 44: (1, {'@': 173}), 29: (1, {'@': 173}), 45: (1, {'@': 173}), 30: (1, {'@': 173})}, 222: {20: (1, {'@': 174}), 25: (1, {'@': 174}), 18: (1, {'@': 174}), 26: (1, {'@': 174}), 16: (1, {'@': 174}), 31: (1, {'@': 174}), 32: (1, {'@': 174}), 2: (1, {'@': 174}), 10: (1, {'@': 174}), 8: (1, {'@': 174}), 3: (1, {'@': 174}), 29: (1, {'@': 174}), 4: (1, {'@': 174}), 1: (1, {'@': 174}), 6: (1, {'@': 174})}, 223: {52: (0, 295), 55: (0, 242), 56: (0, 7), 46: (0, 163), 57: (0, 11), 58: (0, 362), 5: (0, 153), 59: (0, 1), 27: (0, 364), 60: (0, 31), 48: (0, 313), 61: (0, 289), 63: (0, 240), 62: (0, 298), 51: (0, 222), 64: (0, 183), 65: (0, 224), 66: (0, 201), 67: (0, 174), 69: (0, 177), 70: (0, 283), 68: (0, 168), 3: (0, 26), 71: (0, 317), 72: (0, 360), 49: (0, 228), 73: (0, 216), 19: (0, 170), 74: (0, 308)}, 224: {128: (0, 292), 24: (0, 347), 20: (1, {'@': 175}), 21: (1, {'@': 175}), 22: (1, {'@': 175}), 23: (1, {'@': 175}), 14: (1, {'@': 175}), 15: (1, {'@': 175}), 13: (1, {'@': 175}), 16: (1, {'@': 175}), 19: (1, {'@': 175}), 25: (1, {'@': 175}), 18: (1, {'@': 175}), 26: (1, {'@': 175}), 27: (1, {'@': 175}), 28: (1, {'@': 175}), 29: (1, {'@': 175}), 30: (1, {'@': 175}), 31: (1, {'@': 175}), 8: (1, {'@': 175}), 1: (1, {'@': 175}), 32: (1, {'@': 175}), 2: (1, {'@': 175}), 10: (1, {'@': 175}), 3: (1, {'@': 175}), 6: (1, {'@': 175}), 4: (1, {'@': 175}), 33: (1, {'@': 175}), 34: (1, {'@': 175})}, 225: {52: (0, 295), 55: (0, 242), 56: (0, 7), 46: (0, 163), 57: (0, 11), 58: (0, 362), 5: (0, 153), 59: (0, 1), 27: (0, 364), 60: (0, 31), 63: (0, 412), 48: (0, 313), 61: (0, 289), 62: (0, 298), 51: (0, 222), 64: (0, 183), 65: (0, 224), 66: (0, 201), 67: (0, 174), 69: (0, 177), 70: (0, 283), 68: (0, 168), 3: (0, 26), 71: (0, 317), 72: (0, 360), 49: (0, 228), 73: (0, 216), 19: (0, 170), 74: (0, 308)}, 226: {20: (1, {'@': 176}), 25: (1, {'@': 176}), 18: (1, {'@': 176}), 26: (1, {'@': 176}), 16: (1, {'@': 176}), 31: (1, {'@': 176}), 32: (1, {'@': 176}), 2: (1, {'@': 176}), 10: (1, {'@': 176}), 8: (1, {'@': 176}), 3: (1, {'@': 176}), 29: (1, {'@': 176}), 4: (1, {'@': 176}), 1: (1, {'@': 176}), 6: (1, {'@': 176})}, 227: {29: (0, 80)}, 228: {20: (1, {'@': 177}), 25: (1, {'@': 177}), 18: (1, {'@': 177}), 26: (1, {'@': 177}), 16: (1, {'@': 177}), 14: (1, {'@': 177}), 36: (1, {'@': 177}), 13: (1, {'@': 177}), 34: (1, {'@': 177}), 37: (1, {'@': 177}), 17: (1, {'@': 177}), 35: (1, {'@': 177}), 38: (1, {'@': 177}), 48: (1, {'@': 177}), 19: (1, {'@': 177}), 49: (1, {'@': 177}), 22: (1, {'@': 177}), 50: (1, {'@': 177}), 3: (1, {'@': 177}), 24: (1, {'@': 177}), 47: (1, {'@': 177}), 39: (1, {'@': 177}), 51: (1, {'@': 177}), 27: (1, {'@': 177}), 28: (1, {'@': 177}), 46: (1, {'@': 177}), 52: (1, {'@': 177}), 42: (1, {'@': 177}), 40: (1, {'@': 177}), 32: (1, {'@': 177}), 43: (1, {'@': 177}), 29: (1, {'@': 177}), 45: (1, {'@': 177}), 30: (1, {'@': 177}), 41: (1, {'@': 177}), 33: (1, {'@': 177}), 44: (1, {'@': 177}), 31: (1, {'@': 177}), 2: (1, {'@': 177}), 10: (1, {'@': 177}), 8: (1, {'@': 177}), 4: (1, {'@': 177}), 1: (1, {'@': 177}), 6: (1, {'@': 177})}, 229: {20: (0, 223), 16: (1, {'@': 178}), 31: (1, {'@': 178}), 8: (1, {'@': 178}), 1: (1, {'@': 178}), 32: (1, {'@': 178}), 2: (1, {'@': 178}), 10: (1, {'@': 178}), 3: (1, {'@': 178}), 29: (1, {'@': 178}), 6: (1, {'@': 178}), 4: (1, {'@': 178})}, 230: {52: (0, 295), 76: (0, 353), 36: (0, 312), 77: (0, 301), 72: (0, 300), 38: (0, 63), 51: (0, 310), 5: (0, 346), 78: (0, 306), 79: (0, 61), 80: (0, 340), 50: (0, 311), 81: (0, 46), 39: (0, 44), 82: (0, 38), 83: (0, 357), 68: (0, 361), 48: (0, 356), 46: (0, 348), 84: (0, 204), 27: (0, 173), 95: (0, 253), 85: (0, 233), 47: (0, 193), 14: (0, 56), 86: (0, 221), 87: (0, 238), 37: (0, 41), 88: (0, 58), 89: (0, 48), 22: (0, 36), 3: (0, 26), 56: (0, 37), 90: (0, 55), 18: (0, 43), 19: (0, 16), 91: (0, 197), 92: (0, 231), 93: (0, 8), 94: (0, 192), 28: (0, 19), 25: (0, 32), 49: (0, 228)}, 231: {14: (1, {'@': 179}), 36: (1, {'@': 179}), 13: (1, {'@': 179}), 34: (1, {'@': 179}), 37: (1, {'@': 179}), 17: (1, {'@': 179}), 35: (1, {'@': 179}), 38: (1, {'@': 179}), 48: (1, {'@': 179}), 18: (1, {'@': 179}), 19: (1, {'@': 179}), 49: (1, {'@': 179}), 22: (1, {'@': 179}), 50: (1, {'@': 179}), 3: (1, {'@': 179}), 24: (1, {'@': 179}), 47: (1, {'@': 179}), 25: (1, {'@': 179}), 39: (1, {'@': 179}), 51: (1, {'@': 179}), 27: (1, {'@': 179}), 28: (1, {'@': 179}), 46: (1, {'@': 179}), 52: (1, {'@': 179}), 42: (1, {'@': 179}), 16: (1, {'@': 179}), 40: (1, {'@': 179}), 32: (1, {'@': 179}), 43: (1, {'@': 179}), 29: (1, {'@': 179}), 45: (1, {'@': 179}), 30: (1, {'@': 179}), 41: (1, {'@': 179}), 33: (1, {'@': 179}), 44: (1, {'@': 179}), 20: (1, {'@': 179})}, 232: {20: (0, 223), 16: (1, {'@': 180}), 31: (1, {'@': 180}), 8: (1, {'@': 180}), 1: (1, {'@': 180}), 32: (1, {'@': 180}), 2: (1, {'@': 180}), 10: (1, {'@': 180}), 3: (1, {'@': 180}), 29: (1, {'@': 180}), 6: (1, {'@': 180}), 4: (1, {'@': 180})}, 233: {14: (1, {'@': 181}), 36: (1, {'@': 181}), 13: (1, {'@': 181}), 34: (1, {'@': 181}), 37: (1, {'@': 181}), 17: (1, {'@': 181}), 35: (1, {'@': 181}), 38: (1, {'@': 181}), 48: (1, {'@': 181}), 18: (1, {'@': 181}), 19: (1, {'@': 181}), 49: (1, {'@': 181}), 22: (1, {'@': 181}), 50: (1, {'@': 181}), 3: (1, {'@': 181}), 24: (1, {'@': 181}), 47: (1, {'@': 181}), 25: (1, {'@': 181}), 39: (1, {'@': 181}), 51: (1, {'@': 181}), 27: (1, {'@': 181}), 28: (1, {'@': 181}), 46: (1, {'@': 181}), 52: (1, {'@': 181}), 42: (1, {'@': 181}), 16: (1, {'@': 181}), 40: (1, {'@': 181}), 32: (1, {'@': 181}), 43: (1, {'@': 181}), 29: (1, {'@': 181}), 45: (1, {'@': 181}), 30: (1, {'@': 181}), 41: (1, {'@': 181}), 33: (1, {'@': 181}), 44: (1, {'@': 181}), 20: (1, {'@': 181})}, 234: {52: (0, 295), 69: (0, 45), 68: (0, 168), 46: (0, 151), 70: (0, 283), 3: (0, 26), 5: (0, 153), 59: (0, 1), 65: (0, 224), 27: (0, 364), 60: (0, 31), 61: (0, 289), 62: (0, 298), 73: (0, 216)}, 235: {27: (1, {'@': 182}), 3: (1, {'@': 182}), 46: (1, {'@': 182}), 52: (1, {'@': 182})}, 236: {52: (0, 295), 68: (0, 168), 46: (0, 151), 70: (0, 105), 59: (0, 1), 3: (0, 26), 5: (0, 406), 73: (0, 216), 27: (0, 364)}, 237: {52: (0, 295), 68: (0, 191), 129: (0, 106), 47: (0, 203), 3: (0, 26), 5: (0, 176), 72: (0, 241), 46: (0, 237), 118: (0, 95), 49: (0, 228)}, 238: {130: (0, 83), 24: (0, 99), 22: (1, {'@': 183}), 14: (1, {'@': 183}), 36: (1, {'@': 183}), 34: (1, {'@': 183}), 37: (1, {'@': 183}), 19: (1, {'@': 183}), 38: (1, {'@': 183}), 39: (1, {'@': 183}), 25: (1, {'@': 183}), 18: (1, {'@': 183}), 27: (1, {'@': 183}), 28: (1, {'@': 183}), 40: (1, {'@': 183}), 16: (1, {'@': 183}), 41: (1, {'@': 183}), 42: (1, {'@': 183}), 32: (1, {'@': 183}), 43: (1, {'@': 183}), 33: (1, {'@': 183}), 44: (1, {'@': 183}), 29: (1, {'@': 183}), 45: (1, {'@': 183}), 30: (1, {'@': 183})}, 239: {14: (1, {'@': 184}), 36: (1, {'@': 184}), 13: (1, {'@': 184}), 34: (1, {'@': 184}), 37: (1, {'@': 184}), 17: (1, {'@': 184}), 35: (1, {'@': 184}), 38: (1, {'@': 184}), 48: (1, {'@': 184}), 18: (1, {'@': 184}), 19: (1, {'@': 184}), 49: (1, {'@': 184}), 22: (1, {'@': 184}), 50: (1, {'@': 184}), 3: (1, {'@': 184}), 24: (1, {'@': 184}), 47: (1, {'@': 184}), 25: (1, {'@': 184}), 39: (1, {'@': 184}), 51: (1, {'@': 184}), 27: (1, {'@': 184}), 28: (1, {'@': 184}), 46: (1, {'@': 184}), 52: (1, {'@': 184}), 42: (1, {'@': 184}), 16: (1, {'@': 184}), 40: (1, {'@': 184}), 32: (1, {'@': 184}), 43: (1, {'@': 184}), 29: (1, {'@': 184}), 45: (1, {'@': 184}), 30: (1, {'@': 184}), 41: (1, {'@': 184}), 33: (1, {'@': 184}), 44: (1, {'@': 184}), 20: (1, {'@': 184})}, 240: {20: (0, 223), 16: (1, {'@': 185}), 31: (1, {'@': 185}), 8: (1, {'@': 185}), 1: (1, {'@': 185}), 32: (1, {'@': 185}), 2: (1, {'@': 185}), 10: (1, {'@': 185}), 3: (1, {'@': 185}), 29: (1, {'@': 185}), 6: (1, {'@': 185}), 4: (1, {'@': 185})}, 241: {29: (1, {'@': 186}), 30: (1, {'@': 186}), 36: (1, {'@': 186}), 33: (1, {'@': 186}), 20: (1, {'@': 186})}, 242: {18: (0, 338), 25: (0, 302), 26: (0, 336), 20: (1, {'@': 187}), 16: (1, {'@': 187}), 31: (1, {'@': 187}), 8: (1, {'@': 187}), 1: (1, {'@': 187}), 32: (1, {'@': 187}), 2: (1, {'@': 187}), 10: (1, {'@': 187}), 3: (1, {'@': 187}), 29: (1, {'@': 187}), 6: (1, {'@': 187}), 4: (1, {'@': 187})}, 243: {52: (0, 295), 68: (0, 168), 46: (0, 151), 70: (0, 283), 3: (0, 26), 5: (0, 153), 59: (0, 1), 65: (0, 224), 69: (0, 195), 27: (0, 364), 60: (0, 31), 61: (0, 289), 62: (0, 298), 73: (0, 216)}, 244: {85: (0, 396), 50: (0, 311)}, 245: {34: (1, {'@': 188}), 16: (1, {'@': 188}), 41: (1, {'@': 188}), 42: (1, {'@': 188}), 32: (1, {'@': 188}), 43: (1, {'@': 188}), 33: (1, {'@': 188}), 44: (1, {'@': 188}), 29: (1, {'@': 188}), 45: (1, {'@': 188}), 30: (1, {'@': 188})}, 246: {52: (0, 295), 76: (0, 353), 38: (0, 63), 5: (0, 346), 80: (0, 340), 50: (0, 311), 39: (0, 44), 83: (0, 357), 48: (0, 356), 84: (0, 204), 27: (0, 173), 14: (0, 56), 86: (0, 221), 46: (0, 348), 77: (0, 301), 47: (0, 193), 89: (0, 48), 3: (0, 26), 56: (0, 37), 91: (0, 197), 92: (0, 231), 79: (0, 61), 94: (0, 192), 90: (0, 55), 95: (0, 393), 25: (0, 32), 49: (0, 228), 37: (0, 41), 36: (0, 312), 72: (0, 300), 51: (0, 310), 78: (0, 306), 81: (0, 46), 68: (0, 361), 82: (0, 38), 85: (0, 233), 87: (0, 238), 88: (0, 58), 22: (0, 36), 18: (0, 43), 19: (0, 16), 93: (0, 8), 28: (0, 19), 34: (1, {'@': 189}), 16: (1, {'@': 189}), 41: (1, {'@': 189}), 42: (1, {'@': 189}), 32: (1, {'@': 189}), 43: (1, {'@': 189}), 33: (1, {'@': 189}), 44: (1, {'@': 189}), 29: (1, {'@': 189}), 45: (1, {'@': 189}), 30: (1, {'@': 189})}, 247: {14: (1, {'@': 190}), 42: (1, {'@': 190}), 36: (1, {'@': 190}), 16: (1, {'@': 190}), 37: (1, {'@': 190}), 40: (1, {'@': 190}), 18: (1, {'@': 190}), 32: (1, {'@': 190}), 22: (1, {'@': 190}), 43: (1, {'@': 190}), 29: (1, {'@': 190}), 25: (1, {'@': 190}), 45: (1, {'@': 190}), 30: (1, {'@': 190}), 34: (1, {'@': 190}), 27: (1, {'@': 190}), 28: (1, {'@': 190}), 41: (1, {'@': 190}), 38: (1, {'@': 190}), 19: (1, {'@': 190}), 33: (1, {'@': 190}), 44: (1, {'@': 190}), 39: (1, {'@': 190})}, 248: {52: (0, 295), 76: (0, 353), 36: (0, 312), 77: (0, 301), 72: (0, 300), 38: (0, 63), 51: (0, 310), 5: (0, 346), 78: (0, 306), 79: (0, 61), 80: (0, 340), 50: (0, 311), 81: (0, 46), 39: (0, 44), 82: (0, 38), 83: (0, 357), 68: (0, 361), 48: (0, 356), 46: (0, 348), 84: (0, 204), 27: (0, 173), 85: (0, 233), 47: (0, 193), 37: (0, 41), 14: (0, 56), 86: (0, 221), 87: (0, 238), 95: (0, 275), 88: (0, 58), 89: (0, 48), 22: (0, 36), 3: (0, 26), 56: (0, 37), 90: (0, 55), 18: (0, 43), 19: (0, 16), 91: (0, 197), 92: (0, 231), 93: (0, 8), 94: (0, 192), 28: (0, 19), 25: (0, 32), 49: (0, 228)}, 249: {52: (0, 295), 46: (0, 237), 68: (0, 191), 47: (0, 203), 3: (0, 26), 118: (0, 280), 49: (0, 228), 5: (0, 176), 72: (0, 241)}, 250: {52: (0, 295), 46: (0, 237), 68: (0, 191), 47: (0, 203), 3: (0, 26), 49: (0, 228), 5: (0, 176), 118: (0, 274), 72: (0, 241)}, 251: {33: (0, 254)}, 252: {45: (1, {'@': 191}), 44: (1, {'@': 191})}, 253: {34: (1, {'@': 192}), 16: (1, {'@': 192}), 41: (1, {'@': 192}), 42: (1, {'@': 192}), 32: (1, {'@': 192}), 43: (1, {'@': 192}), 33: (1, {'@': 192}), 44: (1, {'@': 192}), 29: (1, {'@': 192}), 45: (1, {'@': 192}), 30: (1, {'@': 192})}, 254: {20: (1, {'@': 193}), 21: (1, {'@': 193}), 22: (1, {'@': 193}), 23: (1, {'@': 193}), 14: (1, {'@': 193}), 15: (1, {'@': 193}), 13: (1, {'@': 193}), 16: (1, {'@': 193}), 25: (1, {'@': 193}), 18: (1, {'@': 193}), 26: (1, {'@': 193}), 19: (1, {'@': 193}), 28: (1, {'@': 193}), 29: (1, {'@': 193}), 30: (1, {'@': 193}), 31: (1, {'@': 193}), 8: (1, {'@': 193}), 1: (1, {'@': 193}), 32: (1, {'@': 193}), 2: (1, {'@': 193}), 10: (1, {'@': 193}), 3: (1, {'@': 193}), 6: (1, {'@': 193}), 4: (1, {'@': 193})}, 255: {52: (0, 295), 68: (0, 168), 70: (0, 283), 46: (0, 151), 62: (0, 261), 3: (0, 26), 65: (0, 224), 5: (0, 406), 59: (0, 1), 27: (0, 364), 60: (0, 31), 61: (0, 289), 73: (0, 216)}, 256: {29: (1, {'@': 194}), 30: (1, {'@': 194}), 36: (1, {'@': 194}), 33: (1, {'@': 194}), 20: (1, {'@': 194})}, 257: {33: (0, 276), 30: (0, 279)}, 258: {36: (0, 249)}, 259: {20: (0, 223), 1: (1, {'@': 195}), 2: (1, {'@': 195}), 6: (1, {'@': 195}), 10: (1, {'@': 195}), 4: (1, {'@': 195}), 8: (1, {'@': 195}), 3: (1, {'@': 195}), 31: (1, {'@': 195})}, 260: {52: (0, 295), 76: (0, 353), 36: (0, 312), 77: (0, 301), 72: (0, 300), 38: (0, 63), 51: (0, 310), 5: (0, 346), 78: (0, 306), 79: (0, 61), 80: (0, 340), 50: (0, 311), 81: (0, 46), 39: (0, 44), 82: (0, 38), 83: (0, 357), 68: (0, 361), 48: (0, 356), 46: (0, 348), 84: (0, 204), 27: (0, 173), 85: (0, 233), 47: (0, 193), 37: (0, 41), 14: (0, 56), 86: (0, 221), 87: (0, 238), 88: (0, 58), 89: (0, 48), 22: (0, 36), 3: (0, 26), 56: (0, 37), 90: (0, 55), 18: (0, 43), 19: (0, 16), 91: (0, 197), 95: (0, 252), 92: (0, 231), 93: (0, 8), 94: (0, 192), 28: (0, 19), 25: (0, 32), 49: (0, 228)}, 261: {33: (0, 282)}, 262: {29: (1, {'@': 196}), 30: (1, {'@': 196}), 34: (1, {'@': 196})}, 263: {1: (1, {'@': 197}), 2: (1, {'@': 197}), 6: (1, {'@': 197}), 10: (1, {'@': 197}), 4: (1, {'@': 197}), 8: (1, {'@': 197}), 3: (1, {'@': 197}), 31: (1, {'@': 197})}, 264: {52: (0, 295), 55: (0, 242), 56: (0, 7), 46: (0, 163), 57: (0, 11), 58: (0, 362), 5: (0, 153), 59: (0, 1), 27: (0, 364), 60: (0, 31), 48: (0, 313), 61: (0, 289), 62: (0, 298), 51: (0, 222), 64: (0, 183), 65: (0, 224), 66: (0, 201), 67: (0, 174), 69: (0, 177), 70: (0, 283), 68: (0, 168), 63: (0, 259), 3: (0, 26), 71: (0, 317), 72: (0, 360), 49: (0, 228), 73: (0, 216), 19: (0, 170), 74: (0, 308)}, 265: {1: (1, {'@': 198}), 2: (1, {'@': 198}), 6: (1, {'@': 198}), 10: (1, {'@': 198}), 4: (1, {'@': 198}), 8: (1, {'@': 198}), 3: (1, {'@': 198}), 31: (1, {'@': 198})}, 266: {34: (1, {'@': 199})}, 267: {1: (1, {'@': 200}), 2: (1, {'@': 200}), 6: (1, {'@': 200}), 10: (1, {'@': 200}), 4: (1, {'@': 200}), 8: (1, {'@': 200}), 3: (1, {'@': 200}), 31: (1, {'@': 200})}, 268: {46: (0, 366)}, 269: {72: (0, 112), 117: (0, 368), 49: (0, 228)}, 270: {29: (1, {'@': 201})}, 271: {31: (1, {'@': 202}), 30: (1, {'@': 202})}, 272: {49: (1, {'@': 203}), 3: (1, {'@': 203}), 47: (1, {'@': 203}), 29: (1, {'@': 203}), 46: (1, {'@': 203}), 52: (1, {'@': 203})}, 273: {29: (1, {'@': 204}), 30: (1, {'@': 204}), 36: (1, {'@': 204}), 33: (1, {'@': 204}), 20: (1, {'@': 204})}, 274: {36: (0, 258), 33: (1, {'@': 205}), 30: (1, {'@': 205})}, 275: {34: (1, {'@': 206}), 16: (1, {'@': 206}), 41: (1, {'@': 206}), 42: (1, {'@': 206}), 32: (1, {'@': 206}), 43: (1, {'@': 206}), 33: (1, {'@': 206}), 44: (1, {'@': 206}), 29: (1, {'@': 206}), 45: (1, {'@': 206}), 30: (1, {'@': 206})}, 276: {29: (1, {'@': 207}), 30: (1, {'@': 207}), 36: (1, {'@': 207}), 33: (1, {'@': 207}), 20: (1, {'@': 207})}, 277: {34: (1, {'@': 208}), 16: (1, {'@': 208}), 41: (1, {'@': 208}), 42: (1, {'@': 208}), 32: (1, {'@': 208}), 43: (1, {'@': 208}), 33: (1, {'@': 208}), 44: (1, {'@': 208}), 29: (1, {'@': 208}), 45: (1, {'@': 208}), 30: (1, {'@': 208})}, 278: {29: (1, {'@': 209}), 30: (1, {'@': 209}), 36: (1, {'@': 209}), 33: (1, {'@': 209}), 20: (1, {'@': 209})}, 279: {52: (0, 295), 46: (0, 237), 68: (0, 191), 47: (0, 203), 3: (0, 26), 49: (0, 228), 5: (0, 176), 118: (0, 371), 72: (0, 241)}, 280: {36: (0, 258), 29: (1, {'@': 210}), 30: (1, {'@': 210}), 33: (1, {'@': 210}), 20: (1, {'@': 210})}, 281: {30: (0, 250), 36: (0, 258), 131: (0, 257), 33: (0, 256)}, 282: {20: (1, {'@': 211}), 21: (1, {'@': 211}), 22: (1, {'@': 211}), 23: (1, {'@': 211}), 14: (1, {'@': 211}), 15: (1, {'@': 211}), 13: (1, {'@': 211}), 16: (1, {'@': 211}), 25: (1, {'@': 211}), 18: (1, {'@': 211}), 26: (1, {'@': 211}), 19: (1, {'@': 211}), 28: (1, {'@': 211}), 29: (1, {'@': 211}), 30: (1, {'@': 211}), 31: (1, {'@': 211}), 8: (1, {'@': 211}), 1: (1, {'@': 211}), 32: (1, {'@': 211}), 2: (1, {'@': 211}), 10: (1, {'@': 211}), 3: (1, {'@': 211}), 6: (1, {'@': 211}), 4: (1, {'@': 211})}, 283: {132: (0, 373), 17: (0, 390), 20: (1, {'@': 212}), 21: (1, {'@': 212}), 22: (1, {'@': 212}), 23: (1, {'@': 212}), 14: (1, {'@': 212}), 15: (1, {'@': 212}), 13: (1, {'@': 212}), 16: (1, {'@': 212}), 24: (1, {'@': 212}), 27: (1, {'@': 212}), 25: (1, {'@': 212}), 18: (1, {'@': 212}), 26: (1, {'@': 212}), 19: (1, {'@': 212}), 28: (1, {'@': 212}), 29: (1, {'@': 212}), 30: (1, {'@': 212}), 31: (1, {'@': 212}), 8: (1, {'@': 212}), 34: (1, {'@': 212}), 4: (1, {'@': 212}), 1: (1, {'@': 212}), 32: (1, {'@': 212}), 2: (1, {'@': 212}), 33: (1, {'@': 212}), 10: (1, {'@': 212}), 3: (1, {'@': 212}), 6: (1, {'@': 212})}, 284: {52: (0, 295), 76: (0, 353), 36: (0, 312), 77: (0, 301), 72: (0, 300), 38: (0, 63), 51: (0, 310), 5: (0, 346), 78: (0, 306), 79: (0, 61), 80: (0, 340), 50: (0, 311), 81: (0, 46), 39: (0, 44), 82: (0, 38), 83: (0, 357), 68: (0, 361), 48: (0, 356), 46: (0, 348), 84: (0, 204), 27: (0, 173), 85: (0, 233), 47: (0, 193), 37: (0, 41), 14: (0, 56), 86: (0, 221), 87: (0, 238), 95: (0, 398), 88: (0, 58), 89: (0, 48), 22: (0, 36), 3: (0, 26), 56: (0, 37), 90: (0, 55), 18: (0, 43), 19: (0, 16), 91: (0, 197), 92: (0, 231), 93: (0, 8), 94: (0, 192), 28: (0, 19), 25: (0, 32), 49: (0, 228)}, 285: {11: (0, 304), 14: (1, {'@': 213}), 13: (1, {'@': 213}), 16: (1, {'@': 213}), 8: (1, {'@': 213}), 17: (1, {'@': 213}), 18: (1, {'@': 213}), 20: (1, {'@': 213}), 21: (1, {'@': 213}), 22: (1, {'@': 213}), 32: (1, {'@': 213}), 2: (1, {'@': 213}), 24: (1, {'@': 213}), 3: (1, {'@': 213}), 29: (1, {'@': 213}), 25: (1, {'@': 213}), 6: (1, {'@': 213}), 30: (1, {'@': 213}), 27: (1, {'@': 213}), 34: (1, {'@': 213}), 28: (1, {'@': 213}), 31: (1, {'@': 213}), 15: (1, {'@': 213}), 4: (1, {'@': 213}), 1: (1, {'@': 213}), 19: (1, {'@': 213}), 23: (1, {'@': 213}), 33: (1, {'@': 213}), 10: (1, {'@': 213}), 26: (1, {'@': 213})}, 286: {52: (0, 295), 68: (0, 168), 46: (0, 151), 70: (0, 283), 69: (0, 50), 3: (0, 26), 5: (0, 153), 59: (0, 1), 65: (0, 224), 27: (0, 364), 60: (0, 31), 61: (0, 289), 62: (0, 298), 73: (0, 216)}, 287: {34: (0, 363), 30: (0, 284), 33: (0, 330), 133: (0, 326)}, 288: {52: (0, 295), 68: (0, 168), 46: (0, 151), 59: (0, 75), 3: (0, 26), 5: (0, 406), 73: (0, 216), 27: (0, 364)}, 289: {20: (1, {'@': 214}), 21: (1, {'@': 214}), 22: (1, {'@': 214}), 23: (1, {'@': 214}), 14: (1, {'@': 214}), 15: (1, {'@': 214}), 13: (1, {'@': 214}), 16: (1, {'@': 214}), 25: (1, {'@': 214}), 18: (1, {'@': 214}), 26: (1, {'@': 214}), 19: (1, {'@': 214}), 28: (1, {'@': 214}), 29: (1, {'@': 214}), 30: (1, {'@': 214}), 31: (1, {'@': 214}), 8: (1, {'@': 214}), 1: (1, {'@': 214}), 32: (1, {'@': 214}), 2: (1, {'@': 214}), 10: (1, {'@': 214}), 3: (1, {'@': 214}), 6: (1, {'@': 214}), 4: (1, {'@': 214}), 33: (1, {'@': 214}), 34: (1, {'@': 214})}, 290: {14: (1, {'@': 215}), 36: (1, {'@': 215}), 13: (1, {'@': 215}), 34: (1, {'@': 215}), 37: (1, {'@': 215}), 17: (1, {'@': 215}), 35: (1, {'@': 215}), 38: (1, {'@': 215}), 48: (1, {'@': 215}), 18: (1, {'@': 215}), 19: (1, {'@': 215}), 49: (1, {'@': 215}), 22: (1, {'@': 215}), 50: (1, {'@': 215}), 3: (1, {'@': 215}), 24: (1, {'@': 215}), 47: (1, {'@': 215}), 25: (1, {'@': 215}), 39: (1, {'@': 215}), 51: (1, {'@': 215}), 27: (1, {'@': 215}), 28: (1, {'@': 215}), 46: (1, {'@': 215}), 52: (1, {'@': 215}), 42: (1, {'@': 215}), 16: (1, {'@': 215}), 40: (1, {'@': 215}), 32: (1, {'@': 215}), 43: (1, {'@': 215}), 29: (1, {'@': 215}), 45: (1, {'@': 215}), 30: (1, {'@': 215}), 41: (1, {'@': 215}), 33: (1, {'@': 215}), 44: (1, {'@': 215}), 20: (1, {'@': 215})}, 291: {46: (0, 101)}, 292: {24: (0, 40), 20: (1, {'@': 216}), 21: (1, {'@': 216}), 22: (1, {'@': 216}), 23: (1, {'@': 216}), 14: (1, {'@': 216}), 15: (1, {'@': 216}), 13: (1, {'@': 216}), 16: (1, {'@': 216}), 19: (1, {'@': 216}), 25: (1, {'@': 216}), 18: (1, {'@': 216}), 26: (1, {'@': 216}), 27: (1, {'@': 216}), 28: (1, {'@': 216}), 29: (1, {'@': 216}), 30: (1, {'@': 216}), 31: (1, {'@': 216}), 8: (1, {'@': 216}), 1: (1, {'@': 216}), 32: (1, {'@': 216}), 2: (1, {'@': 216}), 10: (1, {'@': 216}), 3: (1, {'@': 216}), 6: (1, {'@': 216}), 4: (1, {'@': 216}), 33: (1, {'@': 216}), 34: (1, {'@': 216})}, 293: {14: (1, {'@': 217}), 36: (1, {'@': 217}), 13: (1, {'@': 217}), 34: (1, {'@': 217}), 37: (1, {'@': 217}), 17: (1, {'@': 217}), 35: (1, {'@': 217}), 38: (1, {'@': 217}), 48: (1, {'@': 217}), 18: (1, {'@': 217}), 19: (1, {'@': 217}), 49: (1, {'@': 217}), 22: (1, {'@': 217}), 50: (1, {'@': 217}), 3: (1, {'@': 217}), 24: (1, {'@': 217}), 47: (1, {'@': 217}), 25: (1, {'@': 217}), 39: (1, {'@': 217}), 51: (1, {'@': 217}), 27: (1, {'@': 217}), 28: (1, {'@': 217}), 46: (1, {'@': 217}), 52: (1, {'@': 217}), 42: (1, {'@': 217}), 16: (1, {'@': 217}), 40: (1, {'@': 217}), 32: (1, {'@': 217}), 43: (1, {'@': 217}), 29: (1, {'@': 217}), 45: (1, {'@': 217}), 30: (1, {'@': 217}), 41: (1, {'@': 217}), 33: (1, {'@': 217}), 44: (1, {'@': 217}), 20: (1, {'@': 217})}, 294: {34: (0, 109), 33: (0, 107)}, 295: {14: (1, {'@': 218}), 15: (1, {'@': 218}), 13: (1, {'@': 218}), 11: (1, {'@': 218}), 16: (1, {'@': 218}), 17: (1, {'@': 218}), 18: (1, {'@': 218}), 19: (1, {'@': 218}), 20: (1, {'@': 218}), 21: (1, {'@': 218}), 22: (1, {'@': 218}), 23: (1, {'@': 218}), 24: (1, {'@': 218}), 25: (1, {'@': 218}), 26: (1, {'@': 218}), 27: (1, {'@': 218}), 28: (1, {'@': 218}), 36: (1, {'@': 218}), 34: (1, {'@': 218}), 37: (1, {'@': 218}), 35: (1, {'@': 218}), 38: (1, {'@': 218}), 48: (1, {'@': 218}), 49: (1, {'@': 218}), 50: (1, {'@': 218}), 3: (1, {'@': 218}), 47: (1, {'@': 218}), 39: (1, {'@': 218}), 51: (1, {'@': 218}), 46: (1, {'@': 218}), 52: (1, {'@': 218}), 42: (1, {'@': 218}), 40: (1, {'@': 218}), 32: (1, {'@': 218}), 43: (1, {'@': 218}), 29: (1, {'@': 218}), 45: (1, {'@': 218}), 30: (1, {'@': 218}), 41: (1, {'@': 218}), 33: (1, {'@': 218}), 44: (1, {'@': 218}), 31: (1, {'@': 218}), 8: (1, {'@': 218}), 4: (1, {'@': 218}), 1: (1, {'@': 218}), 2: (1, {'@': 218}), 10: (1, {'@': 218}), 6: (1, {'@': 218})}, 296: {46: (0, 93), 14: (1, {'@': 219}), 15: (1, {'@': 219}), 13: (1, {'@': 219}), 11: (1, {'@': 219}), 16: (1, {'@': 219}), 17: (1, {'@': 219}), 18: (1, {'@': 219}), 19: (1, {'@': 219}), 20: (1, {'@': 219}), 21: (1, {'@': 219}), 22: (1, {'@': 219}), 23: (1, {'@': 219}), 24: (1, {'@': 219}), 25: (1, {'@': 219}), 26: (1, {'@': 219}), 27: (1, {'@': 219}), 28: (1, {'@': 219}), 29: (1, {'@': 219}), 30: (1, {'@': 219}), 31: (1, {'@': 219}), 8: (1, {'@': 219}), 34: (1, {'@': 219}), 4: (1, {'@': 219}), 1: (1, {'@': 219}), 32: (1, {'@': 219}), 2: (1, {'@': 219}), 33: (1, {'@': 219}), 10: (1, {'@': 219}), 3: (1, {'@': 219}), 6: (1, {'@': 219})}, 297: {46: (0, 136)}, 298: {20: (1, {'@': 150}), 21: (1, {'@': 150}), 22: (1, {'@': 150}), 23: (1, {'@': 150}), 14: (1, {'@': 150}), 15: (1, {'@': 150}), 13: (1, {'@': 150}), 16: (1, {'@': 150}), 25: (1, {'@': 150}), 18: (1, {'@': 150}), 26: (1, {'@': 150}), 19: (1, {'@': 150}), 28: (1, {'@': 150}), 29: (1, {'@': 150}), 30: (1, {'@': 150}), 31: (1, {'@': 150}), 8: (1, {'@': 150}), 1: (1, {'@': 150}), 32: (1, {'@': 150}), 2: (1, {'@': 150}), 10: (1, {'@': 150}), 3: (1, {'@': 150}), 6: (1, {'@': 150}), 4: (1, {'@': 150})}, 299: {52: (0, 295), 68: (0, 168), 46: (0, 151), 70: (0, 283), 14: (0, 51), 3: (0, 26), 5: (0, 153), 59: (0, 1), 65: (0, 224), 27: (0, 364), 60: (0, 31), 69: (0, 57), 61: (0, 289), 62: (0, 298), 73: (0, 216)}, 300: {14: (1, {'@': 220}), 36: (1, {'@': 220}), 13: (1, {'@': 220}), 34: (1, {'@': 220}), 37: (1, {'@': 220}), 17: (1, {'@': 220}), 35: (1, {'@': 220}), 38: (1, {'@': 220}), 48: (1, {'@': 220}), 18: (1, {'@': 220}), 19: (1, {'@': 220}), 49: (1, {'@': 220}), 22: (1, {'@': 220}), 50: (1, {'@': 220}), 3: (1, {'@': 220}), 24: (1, {'@': 220}), 47: (1, {'@': 220}), 25: (1, {'@': 220}), 39: (1, {'@': 220}), 51: (1, {'@': 220}), 27: (1, {'@': 220}), 28: (1, {'@': 220}), 46: (1, {'@': 220}), 52: (1, {'@': 220}), 42: (1, {'@': 220}), 16: (1, {'@': 220}), 40: (1, {'@': 220}), 32: (1, {'@': 220}), 43: (1, {'@': 220}), 29: (1, {'@': 220}), 45: (1, {'@': 220}), 30: (1, {'@': 220}), 41: (1, {'@': 220}), 33: (1, {'@': 220}), 44: (1, {'@': 220}), 20: (1, {'@': 220})}, 301: {39: (0, 44), 36: (0, 312), 28: (0, 19), 22: (0, 36), 14: (0, 56), 38: (0, 63), 25: (0, 32), 18: (0, 43), 19: (0, 16), 37: (0, 41), 93: (0, 144), 49: (1, {'@': 221}), 50: (1, {'@': 221}), 3: (1, {'@': 221}), 47: (1, {'@': 221}), 48: (1, {'@': 221}), 51: (1, {'@': 221}), 27: (1, {'@': 221}), 46: (1, {'@': 221}), 52: (1, {'@': 221}), 41: (1, {'@': 221}), 45: (1, {'@': 221}), 42: (1, {'@': 221}), 16: (1, {'@': 221}), 34: (1, {'@': 221}), 32: (1, {'@': 221}), 43: (1, {'@': 221}), 33: (1, {'@': 221}), 44: (1, {'@': 221}), 29: (1, {'@': 221}), 30: (1, {'@': 221})}, 302: {52: (0, 295), 55: (0, 242), 56: (0, 7), 46: (0, 163), 57: (0, 11), 58: (0, 362), 5: (0, 153), 59: (0, 1), 27: (0, 364), 60: (0, 31), 48: (0, 313), 63: (0, 39), 61: (0, 289), 62: (0, 298), 51: (0, 222), 64: (0, 183), 65: (0, 224), 66: (0, 201), 67: (0, 174), 69: (0, 177), 70: (0, 283), 68: (0, 168), 3: (0, 26), 71: (0, 317), 72: (0, 360), 49: (0, 228), 73: (0, 216), 19: (0, 170), 74: (0, 308)}, 303: {46: (0, 67)}, 304: {5: (0, 296), 3: (0, 26)}, 305: {52: (0, 295), 72: (0, 300), 51: (0, 310), 5: (0, 346), 78: (0, 306), 80: (0, 340), 50: (0, 311), 68: (0, 361), 48: (0, 356), 85: (0, 233), 46: (0, 348), 47: (0, 193), 86: (0, 221), 87: (0, 238), 84: (0, 247), 3: (0, 26), 91: (0, 197), 92: (0, 231), 94: (0, 192), 49: (0, 228)}, 306: {52: (0, 295), 47: (0, 193), 72: (0, 300), 3: (0, 26), 46: (0, 348), 51: (0, 310), 5: (0, 346), 91: (0, 197), 92: (0, 231), 50: (0, 311), 68: (0, 361), 48: (0, 356), 85: (0, 233), 134: (0, 2), 35: (0, 17), 49: (0, 228), 94: (0, 4), 22: (1, {'@': 222}), 14: (1, {'@': 222}), 36: (1, {'@': 222}), 13: (1, {'@': 222}), 37: (1, {'@': 222}), 24: (1, {'@': 222}), 17: (1, {'@': 222}), 27: (1, {'@': 222}), 19: (1, {'@': 222}), 38: (1, {'@': 222}), 39: (1, {'@': 222}), 25: (1, {'@': 222}), 18: (1, {'@': 222}), 34: (1, {'@': 222}), 28: (1, {'@': 222}), 40: (1, {'@': 222}), 41: (1, {'@': 222}), 42: (1, {'@': 222}), 16: (1, {'@': 222}), 32: (1, {'@': 222}), 43: (1, {'@': 222}), 33: (1, {'@': 222}), 44: (1, {'@': 222}), 29: (1, {'@': 222}), 45: (1, {'@': 222}), 30: (1, {'@': 222})}, 307: {20: (0, 223), 16: (0, 335)}, 308: {5: (0, 342), 3: (0, 26), 116: (0, 418)}, 309: {52: (0, 295), 47: (0, 193), 72: (0, 300), 3: (0, 26), 46: (0, 348), 51: (0, 310), 5: (0, 346), 86: (0, 382), 91: (0, 197), 92: (0, 231), 78: (0, 306), 80: (0, 340), 50: (0, 311), 94: (0, 192), 68: (0, 361), 48: (0, 356), 85: (0, 233), 49: (0, 228)}, 310: {14: (1, {'@': 223}), 36: (1, {'@': 223}), 13: (1, {'@': 223}), 34: (1, {'@': 223}), 37: (1, {'@': 223}), 17: (1, {'@': 223}), 35: (1, {'@': 223}), 38: (1, {'@': 223}), 48: (1, {'@': 223}), 18: (1, {'@': 223}), 19: (1, {'@': 223}), 49: (1, {'@': 223}), 22: (1, {'@': 223}), 50: (1, {'@': 223}), 3: (1, {'@': 223}), 24: (1, {'@': 223}), 47: (1, {'@': 223}), 25: (1, {'@': 223}), 39: (1, {'@': 223}), 51: (1, {'@': 223}), 27: (1, {'@': 223}), 28: (1, {'@': 223}), 46: (1, {'@': 223}), 52: (1, {'@': 223}), 42: (1, {'@': 223}), 16: (1, {'@': 223}), 40: (1, {'@': 223}), 32: (1, {'@': 223}), 43: (1, {'@': 223}), 29: (1, {'@': 223}), 45: (1, {'@': 223}), 30: (1, {'@': 223}), 41: (1, {'@': 223}), 33: (1, {'@': 223}), 44: (1, {'@': 223}), 20: (1, {'@': 223})}, 311: {52: (0, 295), 57: (0, 11), 4: (0, 12), 5: (0, 3), 59: (0, 1), 56: (0, 7), 60: (0, 31), 55: (0, 242), 2: (0, 30), 51: (0, 222), 64: (0, 183), 9: (0, 33), 65: (0, 224), 66: (0, 201), 67: (0, 174), 68: (0, 168), 1: (0, 20), 69: (0, 177), 3: (0, 26), 46: (0, 163), 63: (0, 205), 6: (0, 28), 49: (0, 228), 73: (0, 216), 8: (0, 21), 19: (0, 170), 7: (0, 194), 58: (0, 362), 27: (0, 364), 48: (0, 313), 61: (0, 289), 62: (0, 298), 70: (0, 283), 0: (0, 6), 71: (0, 317), 72: (0, 360), 74: (0, 308)}, 312: {14: (1, {'@': 224}), 36: (1, {'@': 224}), 37: (1, {'@': 224}), 38: (1, {'@': 224}), 48: (1, {'@': 224}), 18: (1, {'@': 224}), 19: (1, {'@': 224}), 49: (1, {'@': 224}), 22: (1, {'@': 224}), 50: (1, {'@': 224}), 3: (1, {'@': 224}), 47: (1, {'@': 224}), 25: (1, {'@': 224}), 39: (1, {'@': 224}), 51: (1, {'@': 224}), 27: (1, {'@': 224}), 28: (1, {'@': 224}), 46: (1, {'@': 224}), 52: (1, {'@': 224}), 41: (1, {'@': 224}), 42: (1, {'@': 224}), 16: (1, {'@': 224}), 32: (1, {'@': 224}), 43: (1, {'@': 224}), 33: (1, {'@': 224}), 44: (1, {'@': 224}), 29: (1, {'@': 224}), 45: (1, {'@': 224}), 30: (1, {'@': 224}), 34: (1, {'@': 224})}, 313: {20: (1, {'@': 225}), 25: (1, {'@': 225}), 18: (1, {'@': 225}), 26: (1, {'@': 225}), 16: (1, {'@': 225}), 31: (1, {'@': 225}), 32: (1, {'@': 225}), 2: (1, {'@': 225}), 10: (1, {'@': 225}), 8: (1, {'@': 225}), 3: (1, {'@': 225}), 29: (1, {'@': 225}), 4: (1, {'@': 225}), 1: (1, {'@': 225}), 6: (1, {'@': 225})}, 314: {30: (0, 185), 29: (0, 175)}, 315: {52: (0, 295), 68: (0, 168), 70: (0, 283), 46: (0, 151), 3: (0, 26), 65: (0, 224), 5: (0, 406), 59: (0, 1), 27: (0, 364), 73: (0, 216), 60: (0, 84)}, 316: {14: (1, {'@': 226}), 42: (1, {'@': 226}), 36: (1, {'@': 226}), 16: (1, {'@': 226}), 37: (1, {'@': 226}), 40: (1, {'@': 226}), 18: (1, {'@': 226}), 32: (1, {'@': 226}), 22: (1, {'@': 226}), 43: (1, {'@': 226}), 29: (1, {'@': 226}), 25: (1, {'@': 226}), 45: (1, {'@': 226}), 30: (1, {'@': 226}), 34: (1, {'@': 226}), 27: (1, {'@': 226}), 28: (1, {'@': 226}), 41: (1, {'@': 226}), 38: (1, {'@': 226}), 19: (1, {'@': 226}), 33: (1, {'@': 226}), 44: (1, {'@': 226}), 39: (1, {'@': 226})}, 317: {3: (1, {'@': 227})}, 318: {52: (0, 295), 68: (0, 168), 46: (0, 151), 3: (0, 26), 5: (0, 406), 59: (0, 285), 73: (0, 216), 27: (0, 364)}, 319: {14: (1, {'@': 228}), 42: (1, {'@': 228}), 36: (1, {'@': 228}), 16: (1, {'@': 228}), 37: (1, {'@': 228}), 17: (1, {'@': 228}), 40: (1, {'@': 228}), 18: (1, {'@': 228}), 32: (1, {'@': 228}), 22: (1, {'@': 228}), 43: (1, {'@': 228}), 24: (1, {'@': 228}), 29: (1, {'@': 228}), 25: (1, {'@': 228}), 45: (1, {'@': 228}), 30: (1, {'@': 228}), 34: (1, {'@': 228}), 27: (1, {'@': 228}), 28: (1, {'@': 228}), 41: (1, {'@': 228}), 38: (1, {'@': 228}), 19: (1, {'@': 228}), 33: (1, {'@': 228}), 44: (1, {'@': 228}), 39: (1, {'@': 228})}, 320: {14: (1, {'@': 229}), 42: (1, {'@': 229}), 36: (1, {'@': 229}), 16: (1, {'@': 229}), 37: (1, {'@': 229}), 40: (1, {'@': 229}), 18: (1, {'@': 229}), 32: (1, {'@': 229}), 22: (1, {'@': 229}), 43: (1, {'@': 229}), 24: (1, {'@': 229}), 29: (1, {'@': 229}), 25: (1, {'@': 229}), 45: (1, {'@': 229}), 30: (1, {'@': 229}), 27: (1, {'@': 229}), 34: (1, {'@': 229}), 28: (1, {'@': 229}), 41: (1, {'@': 229}), 38: (1, {'@': 229}), 19: (1, {'@': 229}), 33: (1, {'@': 229}), 44: (1, {'@': 229}), 39: (1, {'@': 229})}, 321: {46: (0, 79)}, 322: {5: (0, 419), 3: (0, 26)}, 323: {46: (0, 114)}, 324: {27: (0, 305), 22: (1, {'@': 230}), 14: (1, {'@': 230}), 36: (1, {'@': 230}), 34: (1, {'@': 230}), 37: (1, {'@': 230}), 38: (1, {'@': 230}), 39: (1, {'@': 230}), 25: (1, {'@': 230}), 18: (1, {'@': 230}), 19: (1, {'@': 230}), 28: (1, {'@': 230}), 40: (1, {'@': 230}), 16: (1, {'@': 230}), 41: (1, {'@': 230}), 42: (1, {'@': 230}), 32: (1, {'@': 230}), 43: (1, {'@': 230}), 33: (1, {'@': 230}), 44: (1, {'@': 230}), 29: (1, {'@': 230}), 45: (1, {'@': 230}), 30: (1, {'@': 230})}, 325: {13: (0, 288), 14: (1, {'@': 231}), 15: (1, {'@': 231}), 16: (1, {'@': 231}), 17: (1, {'@': 231}), 18: (1, {'@': 231}), 19: (1, {'@': 231}), 20: (1, {'@': 231}), 21: (1, {'@': 231}), 22: (1, {'@': 231}), 23: (1, {'@': 231}), 24: (1, {'@': 231}), 25: (1, {'@': 231}), 26: (1, {'@': 231}), 27: (1, {'@': 231}), 28: (1, {'@': 231}), 29: (1, {'@': 231}), 30: (1, {'@': 231}), 31: (1, {'@': 231}), 8: (1, {'@': 231}), 1: (1, {'@': 231}), 32: (1, {'@': 231}), 2: (1, {'@': 231}), 33: (1, {'@': 231}), 10: (1, {'@': 231}), 3: (1, {'@': 231}), 6: (1, {'@': 231}), 4: (1, {'@': 231}), 34: (1, {'@': 231})}, 326: {30: (0, 402), 33: (0, 385)}, 327: {52: (0, 295), 47: (0, 193), 72: (0, 300), 3: (0, 26), 46: (0, 348), 51: (0, 310), 5: (0, 346), 91: (0, 197), 92: (0, 231), 50: (0, 311), 68: (0, 361), 48: (0, 356), 85: (0, 233), 49: (0, 228), 94: (0, 4), 14: (1, {'@': 232}), 42: (1, {'@': 232}), 36: (1, {'@': 232}), 13: (1, {'@': 232}), 16: (1, {'@': 232}), 37: (1, {'@': 232}), 17: (1, {'@': 232}), 35: (1, {'@': 232}), 40: (1, {'@': 232}), 18: (1, {'@': 232}), 32: (1, {'@': 232}), 22: (1, {'@': 232}), 43: (1, {'@': 232}), 24: (1, {'@': 232}), 29: (1, {'@': 232}), 25: (1, {'@': 232}), 45: (1, {'@': 232}), 30: (1, {'@': 232}), 27: (1, {'@': 232}), 34: (1, {'@': 232}), 28: (1, {'@': 232}), 41: (1, {'@': 232}), 38: (1, {'@': 232}), 19: (1, {'@': 232}), 33: (1, {'@': 232}), 44: (1, {'@': 232}), 39: (1, {'@': 232})}, 328: {46: (0, 72)}, 329: {52: (0, 295), 76: (0, 353), 38: (0, 63), 95: (0, 314), 5: (0, 346), 80: (0, 340), 50: (0, 311), 39: (0, 44), 83: (0, 357), 48: (0, 356), 84: (0, 204), 27: (0, 173), 14: (0, 56), 86: (0, 221), 46: (0, 348), 77: (0, 301), 47: (0, 193), 89: (0, 48), 3: (0, 26), 56: (0, 37), 91: (0, 197), 92: (0, 231), 79: (0, 61), 94: (0, 192), 90: (0, 55), 29: (0, 290), 25: (0, 32), 49: (0, 228), 37: (0, 41), 36: (0, 312), 72: (0, 300), 51: (0, 310), 78: (0, 306), 81: (0, 46), 68: (0, 361), 82: (0, 38), 85: (0, 233), 87: (0, 238), 88: (0, 58), 22: (0, 36), 18: (0, 43), 19: (0, 16), 93: (0, 8), 28: (0, 19)}, 330: {14: (1, {'@': 233}), 36: (1, {'@': 233}), 13: (1, {'@': 233}), 34: (1, {'@': 233}), 37: (1, {'@': 233}), 17: (1, {'@': 233}), 35: (1, {'@': 233}), 38: (1, {'@': 233}), 48: (1, {'@': 233}), 18: (1, {'@': 233}), 19: (1, {'@': 233}), 49: (1, {'@': 233}), 22: (1, {'@': 233}), 50: (1, {'@': 233}), 3: (1, {'@': 233}), 24: (1, {'@': 233}), 47: (1, {'@': 233}), 25: (1, {'@': 233}), 39: (1, {'@': 233}), 51: (1, {'@': 233}), 27: (1, {'@': 233}), 28: (1, {'@': 233}), 46: (1, {'@': 233}), 52: (1, {'@': 233}), 42: (1, {'@': 233}), 16: (1, {'@': 233}), 40: (1, {'@': 233}), 32: (1, {'@': 233}), 43: (1, {'@': 233}), 29: (1, {'@': 233}), 45: (1, {'@': 233}), 30: (1, {'@': 233}), 41: (1, {'@': 233}), 33: (1, {'@': 233}), 44: (1, {'@': 233}), 20: (1, {'@': 233})}, 331: {14: (1, {'@': 234}), 42: (1, {'@': 234}), 36: (1, {'@': 234}), 13: (1, {'@': 234}), 16: (1, {'@': 234}), 37: (1, {'@': 234}), 17: (1, {'@': 234}), 40: (1, {'@': 234}), 18: (1, {'@': 234}), 32: (1, {'@': 234}), 22: (1, {'@': 234}), 43: (1, {'@': 234}), 24: (1, {'@': 234}), 29: (1, {'@': 234}), 25: (1, {'@': 234}), 45: (1, {'@': 234}), 30: (1, {'@': 234}), 27: (1, {'@': 234}), 34: (1, {'@': 234}), 28: (1, {'@': 234}), 41: (1, {'@': 234}), 38: (1, {'@': 234}), 19: (1, {'@': 234}), 33: (1, {'@': 234}), 44: (1, {'@': 234}), 39: (1, {'@': 234})}, 332: {46: (0, 138)}, 333: {52: (0, 295), 72: (0, 300), 51: (0, 310), 5: (0, 346), 78: (0, 306), 80: (0, 340), 50: (0, 311), 68: (0, 361), 48: (0, 356), 85: (0, 233), 46: (0, 348), 47: (0, 193), 86: (0, 221), 87: (0, 238), 84: (0, 316), 3: (0, 26), 91: (0, 197), 92: (0, 231), 94: (0, 192), 49: (0, 228)}, 334: {27: (0, 315), 20: (1, {'@': 235}), 21: (1, {'@': 235}), 22: (1, {'@': 235}), 23: (1, {'@': 235}), 14: (1, {'@': 235}), 15: (1, {'@': 235}), 13: (1, {'@': 235}), 16: (1, {'@': 235}), 25: (1, {'@': 235}), 18: (1, {'@': 235}), 26: (1, {'@': 235}), 19: (1, {'@': 235}), 28: (1, {'@': 235}), 29: (1, {'@': 235}), 30: (1, {'@': 235}), 31: (1, {'@': 235}), 8: (1, {'@': 235}), 1: (1, {'@': 235}), 32: (1, {'@': 235}), 2: (1, {'@': 235}), 10: (1, {'@': 235}), 3: (1, {'@': 235}), 6: (1, {'@': 235}), 4: (1, {'@': 235}), 33: (1, {'@': 235}), 34: (1, {'@': 235})}, 335: {52: (0, 295), 55: (0, 242), 56: (0, 7), 46: (0, 163), 57: (0, 11), 58: (0, 362), 5: (0, 153), 59: (0, 1), 27: (0, 364), 60: (0, 31), 63: (0, 124), 48: (0, 313), 61: (0, 289), 62: (0, 298), 51: (0, 222), 64: (0, 183), 65: (0, 224), 66: (0, 201), 67: (0, 174), 68: (0, 168), 69: (0, 177), 70: (0, 283), 3: (0, 26), 71: (0, 317), 72: (0, 360), 49: (0, 228), 73: (0, 216), 19: (0, 170), 74: (0, 308)}, 336: {52: (0, 295), 55: (0, 242), 56: (0, 7), 46: (0, 163), 57: (0, 11), 58: (0, 362), 5: (0, 153), 59: (0, 1), 27: (0, 364), 60: (0, 31), 48: (0, 313), 61: (0, 289), 62: (0, 298), 51: (0, 222), 64: (0, 183), 65: (0, 224), 66: (0, 201), 67: (0, 174), 69: (0, 177), 70: (0, 283), 68: (0, 168), 63: (0, 47), 3: (0, 26), 71: (0, 317), 72: (0, 360), 49: (0, 228), 73: (0, 216), 19: (0, 170), 74: (0, 308)}, 337: {46: (0, 135)}, 338: {52: (0, 295), 55: (0, 242), 56: (0, 7), 46: (0, 163), 57: (0, 11), 58: (0, 362), 5: (0, 153), 59: (0, 1), 27: (0, 364), 60: (0, 31), 48: (0, 313), 61: (0, 289), 62: (0, 298), 51: (0, 222), 64: (0, 183), 65: (0, 224), 66: (0, 201), 67: (0, 174), 69: (0, 177), 70: (0, 283), 68: (0, 168), 3: (0, 26), 71: (0, 317), 63: (0, 52), 72: (0, 360), 49: (0, 228), 73: (0, 216), 19: (0, 170), 74: (0, 308)}, 339: {52: (0, 295), 68: (0, 168), 46: (0, 151), 70: (0, 283), 3: (0, 26), 5: (0, 153), 59: (0, 1), 65: (0, 224), 27: (0, 364), 60: (0, 31), 61: (0, 289), 69: (0, 155), 62: (0, 298), 73: (0, 216), 97: (0, 400)}, 340: {135: (0, 22), 13: (0, 29), 22: (1, {'@': 236}), 14: (1, {'@': 236}), 36: (1, {'@': 236}), 34: (1, {'@': 236}), 37: (1, {'@': 236}), 24: (1, {'@': 236}), 17: (1, {'@': 236}), 19: (1, {'@': 236}), 38: (1, {'@': 236}), 39: (1, {'@': 236}), 25: (1, {'@': 236}), 18: (1, {'@': 236}), 27: (1, {'@': 236}), 28: (1, {'@': 236}), 40: (1, {'@': 236}), 16: (1, {'@': 236}), 41: (1, {'@': 236}), 42: (1, {'@': 236}), 32: (1, {'@': 236}), 43: (1, {'@': 236}), 33: (1, {'@': 236}), 44: (1, {'@': 236}), 29: (1, {'@': 236}), 45: (1, {'@': 236}), 30: (1, {'@': 236})}, 341: {22: (1, {'@': 237}), 14: (1, {'@': 237}), 36: (1, {'@': 237}), 34: (1, {'@': 237}), 37: (1, {'@': 237}), 38: (1, {'@': 237}), 39: (1, {'@': 237}), 25: (1, {'@': 237}), 18: (1, {'@': 237}), 19: (1, {'@': 237}), 28: (1, {'@': 237}), 40: (1, {'@': 237}), 16: (1, {'@': 237}), 41: (1, {'@': 237}), 42: (1, {'@': 237}), 32: (1, {'@': 237}), 43: (1, {'@': 237}), 33: (1, {'@': 237}), 44: (1, {'@': 237}), 29: (1, {'@': 237}), 45: (1, {'@': 237}), 30: (1, {'@': 237})}, 342: {11: (0, 59), 46: (0, 62), 29: (1, {'@': 238}), 30: (1, {'@': 238}), 34: (1, {'@': 238})}, 343: {46: (0, 156)}, 344: {34: (0, 395)}, 345: {29: (0, 128)}, 346: {14: (1, {'@': 239}), 36: (1, {'@': 239}), 13: (1, {'@': 239}), 34: (1, {'@': 239}), 37: (1, {'@': 239}), 17: (1, {'@': 239}), 35: (1, {'@': 239}), 38: (1, {'@': 239}), 48: (1, {'@': 239}), 18: (1, {'@': 239}), 19: (1, {'@': 239}), 49: (1, {'@': 239}), 22: (1, {'@': 239}), 50: (1, {'@': 239}), 3: (1, {'@': 239}), 24: (1, {'@': 239}), 47: (1, {'@': 239}), 25: (1, {'@': 239}), 39: (1, {'@': 239}), 51: (1, {'@': 239}), 27: (1, {'@': 239}), 28: (1, {'@': 239}), 46: (1, {'@': 239}), 52: (1, {'@': 239}), 42: (1, {'@': 239}), 16: (1, {'@': 239}), 40: (1, {'@': 239}), 32: (1, {'@': 239}), 43: (1, {'@': 239}), 29: (1, {'@': 239}), 45: (1, {'@': 239}), 30: (1, {'@': 239}), 41: (1, {'@': 239}), 33: (1, {'@': 239}), 44: (1, {'@': 239}), 20: (1, {'@': 239})}, 347: {52: (0, 295), 65: (0, 42), 68: (0, 168), 70: (0, 283), 46: (0, 151), 59: (0, 1), 3: (0, 26), 5: (0, 406), 73: (0, 216), 27: (0, 364)}, 348: {52: (0, 295), 76: (0, 353), 95: (0, 35), 38: (0, 63), 5: (0, 346), 80: (0, 340), 50: (0, 311), 39: (0, 44), 83: (0, 357), 48: (0, 356), 84: (0, 204), 27: (0, 173), 14: (0, 56), 86: (0, 221), 46: (0, 348), 77: (0, 301), 47: (0, 193), 89: (0, 48), 3: (0, 26), 56: (0, 37), 91: (0, 197), 92: (0, 231), 79: (0, 61), 94: (0, 192), 90: (0, 55), 25: (0, 32), 49: (0, 228), 37: (0, 41), 36: (0, 312), 72: (0, 300), 136: (0, 329), 51: (0, 310), 78: (0, 306), 81: (0, 46), 68: (0, 361), 82: (0, 38), 85: (0, 233), 87: (0, 238), 88: (0, 58), 22: (0, 36), 18: (0, 43), 19: (0, 16), 93: (0, 8), 28: (0, 19)}, 349: {46: (0, 92)}, 350: {14: (1, {'@': 240}), 36: (1, {'@': 240}), 37: (1, {'@': 240}), 48: (1, {'@': 240}), 18: (1, {'@': 240}), 49: (1, {'@': 240}), 22: (1, {'@': 240}), 3: (1, {'@': 240}), 29: (1, {'@': 240}), 25: (1, {'@': 240}), 51: (1, {'@': 240}), 27: (1, {'@': 240}), 28: (1, {'@': 240}), 38: (1, {'@': 240}), 19: (1, {'@': 240}), 56: (1, {'@': 240}), 50: (1, {'@': 240}), 88: (1, {'@': 240}), 89: (1, {'@': 240}), 47: (1, {'@': 240}), 82: (1, {'@': 240}), 90: (1, {'@': 240}), 39: (1, {'@': 240}), 46: (1, {'@': 240}), 52: (1, {'@': 240})}, 351: {52: (0, 295), 68: (0, 168), 70: (0, 283), 46: (0, 151), 3: (0, 26), 65: (0, 224), 5: (0, 406), 59: (0, 1), 27: (0, 364), 60: (0, 54), 73: (0, 216)}, 352: {29: (1, {'@': 241}), 30: (1, {'@': 241}), 11: (1, {'@': 241})}, 353: {22: (1, {'@': 242}), 14: (1, {'@': 242}), 36: (1, {'@': 242}), 34: (1, {'@': 242}), 37: (1, {'@': 242}), 38: (1, {'@': 242}), 39: (1, {'@': 242}), 25: (1, {'@': 242}), 18: (1, {'@': 242}), 19: (1, {'@': 242}), 28: (1, {'@': 242}), 40: (1, {'@': 242}), 16: (1, {'@': 242}), 41: (1, {'@': 242}), 42: (1, {'@': 242}), 32: (1, {'@': 242}), 43: (1, {'@': 242}), 33: (1, {'@': 242}), 44: (1, {'@': 242}), 29: (1, {'@': 242}), 45: (1, {'@': 242}), 30: (1, {'@': 242})}, 354: {46: (0, 111), 34: (1, {'@': 243})}, 355: {34: (0, 53)}, 356: {14: (1, {'@': 244}), 36: (1, {'@': 244}), 13: (1, {'@': 244}), 34: (1, {'@': 244}), 37: (1, {'@': 244}), 17: (1, {'@': 244}), 35: (1, {'@': 244}), 38: (1, {'@': 244}), 48: (1, {'@': 244}), 18: (1, {'@': 244}), 19: (1, {'@': 244}), 49: (1, {'@': 244}), 22: (1, {'@': 244}), 50: (1, {'@': 244}), 3: (1, {'@': 244}), 24: (1, {'@': 244}), 47: (1, {'@': 244}), 25: (1, {'@': 244}), 39: (1, {'@': 244}), 51: (1, {'@': 244}), 27: (1, {'@': 244}), 28: (1, {'@': 244}), 46: (1, {'@': 244}), 52: (1, {'@': 244}), 42: (1, {'@': 244}), 16: (1, {'@': 244}), 40: (1, {'@': 244}), 32: (1, {'@': 244}), 43: (1, {'@': 244}), 29: (1, {'@': 244}), 45: (1, {'@': 244}), 30: (1, {'@': 244}), 41: (1, {'@': 244}), 33: (1, {'@': 244}), 44: (1, {'@': 244}), 20: (1, {'@': 244})}, 357: {22: (1, {'@': 245}), 14: (1, {'@': 245}), 36: (1, {'@': 245}), 34: (1, {'@': 245}), 37: (1, {'@': 245}), 38: (1, {'@': 245}), 39: (1, {'@': 245}), 25: (1, {'@': 245}), 18: (1, {'@': 245}), 19: (1, {'@': 245}), 28: (1, {'@': 245}), 40: (1, {'@': 245}), 16: (1, {'@': 245}), 41: (1, {'@': 245}), 42: (1, {'@': 245}), 32: (1, {'@': 245}), 43: (1, {'@': 245}), 33: (1, {'@': 245}), 44: (1, {'@': 245}), 29: (1, {'@': 245}), 45: (1, {'@': 245}), 30: (1, {'@': 245})}, 358: {46: (0, 143)}, 359: {52: (0, 295), 47: (0, 193), 86: (0, 221), 72: (0, 300), 3: (0, 26), 46: (0, 348), 51: (0, 310), 5: (0, 346), 91: (0, 197), 92: (0, 231), 78: (0, 306), 80: (0, 340), 50: (0, 311), 94: (0, 192), 68: (0, 361), 48: (0, 356), 85: (0, 233), 49: (0, 228), 87: (0, 421)}, 360: {20: (1, {'@': 246}), 25: (1, {'@': 246}), 18: (1, {'@': 246}), 26: (1, {'@': 246}), 16: (1, {'@': 246}), 31: (1, {'@': 246}), 32: (1, {'@': 246}), 2: (1, {'@': 246}), 10: (1, {'@': 246}), 8: (1, {'@': 246}), 3: (1, {'@': 246}), 29: (1, {'@': 246}), 4: (1, {'@': 246}), 1: (1, {'@': 246}), 6: (1, {'@': 246})}, 361: {14: (1, {'@': 247}), 36: (1, {'@': 247}), 13: (1, {'@': 247}), 34: (1, {'@': 247}), 37: (1, {'@': 247}), 17: (1, {'@': 247}), 35: (1, {'@': 247}), 38: (1, {'@': 247}), 48: (1, {'@': 247}), 18: (1, {'@': 247}), 19: (1, {'@': 247}), 49: (1, {'@': 247}), 22: (1, {'@': 247}), 50: (1, {'@': 247}), 3: (1, {'@': 247}), 24: (1, {'@': 247}), 47: (1, {'@': 247}), 25: (1, {'@': 247}), 39: (1, {'@': 247}), 51: (1, {'@': 247}), 27: (1, {'@': 247}), 28: (1, {'@': 247}), 46: (1, {'@': 247}), 52: (1, {'@': 247}), 42: (1, {'@': 247}), 16: (1, {'@': 247}), 40: (1, {'@': 247}), 32: (1, {'@': 247}), 43: (1, {'@': 247}), 29: (1, {'@': 247}), 45: (1, {'@': 247}), 30: (1, {'@': 247}), 41: (1, {'@': 247}), 33: (1, {'@': 247}), 44: (1, {'@': 247}), 20: (1, {'@': 247})}, 362: {3: (1, {'@': 248})}, 363: {34: (0, 416)}, 364: {52: (0, 295), 68: (0, 168), 46: (0, 151), 3: (0, 26), 5: (0, 406), 59: (0, 383), 73: (0, 216), 27: (0, 364)}, 365: {20: (0, 223), 1: (1, {'@': 249}), 2: (1, {'@': 249}), 6: (1, {'@': 249}), 10: (1, {'@': 249}), 4: (1, {'@': 249}), 8: (1, {'@': 249}), 3: (1, {'@': 249}), 31: (1, {'@': 249})}, 366: {52: (0, 295), 68: (0, 168), 46: (0, 151), 70: (0, 283), 96: (0, 376), 3: (0, 26), 5: (0, 153), 59: (0, 1), 65: (0, 224), 27: (0, 364), 60: (0, 31), 61: (0, 289), 69: (0, 155), 62: (0, 298), 73: (0, 216), 97: (0, 159), 29: (1, {'@': 86})}, 367: {72: (0, 165), 49: (0, 228)}, 368: {31: (1, {'@': 250}), 30: (1, {'@': 250})}, 369: {52: (0, 295), 46: (0, 237), 68: (0, 191), 47: (0, 203), 3: (0, 26), 49: (0, 228), 5: (0, 176), 118: (0, 166), 72: (0, 241)}, 370: {14: (1, {'@': 133}), 15: (1, {'@': 133}), 13: (1, {'@': 133}), 11: (1, {'@': 133}), 16: (1, {'@': 133}), 17: (1, {'@': 133}), 18: (1, {'@': 133}), 19: (1, {'@': 133}), 20: (1, {'@': 133}), 21: (1, {'@': 133}), 22: (1, {'@': 133}), 23: (1, {'@': 133}), 24: (1, {'@': 133}), 25: (1, {'@': 133}), 26: (1, {'@': 133}), 27: (1, {'@': 133}), 28: (1, {'@': 133}), 29: (1, {'@': 133}), 30: (1, {'@': 133}), 31: (1, {'@': 133}), 8: (1, {'@': 133}), 34: (1, {'@': 133}), 4: (1, {'@': 133}), 1: (1, {'@': 133}), 32: (1, {'@': 133}), 2: (1, {'@': 133}), 33: (1, {'@': 133}), 10: (1, {'@': 133}), 3: (1, {'@': 133}), 6: (1, {'@': 133})}, 371: {36: (0, 258), 33: (1, {'@': 251}), 30: (1, {'@': 251})}, 372: {52: (0, 295), 55: (0, 242), 56: (0, 7), 46: (0, 163), 57: (0, 11), 58: (0, 362), 5: (0, 153), 59: (0, 1), 27: (0, 364), 60: (0, 31), 48: (0, 313), 61: (0, 289), 62: (0, 298), 51: (0, 222), 64: (0, 183), 65: (0, 224), 66: (0, 201), 67: (0, 174), 69: (0, 177), 70: (0, 283), 68: (0, 168), 3: (0, 26), 71: (0, 317), 63: (0, 82), 72: (0, 360), 49: (0, 228), 73: (0, 216), 19: (0, 170), 74: (0, 308)}, 373: {17: (0, 236), 20: (1, {'@': 252}), 21: (1, {'@': 252}), 22: (1, {'@': 252}), 23: (1, {'@': 252}), 14: (1, {'@': 252}), 15: (1, {'@': 252}), 13: (1, {'@': 252}), 16: (1, {'@': 252}), 24: (1, {'@': 252}), 27: (1, {'@': 252}), 25: (1, {'@': 252}), 18: (1, {'@': 252}), 26: (1, {'@': 252}), 19: (1, {'@': 252}), 28: (1, {'@': 252}), 29: (1, {'@': 252}), 30: (1, {'@': 252}), 31: (1, {'@': 252}), 8: (1, {'@': 252}), 34: (1, {'@': 252}), 4: (1, {'@': 252}), 1: (1, {'@': 252}), 32: (1, {'@': 252}), 2: (1, {'@': 252}), 33: (1, {'@': 252}), 10: (1, {'@': 252}), 3: (1, {'@': 252}), 6: (1, {'@': 252})}, 374: {52: (0, 295), 68: (0, 168), 46: (0, 151), 70: (0, 283), 3: (0, 26), 5: (0, 153), 59: (0, 1), 65: (0, 224), 27: (0, 364), 60: (0, 31), 97: (0, 381), 61: (0, 289), 69: (0, 155), 62: (0, 298), 73: (0, 216)}, 375: {29: (1, {'@': 253}), 30: (1, {'@': 253}), 34: (1, {'@': 253})}, 376: {29: (0, 379)}, 377: {32: (0, 415)}, 378: {1: (1, {'@': 254}), 2: (1, {'@': 254}), 6: (1, {'@': 254}), 10: (1, {'@': 254}), 4: (1, {'@': 254}), 8: (1, {'@': 254}), 3: (1, {'@': 254}), 31: (1, {'@': 254})}, 379: {31: (1, {'@': 255}), 30: (1, {'@': 255})}, 380: {52: (0, 295), 55: (0, 242), 56: (0, 7), 46: (0, 163), 57: (0, 11), 58: (0, 362), 5: (0, 153), 59: (0, 1), 27: (0, 364), 60: (0, 31), 48: (0, 313), 61: (0, 289), 62: (0, 298), 51: (0, 222), 64: (0, 183), 65: (0, 224), 66: (0, 201), 67: (0, 174), 69: (0, 177), 70: (0, 283), 68: (0, 168), 3: (0, 26), 71: (0, 317), 63: (0, 365), 72: (0, 360), 49: (0, 228), 73: (0, 216), 19: (0, 170), 74: (0, 308)}, 381: {29: (1, {'@': 256}), 30: (1, {'@': 256})}, 382: {14: (1, {'@': 257}), 42: (1, {'@': 257}), 36: (1, {'@': 257}), 16: (1, {'@': 257}), 37: (1, {'@': 257}), 17: (1, {'@': 257}), 40: (1, {'@': 257}), 18: (1, {'@': 257}), 32: (1, {'@': 257}), 22: (1, {'@': 257}), 43: (1, {'@': 257}), 24: (1, {'@': 257}), 29: (1, {'@': 257}), 25: (1, {'@': 257}), 45: (1, {'@': 257}), 30: (1, {'@': 257}), 34: (1, {'@': 257}), 27: (1, {'@': 257}), 28: (1, {'@': 257}), 41: (1, {'@': 257}), 38: (1, {'@': 257}), 19: (1, {'@': 257}), 33: (1, {'@': 257}), 44: (1, {'@': 257}), 39: (1, {'@': 257})}, 383: {11: (0, 304), 14: (1, {'@': 258}), 15: (1, {'@': 258}), 13: (1, {'@': 258}), 16: (1, {'@': 258}), 17: (1, {'@': 258}), 18: (1, {'@': 258}), 19: (1, {'@': 258}), 20: (1, {'@': 258}), 21: (1, {'@': 258}), 22: (1, {'@': 258}), 23: (1, {'@': 258}), 24: (1, {'@': 258}), 25: (1, {'@': 258}), 26: (1, {'@': 258}), 27: (1, {'@': 258}), 28: (1, {'@': 258}), 29: (1, {'@': 258}), 30: (1, {'@': 258}), 31: (1, {'@': 258}), 8: (1, {'@': 258}), 34: (1, {'@': 258}), 4: (1, {'@': 258}), 1: (1, {'@': 258}), 32: (1, {'@': 258}), 2: (1, {'@': 258}), 33: (1, {'@': 258}), 10: (1, {'@': 258}), 3: (1, {'@': 258}), 6: (1, {'@': 258})}, 384: {5: (0, 342), 116: (0, 219), 3: (0, 26)}, 385: {14: (1, {'@': 259}), 36: (1, {'@': 259}), 13: (1, {'@': 259}), 34: (1, {'@': 259}), 37: (1, {'@': 259}), 17: (1, {'@': 259}), 35: (1, {'@': 259}), 38: (1, {'@': 259}), 48: (1, {'@': 259}), 18: (1, {'@': 259}), 19: (1, {'@': 259}), 49: (1, {'@': 259}), 22: (1, {'@': 259}), 50: (1, {'@': 259}), 3: (1, {'@': 259}), 24: (1, {'@': 259}), 47: (1, {'@': 259}), 25: (1, {'@': 259}), 39: (1, {'@': 259}), 51: (1, {'@': 259}), 27: (1, {'@': 259}), 28: (1, {'@': 259}), 46: (1, {'@': 259}), 52: (1, {'@': 259}), 42: (1, {'@': 259}), 16: (1, {'@': 259}), 40: (1, {'@': 259}), 32: (1, {'@': 259}), 43: (1, {'@': 259}), 29: (1, {'@': 259}), 45: (1, {'@': 259}), 30: (1, {'@': 259}), 41: (1, {'@': 259}), 33: (1, {'@': 259}), 44: (1, {'@': 259}), 20: (1, {'@': 259})}, 386: {14: (1, {'@': 260}), 36: (1, {'@': 260}), 13: (1, {'@': 260}), 34: (1, {'@': 260}), 37: (1, {'@': 260}), 17: (1, {'@': 260}), 35: (1, {'@': 260}), 38: (1, {'@': 260}), 48: (1, {'@': 260}), 18: (1, {'@': 260}), 19: (1, {'@': 260}), 49: (1, {'@': 260}), 22: (1, {'@': 260}), 50: (1, {'@': 260}), 3: (1, {'@': 260}), 24: (1, {'@': 260}), 47: (1, {'@': 260}), 25: (1, {'@': 260}), 39: (1, {'@': 260}), 51: (1, {'@': 260}), 27: (1, {'@': 260}), 28: (1, {'@': 260}), 46: (1, {'@': 260}), 52: (1, {'@': 260}), 42: (1, {'@': 260}), 16: (1, {'@': 260}), 40: (1, {'@': 260}), 32: (1, {'@': 260}), 43: (1, {'@': 260}), 29: (1, {'@': 260}), 45: (1, {'@': 260}), 30: (1, {'@': 260}), 41: (1, {'@': 260}), 33: (1, {'@': 260}), 44: (1, {'@': 260}), 20: (1, {'@': 260})}, 387: {52: (0, 295), 76: (0, 353), 38: (0, 63), 5: (0, 346), 80: (0, 340), 50: (0, 311), 39: (0, 44), 83: (0, 357), 48: (0, 356), 84: (0, 204), 27: (0, 173), 14: (0, 56), 86: (0, 221), 46: (0, 348), 77: (0, 301), 47: (0, 193), 89: (0, 48), 3: (0, 26), 56: (0, 37), 91: (0, 197), 92: (0, 231), 79: (0, 61), 94: (0, 192), 90: (0, 55), 25: (0, 32), 49: (0, 228), 37: (0, 41), 36: (0, 312), 72: (0, 300), 51: (0, 310), 78: (0, 306), 81: (0, 46), 68: (0, 361), 82: (0, 38), 85: (0, 233), 87: (0, 238), 88: (0, 58), 95: (0, 399), 22: (0, 36), 18: (0, 43), 19: (0, 16), 93: (0, 8), 28: (0, 19), 34: (1, {'@': 261}), 16: (1, {'@': 261}), 41: (1, {'@': 261}), 42: (1, {'@': 261}), 32: (1, {'@': 261}), 43: (1, {'@': 261}), 33: (1, {'@': 261}), 44: (1, {'@': 261}), 29: (1, {'@': 261}), 45: (1, {'@': 261}), 30: (1, {'@': 261})}, 388: {3: (0, 26), 5: (0, 215)}, 389: {34: (1, {'@': 262}), 16: (1, {'@': 262}), 41: (1, {'@': 262}), 42: (1, {'@': 262}), 32: (1, {'@': 262}), 43: (1, {'@': 262}), 33: (1, {'@': 262}), 44: (1, {'@': 262}), 29: (1, {'@': 262}), 45: (1, {'@': 262}), 30: (1, {'@': 262})}, 390: {52: (0, 295), 68: (0, 168), 46: (0, 151), 59: (0, 1), 70: (0, 198), 3: (0, 26), 5: (0, 406), 73: (0, 216), 27: (0, 364)}, 391: {42: (0, 230)}, 392: {29: (0, 90)}, 393: {41: (1, {'@': 263}), 42: (1, {'@': 263}), 16: (1, {'@': 263}), 32: (1, {'@': 263}), 43: (1, {'@': 263}), 33: (1, {'@': 263}), 44: (1, {'@': 263}), 29: (1, {'@': 263}), 45: (1, {'@': 263}), 30: (1, {'@': 263}), 34: (1, {'@': 263})}, 394: {72: (0, 218), 49: (0, 228)}, 395: {1: (1, {'@': 264}), 2: (1, {'@': 264}), 6: (1, {'@': 264}), 10: (1, {'@': 264}), 4: (1, {'@': 264}), 8: (1, {'@': 264}), 3: (1, {'@': 264}), 31: (1, {'@': 264})}, 396: {42: (0, 248)}, 397: {29: (0, 413)}, 398: {33: (1, {'@': 265}), 30: (1, {'@': 265})}, 399: {41: (1, {'@': 266}), 42: (1, {'@': 266}), 16: (1, {'@': 266}), 32: (1, {'@': 266}), 43: (1, {'@': 266}), 33: (1, {'@': 266}), 44: (1, {'@': 266}), 29: (1, {'@': 266}), 45: (1, {'@': 266}), 30: (1, {'@': 266}), 34: (1, {'@': 266})}, 400: {29: (1, {'@': 267}), 30: (1, {'@': 267})}, 401: {124: (0, 188), 45: (0, 245), 44: (0, 369)}, 402: {52: (0, 295), 76: (0, 353), 36: (0, 312), 77: (0, 301), 72: (0, 300), 38: (0, 63), 51: (0, 310), 5: (0, 346), 78: (0, 306), 79: (0, 61), 80: (0, 340), 50: (0, 311), 81: (0, 46), 39: (0, 44), 82: (0, 38), 83: (0, 357), 68: (0, 361), 48: (0, 356), 46: (0, 348), 84: (0, 204), 27: (0, 173), 85: (0, 233), 47: (0, 193), 37: (0, 41), 14: (0, 56), 86: (0, 221), 87: (0, 238), 88: (0, 58), 89: (0, 48), 22: (0, 36), 3: (0, 26), 56: (0, 37), 90: (0, 55), 18: (0, 43), 19: (0, 16), 91: (0, 197), 92: (0, 231), 93: (0, 8), 94: (0, 192), 28: (0, 19), 25: (0, 32), 49: (0, 228), 95: (0, 202)}, 403: {52: (0, 295), 62: (0, 251), 68: (0, 168), 70: (0, 283), 46: (0, 151), 3: (0, 26), 65: (0, 224), 5: (0, 406), 59: (0, 1), 27: (0, 364), 60: (0, 31), 34: (0, 255), 61: (0, 289), 73: (0, 216)}, 404: {1: (1, {'@': 268}), 2: (1, {'@': 268}), 6: (1, {'@': 268}), 10: (1, {'@': 268}), 4: (1, {'@': 268}), 8: (1, {'@': 268}), 3: (1, {'@': 268}), 31: (1, {'@': 268})}, 405: {50: (0, 209), 137: (0, 227)}, 406: {46: (0, 181), 31: (1, {'@': 74}), 14: (1, {'@': 74}), 15: (1, {'@': 74}), 13: (1, {'@': 74}), 11: (1, {'@': 74}), 16: (1, {'@': 74}), 8: (1, {'@': 74}), 17: (1, {'@': 74}), 34: (1, {'@': 74}), 4: (1, {'@': 74}), 1: (1, {'@': 74}), 18: (1, {'@': 74}), 19: (1, {'@': 74}), 20: (1, {'@': 74}), 21: (1, {'@': 74}), 22: (1, {'@': 74}), 32: (1, {'@': 74}), 23: (1, {'@': 74}), 2: (1, {'@': 74}), 33: (1, {'@': 74}), 10: (1, {'@': 74}), 24: (1, {'@': 74}), 3: (1, {'@': 74}), 29: (1, {'@': 74}), 25: (1, {'@': 74}), 6: (1, {'@': 74}), 30: (1, {'@': 74}), 27: (1, {'@': 74}), 28: (1, {'@': 74}), 26: (1, {'@': 74})}, 407: {33: (0, 78)}, 408: {5: (0, 9), 100: (0, 88), 3: (0, 26)}, 409: {1: (1, {'@': 269}), 2: (1, {'@': 269}), 6: (1, {'@': 269}), 10: (1, {'@': 269}), 4: (1, {'@': 269}), 8: (1, {'@': 269}), 3: (1, {'@': 269}), 31: (1, {'@': 269})}, 410: {29: (0, 370)}, 411: {5: (0, 207), 3: (0, 26)}, 412: {20: (0, 223), 1: (1, {'@': 270}), 2: (1, {'@': 270}), 6: (1, {'@': 270}), 10: (1, {'@': 270}), 4: (1, {'@': 270}), 8: (1, {'@': 270}), 3: (1, {'@': 270}), 31: (1, {'@': 270})}, 413: {40: (0, 264)}, 414: {116: (0, 190), 5: (0, 342), 3: (0, 26)}, 415: {52: (0, 295), 76: (0, 353), 36: (0, 312), 77: (0, 301), 72: (0, 300), 38: (0, 63), 51: (0, 310), 5: (0, 346), 78: (0, 306), 79: (0, 61), 80: (0, 340), 50: (0, 311), 81: (0, 46), 39: (0, 44), 82: (0, 38), 83: (0, 357), 68: (0, 361), 48: (0, 356), 46: (0, 348), 84: (0, 204), 95: (0, 277), 27: (0, 173), 85: (0, 233), 47: (0, 193), 14: (0, 56), 86: (0, 221), 87: (0, 238), 37: (0, 41), 88: (0, 58), 89: (0, 48), 22: (0, 36), 3: (0, 26), 56: (0, 37), 90: (0, 55), 18: (0, 43), 19: (0, 16), 91: (0, 197), 92: (0, 231), 93: (0, 8), 94: (0, 192), 28: (0, 19), 25: (0, 32), 49: (0, 228)}, 416: {52: (0, 295), 76: (0, 353), 38: (0, 63), 5: (0, 346), 95: (0, 113), 80: (0, 340), 50: (0, 311), 39: (0, 44), 83: (0, 357), 48: (0, 356), 84: (0, 204), 27: (0, 173), 14: (0, 56), 86: (0, 221), 46: (0, 348), 77: (0, 301), 47: (0, 193), 89: (0, 48), 3: (0, 26), 56: (0, 37), 91: (0, 197), 92: (0, 231), 79: (0, 61), 94: (0, 192), 90: (0, 55), 25: (0, 32), 49: (0, 228), 37: (0, 41), 36: (0, 312), 72: (0, 300), 51: (0, 310), 78: (0, 306), 81: (0, 46), 68: (0, 361), 82: (0, 38), 85: (0, 233), 87: (0, 238), 34: (0, 182), 88: (0, 58), 22: (0, 36), 18: (0, 43), 19: (0, 16), 93: (0, 8), 28: (0, 19)}, 417: {5: (0, 199), 3: (0, 26)}, 418: {34: (0, 212)}, 419: {29: (1, {'@': 271}), 30: (1, {'@': 271}), 11: (1, {'@': 271})}, 420: {29: (0, 266)}, 421: {14: (1, {'@': 272}), 42: (1, {'@': 272}), 36: (1, {'@': 272}), 16: (1, {'@': 272}), 37: (1, {'@': 272}), 40: (1, {'@': 272}), 18: (1, {'@': 272}), 32: (1, {'@': 272}), 22: (1, {'@': 272}), 43: (1, {'@': 272}), 24: (1, {'@': 272}), 29: (1, {'@': 272}), 25: (1, {'@': 272}), 45: (1, {'@': 272}), 30: (1, {'@': 272}), 27: (1, {'@': 272}), 34: (1, {'@': 272}), 28: (1, {'@': 272}), 41: (1, {'@': 272}), 38: (1, {'@': 272}), 19: (1, {'@': 272}), 33: (1, {'@': 272}), 44: (1, {'@': 272}), 39: (1, {'@': 272})}, 422: {45: (1, {'@': 273}), 44: (1, {'@': 273})}}, 'start_states': {'start': 5}, 'end_states': {'start': 34}}, 'lexer_conf': {'tokens': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}], 'ignore': ['WS', 'COMMENT'], '__type__': 'LexerConf'}, 'start': ['start'], '__type__': 'LALR_ContextualLexer'}, 'rules': [{'@': 71}, {'@': 76}, {'@': 90}, {'@': 112}, {'@': 109}, {'@': 116}, {'@': 254}, {'@': 197}, {'@': 130}, {'@': 269}, {'@': 268}, {'@': 118}, {'@': 198}, {'@': 200}, {'@': 136}, {'@': 77}, {'@': 111}, {'@': 264}, {'@': 142}, {'@': 135}, {'@': 208}, {'@': 262}, {'@': 206}, {'@': 192}, {'@': 188}, {'@': 261}, {'@': 162}, {'@': 189}, {'@': 139}, {'@': 107}, {'@': 146}, {'@': 144}, {'@': 191}, {'@': 159}, {'@': 186}, {'@': 153}, {'@': 207}, {'@': 194}, {'@': 209}, {'@': 210}, {'@': 204}, {'@': 128}, {'@': 113}, {'@': 245}, {'@': 221}, {'@': 108}, {'@': 104}, {'@': 84}, {'@': 91}, {'@': 224}, {'@': 95}, {'@': 89}, {'@': 83}, {'@': 96}, {'@': 93}, {'@': 237}, {'@': 242}, {'@': 230}, {'@': 167}, {'@': 120}, {'@': 183}, {'@': 122}, {'@': 173}, {'@': 85}, {'@': 236}, {'@': 73}, {'@': 222}, {'@': 75}, {'@': 160}, {'@': 239}, {'@': 247}, {'@': 220}, {'@': 244}, {'@': 223}, {'@': 217}, {'@': 181}, {'@': 179}, {'@': 163}, {'@': 184}, {'@': 170}, {'@': 259}, {'@': 233}, {'@': 131}, {'@': 117}, {'@': 260}, {'@': 152}, {'@': 215}, {'@': 201}, {'@': 134}, {'@': 125}, {'@': 255}, {'@': 243}, {'@': 199}, {'@': 249}, {'@': 270}, {'@': 195}, {'@': 238}, {'@': 253}, {'@': 129}, {'@': 196}, {'@': 137}, {'@': 79}, {'@': 187}, {'@': 185}, {'@': 119}, {'@': 132}, {'@': 98}, {'@': 102}, {'@': 92}, {'@': 114}, {'@': 180}, {'@': 178}, {'@': 154}, {'@': 225}, {'@': 174}, {'@': 246}, {'@': 172}, {'@': 81}, {'@': 176}, {'@': 161}, {'@': 147}, {'@': 105}, {'@': 100}, {'@': 97}, {'@': 150}, {'@': 127}, {'@': 211}, {'@': 193}, {'@': 214}, {'@': 235}, {'@': 88}, {'@': 216}, {'@': 175}, {'@': 252}, {'@': 212}, {'@': 231}, {'@': 72}, {'@': 74}, {'@': 148}, {'@': 258}, {'@': 149}, {'@': 171}, {'@': 169}, {'@': 145}, {'@': 86}, {'@': 143}, {'@': 133}, {'@': 219}, {'@': 123}, {'@': 218}, {'@': 87}, {'@': 177}, {'@': 106}, {'@': 99}, {'@': 168}, {'@': 101}, {'@': 182}, {'@': 155}, {'@': 156}, {'@': 227}, {'@': 248}, {'@': 165}, {'@': 151}, {'@': 82}, {'@': 80}, {'@': 273}, {'@': 158}, {'@': 263}, {'@': 266}, {'@': 205}, {'@': 251}, {'@': 110}, {'@': 203}, {'@': 78}, {'@': 138}, {'@': 226}, {'@': 190}, {'@': 229}, {'@': 272}, {'@': 228}, {'@': 257}, {'@': 140}, {'@': 234}, {'@': 141}, {'@': 232}, {'@': 265}, {'@': 166}, {'@': 240}, {'@': 157}, {'@': 202}, {'@': 250}, {'@': 241}, {'@': 271}, {'@': 103}, {'@': 121}, {'@': 94}, {'@': 124}, {'@': 164}, {'@': 126}, {'@': 213}, {'@': 115}, {'@': 267}, {'@': 256}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache_grammar': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': None, 'ambiguity': 'auto', 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'PERCENT', 'pattern': {'value': '%', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 1: {'name': '_DEFEQ', 'pattern': {'value': ':=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 2: {'name': 'EQ', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 3: {'name': 'GT', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 4: {'name': 'LT', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 5: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 6: {'name': '_IS', 'pattern': {'value': '(?:(?:are|is)|\\∈)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 7: {'name': 'PROP_VAL', 'pattern': {'value': '(?:(?i:(?:(?i:sometimes)|(?i:true)))|(?i:false))', 'flags': ['i'], '_width': [4, 9], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 8: {'name': 'COMP', 'pattern': {'value': '(?:(?:(?:\\!|\\~)|\\¬)|not)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 9: {'name': '_IMPLIES', 'pattern': {'value': '(?:(?:\\=\\>|\\⇒)|\\⟹\\ )', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 10: {'name': '_IFF', 'pattern': {'value': '(?:(?:(?:\\<\\=\\>|\\⟺)|\\⇔)|iff)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 11: {'name': 'CONJ', 'pattern': {'value': '(?:(?:(?:\\&|\\/\\\\)|\\∧)|and)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 12: {'name': 'DISJ', 'pattern': {'value': '(?:(?:(?:\\||\\\\\\/)|\\∨)|or)', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 13: {'name': 'VAR', 'pattern': {'value': '(?!(match|with|do|if|then|else|otherwise|iff|is|are|forall|exists|not|or|and|sometimes|true|false)\\b)[a-z_][a-zA-Z_0-9]*', 'flags': ['i'], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 14: {'name': 'COMMENT', 'pattern': {'value': '\\/\\/[^\n]*', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 15: {'name': 'INT', 'pattern': {'value': '(?:[0-9])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 16: {'name': 'WS', 'pattern': {'value': '(?:[ \t\x0c\r\n])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 17: {'name': 'ESCAPED_STRING', 'pattern': {'value': '\\".*?(?<!\\\\)(\\\\\\\\)*?\\"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 18: {'name': 'HASH', 'pattern': {'value': '#', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 19: {'name': '__ANON_0', 'pattern': {'value': 'save_aut', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 20: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 21: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 22: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 23: {'name': '__ANON_1', 'pattern': {'value': 'save_aut_img', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 24: {'name': 'CONTEXT', 'pattern': {'value': 'context', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 25: {'name': '__ANON_2', 'pattern': {'value': 'end_context', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 26: {'name': 'LOAD', 'pattern': {'value': 'load', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 27: {'name': '__ANON_3', 'pattern': {'value': 'assert_prop', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 28: {'name': 'IMPORT', 'pattern': {'value': 'import', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 29: {'name': 'FORGET', 'pattern': {'value': 'forget', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 30: {'name': 'TYPE', 'pattern': {'value': 'type', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 31: {'name': 'SHUFFLE', 'pattern': {'value': 'shuffle', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 32: {'name': '__ANON_4', 'pattern': {'value': 'shuffle_or', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 33: {'name': 'RESTRICT', 'pattern': {'value': 'Restrict', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 34: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 35: {'name': 'DEFINE', 'pattern': {'value': 'Define', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 36: {'name': 'EXECUTE', 'pattern': {'value': 'Execute', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 37: {'name': 'DISPLAY', 'pattern': {'value': 'Display', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 38: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 39: {'name': 'THEN', 'pattern': {'value': 'then', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 40: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 41: {'name': 'BACKSLASH', 'pattern': {'value': '\\', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 42: {'name': 'LET', 'pattern': {'value': 'let', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 43: {'name': 'BE', 'pattern': {'value': 'be', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 44: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 45: {'name': 'MATCH', 'pattern': {'value': 'match', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 46: {'name': 'WITH', 'pattern': {'value': 'with', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 47: {'name': 'END', 'pattern': {'value': 'end', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 48: {'name': 'SEMICOLON', 'pattern': {'value': ';', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 49: {'name': 'DO', 'pattern': {'value': 'do', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 50: {'name': 'CASE', 'pattern': {'value': 'case', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 51: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 52: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 53: {'name': '__ANON_5', 'pattern': {'value': '[^\x00-ÿ]', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 54: {'name': 'AT', 'pattern': {'value': '@', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 55: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 56: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 57: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 58: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 59: {'name': 'CIRCUMFLEX', 'pattern': {'value': '^', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 60: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 61: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 62: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 63: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 64: {'name': '__ANON_6', 'pattern': {'value': '≠', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 65: {'name': '__ANON_7', 'pattern': {'value': '≥', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 66: {'name': '__ANON_8', 'pattern': {'value': '≤', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 67: {'name': 'FORALL', 'pattern': {'value': 'forall', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 68: {'name': '__ANON_9', 'pattern': {'value': '∀', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 69: {'name': 'EXISTS', 'pattern': {'value': 'exists', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 70: {'name': '__ANON_10', 'pattern': {'value': '∃', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 71: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'prog', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 72: {'origin': {'name': 'div_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 73: {'origin': {'name': 'praline_exponent', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': '__praline_exponent_star_10', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_exponent', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 74: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'var_ref', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 75: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': 'praline_atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_app', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 76: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': 'prog', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 77: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': '__operator_sym_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': 'varlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'def', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comparison', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'def', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exponent', '__type__': 'NonTerminal'}, {'name': '__praline_div_star_9', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': 'var', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'var_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': 'sub_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pred_definition', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'conj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': '__add_expr_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_5', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'ge', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'greater_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': '_IFF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'iff', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': '_ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'le', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'less_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': 'ge', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'disj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': '__sub_expr_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'greater', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': '_ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'directive_save_aut_img', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': 'prop_val', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PROP_VAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'prop_val_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'directive_save_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': 'praline_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_operator', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'forall_sym', '__type__': 'NonTerminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'forall', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': '__div_expr_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__div_expr_star_18', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'CONTEXT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'directive_context', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_list_gen', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'TYPE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'val_dict', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'directive_type', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'if_then_else', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}, {'name': '__praline_add_star_7', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': '__sub_expr_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__sub_expr_star_15', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}, {'name': '__praline_mul_star_8', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'call_is_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': '__add_expr_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__add_expr_star_16', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'index', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'praline_match_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'formal_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'prop_val', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'directive_assert_prop', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'if_then_else', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [False, False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'call_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DISPLAY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_display', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RESTRICT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'restriction', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': 'varlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '__varlist_star_14', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': '__operator_sym_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__operator_sym_plus_5', '__type__': 'NonTerminal'}, {'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': '__praline_div_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': '__praline_exponent_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXECUTE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_execute', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': 'arg', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'partial_op_snd', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'partial_op_fst', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'less', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'int_const', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arith', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_10', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': 'praline_tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_match_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': 'le', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_le', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': 'le', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_8', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': '__term_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__term_plus_1', '__type__': 'NonTerminal'}, {'name': 'match_arm', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_match_int', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '_ne', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'not_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__term_star_2', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_tuple', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXISTS', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': '__praline_list_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_list_star_11', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': '_ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg', '__type__': 'NonTerminal'}, {'name': '__args_star_19', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': 'pecan_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_pecan_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'call', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'formal_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': 'add_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': 'string', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ESCAPED_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'escaped_str', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 9, 'alias': 'comp', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_list', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'exists_sym', '__type__': 'NonTerminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'exists', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pecan_term', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': 'ge', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_7', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': 'pecan_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_pecan_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pred', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'implies', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_match_string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'WITH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__term_plus_1', '__type__': 'NonTerminal'}, {'name': 'END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_match', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': '__praline_sub_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_sub_star_6', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': 'match_arm', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CASE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_match_arm', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'praline_let', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'index_range', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'def_pred_is_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'formal_is_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LOAD', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'directive_load_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SHUFFLE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': 'directive_shuffle', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': 'restriction', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'restrict_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_4', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': 'directive_shuffle_or', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': '__val_dict_star_13', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': '__val_dict_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'praline_match_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': '__match_expr_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'BE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pecan_term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_let_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '__match_expr_star_3', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_if', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'praline_match_prepend', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'index_range', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': 'mul_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': '__div_expr_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': 'arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'sub_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 215: {'origin': {'name': 'praline_tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': 'add_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mul_expr', '__type__': 'NonTerminal'}, {'name': '__add_expr_star_16', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': 'int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'int_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'call_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 220: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': 'operator_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__operator_sym_plus_5', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'operator_sym', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': 'praline_exponent', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_exponent', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 223: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 224: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 225: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'formula_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': '__praline_sub_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FORALL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': '__praline_mul_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 229: {'origin': {'name': '__praline_add_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}, {'name': '__praline_sub_star_6', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': 'div_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '__div_expr_star_18', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': '__praline_exponent_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_exponent_star_10', '__type__': 'NonTerminal'}, {'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 234: {'origin': {'name': '__praline_div_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_div_star_9', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': 'sub_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_expr', '__type__': 'NonTerminal'}, {'name': '__sub_expr_star_15', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'formal_var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': '__varlist_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 243: {'origin': {'name': 'restriction', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'restrict_is', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': 'praline_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'spot_formula', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_int', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_9', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'def_pred_standard', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': '__val_dict_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__val_dict_star_13', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 251: {'origin': {'name': '__match_expr_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__match_expr_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': 'mul_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'div_expr', '__type__': 'NonTerminal'}, {'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'formal_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 254: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'directive_end_context', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 255: {'origin': {'name': 'kv_pair', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'kv_pair', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 256: {'origin': {'name': '__args_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__args_star_19', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 257: {'origin': {'name': '__praline_mul_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_mul_star_8', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 258: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 259: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__praline_list_star_11', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 260: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_list_gen', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 261: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__term_star_2', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 262: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BACKSLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_lambda', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 263: {'origin': {'name': '__term_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 264: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEFINE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_def', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 265: {'origin': {'name': '__praline_list_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 266: {'origin': {'name': '__term_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__term_star_2', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': '__args_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 268: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'FORGET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'directive_forget', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 269: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'directive_import', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 270: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'def_pred_is', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 271: {'origin': {'name': '__varlist_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__varlist_star_14', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 272: {'origin': {'name': '__praline_add_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_add_star_7', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 273: {'origin': {'name': '__term_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_arm', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(transformer=None, postlex=None):
  namespace = {'Rule': Rule, 'TerminalDef': TerminalDef}
  return Lark.deserialize(DATA, namespace, MEMO, transformer=transformer, postlex=postlex)
