# The file was automatically generated by Lark v0.9.0
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

import os
from io import open

class LarkError(Exception):
    pass

class GrammarError(LarkError):
    pass

class ParseError(LarkError):
    pass

class LexError(LarkError):
    pass

class UnexpectedEOF(ParseError):
    def __init__(self, expected):
        self.expected = expected

        message = ("Unexpected end-of-input. Expected one of: \n\t* %s\n" % '\n\t* '.join(x.name for x in self.expected))
        super(UnexpectedEOF, self).__init__(message)


class UnexpectedInput(LarkError):
    pos_in_stream = None

    def get_context(self, text, span=40):
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        before = text[start:pos].rsplit('\n', 1)[-1]
        after = text[pos:end].split('\n', 1)[0]
        return before + after + '\n' + ' ' * len(before) + '^\n'

    def match_examples(self, parse_fn, examples, token_type_match_fallback=False):
        """ Given a parser instance and a dictionary mapping some label with
            some malformed syntax examples, it'll return the label for the
            example that bests matches the current error.
        """
        assert self.state is not None, "Not supported for this exception"

        candidate = (None, False)
        for label, example in examples.items():
            assert not isinstance(example, STRING_TYPE)

            for malformed in example:
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        try:
                            if ut.token == self.token:  # Try exact match first
                                return label

                            if token_type_match_fallback:
                                # Fallback to token types match
                                if (ut.token.type == self.token.type) and not candidate[-1]:
                                    candidate = label, True

                        except AttributeError:
                            pass
                        if not candidate[0]:
                            candidate = label, False

        return candidate[0]


class UnexpectedCharacters(LexError, UnexpectedInput):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None):
        message = "No terminal defined for '%s' at line %d col %d" % (seq[lex_pos], line, column)

        self.line = line
        self.column = column
        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.pos_in_stream = lex_pos
        self.state = state

        message += '\n\n' + self.get_context(seq)
        if allowed:
            message += '\nExpecting: %s\n' % allowed
        if token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in token_history)

        super(UnexpectedCharacters, self).__init__(message)



class UnexpectedToken(ParseError, UnexpectedInput):
    def __init__(self, token, expected, considered_rules=None, state=None, puppet=None):
        self.token = token
        self.expected = expected     # XXX str shouldn't necessary
        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.considered_rules = considered_rules
        self.state = state
        self.pos_in_stream = getattr(token, 'pos_in_stream', None)
        self.puppet = puppet

        message = ("Unexpected token %r at line %s, column %s.\n"
                   "Expected one of: \n\t* %s\n"
                   % (token, self.line, self.column, '\n\t* '.join(self.expected)))

        super(UnexpectedToken, self).__init__(message)

class VisitError(LarkError):
    """VisitError is raised when visitors are interrupted by an exception

    It provides the following attributes for inspection:
    - obj: the tree node or token it was processing when the exception was raised
    - orig_exc: the exception that cause it to fail
    """
    def __init__(self, rule, obj, orig_exc):
        self.obj = obj
        self.orig_exc = orig_exc

        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

def classify(seq, key=None, value=None):
    d = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data, namespace, memo):
    if isinstance(data, dict):
        if '__type__' in data: # Object
            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


class Serialize(object):
    def memo_serialize(self, types_to_memoize):
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None):
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        postprocess = getattr(self, '_serialize', None)
        if postprocess:
            postprocess(res, memo)
        return res

    @classmethod
    def deserialize(cls, data, memo):
        namespace = getattr(cls, '__serialize_namespace__', {})
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)
        postprocess = getattr(inst, '_deserialize', None)
        if postprocess:
            postprocess()
        return inst


class SerializeMemoizer(Serialize):
    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize):
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value):
        return isinstance(value, self.types_to_memoize)

    def serialize(self):
        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data, namespace, memo):
        return _deserialize(data, namespace, memo)



try:
    STRING_TYPE = basestring
except NameError:   # Python 3
    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')
try:
    classtype = types.ClassType # Python2
except AttributeError:
    classtype = type    # Python3

def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (classtype, type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        return wraps(f.func)(create_decorator(lambda *args, **kw: f(*args[1:], **kw), True))

    else:
        return create_decorator(f.__func__.__call__, True)

try:
    import regex
except ImportError:
    regex = None

import sys, re
Py36 = (sys.version_info[:2] >= (3, 6))

import sre_parse
import sre_constants
categ_pattern = re.compile(r'\\p{[A-Za-z_]+}')
def get_regexp_width(expr):
    if regex:
        # Since `sre_parse` cannot deal with Unicode categories of the form `\p{Mn}`, we replace these with
        # a simple letter, which makes no difference as we are only trying to get the possible lengths of the regex
        # match here below.
        regexp_final = re.sub(categ_pattern, 'A', expr)
    else:
        if re.search(categ_pattern, expr):
            raise ImportError('`regex` module must be installed in order to use Unicode categories.', expr)
        regexp_final = expr
    try:
        return [int(x) for x in sre_parse.parse(regexp_final).getwidth()]
    except sre_constants.error:
        raise ValueError(expr)


class Meta:
    def __init__(self):
        self.empty = True

class Tree(object):
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self):
        queue = [self]
        subtrees = OrderedDict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            queue += [c for c in reversed(subtree.children)
                      if isinstance(c, Tree) and id(c) not in subtrees]

        del queue
        return reversed(list(subtrees.values()))

    def find_pred(self, pred):
        "Find all nodes where pred(tree) == True"
        return filter(pred, self.iter_subtrees())

    def find_data(self, data):
        "Find all nodes where tree.data == data"
        return self.find_pred(lambda t: t.data == data)


from inspect import getmembers, getmro

class Discard(Exception):
    pass

# Transformers

class _Decoratable:
    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            # Make sure the function isn't inherited (unless it's overwritten)
            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(value):
                continue

            # Skip if v_args already applied (at the function level)
            if hasattr(cls.__dict__[name], 'vargs_applied') or hasattr(value, 'vargs_applied'):
                continue

            static = isinstance(cls.__dict__[name], (staticmethod, classmethod))
            setattr(cls, name, decorator(value, static=static, **kwargs))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable):
    """Visits the tree recursively, starting with the leaves and finally the root (bottom-up)

    Calls its methods (provided by user via inheritance) according to tree.data
    The returned value replaces the old one in the structure.

    Can be used to implement map or reduce.
    """
    __visit_tokens__ = True   # For backwards compatibility

    def __init__(self,  visit_tokens=True):
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)


    def _transform_children(self, children):
        for c in children:
            try:
                if isinstance(c, Tree):
                    yield self._transform_tree(c)
                elif self.__visit_tokens__ and isinstance(c, Token):
                    yield self._call_userfunc_token(c)
                else:
                    yield c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        return self._transform_tree(tree)

    def __mul__(self, other):
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        "Default operation on tree (for override)"
        return Tree(data, children, meta)

    def __default_token__(self, token):
        "Default operation on token (for override)"
        return token



class InlineTransformer(Transformer):   # XXX Deprecated
    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    "Non-recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):           # Cancel recursion
        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer):
    "Non-recursive. Doesn't change the original tree."

    def transform(self, tree):
        # Tree to postfix
        rev_postfix = []
        q = [tree]
        while q:
            t = q.pop()
            rev_postfix.append( t )
            if isinstance(t, Tree):
                q += t.children

        # Postfix to tree
        stack = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []
                stack.append(self._call_userfunc(x, args))
            else:
                stack.append(x)

        t ,= stack  # We should have only one tree remaining
        return t



class Transformer_InPlaceRecursive(Transformer):
    "Recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)



# Visitors

class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        "Default operation on tree (for override)"
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase):
    """Bottom-up visitor, non-recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self,tree):
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree

class Visitor_Recursive(VisitorBase):
    """Bottom-up visitor, recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree):
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree



def visit_children_decor(func):
    "See Interpreter"
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter(_Decoratable):
    """Top-down visitor, recursive

    Visits the tree, starting with the root and finally the leaves (top-down)
    Calls its methods (provided by user via inheritance) according to tree.data

    Unlike Transformer and Visitor, the Interpreter doesn't automatically visit its sub-branches.
    The user has to explicitly call visit_children, or use the @visit_children_decor
    """

    def visit(self, tree):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)




# Decorators

def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)



def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   # XXX Deprecated
    return _apply_decorator(obj, _inline_args__func)



def _visitor_args_func_dec(func, visit_wrapper=None, static=False):
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    if static:
        f = wraps(func)(create_decorator(func, False))
    else:
        f = smart_decorator(func, create_decorator)
    f.vargs_applied = True
    f.visit_wrapper = visit_wrapper
    return f


def _vargs_inline(f, data, children, meta):
    return f(*children)
def _vargs_meta_inline(f, data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, data, children, meta):
    return f(children, meta)   # TODO swap these for consistency? Backwards incompatible!
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))

def v_args(inline=False, meta=False, tree=False, wrapper=None):
    "A convenience decorator factory, for modifying the behavior of user-supplied visitor methods"
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, visit_wrapper=func)
    return _visitor_args_dec



class Indenter:
    def __init__(self):
        self.paren_level = None
        self.indent_level = None
        assert self.tab_len > 0

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)



class Symbol(Serialize):
    __slots__ = ('name',)

    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)



class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term = False



class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'template_source', 'empty_indices'

    def __init__(self, keep_all_tokens=False, expand1=False, priority=None, template_source=None, empty_indices=()):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source
        )


class Rule(Serialize):
    """
        origin : a symbol
        expansion : a list of symbols
        order : index of this expansion amongst all rules of the same name
    """
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion





class Pattern(Serialize):

    def __init__(self, value, flags=()):
        self.value = value
        self.flags = frozenset(flags)

    def __repr__(self):
        return repr(self.to_regexp())

    # Pattern Hashing assumes all subclasses have a different priority!
    def __hash__(self):
        return hash((type(self), self.value, self.flags))
    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    def to_regexp(self):
        raise NotImplementedError()

    if Py36:
        # Python 3.6 changed syntax for flags in regular expression
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s:%s)' % (f, value))
            return value

    else:
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s)' % f) + value
            return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type = "str"

    def to_regexp(self):
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self):
        return len(self.value)
    max_width = min_width

class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type = "re"

    def to_regexp(self):
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self):
        return self._get_width()[0]
    @property
    def max_width(self):
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    def __init__(self, name, pattern, priority=1):
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)



class Token(Str):
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        try:
            self = super(Token, cls).__new__(cls, value)
        except UnicodeDecodeError:
            value = value.decode('latin1')
            self = super(Token, cls).__new__(cls, value)

        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        self.end_line = end_line
        self.end_column = end_column
        self.end_pos = end_pos
        return self

    def update(self, type_=None, value=None):
        return Token.new_borrow_pos(
            type_ if type_ is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer, state=None):
        self.lexer = lexer
        self.state = state

    def lex(self, stream, newline_types, ignore_types):
        newline_types = frozenset(newline_types)
        ignore_types = frozenset(ignore_types)
        line_ctr = LineCounter()
        last_token = None

        while line_ctr.char_pos < len(stream):
            lexer = self.lexer
            res = lexer.match(stream, line_ctr.char_pos)
            if not res:
                allowed = {v for m, tfi in lexer.mres for v in tfi.values()} - ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column, allowed=allowed, state=self.state, token_history=last_token and [last_token])

            value, type_ = res

            if type_ not in ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                line_ctr.feed(value, type_ in newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in lexer.callback:
                    t = lexer.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise ValueError("Callbacks must return a token (returned %r)" % t)
                yield t
                last_token = t
            else:
                if type_ in lexer.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    lexer.callback[type_](t2)
                line_ctr.feed(value, type_ in newline_types)




class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t

class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2





def _create_unless(terminals, g_regex_flags, re_):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = [] # {}
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority > retok.priority:
                continue
            s = strtok.pattern.value
            m = re_.match(retok.pattern.to_regexp(), s, g_regex_flags)
            if m and m.group(0) == s:
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(build_mres(unless, g_regex_flags, re_, match_whole=True))

    terminals = [t for t in terminals if t not in embedded_strs]
    return terminals, callback


def _build_mres(terminals, max_size, g_regex_flags, match_whole, re_):
    # Python sets an unreasonable group limit (currently 100) in its re module
    # Worse, the only way to know we reached it is by catching an AssertionError!
    # This function recursively tries less and less groups until it's successful.
    postfix = '$' if match_whole else ''
    mres = []
    while terminals:
        try:
            mre = re_.compile(u'|'.join(u'(?P<%s>%s)'%(t.name, t.pattern.to_regexp()+postfix) for t in terminals[:max_size]), g_regex_flags)
        except AssertionError:  # Yes, this is what Python provides us.. :/
            return _build_mres(terminals, max_size//2, g_regex_flags, match_whole, re_)

        # terms_from_name = {t.name: t for t in terminals[:max_size]}
        mres.append((mre, {i:n for n,i in mre.groupindex.items()} ))
        terminals = terminals[max_size:]
    return mres

def build_mres(terminals, g_regex_flags, re_, match_whole=False):
    return _build_mres(terminals, len(terminals), g_regex_flags, match_whole, re_)

def _regexp_has_newline(r):
    r"""Expressions that may indicate newlines in a regexp:
        - newlines (\n)
        - escaped newline (\\n)
        - anything but ([^...])
        - any-char (.) when the flag (?s) exists
        - spaces (\s)
    """
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)

class Lexer(object):
    """Lexer interface

    Method Signatures:
        lex(self, stream) -> Iterator[Token]
    """
    lex = NotImplemented


class TraditionalLexer(Lexer):

    def __init__(self, terminals, re_, ignore=(), user_callbacks={}, g_regex_flags=0):
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        terminals = list(terminals)

        self.re = re_
        # Sanitization
        for t in terminals:
            try:
                self.re.compile(t.pattern.to_regexp(), g_regex_flags)
            except self.re.error:
                raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

            if t.pattern.min_width == 0:
                raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

        assert set(ignore) <= {t.name for t in terminals}

        # Init
        self.newline_types = [t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp())]
        self.ignore_types = list(ignore)

        terminals.sort(key=lambda x:(-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = user_callbacks
        self.build(g_regex_flags)

    def build(self, g_regex_flags=0):
        terminals, self.callback = _create_unless(self.terminals, g_regex_flags, re_=self.re)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                # Already a callback there, probably UnlessCallback
                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self.mres = build_mres(terminals, g_regex_flags, self.re)

    def match(self, stream, pos):
        for mre, type_from_index in self.mres:
            m = mre.match(stream, pos)
            if m:
                return m.group(0), type_from_index[m.lastindex]

    def lex(self, stream):
        return _Lex(self).lex(stream, self.newline_types, self.ignore_types)




class ContextualLexer(Lexer):

    def __init__(self, terminals, states, re_, ignore=(), always_accept=(), user_callbacks={}, g_regex_flags=0):
        self.re = re_
        tokens_by_name = {}
        for t in terminals:
            assert t.name not in tokens_by_name, t
            tokens_by_name[t.name] = t

        lexer_by_tokens = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(ignore) | set(always_accept)
                state_tokens = [tokens_by_name[n] for n in accepts if n and n in tokens_by_name]
                lexer = TraditionalLexer(state_tokens, re_=self.re, ignore=ignore, user_callbacks=user_callbacks, g_regex_flags=g_regex_flags)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        self.root_lexer = TraditionalLexer(terminals, re_=self.re, ignore=ignore, user_callbacks=user_callbacks, g_regex_flags=g_regex_flags)

    def lex(self, stream, get_parser_state):
        parser_state = get_parser_state()
        l = _Lex(self.lexers[parser_state], parser_state)
        try:
            for x in l.lex(stream, self.root_lexer.newline_types, self.root_lexer.ignore_types):
                yield x
                parser_state = get_parser_state()
                l.lexer = self.lexers[parser_state]
                l.state = parser_state # For debug only, no need to worry about multithreading
        except UnexpectedCharacters as e:
            # In the contextual lexer, UnexpectedCharacters can mean that the terminal is defined,
            # but not in the current context.
            # This tests the input against the global context, to provide a nicer error.
            root_match = self.root_lexer.match(stream, e.pos_in_stream)
            if not root_match:
                raise

            value, type_ = root_match
            t = Token(type_, value, e.pos_in_stream, e.line, e.column)
            raise UnexpectedToken(t, e.allowed, state=e.state)



class LexerConf(Serialize):
    __serialize_fields__ = 'tokens', 'ignore', 'g_regex_flags'
    __serialize_namespace__ = TerminalDef,

    def __init__(self, tokens, ignore=(), postlex=None, callbacks=None, g_regex_flags=0):
        self.tokens = tokens
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags

    def _deserialize(self):
        self.callbacks = {} # TODO


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)

class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        # local reference to Tree.meta reduces number of presence checks
        if isinstance(res, Tree):
            res_meta = res.meta
            for c in children:
                if isinstance(c, Tree):
                    child_meta = c.meta
                    if not child_meta.empty:
                        res_meta.line = child_meta.line
                        res_meta.column = child_meta.column
                        res_meta.start_pos = child_meta.start_pos
                        res_meta.empty = False
                        break
                elif isinstance(c, Token):
                    res_meta.line = c.line
                    res_meta.column = c.column
                    res_meta.start_pos = c.pos_in_stream
                    res_meta.empty = False
                    break

            for c in reversed(children):
                if isinstance(c, Tree):
                    child_meta = c.meta
                    if not child_meta.empty:
                        res_meta.end_line = child_meta.end_line
                        res_meta.end_column = child_meta.end_column
                        res_meta.end_pos = child_meta.end_pos
                        res_meta.empty = False
                        break
                elif isinstance(c, Token):
                    res_meta.end_line = c.end_line
                    res_meta.end_column = c.end_column
                    res_meta.end_pos = c.end_pos
                    res_meta.empty = False
                    break

        return res


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR_NoPlaceholders(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)

def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')

def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices):
    # Prepare empty_indices as: How many Nones to insert at each index?
    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            # LALR without placeholders
            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])

class AmbiguousExpander:
    """Deal with the case where we're expanding children ('_rule') into a parent but the children
       are ambiguous. i.e. (parent->_ambig->_expand_this_rule). In this case, make the parent itself
       ambiguous with as many copies as their are ambiguous children, and then copy the ambiguous children
       into the right parents in the right places, essentially shifting the ambiguiuty up the tree."""
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(child):
            return hasattr(child, 'data') and child.data == '_ambig'

        #### When we're repeatedly expanding ambiguities we can end up with nested ambiguities.
        #    All children of an _ambig node should be a derivation of that ambig node, hence
        #    it is safe to assume that if we see an _ambig node nested within an ambig node
        #    it is safe to simply expand it into the parent _ambig node as an alternative derivation.
        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                to_expand = [j for j, grandchild in enumerate(child.children) if _is_ambig_tree(grandchild)]
                child.expand_kids_by_index(*to_expand)

        if not ambiguous:
            return self.node_builder(children)

        expand = [ iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children) ]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])

def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)

def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f

def inplace_transformer(func):
    @wraps(func)
    def f(children):
        # function name in a Transformer is a rule name.
        tree = Tree(func.__name__, children)
        return func(tree)
    return f

def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")
    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, keep_all_tokens=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                self.propagate_positions and PropagatePositions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
            ]))

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callbacks = {}

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.options.template_source or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                # XXX InlineTransformer is deprecated!
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                else:
                    if isinstance(transformer, InlineTransformer):
                        f = ptb_inline_args(f)
                    elif isinstance(transformer, Transformer_InPlace):
                        f = inplace_transformer(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks



class LALR_Parser(object):
    def __init__(self, parser_conf, debug=False):
        assert all(r.options.priority is None for r in parser_conf.rules), "LALR doesn't yet support prioritization"
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks)
        return inst

    def serialize(self, memo):
        return self._parse_table.serialize(memo)

    def parse(self, *args):
        return self.parser.parse(*args)


class _Parser:
    def __init__(self, parse_table, callbacks, debug=False):
        self.parse_table = parse_table
        self.callbacks = callbacks
        self.debug = debug

    def parse(self, seq, start, set_state=None, value_stack=None, state_stack=None):
        token = None
        stream = iter(seq)
        states = self.parse_table.states
        start_state = self.parse_table.start_states[start]
        end_state = self.parse_table.end_states[start]

        state_stack = state_stack or [start_state]
        value_stack = value_stack or []

        if set_state: set_state(start_state)

        def get_action(token):
            state = state_stack[-1]
            try:
                return states[state][token.type]
            except KeyError:
                expected = [s for s in states[state].keys() if s.isupper()]
                try:
                    puppet = ParserPuppet(self, state_stack, value_stack, start, stream, set_state)
                except NameError:
                    puppet = None
                raise UnexpectedToken(token, expected, state=state, puppet=puppet)

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = states[state_stack[-1]][rule.origin.name]
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        try:
            for token in stream:
                while True:
                    action, arg = get_action(token)
                    assert arg != end_state

                    if action is Shift:
                        state_stack.append(arg)
                        value_stack.append(token)
                        if set_state: set_state(arg)
                        break # next token
                    else:
                        reduce(arg)
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state_stack):
                    print('%d)' % i , s)
                print("")

            raise

        token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
        while True:
            _action, arg = get_action(token)
            assert(_action is Reduce)
            reduce(arg)
            if state_stack[-1] == end_state:
                return value_stack[-1]



class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()
        rules = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def get_frontend(parser, lexer):
    if parser=='lalr':
        if lexer is None:
            raise ValueError('The LALR parser requires use of a lexer')
        elif lexer == 'standard':
            return LALR_TraditionalLexer
        elif lexer == 'contextual':
            return LALR_ContextualLexer
        elif issubclass(lexer, Lexer):
            return partial(LALR_CustomLexer, lexer)
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser=='earley':
        if lexer=='standard':
            return Earley
        elif lexer=='dynamic':
            return XEarley
        elif lexer=='dynamic_complete':
            return XEarley_CompleteLex
        elif lexer=='contextual':
            raise ValueError('The Earley parser does not support the contextual parser')
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser == 'cyk':
        if lexer == 'standard':
            return CYK
        else:
            raise ValueError('CYK parser requires using standard parser.')
    else:
        raise ValueError('Unknown parser: %s' % parser)


class _ParserFrontend(Serialize):
    def _parse(self, input, start, *args):
        if start is None:
            start = self.start
            if len(start) > 1:
                raise ValueError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start)
            start ,= start
        return self.parser.parse(input, start, *args)


class WithLexer(_ParserFrontend):
    lexer = None
    parser = None
    lexer_conf = None
    start = None

    __serialize_fields__ = 'parser', 'lexer_conf', 'start'
    __serialize_namespace__ = LexerConf,

    def __init__(self, lexer_conf, parser_conf, re_, options=None):
        self.lexer_conf = lexer_conf
        self.start = parser_conf.start
        self.postlex = lexer_conf.postlex
        self.re = re_

    @classmethod
    def deserialize(cls, data, memo, callbacks, postlex, re_):
        inst = super(WithLexer, cls).deserialize(data, memo)
        inst.re = re_
        inst.postlex = postlex
        inst.parser = LALR_Parser.deserialize(inst.parser, memo, callbacks)
        inst.init_lexer()
        return inst

    def _serialize(self, data, memo):
        data['parser'] = data['parser'].serialize(memo)

    def lex(self, *args):
        stream = self.lexer.lex(*args)
        return self.postlex.process(stream) if self.postlex else stream

    def parse(self, text, start=None):
        token_stream = self.lex(text)
        return self._parse(token_stream, start)

    def init_traditional_lexer(self):
        self.lexer = TraditionalLexer(self.lexer_conf.tokens, re_=self.re, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks, g_regex_flags=self.lexer_conf.g_regex_flags)

class LALR_WithLexer(WithLexer):
    def __init__(self, lexer_conf, parser_conf, re_, options=None):
        debug = options.debug if options else False
        self.re = re_
        self.parser = LALR_Parser(parser_conf, debug=debug)
        WithLexer.__init__(self, lexer_conf, parser_conf, re_, options)

        self.init_lexer()

    def init_lexer(self):
        raise NotImplementedError()

class LALR_TraditionalLexer(LALR_WithLexer):
    def init_lexer(self):
        self.init_traditional_lexer()

class LALR_ContextualLexer(LALR_WithLexer):
    def init_lexer(self):
        states = {idx:list(t.keys()) for idx, t in self.parser._parse_table.states.items()}
        always_accept = self.postlex.always_accept if self.postlex else ()
        self.lexer = ContextualLexer(self.lexer_conf.tokens, states,
                                     re_=self.re,
                                     ignore=self.lexer_conf.ignore,
                                     always_accept=always_accept,
                                     user_callbacks=self.lexer_conf.callbacks,
                                     g_regex_flags=self.lexer_conf.g_regex_flags)


    def parse(self, text, start=None):
        parser_state = [None]
        def set_parser_state(s):
            parser_state[0] = s

        token_stream = self.lex(text, lambda: parser_state[0])
        return self._parse(token_stream, start, set_parser_state)


class LarkOptions(Serialize):
    """Specifies the options for Lark

    """
    OPTIONS_DOC = """
# General

    start - The start symbol. Either a string, or a list of strings for
            multiple possible starts (Default: "start")
    debug - Display debug information, such as warnings (default: False)
    transformer - Applies the transformer to every parse tree (equivlent to
                  applying it after the parse, but faster)
    propagate_positions - Propagates (line, column, end_line, end_column)
                          attributes into all tree branches.
    maybe_placeholders - When True, the `[]` operator returns `None` when not matched.
                         When `False`,  `[]` behaves like the `?` operator,
                             and returns no value at all.
                         (default=`False`. Recommended to set to `True`)
    regex - When True, uses the `regex` module instead of the stdlib `re`.
    cache - Cache the results of the Lark grammar analysis, for x2 to x3 faster loading.
            LALR only for now.
        When `False`, does nothing (default)
        When `True`, caches to a temporary file in the local directory
        When given a string, caches to the path pointed by the string

    g_regex_flags - Flags that are applied to all terminals
                    (both regex and strings)
    keep_all_tokens - Prevent the tree builder from automagically
                      removing "punctuation" tokens (default: False)

# Algorithm

    parser - Decides which parser engine to use
             Accepts "earley" or "lalr". (Default: "earley")
             (there is also a "cyk" option for legacy)

    lexer - Decides whether or not to use a lexer stage
        "auto" (default): Choose for me based on the parser
        "standard": Use a standard lexer
        "contextual": Stronger lexer (only works with parser="lalr")
        "dynamic": Flexible and powerful (only with parser="earley")
        "dynamic_complete": Same as dynamic, but tries *every* variation
                            of tokenizing possible.

    ambiguity - Decides how to handle ambiguity in the parse.
                Only relevant if parser="earley"
        "resolve": The parser will automatically choose the simplest
                    derivation (it chooses consistently: greedy for
                    tokens, non-greedy for rules)
        "explicit": The parser will return all derivations wrapped
                    in "_ambig" tree nodes (i.e. a forest).

# Domain Specific

    postlex - Lexer post-processing (Default: None) Only works with the
                standard and contextual lexers.
    priority - How priorities should be evaluated - auto, none, normal,
                invert (Default: auto)
    lexer_callbacks - Dictionary of callbacks for the lexer. May alter
                        tokens during lexing. Use with caution.
    edit_terminals - A callback
    """
    if __doc__:
        __doc__ += OPTIONS_DOC

    _defaults = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'regex': False,
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': False,
        'edit_terminals': None,
        'g_regex_flags': 0,
    }

    def __init__(self, options_dict):
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name != 'cache':
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], STRING_TYPE):
            options['start'] = [options['start']]

        self.__dict__['options'] = options

        assert self.parser in ('earley', 'lalr', 'cyk', None)

        if self.parser == 'earley' and self.transformer:
            raise ValueError('Cannot specify an embedded transformer when using the Earley algorithm.'
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ValueError("Unknown options: %s" % o.keys())

    def __getattr__(self, name):
        try:
            return self.options[name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name, value):
        assert name in self.options
        self.options[name] = value

    def serialize(self, memo):
        return self.options

    @classmethod
    def deserialize(cls, data, memo):
        return cls(data)


class Lark(Serialize):
    def __init__(self, grammar, **options):
        """
            grammar : a string or file-object containing the grammar spec (using Lark's ebnf syntax)
            options : a dictionary controlling various aspects of Lark.
        """

        self.options = LarkOptions(options)

        # Set regex or re module
        use_regex = self.options.regex
        if use_regex:
            if regex:
                self.re = regex
            else:
                raise ImportError('`regex` module must be installed if calling `Lark(regex=True)`.')
        else:
            self.re = re

        # Some, but not all file-like objects have a 'name' attribute
        try:
            self.source = grammar.name
        except AttributeError:
            self.source = '<string>'

        # Drain file-like objects to get their contents
        try:
            read = grammar.read
        except AttributeError:
            pass
        else:
            grammar = read()

        assert isinstance(grammar, STRING_TYPE)

        cache_fn = None
        if self.options.cache:
            if self.options.parser != 'lalr':
                raise NotImplementedError("cache only works with parser='lalr' for now")
            if isinstance(self.options.cache, STRING_TYPE):
                cache_fn = self.options.cache
            else:
                if self.options.cache is not True:
                    raise ValueError("cache must be bool or str")
                unhashable = ('transformer', 'postlex', 'lexer_callbacks', 'edit_terminals')
                from . import __version__
                options_str = ''.join(k+str(v) for k, v in options.items() if k not in unhashable)
                s = grammar + options_str + __version__
                md5 = hashlib.md5(s.encode()).hexdigest()
                cache_fn = '.lark_cache_%s.tmp' % md5

            if FS.exists(cache_fn):
                logging.debug('Loading grammar from cache: %s', cache_fn)
                with FS.open(cache_fn, 'rb') as f:
                    self._load(f, self.options.transformer, self.options.postlex)
                return

        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'standard'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        assert lexer in ('standard', 'contextual', 'dynamic', 'dynamic_complete') or issubclass(lexer, Lexer)

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            disambig_parsers = ['earley', 'cyk']
            assert self.options.parser in disambig_parsers, (
                'Only %s supports disambiguation right now') % ', '.join(disambig_parsers)

        if self.options.priority == 'auto':
            if self.options.parser in ('earley', 'cyk', ):
                self.options.priority = 'normal'
            elif self.options.parser in ('lalr', ):
                self.options.priority = None
        elif self.options.priority in ('invert', 'normal'):
            assert self.options.parser in ('earley', 'cyk'), "priorities are not supported for LALR at this time"

        assert self.options.priority in ('auto', None, 'normal', 'invert'), 'invalid priority option specified: {}. options are auto, none, normal, invert.'.format(self.options.priority)
        assert self.options.ambiguity not in ('resolve__antiscore_sum', ), 'resolve__antiscore_sum has been replaced with the option priority="invert"'
        assert self.options.ambiguity in ('resolve', 'explicit', 'auto', )

        # Parse the grammar file and compose the grammars (TODO)
        self.grammar = load_grammar(grammar, self.source, self.re)

        # Compile the EBNF grammar into BNF
        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name:t for t in self.terminals}

        # If the user asked to invert the priorities, negate them all here.
        # This replaces the old 'resolve__antiscore_sum' option.
        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
        # Else, if the user asked to disable priorities, strip them from the
        # rules. This allows the Earley parsers to skip an extra forest walk
        # for improved performance, if you don't need them (or didn't specify any).
        elif self.options.priority == None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None

        # TODO Deprecate lexer_callbacks?
        lexer_callbacks = dict(self.options.lexer_callbacks)
        if self.options.transformer:
            t = self.options.transformer
            for term in self.terminals:
                if hasattr(t, term.name):
                    lexer_callbacks[term.name] = getattr(t, term.name)

        self.lexer_conf = LexerConf(self.terminals, self.ignore_tokens, self.options.postlex, lexer_callbacks, self.options.g_regex_flags)

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logging.debug('Saving grammar to cache: %s', cache_fn)
            with FS.open(cache_fn, 'wb') as f:
                self.save(f)

    if __init__.__doc__:
        __init__.__doc__ += "\nOptions:\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self):
        return TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks, g_regex_flags=self.lexer_conf.g_regex_flags)

    def _prepare_callbacks(self):
        self.parser_class = get_frontend(self.options.parser, self.options.lexer)
        self._parse_tree_builder = ParseTreeBuilder(self.rules, self.options.tree_class or Tree, self.options.propagate_positions, self.options.keep_all_tokens, self.options.parser!='lalr' and self.options.ambiguity=='explicit', self.options.maybe_placeholders)
        self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)

    def _build_parser(self):
        self._prepare_callbacks()
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return self.parser_class(self.lexer_conf, parser_conf, self.re, options=self.options)

    def save(self, f):
        data, m = self.memo_serialize([TerminalDef, Rule])
        pickle.dump({'data': data, 'memo': m}, f)

    @classmethod
    def load(cls, f):
        inst = cls.__new__(cls)
        return inst._load(f)

    def _load(self, f, transformer=None, postlex=None):
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo = d['memo']
        data = d['data']

        assert memo
        memo = SerializeMemoizer.deserialize(memo, {'Rule': Rule, 'TerminalDef': TerminalDef}, {})
        options = dict(data['options'])
        if transformer is not None:
            options['transformer'] = transformer
        if postlex is not None:
            options['postlex'] = postlex
        self.options = LarkOptions.deserialize(options, memo)
        self.re = regex if self.options.regex else re
        self.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        self.source = '<deserialized>'
        self._prepare_callbacks()
        self.parser = self.parser_class.deserialize(data['parser'], memo, self._callbacks, self.options.postlex, self.re)
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, transformer=None, postlex=None):
        inst = cls.__new__(cls)
        return inst._load({'data': data, 'memo': memo}, transformer, postlex)

    @classmethod
    def open(cls, grammar_filename, rel_to=None, **options):
        """Create an instance of Lark with the grammar given by its filename

        If rel_to is provided, the function will find the grammar filename in relation to it.

        Example:

            >>> Lark.open("grammar_file.lark", rel_to=__file__, parser="lalr")
            Lark(...)

        """
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source, self.options.parser, self.options.lexer)


    def lex(self, text):
        "Only lex (and postlex) the text, without parsing it. Only relevant when lexer='standard'"
        if not hasattr(self, 'lexer'):
            self.lexer = self._build_lexer()
        stream = self.lexer.lex(text)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name):
        "Get information about a terminal"
        return self._terminals_dict[name]

    def parse(self, text, start=None, on_error=None):
        """Parse the given text, according to the options provided.

        Parameters:
            start: str - required if Lark was given multiple possible start symbols (using the start option).
            on_error: function - if provided, will be called on UnexpectedToken error. Return true to resume parsing. LALR only.

        Returns a tree, unless specified otherwise.
        """
        try:
            return self.parser.parse(text, start=start)
        except UnexpectedToken as e:
            if on_error is None:
                raise

            while True:
                if not on_error(e):
                    raise e
                try:
                    return e.puppet.resume_parse()
                except UnexpectedToken as e2:
                    e = e2



DATA = (
{'parser': {'parser': {'tokens': {0: 'MINUS', 1: 'INF', 2: 'LPAR', 3: 'SUP', 4: 'MAX', 5: 'ANNOTATION', 6: 'VAR', 7: 'MIN', 8: 'INT', 9: 'COMMA', 10: 'DEFINING', 11: 'RPAR', 12: 'EQ', 13: '_IMPLIES', 14: 'RBRACE', 15: 'DEFINE', 16: 'RESTRICT', 17: 'HASH', 18: 'STRUCTURE', 19: 'ALIAS', 20: '$END', 21: '__ANON_5', 22: 'LET', 23: 'THEN', 24: 'ELSE', 25: 'RSQB', 26: 'DISJ', 27: 'CONJ', 28: '_IFF', 29: 'var', 30: 'STAR', 31: 'LT', 32: 'COLON', 33: '__ANON_7', 34: 'GT', 35: 'AT', 36: 'PLUS', 37: 'PERCENT', 38: 'COMP', 39: 'IN', 40: 'CASE', 41: 'SEMICOLON', 42: 'WITH', 43: 'END', 44: 'DOT', 45: '_DEFEQ', 46: 'ESCAPED_STRING', 47: 'kv_pair', 48: 'string', 49: 'atom', 50: 'expr', 51: 'add_expr', 52: 'FORALL', 53: 'div_expr', 54: 'IF', 55: 'DISTINCT', 56: 'pred', 57: 'mul_expr', 58: 'EXISTS', 59: 'bool', 60: 'call', 61: 'TRUE', 62: 'exists_sym', 63: '__ANON_12', 64: 'FALSE', 65: 'sub_expr', 66: '__ANON_11', 67: 'forall_sym', 68: 'int', 69: 'comparison', 70: 'arith', 71: 'LSQB', 72: 'praline_atom', 73: 'DO', 74: '__operator_sym_plus_5', 75: 'MATCH', 76: '__ANON_6', 77: 'app', 78: 'pecan_term', 79: 'LBRACE', 80: 'praline_mul', 81: 'praline_sub', 82: 'BACKSLASH', 83: 'praline_arith', 84: 'praline_tuple', 85: 'praline_list', 86: 'praline_exponent', 87: 'praline_operator', 88: 'praline_add', 89: 'operator_sym', 90: 'operator_sym_char', 91: 'praline_div', 92: 'term', 93: 'SLASH', 94: 'CIRCUMFLEX', 95: 'arg', 96: '_IS', 97: '__ANON_8', 98: '__ANON_9', 99: '__ANON_10', 100: 'formal', 101: 'varlist', 102: '__praline_sub_star_6', 103: 'args', 104: 'directive_name', 105: '__val_dict_star_13', 106: '__praline_div_star_9', 107: '__praline_list_star_11', 108: '__mul_expr_star_17', 109: 'NOT', 110: '__sub_expr_star_15', 111: '__varlist_star_14', 112: 'restriction', 113: 'PROP_VAL', 114: 'prop_val', 115: 'ge', 116: 'le', 117: 'ne', 118: '__div_expr_star_18', 119: '__args_star_19', 120: '__term_plus_1', 121: 'match_arm', 122: 'val_dict', 123: 'match_expr', 124: '__praline_tuple_plus_12', 125: '__start_star_0', 126: 'praline', 127: 'def', 128: 'pred_definition', 129: 'start', 130: '__match_expr_plus_4', 131: '__praline_exponent_star_10', 132: 'quant_formal', 133: '__praline_mul_star_8', 134: '__add_expr_star_16', 135: '__match_expr_star_3', 136: '__term_star_2', 137: '__praline_add_star_7', 138: '__ANON_0', 139: '__ANON_1', 140: '__ANON_3', 141: 'CONTEXT', 142: '__ANON_2', 143: 'FORGET', 144: 'IMPORT', 145: 'SHUFFLE', 146: 'PLOT', 147: 'LOAD', 148: '__ANON_4'}, 'states': {0: {0: (1, {'@': 80}), 1: (1, {'@': 80}), 2: (1, {'@': 80}), 3: (1, {'@': 80}), 4: (1, {'@': 80}), 5: (1, {'@': 80}), 6: (1, {'@': 80}), 7: (1, {'@': 80}), 8: (1, {'@': 80})}, 1: {2: (0, 94), 9: (1, {'@': 81}), 10: (1, {'@': 81}), 11: (1, {'@': 81})}, 2: {12: (0, 81)}, 3: {13: (0, 101), 14: (1, {'@': 82}), 15: (1, {'@': 82}), 16: (1, {'@': 82}), 17: (1, {'@': 82}), 11: (1, {'@': 82}), 18: (1, {'@': 82}), 19: (1, {'@': 82}), 20: (1, {'@': 82}), 21: (1, {'@': 82}), 22: (1, {'@': 82}), 23: (1, {'@': 82}), 6: (1, {'@': 82}), 24: (1, {'@': 82}), 25: (1, {'@': 82})}, 4: {14: (1, {'@': 83}), 26: (1, {'@': 83}), 15: (1, {'@': 83}), 16: (1, {'@': 83}), 17: (1, {'@': 83}), 13: (1, {'@': 83}), 11: (1, {'@': 83}), 27: (1, {'@': 83}), 18: (1, {'@': 83}), 19: (1, {'@': 83}), 20: (1, {'@': 83}), 21: (1, {'@': 83}), 22: (1, {'@': 83}), 23: (1, {'@': 83}), 6: (1, {'@': 83}), 28: (1, {'@': 83}), 24: (1, {'@': 83}), 25: (1, {'@': 83})}, 5: {6: (0, 451), 29: (0, 212)}, 6: {14: (1, {'@': 84}), 26: (1, {'@': 84}), 15: (1, {'@': 84}), 16: (1, {'@': 84}), 17: (1, {'@': 84}), 13: (1, {'@': 84}), 11: (1, {'@': 84}), 27: (1, {'@': 84}), 18: (1, {'@': 84}), 19: (1, {'@': 84}), 20: (1, {'@': 84}), 21: (1, {'@': 84}), 22: (1, {'@': 84}), 23: (1, {'@': 84}), 6: (1, {'@': 84}), 28: (1, {'@': 84}), 24: (1, {'@': 84}), 25: (1, {'@': 84})}, 7: {30: (0, 262), 0: (1, {'@': 85}), 31: (1, {'@': 85}), 26: (1, {'@': 85}), 32: (1, {'@': 85}), 33: (1, {'@': 85}), 34: (1, {'@': 85}), 35: (1, {'@': 85}), 36: (1, {'@': 85}), 37: (1, {'@': 85}), 27: (1, {'@': 85}), 24: (1, {'@': 85}), 12: (1, {'@': 85}), 38: (1, {'@': 85}), 39: (1, {'@': 85}), 40: (1, {'@': 85}), 11: (1, {'@': 85}), 9: (1, {'@': 85}), 41: (1, {'@': 85}), 42: (1, {'@': 85}), 23: (1, {'@': 85}), 43: (1, {'@': 85}), 44: (1, {'@': 85}), 25: (1, {'@': 85}), 45: (1, {'@': 85})}, 8: {46: (0, 163), 14: (0, 80), 47: (0, 85), 48: (0, 78)}, 9: {6: (0, 451), 49: (0, 155), 50: (0, 154), 51: (0, 120), 29: (0, 159), 52: (0, 143), 53: (0, 115), 54: (0, 432), 55: (0, 130), 56: (0, 218), 57: (0, 338), 5: (0, 332), 58: (0, 132), 7: (0, 362), 1: (0, 352), 2: (0, 118), 59: (0, 144), 3: (0, 357), 60: (0, 378), 38: (0, 148), 8: (0, 366), 61: (0, 145), 62: (0, 331), 4: (0, 388), 63: (0, 430), 64: (0, 157), 0: (0, 370), 65: (0, 381), 66: (0, 418), 67: (0, 441), 46: (0, 163), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 10: {11: (0, 84)}, 11: {0: (1, {'@': 86}), 1: (1, {'@': 86}), 2: (1, {'@': 86}), 3: (1, {'@': 86}), 4: (1, {'@': 86}), 5: (1, {'@': 86}), 6: (1, {'@': 86}), 7: (1, {'@': 86}), 8: (1, {'@': 86})}, 12: {6: (0, 451), 49: (0, 155), 50: (0, 154), 51: (0, 120), 29: (0, 159), 52: (0, 143), 53: (0, 115), 54: (0, 432), 55: (0, 130), 56: (0, 216), 57: (0, 338), 5: (0, 332), 58: (0, 132), 7: (0, 362), 2: (0, 118), 59: (0, 144), 1: (0, 352), 3: (0, 357), 60: (0, 378), 38: (0, 148), 8: (0, 366), 61: (0, 145), 62: (0, 331), 64: (0, 157), 63: (0, 430), 4: (0, 388), 0: (0, 370), 65: (0, 381), 66: (0, 418), 67: (0, 441), 46: (0, 163), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 13: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 73: (0, 243), 32: (0, 207), 74: (0, 278), 75: (0, 257), 26: (0, 290), 76: (0, 306), 27: (0, 318), 77: (0, 253), 35: (0, 302), 78: (0, 312), 79: (0, 484), 31: (0, 423), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 83: (0, 426), 84: (0, 465), 85: (0, 446), 29: (0, 490), 38: (0, 69), 86: (0, 89), 87: (0, 67), 88: (0, 57), 8: (0, 366), 89: (0, 361), 68: (0, 339), 0: (0, 344), 34: (0, 334), 90: (0, 326), 91: (0, 337), 61: (0, 108), 46: (0, 163), 92: (0, 83), 12: (0, 138), 54: (0, 208)}, 14: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 73: (0, 243), 32: (0, 207), 74: (0, 278), 75: (0, 257), 26: (0, 290), 76: (0, 306), 27: (0, 318), 77: (0, 253), 92: (0, 360), 35: (0, 302), 78: (0, 312), 79: (0, 484), 31: (0, 423), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 83: (0, 426), 84: (0, 465), 85: (0, 446), 29: (0, 490), 38: (0, 69), 86: (0, 89), 87: (0, 67), 88: (0, 57), 8: (0, 366), 89: (0, 361), 68: (0, 339), 0: (0, 344), 34: (0, 334), 90: (0, 326), 91: (0, 337), 61: (0, 108), 46: (0, 163), 12: (0, 138), 54: (0, 208)}, 15: {14: (0, 209)}, 16: {9: (0, 470), 25: (0, 385)}, 17: {13: (0, 101), 14: (1, {'@': 87}), 15: (1, {'@': 87}), 16: (1, {'@': 87}), 17: (1, {'@': 87}), 11: (1, {'@': 87}), 18: (1, {'@': 87}), 19: (1, {'@': 87}), 20: (1, {'@': 87}), 21: (1, {'@': 87}), 22: (1, {'@': 87}), 23: (1, {'@': 87}), 6: (1, {'@': 87}), 24: (1, {'@': 87}), 25: (1, {'@': 87})}, 18: {14: (1, {'@': 88}), 26: (1, {'@': 88}), 15: (1, {'@': 88}), 16: (1, {'@': 88}), 17: (1, {'@': 88}), 13: (1, {'@': 88}), 11: (1, {'@': 88}), 27: (1, {'@': 88}), 18: (1, {'@': 88}), 19: (1, {'@': 88}), 20: (1, {'@': 88}), 21: (1, {'@': 88}), 22: (1, {'@': 88}), 23: (1, {'@': 88}), 6: (1, {'@': 88}), 28: (1, {'@': 88}), 24: (1, {'@': 88}), 25: (1, {'@': 88})}, 19: {0: (1, {'@': 89}), 1: (1, {'@': 89}), 2: (1, {'@': 89}), 3: (1, {'@': 89}), 4: (1, {'@': 89}), 5: (1, {'@': 89}), 6: (1, {'@': 89}), 7: (1, {'@': 89}), 8: (1, {'@': 89})}, 20: {11: (0, 203)}, 21: {2: (0, 41), 44: (1, {'@': 90})}, 22: {60: (0, 378), 49: (0, 155), 6: (0, 451), 1: (0, 352), 57: (0, 338), 29: (0, 56), 8: (0, 366), 53: (0, 115), 4: (0, 388), 0: (0, 370), 51: (0, 422), 5: (0, 332), 2: (0, 393), 68: (0, 165), 7: (0, 362), 3: (0, 357)}, 23: {0: (1, {'@': 91}), 26: (1, {'@': 91}), 32: (1, {'@': 91}), 33: (1, {'@': 91}), 9: (1, {'@': 91}), 12: (1, {'@': 91}), 30: (1, {'@': 91}), 42: (1, {'@': 91}), 36: (1, {'@': 91}), 37: (1, {'@': 91}), 35: (1, {'@': 91}), 31: (1, {'@': 91}), 34: (1, {'@': 91}), 40: (1, {'@': 91}), 11: (1, {'@': 91}), 27: (1, {'@': 91}), 41: (1, {'@': 91}), 38: (1, {'@': 91}), 39: (1, {'@': 91}), 23: (1, {'@': 91}), 43: (1, {'@': 91}), 44: (1, {'@': 91}), 24: (1, {'@': 91}), 45: (1, {'@': 91}), 25: (1, {'@': 91})}, 24: {13: (0, 101), 14: (1, {'@': 92}), 15: (1, {'@': 92}), 16: (1, {'@': 92}), 17: (1, {'@': 92}), 11: (1, {'@': 92}), 18: (1, {'@': 92}), 19: (1, {'@': 92}), 20: (1, {'@': 92}), 21: (1, {'@': 92}), 22: (1, {'@': 92}), 23: (1, {'@': 92}), 6: (1, {'@': 92}), 24: (1, {'@': 92}), 25: (1, {'@': 92})}, 25: {71: (0, 167), 6: (0, 451), 2: (0, 186), 64: (0, 175), 8: (0, 366), 78: (0, 312), 79: (0, 484), 72: (0, 460), 68: (0, 339), 48: (0, 417), 84: (0, 465), 85: (0, 446), 61: (0, 108), 29: (0, 490), 46: (0, 163), 0: (1, {'@': 93}), 26: (1, {'@': 93}), 32: (1, {'@': 93}), 33: (1, {'@': 93}), 9: (1, {'@': 93}), 45: (1, {'@': 93}), 12: (1, {'@': 93}), 30: (1, {'@': 93}), 42: (1, {'@': 93}), 93: (1, {'@': 93}), 36: (1, {'@': 93}), 37: (1, {'@': 93}), 35: (1, {'@': 93}), 31: (1, {'@': 93}), 34: (1, {'@': 93}), 40: (1, {'@': 93}), 11: (1, {'@': 93}), 27: (1, {'@': 93}), 41: (1, {'@': 93}), 38: (1, {'@': 93}), 39: (1, {'@': 93}), 23: (1, {'@': 93}), 43: (1, {'@': 93}), 44: (1, {'@': 93}), 24: (1, {'@': 93}), 94: (1, {'@': 93}), 25: (1, {'@': 93})}, 26: {0: (1, {'@': 94}), 26: (1, {'@': 94}), 32: (1, {'@': 94}), 33: (1, {'@': 94}), 9: (1, {'@': 94}), 12: (1, {'@': 94}), 42: (1, {'@': 94}), 37: (1, {'@': 94}), 35: (1, {'@': 94}), 31: (1, {'@': 94}), 34: (1, {'@': 94}), 40: (1, {'@': 94}), 11: (1, {'@': 94}), 27: (1, {'@': 94}), 41: (1, {'@': 94}), 38: (1, {'@': 94}), 39: (1, {'@': 94}), 23: (1, {'@': 94}), 43: (1, {'@': 94}), 44: (1, {'@': 94}), 24: (1, {'@': 94}), 45: (1, {'@': 94}), 25: (1, {'@': 94})}, 27: {71: (0, 167), 6: (0, 451), 72: (0, 182), 77: (0, 253), 2: (0, 186), 64: (0, 175), 8: (0, 366), 78: (0, 312), 79: (0, 484), 68: (0, 339), 86: (0, 89), 48: (0, 417), 84: (0, 465), 91: (0, 93), 85: (0, 446), 61: (0, 108), 29: (0, 490), 46: (0, 163)}, 28: {44: (0, 354), 20: (1, {'@': 95}), 15: (1, {'@': 95}), 16: (1, {'@': 95}), 21: (1, {'@': 95}), 22: (1, {'@': 95}), 17: (1, {'@': 95}), 6: (1, {'@': 95}), 18: (1, {'@': 95}), 19: (1, {'@': 95}), 14: (1, {'@': 95})}, 29: {60: (0, 378), 49: (0, 155), 6: (0, 451), 1: (0, 352), 29: (0, 56), 8: (0, 366), 53: (0, 115), 4: (0, 388), 0: (0, 370), 57: (0, 269), 5: (0, 332), 2: (0, 393), 68: (0, 165), 7: (0, 362), 3: (0, 357)}, 30: {6: (0, 451), 49: (0, 155), 51: (0, 120), 53: (0, 115), 29: (0, 355), 57: (0, 338), 5: (0, 332), 1: (0, 352), 7: (0, 362), 3: (0, 357), 60: (0, 378), 50: (0, 400), 8: (0, 366), 4: (0, 388), 95: (0, 59), 0: (0, 370), 65: (0, 381), 2: (0, 393), 68: (0, 165), 70: (0, 161)}, 31: {0: (1, {'@': 96}), 31: (1, {'@': 96}), 2: (1, {'@': 96}), 26: (1, {'@': 96}), 32: (1, {'@': 96}), 33: (1, {'@': 96}), 34: (1, {'@': 96}), 46: (1, {'@': 96}), 27: (1, {'@': 96}), 12: (1, {'@': 96}), 38: (1, {'@': 96}), 30: (1, {'@': 96}), 64: (1, {'@': 96}), 71: (1, {'@': 96}), 79: (1, {'@': 96}), 93: (1, {'@': 96}), 36: (1, {'@': 96}), 37: (1, {'@': 96}), 6: (1, {'@': 96}), 61: (1, {'@': 96}), 24: (1, {'@': 96}), 94: (1, {'@': 96}), 8: (1, {'@': 96}), 35: (1, {'@': 96}), 39: (1, {'@': 96}), 9: (1, {'@': 96}), 42: (1, {'@': 96}), 40: (1, {'@': 96}), 11: (1, {'@': 96}), 41: (1, {'@': 96}), 23: (1, {'@': 96}), 43: (1, {'@': 96}), 44: (1, {'@': 96}), 45: (1, {'@': 96}), 25: (1, {'@': 96}), 13: (1, {'@': 96})}, 32: {0: (1, {'@': 97}), 31: (1, {'@': 97}), 2: (1, {'@': 97}), 26: (1, {'@': 97}), 32: (1, {'@': 97}), 33: (1, {'@': 97}), 34: (1, {'@': 97}), 46: (1, {'@': 97}), 27: (1, {'@': 97}), 12: (1, {'@': 97}), 38: (1, {'@': 97}), 30: (1, {'@': 97}), 64: (1, {'@': 97}), 71: (1, {'@': 97}), 79: (1, {'@': 97}), 93: (1, {'@': 97}), 36: (1, {'@': 97}), 37: (1, {'@': 97}), 6: (1, {'@': 97}), 61: (1, {'@': 97}), 24: (1, {'@': 97}), 94: (1, {'@': 97}), 8: (1, {'@': 97}), 35: (1, {'@': 97}), 39: (1, {'@': 97}), 9: (1, {'@': 97}), 42: (1, {'@': 97}), 40: (1, {'@': 97}), 11: (1, {'@': 97}), 41: (1, {'@': 97}), 23: (1, {'@': 97}), 43: (1, {'@': 97}), 44: (1, {'@': 97}), 45: (1, {'@': 97}), 25: (1, {'@': 97}), 13: (1, {'@': 97})}, 33: {96: (0, 286), 0: (1, {'@': 98}), 26: (1, {'@': 98}), 13: (1, {'@': 98}), 9: (1, {'@': 98}), 97: (1, {'@': 98}), 18: (1, {'@': 98}), 19: (1, {'@': 98}), 98: (1, {'@': 98}), 12: (1, {'@': 98}), 30: (1, {'@': 98}), 93: (1, {'@': 98}), 36: (1, {'@': 98}), 6: (1, {'@': 98}), 14: (1, {'@': 98}), 31: (1, {'@': 98}), 34: (1, {'@': 98}), 15: (1, {'@': 98}), 16: (1, {'@': 98}), 17: (1, {'@': 98}), 11: (1, {'@': 98}), 27: (1, {'@': 98}), 38: (1, {'@': 98}), 20: (1, {'@': 98}), 99: (1, {'@': 98}), 21: (1, {'@': 98}), 22: (1, {'@': 98}), 23: (1, {'@': 98}), 44: (1, {'@': 98}), 28: (1, {'@': 98}), 24: (1, {'@': 98}), 25: (1, {'@': 98})}, 34: {71: (0, 167), 6: (0, 451), 2: (0, 186), 64: (0, 175), 8: (0, 366), 78: (0, 312), 79: (0, 484), 72: (0, 460), 68: (0, 339), 48: (0, 417), 84: (0, 465), 85: (0, 446), 61: (0, 108), 29: (0, 490), 46: (0, 163), 0: (1, {'@': 99}), 26: (1, {'@': 99}), 32: (1, {'@': 99}), 33: (1, {'@': 99}), 9: (1, {'@': 99}), 45: (1, {'@': 99}), 12: (1, {'@': 99}), 30: (1, {'@': 99}), 42: (1, {'@': 99}), 93: (1, {'@': 99}), 36: (1, {'@': 99}), 37: (1, {'@': 99}), 35: (1, {'@': 99}), 31: (1, {'@': 99}), 34: (1, {'@': 99}), 40: (1, {'@': 99}), 11: (1, {'@': 99}), 27: (1, {'@': 99}), 41: (1, {'@': 99}), 38: (1, {'@': 99}), 39: (1, {'@': 99}), 23: (1, {'@': 99}), 43: (1, {'@': 99}), 44: (1, {'@': 99}), 24: (1, {'@': 99}), 94: (1, {'@': 99}), 25: (1, {'@': 99})}, 35: {12: (0, 11)}, 36: {24: (1, {'@': 100}), 39: (1, {'@': 100}), 40: (1, {'@': 100}), 11: (1, {'@': 100}), 9: (1, {'@': 100}), 41: (1, {'@': 100}), 42: (1, {'@': 100}), 23: (1, {'@': 100}), 43: (1, {'@': 100}), 44: (1, {'@': 100}), 25: (1, {'@': 100})}, 37: {60: (0, 378), 6: (0, 451), 49: (0, 155), 50: (0, 328), 57: (0, 338), 29: (0, 355), 8: (0, 366), 51: (0, 120), 53: (0, 115), 4: (0, 388), 7: (0, 362), 0: (0, 370), 5: (0, 332), 65: (0, 381), 2: (0, 393), 68: (0, 165), 1: (0, 352), 3: (0, 357), 70: (0, 161)}, 38: {6: (0, 451), 29: (0, 225), 100: (0, 325)}, 39: {0: (1, {'@': 101}), 26: (1, {'@': 101}), 32: (1, {'@': 101}), 33: (1, {'@': 101}), 9: (1, {'@': 101}), 12: (1, {'@': 101}), 42: (1, {'@': 101}), 36: (1, {'@': 101}), 37: (1, {'@': 101}), 35: (1, {'@': 101}), 31: (1, {'@': 101}), 34: (1, {'@': 101}), 40: (1, {'@': 101}), 11: (1, {'@': 101}), 27: (1, {'@': 101}), 41: (1, {'@': 101}), 38: (1, {'@': 101}), 39: (1, {'@': 101}), 23: (1, {'@': 101}), 43: (1, {'@': 101}), 44: (1, {'@': 101}), 24: (1, {'@': 101}), 45: (1, {'@': 101}), 25: (1, {'@': 101})}, 40: {60: (0, 378), 6: (0, 451), 49: (0, 155), 50: (0, 329), 57: (0, 338), 29: (0, 355), 8: (0, 366), 51: (0, 120), 53: (0, 115), 4: (0, 388), 7: (0, 362), 0: (0, 370), 5: (0, 332), 65: (0, 381), 2: (0, 393), 68: (0, 165), 1: (0, 352), 3: (0, 357), 70: (0, 161)}, 41: {29: (0, 140), 6: (0, 451), 101: (0, 239)}, 42: {6: (0, 451), 49: (0, 155), 51: (0, 120), 53: (0, 115), 29: (0, 355), 57: (0, 338), 5: (0, 332), 1: (0, 352), 7: (0, 362), 3: (0, 357), 60: (0, 378), 12: (0, 342), 50: (0, 347), 8: (0, 366), 4: (0, 388), 0: (0, 370), 65: (0, 381), 2: (0, 393), 68: (0, 165), 70: (0, 161)}, 43: {6: (0, 451), 29: (0, 310)}, 44: {60: (0, 378), 6: (0, 451), 49: (0, 64), 1: (0, 352), 29: (0, 56), 8: (0, 366), 4: (0, 388), 0: (0, 370), 5: (0, 332), 2: (0, 393), 68: (0, 165), 7: (0, 362), 3: (0, 357)}, 45: {6: (0, 451), 29: (0, 66)}, 46: {2: (0, 74), 0: (1, {'@': 102}), 31: (1, {'@': 102}), 14: (1, {'@': 102}), 26: (1, {'@': 102}), 34: (1, {'@': 102}), 15: (1, {'@': 102}), 16: (1, {'@': 102}), 17: (1, {'@': 102}), 13: (1, {'@': 102}), 11: (1, {'@': 102}), 27: (1, {'@': 102}), 97: (1, {'@': 102}), 18: (1, {'@': 102}), 98: (1, {'@': 102}), 12: (1, {'@': 102}), 38: (1, {'@': 102}), 19: (1, {'@': 102}), 20: (1, {'@': 102}), 30: (1, {'@': 102}), 99: (1, {'@': 102}), 21: (1, {'@': 102}), 22: (1, {'@': 102}), 93: (1, {'@': 102}), 36: (1, {'@': 102}), 23: (1, {'@': 102}), 96: (1, {'@': 102}), 6: (1, {'@': 102}), 28: (1, {'@': 102}), 24: (1, {'@': 102}), 25: (1, {'@': 102}), 9: (1, {'@': 102}), 44: (1, {'@': 102})}, 47: {60: (0, 378), 49: (0, 155), 6: (0, 451), 1: (0, 352), 29: (0, 56), 8: (0, 366), 4: (0, 388), 0: (0, 370), 5: (0, 332), 2: (0, 393), 53: (0, 245), 68: (0, 165), 7: (0, 362), 3: (0, 357)}, 48: {0: (1, {'@': 103}), 26: (1, {'@': 103}), 32: (1, {'@': 103}), 33: (1, {'@': 103}), 9: (1, {'@': 103}), 12: (1, {'@': 103}), 30: (1, {'@': 103}), 42: (1, {'@': 103}), 93: (1, {'@': 103}), 36: (1, {'@': 103}), 37: (1, {'@': 103}), 35: (1, {'@': 103}), 31: (1, {'@': 103}), 34: (1, {'@': 103}), 40: (1, {'@': 103}), 11: (1, {'@': 103}), 27: (1, {'@': 103}), 41: (1, {'@': 103}), 38: (1, {'@': 103}), 39: (1, {'@': 103}), 23: (1, {'@': 103}), 44: (1, {'@': 103}), 43: (1, {'@': 103}), 24: (1, {'@': 103}), 45: (1, {'@': 103}), 25: (1, {'@': 103})}, 49: {44: (0, 259), 25: (0, 266)}, 50: {0: (0, 188), 31: (1, {'@': 104}), 26: (1, {'@': 104}), 32: (1, {'@': 104}), 33: (1, {'@': 104}), 34: (1, {'@': 104}), 37: (1, {'@': 104}), 27: (1, {'@': 104}), 12: (1, {'@': 104}), 24: (1, {'@': 104}), 35: (1, {'@': 104}), 38: (1, {'@': 104}), 39: (1, {'@': 104}), 40: (1, {'@': 104}), 11: (1, {'@': 104}), 9: (1, {'@': 104}), 41: (1, {'@': 104}), 42: (1, {'@': 104}), 23: (1, {'@': 104}), 43: (1, {'@': 104}), 44: (1, {'@': 104}), 25: (1, {'@': 104}), 45: (1, {'@': 104})}, 51: {11: (0, 251)}, 52: {32: (0, 373), 9: (1, {'@': 105}), 25: (1, {'@': 105})}, 53: {0: (1, {'@': 106}), 26: (1, {'@': 106}), 13: (1, {'@': 106}), 9: (1, {'@': 106}), 97: (1, {'@': 106}), 18: (1, {'@': 106}), 98: (1, {'@': 106}), 12: (1, {'@': 106}), 19: (1, {'@': 106}), 93: (1, {'@': 106}), 36: (1, {'@': 106}), 6: (1, {'@': 106}), 31: (1, {'@': 106}), 14: (1, {'@': 106}), 34: (1, {'@': 106}), 15: (1, {'@': 106}), 16: (1, {'@': 106}), 17: (1, {'@': 106}), 11: (1, {'@': 106}), 27: (1, {'@': 106}), 38: (1, {'@': 106}), 20: (1, {'@': 106}), 99: (1, {'@': 106}), 21: (1, {'@': 106}), 22: (1, {'@': 106}), 23: (1, {'@': 106}), 44: (1, {'@': 106}), 28: (1, {'@': 106}), 24: (1, {'@': 106}), 25: (1, {'@': 106})}, 54: {25: (0, 272), 13: (0, 101)}, 55: {36: (0, 29), 0: (1, {'@': 107}), 31: (1, {'@': 107}), 14: (1, {'@': 107}), 26: (1, {'@': 107}), 34: (1, {'@': 107}), 15: (1, {'@': 107}), 16: (1, {'@': 107}), 17: (1, {'@': 107}), 13: (1, {'@': 107}), 11: (1, {'@': 107}), 27: (1, {'@': 107}), 97: (1, {'@': 107}), 18: (1, {'@': 107}), 98: (1, {'@': 107}), 12: (1, {'@': 107}), 38: (1, {'@': 107}), 19: (1, {'@': 107}), 20: (1, {'@': 107}), 99: (1, {'@': 107}), 21: (1, {'@': 107}), 22: (1, {'@': 107}), 93: (1, {'@': 107}), 23: (1, {'@': 107}), 6: (1, {'@': 107}), 28: (1, {'@': 107}), 24: (1, {'@': 107}), 25: (1, {'@': 107}), 9: (1, {'@': 107}), 44: (1, {'@': 107})}, 56: {2: (0, 265), 0: (1, {'@': 108}), 26: (1, {'@': 108}), 13: (1, {'@': 108}), 9: (1, {'@': 108}), 97: (1, {'@': 108}), 18: (1, {'@': 108}), 12: (1, {'@': 108}), 98: (1, {'@': 108}), 19: (1, {'@': 108}), 30: (1, {'@': 108}), 93: (1, {'@': 108}), 36: (1, {'@': 108}), 6: (1, {'@': 108}), 31: (1, {'@': 108}), 14: (1, {'@': 108}), 34: (1, {'@': 108}), 15: (1, {'@': 108}), 16: (1, {'@': 108}), 17: (1, {'@': 108}), 11: (1, {'@': 108}), 27: (1, {'@': 108}), 38: (1, {'@': 108}), 20: (1, {'@': 108}), 99: (1, {'@': 108}), 21: (1, {'@': 108}), 22: (1, {'@': 108}), 23: (1, {'@': 108}), 96: (1, {'@': 108}), 44: (1, {'@': 108}), 28: (1, {'@': 108}), 24: (1, {'@': 108}), 25: (1, {'@': 108})}, 57: {0: (0, 221), 102: (0, 50), 31: (1, {'@': 109}), 26: (1, {'@': 109}), 32: (1, {'@': 109}), 33: (1, {'@': 109}), 34: (1, {'@': 109}), 37: (1, {'@': 109}), 27: (1, {'@': 109}), 12: (1, {'@': 109}), 24: (1, {'@': 109}), 35: (1, {'@': 109}), 38: (1, {'@': 109}), 39: (1, {'@': 109}), 40: (1, {'@': 109}), 11: (1, {'@': 109}), 9: (1, {'@': 109}), 41: (1, {'@': 109}), 42: (1, {'@': 109}), 23: (1, {'@': 109}), 43: (1, {'@': 109}), 44: (1, {'@': 109}), 25: (1, {'@': 109}), 45: (1, {'@': 109})}, 58: {6: (0, 451), 29: (0, 140), 101: (0, 10)}, 59: {11: (1, {'@': 110}), 9: (1, {'@': 110})}, 60: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 73: (0, 243), 32: (0, 207), 74: (0, 278), 75: (0, 257), 26: (0, 290), 76: (0, 306), 27: (0, 318), 77: (0, 253), 35: (0, 302), 78: (0, 312), 79: (0, 484), 31: (0, 423), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 83: (0, 426), 84: (0, 465), 92: (0, 36), 85: (0, 446), 29: (0, 490), 38: (0, 69), 86: (0, 89), 87: (0, 67), 88: (0, 57), 8: (0, 366), 89: (0, 361), 68: (0, 339), 0: (0, 344), 34: (0, 334), 90: (0, 326), 91: (0, 337), 61: (0, 108), 46: (0, 163), 12: (0, 138), 54: (0, 208)}, 61: {0: (0, 22), 31: (1, {'@': 111}), 14: (1, {'@': 111}), 26: (1, {'@': 111}), 34: (1, {'@': 111}), 15: (1, {'@': 111}), 16: (1, {'@': 111}), 17: (1, {'@': 111}), 13: (1, {'@': 111}), 11: (1, {'@': 111}), 27: (1, {'@': 111}), 97: (1, {'@': 111}), 18: (1, {'@': 111}), 98: (1, {'@': 111}), 12: (1, {'@': 111}), 38: (1, {'@': 111}), 19: (1, {'@': 111}), 20: (1, {'@': 111}), 99: (1, {'@': 111}), 21: (1, {'@': 111}), 22: (1, {'@': 111}), 93: (1, {'@': 111}), 23: (1, {'@': 111}), 6: (1, {'@': 111}), 28: (1, {'@': 111}), 24: (1, {'@': 111}), 25: (1, {'@': 111}), 9: (1, {'@': 111}), 44: (1, {'@': 111})}, 62: {93: (0, 44), 0: (1, {'@': 112}), 31: (1, {'@': 112}), 14: (1, {'@': 112}), 26: (1, {'@': 112}), 34: (1, {'@': 112}), 15: (1, {'@': 112}), 16: (1, {'@': 112}), 17: (1, {'@': 112}), 13: (1, {'@': 112}), 11: (1, {'@': 112}), 27: (1, {'@': 112}), 97: (1, {'@': 112}), 18: (1, {'@': 112}), 98: (1, {'@': 112}), 12: (1, {'@': 112}), 38: (1, {'@': 112}), 19: (1, {'@': 112}), 20: (1, {'@': 112}), 30: (1, {'@': 112}), 99: (1, {'@': 112}), 21: (1, {'@': 112}), 22: (1, {'@': 112}), 36: (1, {'@': 112}), 23: (1, {'@': 112}), 6: (1, {'@': 112}), 28: (1, {'@': 112}), 24: (1, {'@': 112}), 25: (1, {'@': 112}), 9: (1, {'@': 112}), 44: (1, {'@': 112})}, 63: {6: (0, 451), 29: (0, 412)}, 64: {96: (0, 286), 0: (1, {'@': 113}), 26: (1, {'@': 113}), 13: (1, {'@': 113}), 9: (1, {'@': 113}), 97: (1, {'@': 113}), 18: (1, {'@': 113}), 19: (1, {'@': 113}), 98: (1, {'@': 113}), 12: (1, {'@': 113}), 30: (1, {'@': 113}), 93: (1, {'@': 113}), 36: (1, {'@': 113}), 6: (1, {'@': 113}), 14: (1, {'@': 113}), 31: (1, {'@': 113}), 34: (1, {'@': 113}), 15: (1, {'@': 113}), 16: (1, {'@': 113}), 17: (1, {'@': 113}), 11: (1, {'@': 113}), 27: (1, {'@': 113}), 38: (1, {'@': 113}), 20: (1, {'@': 113}), 99: (1, {'@': 113}), 21: (1, {'@': 113}), 22: (1, {'@': 113}), 23: (1, {'@': 113}), 44: (1, {'@': 113}), 28: (1, {'@': 113}), 24: (1, {'@': 113}), 25: (1, {'@': 113})}, 65: {2: (0, 414), 0: (1, {'@': 114}), 31: (1, {'@': 114}), 14: (1, {'@': 114}), 26: (1, {'@': 114}), 34: (1, {'@': 114}), 15: (1, {'@': 114}), 16: (1, {'@': 114}), 17: (1, {'@': 114}), 13: (1, {'@': 114}), 11: (1, {'@': 114}), 27: (1, {'@': 114}), 97: (1, {'@': 114}), 18: (1, {'@': 114}), 98: (1, {'@': 114}), 12: (1, {'@': 114}), 38: (1, {'@': 114}), 19: (1, {'@': 114}), 20: (1, {'@': 114}), 30: (1, {'@': 114}), 99: (1, {'@': 114}), 21: (1, {'@': 114}), 22: (1, {'@': 114}), 93: (1, {'@': 114}), 36: (1, {'@': 114}), 23: (1, {'@': 114}), 96: (1, {'@': 114}), 6: (1, {'@': 114}), 28: (1, {'@': 114}), 24: (1, {'@': 114}), 25: (1, {'@': 114}), 9: (1, {'@': 114}), 44: (1, {'@': 114})}, 66: {14: (1, {'@': 115}), 96: (1, {'@': 115}), 44: (1, {'@': 115}), 9: (1, {'@': 115}), 11: (1, {'@': 115})}, 67: {32: (0, 207), 26: (0, 290), 27: (0, 318), 89: (0, 139), 35: (0, 302), 31: (0, 423), 33: (0, 488), 34: (0, 334), 90: (0, 326), 74: (0, 278), 37: (0, 459), 38: (0, 69), 12: (0, 138), 24: (1, {'@': 116}), 39: (1, {'@': 116}), 40: (1, {'@': 116}), 11: (1, {'@': 116}), 9: (1, {'@': 116}), 41: (1, {'@': 116}), 42: (1, {'@': 116}), 23: (1, {'@': 116}), 43: (1, {'@': 116}), 44: (1, {'@': 116}), 25: (1, {'@': 116})}, 68: {6: (0, 451), 49: (0, 155), 95: (0, 380), 51: (0, 120), 53: (0, 115), 29: (0, 355), 57: (0, 338), 5: (0, 332), 1: (0, 352), 7: (0, 362), 3: (0, 357), 60: (0, 378), 50: (0, 400), 8: (0, 366), 4: (0, 388), 0: (0, 370), 65: (0, 381), 2: (0, 393), 68: (0, 165), 70: (0, 161)}, 69: {31: (1, {'@': 117}), 26: (1, {'@': 117}), 32: (1, {'@': 117}), 33: (1, {'@': 117}), 34: (1, {'@': 117}), 0: (1, {'@': 117}), 2: (1, {'@': 117}), 46: (1, {'@': 117}), 27: (1, {'@': 117}), 12: (1, {'@': 117}), 38: (1, {'@': 117}), 64: (1, {'@': 117}), 71: (1, {'@': 117}), 79: (1, {'@': 117}), 37: (1, {'@': 117}), 6: (1, {'@': 117}), 61: (1, {'@': 117}), 8: (1, {'@': 117}), 35: (1, {'@': 117}), 40: (1, {'@': 117}), 11: (1, {'@': 117}), 9: (1, {'@': 117}), 41: (1, {'@': 117}), 39: (1, {'@': 117}), 42: (1, {'@': 117}), 23: (1, {'@': 117}), 43: (1, {'@': 117}), 44: (1, {'@': 117}), 24: (1, {'@': 117}), 25: (1, {'@': 117})}, 70: {60: (0, 378), 49: (0, 155), 6: (0, 451), 51: (0, 467), 1: (0, 352), 57: (0, 338), 29: (0, 56), 8: (0, 366), 53: (0, 115), 4: (0, 388), 0: (0, 370), 5: (0, 332), 2: (0, 393), 68: (0, 165), 7: (0, 362), 3: (0, 357)}, 71: {6: (0, 451), 29: (0, 237)}, 72: {6: (0, 451), 29: (0, 201)}, 73: {11: (0, 220)}, 74: {95: (0, 160), 6: (0, 451), 49: (0, 155), 51: (0, 120), 53: (0, 115), 29: (0, 355), 57: (0, 338), 5: (0, 332), 103: (0, 241), 7: (0, 362), 1: (0, 352), 3: (0, 357), 60: (0, 378), 50: (0, 400), 8: (0, 366), 4: (0, 388), 0: (0, 370), 65: (0, 381), 2: (0, 393), 68: (0, 165), 70: (0, 161), 11: (1, {'@': 118})}, 75: {104: (0, 223), 21: (0, 113)}, 76: {9: (0, 45), 11: (1, {'@': 119}), 96: (1, {'@': 119}), 14: (1, {'@': 119}), 44: (1, {'@': 119})}, 77: {6: (0, 451), 29: (0, 21)}, 78: {32: (0, 181)}, 79: {6: (0, 451), 49: (0, 155), 50: (0, 154), 56: (0, 425), 51: (0, 120), 29: (0, 159), 52: (0, 143), 53: (0, 115), 54: (0, 432), 55: (0, 130), 57: (0, 338), 5: (0, 332), 58: (0, 132), 7: (0, 362), 2: (0, 118), 59: (0, 144), 1: (0, 352), 3: (0, 357), 60: (0, 378), 38: (0, 148), 8: (0, 366), 61: (0, 145), 62: (0, 331), 64: (0, 157), 63: (0, 430), 4: (0, 388), 0: (0, 370), 65: (0, 381), 66: (0, 418), 67: (0, 441), 46: (0, 163), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 80: {14: (1, {'@': 120}), 15: (1, {'@': 120}), 16: (1, {'@': 120}), 17: (1, {'@': 120}), 18: (1, {'@': 120}), 19: (1, {'@': 120}), 20: (1, {'@': 120}), 21: (1, {'@': 120}), 22: (1, {'@': 120}), 6: (1, {'@': 120}), 44: (1, {'@': 120})}, 81: {0: (1, {'@': 121}), 1: (1, {'@': 121}), 2: (1, {'@': 121}), 3: (1, {'@': 121}), 4: (1, {'@': 121}), 5: (1, {'@': 121}), 6: (1, {'@': 121}), 7: (1, {'@': 121}), 8: (1, {'@': 121})}, 82: {9: (0, 30), 11: (1, {'@': 122})}, 83: {24: (0, 222)}, 84: {9: (1, {'@': 123}), 10: (1, {'@': 123}), 11: (1, {'@': 123})}, 85: {105: (0, 228), 9: (0, 230), 14: (0, 234)}, 86: {0: (1, {'@': 124}), 31: (1, {'@': 124}), 14: (1, {'@': 124}), 26: (1, {'@': 124}), 34: (1, {'@': 124}), 15: (1, {'@': 124}), 16: (1, {'@': 124}), 17: (1, {'@': 124}), 13: (1, {'@': 124}), 11: (1, {'@': 124}), 27: (1, {'@': 124}), 97: (1, {'@': 124}), 18: (1, {'@': 124}), 98: (1, {'@': 124}), 12: (1, {'@': 124}), 38: (1, {'@': 124}), 19: (1, {'@': 124}), 20: (1, {'@': 124}), 30: (1, {'@': 124}), 99: (1, {'@': 124}), 21: (1, {'@': 124}), 22: (1, {'@': 124}), 93: (1, {'@': 124}), 36: (1, {'@': 124}), 23: (1, {'@': 124}), 96: (1, {'@': 124}), 6: (1, {'@': 124}), 28: (1, {'@': 124}), 24: (1, {'@': 124}), 25: (1, {'@': 124}), 9: (1, {'@': 124}), 44: (1, {'@': 124})}, 87: {71: (0, 167), 6: (0, 451), 72: (0, 182), 77: (0, 253), 2: (0, 186), 64: (0, 175), 8: (0, 366), 78: (0, 312), 79: (0, 484), 68: (0, 339), 86: (0, 48), 48: (0, 417), 84: (0, 465), 85: (0, 446), 61: (0, 108), 29: (0, 490), 46: (0, 163)}, 88: {44: (0, 136)}, 89: {106: (0, 447), 93: (0, 114), 0: (1, {'@': 125}), 31: (1, {'@': 125}), 30: (1, {'@': 125}), 26: (1, {'@': 125}), 32: (1, {'@': 125}), 33: (1, {'@': 125}), 34: (1, {'@': 125}), 36: (1, {'@': 125}), 37: (1, {'@': 125}), 27: (1, {'@': 125}), 12: (1, {'@': 125}), 24: (1, {'@': 125}), 35: (1, {'@': 125}), 38: (1, {'@': 125}), 39: (1, {'@': 125}), 40: (1, {'@': 125}), 11: (1, {'@': 125}), 9: (1, {'@': 125}), 41: (1, {'@': 125}), 42: (1, {'@': 125}), 23: (1, {'@': 125}), 43: (1, {'@': 125}), 44: (1, {'@': 125}), 45: (1, {'@': 125}), 25: (1, {'@': 125})}, 90: {23: (0, 9), 13: (0, 101)}, 91: {11: (0, 399), 9: (0, 369)}, 92: {20: (1, {'@': 126}), 15: (1, {'@': 126}), 16: (1, {'@': 126}), 21: (1, {'@': 126}), 22: (1, {'@': 126}), 17: (1, {'@': 126}), 6: (1, {'@': 126}), 18: (1, {'@': 126}), 19: (1, {'@': 126}), 14: (1, {'@': 126})}, 93: {0: (1, {'@': 127}), 26: (1, {'@': 127}), 32: (1, {'@': 127}), 33: (1, {'@': 127}), 9: (1, {'@': 127}), 12: (1, {'@': 127}), 30: (1, {'@': 127}), 42: (1, {'@': 127}), 36: (1, {'@': 127}), 37: (1, {'@': 127}), 35: (1, {'@': 127}), 31: (1, {'@': 127}), 34: (1, {'@': 127}), 40: (1, {'@': 127}), 11: (1, {'@': 127}), 27: (1, {'@': 127}), 41: (1, {'@': 127}), 38: (1, {'@': 127}), 39: (1, {'@': 127}), 23: (1, {'@': 127}), 43: (1, {'@': 127}), 44: (1, {'@': 127}), 24: (1, {'@': 127}), 45: (1, {'@': 127}), 25: (1, {'@': 127})}, 94: {101: (0, 403), 6: (0, 451), 29: (0, 140)}, 95: {71: (0, 167), 6: (0, 451), 72: (0, 182), 77: (0, 253), 2: (0, 186), 64: (0, 175), 8: (0, 366), 78: (0, 312), 79: (0, 484), 68: (0, 339), 86: (0, 89), 48: (0, 417), 84: (0, 465), 91: (0, 337), 85: (0, 446), 61: (0, 108), 29: (0, 490), 46: (0, 163), 80: (0, 39)}, 96: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 73: (0, 243), 32: (0, 207), 74: (0, 278), 75: (0, 257), 26: (0, 290), 76: (0, 306), 27: (0, 318), 77: (0, 253), 35: (0, 302), 78: (0, 312), 79: (0, 484), 31: (0, 423), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 83: (0, 426), 84: (0, 465), 85: (0, 446), 29: (0, 490), 38: (0, 69), 86: (0, 89), 87: (0, 67), 88: (0, 57), 8: (0, 366), 89: (0, 361), 68: (0, 339), 0: (0, 344), 34: (0, 334), 90: (0, 326), 91: (0, 337), 61: (0, 108), 46: (0, 163), 12: (0, 138), 54: (0, 208), 92: (0, 483)}, 97: {20: (1, {'@': 128}), 15: (1, {'@': 128}), 16: (1, {'@': 128}), 21: (1, {'@': 128}), 22: (1, {'@': 128}), 17: (1, {'@': 128}), 6: (1, {'@': 128}), 18: (1, {'@': 128}), 19: (1, {'@': 128}), 14: (1, {'@': 128})}, 98: {0: (1, {'@': 129}), 31: (1, {'@': 129}), 2: (1, {'@': 129}), 26: (1, {'@': 129}), 32: (1, {'@': 129}), 33: (1, {'@': 129}), 34: (1, {'@': 129}), 46: (1, {'@': 129}), 27: (1, {'@': 129}), 12: (1, {'@': 129}), 38: (1, {'@': 129}), 30: (1, {'@': 129}), 64: (1, {'@': 129}), 71: (1, {'@': 129}), 79: (1, {'@': 129}), 93: (1, {'@': 129}), 36: (1, {'@': 129}), 37: (1, {'@': 129}), 6: (1, {'@': 129}), 61: (1, {'@': 129}), 24: (1, {'@': 129}), 94: (1, {'@': 129}), 8: (1, {'@': 129}), 35: (1, {'@': 129}), 39: (1, {'@': 129}), 9: (1, {'@': 129}), 42: (1, {'@': 129}), 40: (1, {'@': 129}), 11: (1, {'@': 129}), 41: (1, {'@': 129}), 23: (1, {'@': 129}), 43: (1, {'@': 129}), 44: (1, {'@': 129}), 45: (1, {'@': 129}), 25: (1, {'@': 129}), 13: (1, {'@': 129})}, 99: {20: (1, {'@': 130}), 15: (1, {'@': 130}), 16: (1, {'@': 130}), 21: (1, {'@': 130}), 22: (1, {'@': 130}), 17: (1, {'@': 130}), 6: (1, {'@': 130}), 18: (1, {'@': 130}), 19: (1, {'@': 130}), 14: (1, {'@': 130})}, 100: {44: (0, 12)}, 101: {6: (0, 451), 49: (0, 155), 50: (0, 154), 51: (0, 120), 29: (0, 159), 52: (0, 143), 53: (0, 115), 54: (0, 432), 55: (0, 130), 56: (0, 406), 57: (0, 338), 5: (0, 332), 58: (0, 132), 7: (0, 362), 2: (0, 118), 59: (0, 144), 1: (0, 352), 3: (0, 357), 60: (0, 378), 38: (0, 148), 8: (0, 366), 61: (0, 145), 62: (0, 331), 64: (0, 157), 63: (0, 430), 4: (0, 388), 0: (0, 370), 65: (0, 381), 66: (0, 418), 67: (0, 441), 46: (0, 163), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 102: {6: (0, 451), 29: (0, 435)}, 103: {96: (0, 286), 0: (1, {'@': 131}), 31: (1, {'@': 131}), 14: (1, {'@': 131}), 26: (1, {'@': 131}), 34: (1, {'@': 131}), 15: (1, {'@': 131}), 16: (1, {'@': 131}), 17: (1, {'@': 131}), 13: (1, {'@': 131}), 11: (1, {'@': 131}), 27: (1, {'@': 131}), 97: (1, {'@': 131}), 18: (1, {'@': 131}), 98: (1, {'@': 131}), 12: (1, {'@': 131}), 38: (1, {'@': 131}), 19: (1, {'@': 131}), 20: (1, {'@': 131}), 30: (1, {'@': 131}), 99: (1, {'@': 131}), 21: (1, {'@': 131}), 22: (1, {'@': 131}), 93: (1, {'@': 131}), 36: (1, {'@': 131}), 23: (1, {'@': 131}), 6: (1, {'@': 131}), 28: (1, {'@': 131}), 24: (1, {'@': 131}), 25: (1, {'@': 131}), 9: (1, {'@': 131}), 44: (1, {'@': 131})}, 104: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 73: (0, 243), 32: (0, 207), 74: (0, 278), 75: (0, 257), 26: (0, 290), 76: (0, 306), 27: (0, 318), 77: (0, 253), 35: (0, 302), 78: (0, 312), 79: (0, 484), 31: (0, 423), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 92: (0, 236), 37: (0, 459), 82: (0, 455), 83: (0, 426), 84: (0, 465), 85: (0, 446), 29: (0, 490), 38: (0, 69), 86: (0, 89), 87: (0, 67), 88: (0, 57), 8: (0, 366), 89: (0, 361), 68: (0, 339), 0: (0, 344), 34: (0, 334), 90: (0, 326), 91: (0, 337), 61: (0, 108), 46: (0, 163), 12: (0, 138), 54: (0, 208)}, 105: {14: (1, {'@': 132}), 26: (1, {'@': 132}), 15: (1, {'@': 132}), 16: (1, {'@': 132}), 17: (1, {'@': 132}), 13: (1, {'@': 132}), 11: (1, {'@': 132}), 27: (1, {'@': 132}), 18: (1, {'@': 132}), 19: (1, {'@': 132}), 20: (1, {'@': 132}), 21: (1, {'@': 132}), 22: (1, {'@': 132}), 23: (1, {'@': 132}), 6: (1, {'@': 132}), 28: (1, {'@': 132}), 24: (1, {'@': 132}), 25: (1, {'@': 132})}, 106: {29: (0, 211), 6: (0, 451)}, 107: {20: (1, {'@': 133}), 15: (1, {'@': 133}), 16: (1, {'@': 133}), 21: (1, {'@': 133}), 22: (1, {'@': 133}), 17: (1, {'@': 133}), 6: (1, {'@': 133}), 18: (1, {'@': 133}), 19: (1, {'@': 133})}, 108: {0: (1, {'@': 134}), 31: (1, {'@': 134}), 2: (1, {'@': 134}), 26: (1, {'@': 134}), 32: (1, {'@': 134}), 33: (1, {'@': 134}), 34: (1, {'@': 134}), 46: (1, {'@': 134}), 27: (1, {'@': 134}), 12: (1, {'@': 134}), 38: (1, {'@': 134}), 30: (1, {'@': 134}), 64: (1, {'@': 134}), 71: (1, {'@': 134}), 79: (1, {'@': 134}), 93: (1, {'@': 134}), 36: (1, {'@': 134}), 37: (1, {'@': 134}), 6: (1, {'@': 134}), 61: (1, {'@': 134}), 24: (1, {'@': 134}), 94: (1, {'@': 134}), 8: (1, {'@': 134}), 35: (1, {'@': 134}), 39: (1, {'@': 134}), 9: (1, {'@': 134}), 42: (1, {'@': 134}), 40: (1, {'@': 134}), 11: (1, {'@': 134}), 41: (1, {'@': 134}), 23: (1, {'@': 134}), 43: (1, {'@': 134}), 44: (1, {'@': 134}), 45: (1, {'@': 134}), 25: (1, {'@': 134}), 13: (1, {'@': 134})}, 109: {31: (1, {'@': 135}), 26: (1, {'@': 135}), 32: (1, {'@': 135}), 33: (1, {'@': 135}), 34: (1, {'@': 135}), 0: (1, {'@': 135}), 2: (1, {'@': 135}), 46: (1, {'@': 135}), 27: (1, {'@': 135}), 12: (1, {'@': 135}), 38: (1, {'@': 135}), 64: (1, {'@': 135}), 71: (1, {'@': 135}), 79: (1, {'@': 135}), 37: (1, {'@': 135}), 6: (1, {'@': 135}), 61: (1, {'@': 135}), 8: (1, {'@': 135}), 35: (1, {'@': 135}), 40: (1, {'@': 135}), 11: (1, {'@': 135}), 9: (1, {'@': 135}), 41: (1, {'@': 135}), 39: (1, {'@': 135}), 42: (1, {'@': 135}), 23: (1, {'@': 135}), 43: (1, {'@': 135}), 44: (1, {'@': 135}), 24: (1, {'@': 135}), 25: (1, {'@': 135})}, 110: {44: (0, 384), 107: (0, 16), 25: (0, 335), 9: (0, 96)}, 111: {41: (0, 396), 24: (1, {'@': 136}), 39: (1, {'@': 136}), 40: (1, {'@': 136}), 11: (1, {'@': 136}), 9: (1, {'@': 136}), 42: (1, {'@': 136}), 23: (1, {'@': 136}), 43: (1, {'@': 136}), 44: (1, {'@': 136}), 25: (1, {'@': 136})}, 112: {2: (0, 153)}, 113: {0: (1, {'@': 137}), 26: (1, {'@': 137}), 2: (1, {'@': 137}), 32: (1, {'@': 137}), 33: (1, {'@': 137}), 54: (1, {'@': 137}), 75: (1, {'@': 137}), 82: (1, {'@': 137}), 12: (1, {'@': 137}), 64: (1, {'@': 137}), 37: (1, {'@': 137}), 6: (1, {'@': 137}), 61: (1, {'@': 137}), 8: (1, {'@': 137}), 35: (1, {'@': 137}), 31: (1, {'@': 137}), 34: (1, {'@': 137}), 46: (1, {'@': 137}), 27: (1, {'@': 137}), 38: (1, {'@': 137}), 71: (1, {'@': 137}), 79: (1, {'@': 137}), 73: (1, {'@': 137}), 76: (1, {'@': 137})}, 114: {71: (0, 167), 6: (0, 451), 72: (0, 182), 77: (0, 253), 2: (0, 186), 64: (0, 175), 8: (0, 366), 78: (0, 312), 79: (0, 484), 68: (0, 339), 48: (0, 417), 84: (0, 465), 85: (0, 446), 61: (0, 108), 29: (0, 490), 46: (0, 163), 86: (0, 379)}, 115: {108: (0, 261), 30: (0, 282), 0: (1, {'@': 138}), 31: (1, {'@': 138}), 14: (1, {'@': 138}), 26: (1, {'@': 138}), 34: (1, {'@': 138}), 15: (1, {'@': 138}), 16: (1, {'@': 138}), 17: (1, {'@': 138}), 13: (1, {'@': 138}), 11: (1, {'@': 138}), 27: (1, {'@': 138}), 97: (1, {'@': 138}), 18: (1, {'@': 138}), 98: (1, {'@': 138}), 12: (1, {'@': 138}), 38: (1, {'@': 138}), 19: (1, {'@': 138}), 20: (1, {'@': 138}), 99: (1, {'@': 138}), 21: (1, {'@': 138}), 22: (1, {'@': 138}), 93: (1, {'@': 138}), 36: (1, {'@': 138}), 23: (1, {'@': 138}), 6: (1, {'@': 138}), 28: (1, {'@': 138}), 24: (1, {'@': 138}), 25: (1, {'@': 138}), 9: (1, {'@': 138}), 44: (1, {'@': 138})}, 116: {2: (0, 472), 109: (0, 408), 71: (0, 427), 39: (0, 409), 96: (0, 158), 0: (1, {'@': 108}), 31: (1, {'@': 108}), 14: (1, {'@': 108}), 26: (1, {'@': 108}), 34: (1, {'@': 108}), 13: (1, {'@': 108}), 27: (1, {'@': 108}), 97: (1, {'@': 108}), 98: (1, {'@': 108}), 12: (1, {'@': 108}), 38: (1, {'@': 108}), 30: (1, {'@': 108}), 99: (1, {'@': 108}), 93: (1, {'@': 108}), 36: (1, {'@': 108}), 28: (1, {'@': 108})}, 117: {0: (1, {'@': 139}), 31: (1, {'@': 139}), 2: (1, {'@': 139}), 26: (1, {'@': 139}), 32: (1, {'@': 139}), 33: (1, {'@': 139}), 34: (1, {'@': 139}), 46: (1, {'@': 139}), 27: (1, {'@': 139}), 12: (1, {'@': 139}), 38: (1, {'@': 139}), 30: (1, {'@': 139}), 64: (1, {'@': 139}), 71: (1, {'@': 139}), 79: (1, {'@': 139}), 93: (1, {'@': 139}), 36: (1, {'@': 139}), 37: (1, {'@': 139}), 6: (1, {'@': 139}), 61: (1, {'@': 139}), 24: (1, {'@': 139}), 94: (1, {'@': 139}), 8: (1, {'@': 139}), 35: (1, {'@': 139}), 39: (1, {'@': 139}), 9: (1, {'@': 139}), 42: (1, {'@': 139}), 40: (1, {'@': 139}), 11: (1, {'@': 139}), 41: (1, {'@': 139}), 23: (1, {'@': 139}), 43: (1, {'@': 139}), 44: (1, {'@': 139}), 45: (1, {'@': 139}), 25: (1, {'@': 139}), 13: (1, {'@': 139})}, 118: {49: (0, 155), 6: (0, 451), 50: (0, 154), 51: (0, 120), 56: (0, 137), 29: (0, 159), 52: (0, 143), 53: (0, 115), 54: (0, 432), 55: (0, 130), 57: (0, 338), 5: (0, 332), 58: (0, 132), 1: (0, 352), 7: (0, 362), 2: (0, 118), 3: (0, 357), 59: (0, 144), 60: (0, 378), 38: (0, 148), 70: (0, 348), 8: (0, 366), 61: (0, 145), 62: (0, 331), 4: (0, 388), 63: (0, 430), 64: (0, 157), 0: (0, 370), 65: (0, 381), 66: (0, 418), 67: (0, 441), 46: (0, 163), 68: (0, 165), 48: (0, 131), 69: (0, 105)}, 119: {32: (1, {'@': 140}), 9: (1, {'@': 140}), 25: (1, {'@': 140}), 11: (1, {'@': 140}), 13: (1, {'@': 140}), 45: (1, {'@': 140})}, 120: {110: (0, 61), 0: (0, 70), 31: (1, {'@': 141}), 14: (1, {'@': 141}), 26: (1, {'@': 141}), 34: (1, {'@': 141}), 15: (1, {'@': 141}), 16: (1, {'@': 141}), 17: (1, {'@': 141}), 13: (1, {'@': 141}), 11: (1, {'@': 141}), 27: (1, {'@': 141}), 97: (1, {'@': 141}), 18: (1, {'@': 141}), 98: (1, {'@': 141}), 12: (1, {'@': 141}), 38: (1, {'@': 141}), 19: (1, {'@': 141}), 20: (1, {'@': 141}), 99: (1, {'@': 141}), 21: (1, {'@': 141}), 22: (1, {'@': 141}), 93: (1, {'@': 141}), 23: (1, {'@': 141}), 6: (1, {'@': 141}), 28: (1, {'@': 141}), 24: (1, {'@': 141}), 25: (1, {'@': 141}), 9: (1, {'@': 141}), 44: (1, {'@': 141})}, 121: {100: (0, 248), 6: (0, 451), 29: (0, 225)}, 122: {14: (0, 32)}, 123: {6: (0, 451), 29: (0, 225), 100: (0, 401)}, 124: {2: (0, 202)}, 125: {}, 126: {14: (0, 98), 13: (0, 101)}, 127: {95: (0, 160), 6: (0, 451), 49: (0, 155), 51: (0, 120), 53: (0, 115), 29: (0, 355), 57: (0, 338), 5: (0, 332), 7: (0, 362), 1: (0, 352), 3: (0, 357), 60: (0, 378), 50: (0, 400), 8: (0, 366), 4: (0, 388), 0: (0, 370), 65: (0, 381), 2: (0, 393), 68: (0, 165), 103: (0, 405), 70: (0, 161), 11: (1, {'@': 118})}, 128: {40: (1, {'@': 142}), 11: (1, {'@': 142}), 9: (1, {'@': 142}), 41: (1, {'@': 142}), 39: (1, {'@': 142}), 42: (1, {'@': 142}), 23: (1, {'@': 142}), 43: (1, {'@': 142}), 44: (1, {'@': 142}), 24: (1, {'@': 142}), 25: (1, {'@': 142})}, 129: {2: (0, 219)}, 130: {79: (0, 372)}, 131: {14: (1, {'@': 143}), 26: (1, {'@': 143}), 15: (1, {'@': 143}), 16: (1, {'@': 143}), 17: (1, {'@': 143}), 13: (1, {'@': 143}), 11: (1, {'@': 143}), 27: (1, {'@': 143}), 18: (1, {'@': 143}), 19: (1, {'@': 143}), 20: (1, {'@': 143}), 21: (1, {'@': 143}), 22: (1, {'@': 143}), 23: (1, {'@': 143}), 6: (1, {'@': 143}), 28: (1, {'@': 143}), 24: (1, {'@': 143}), 25: (1, {'@': 143})}, 132: {6: (1, {'@': 144})}, 133: {31: (1, {'@': 145}), 26: (1, {'@': 145}), 32: (1, {'@': 145}), 33: (1, {'@': 145}), 34: (1, {'@': 145}), 37: (1, {'@': 145}), 27: (1, {'@': 145}), 12: (1, {'@': 145}), 24: (1, {'@': 145}), 35: (1, {'@': 145}), 38: (1, {'@': 145}), 39: (1, {'@': 145}), 40: (1, {'@': 145}), 11: (1, {'@': 145}), 9: (1, {'@': 145}), 41: (1, {'@': 145}), 42: (1, {'@': 145}), 23: (1, {'@': 145}), 43: (1, {'@': 145}), 44: (1, {'@': 145}), 25: (1, {'@': 145}), 45: (1, {'@': 145})}, 134: {95: (0, 160), 6: (0, 451), 49: (0, 155), 51: (0, 120), 53: (0, 115), 29: (0, 355), 57: (0, 338), 5: (0, 332), 103: (0, 358), 7: (0, 362), 1: (0, 352), 3: (0, 357), 60: (0, 378), 50: (0, 400), 8: (0, 366), 4: (0, 388), 0: (0, 370), 65: (0, 381), 2: (0, 393), 68: (0, 165), 70: (0, 161), 11: (1, {'@': 118})}, 135: {6: (0, 451), 49: (0, 155), 50: (0, 154), 56: (0, 193), 51: (0, 120), 29: (0, 159), 52: (0, 143), 53: (0, 115), 54: (0, 432), 55: (0, 130), 57: (0, 338), 5: (0, 332), 58: (0, 132), 7: (0, 362), 2: (0, 118), 59: (0, 144), 1: (0, 352), 3: (0, 357), 60: (0, 378), 38: (0, 148), 8: (0, 366), 61: (0, 145), 62: (0, 331), 64: (0, 157), 63: (0, 430), 4: (0, 388), 0: (0, 370), 65: (0, 381), 66: (0, 418), 67: (0, 441), 46: (0, 163), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 136: {6: (0, 451), 49: (0, 155), 50: (0, 154), 51: (0, 120), 29: (0, 159), 52: (0, 143), 53: (0, 115), 54: (0, 432), 55: (0, 130), 56: (0, 214), 57: (0, 338), 5: (0, 332), 58: (0, 132), 7: (0, 362), 2: (0, 118), 59: (0, 144), 1: (0, 352), 3: (0, 357), 60: (0, 378), 38: (0, 148), 8: (0, 366), 61: (0, 145), 62: (0, 331), 64: (0, 157), 63: (0, 430), 4: (0, 388), 0: (0, 370), 65: (0, 381), 66: (0, 418), 67: (0, 441), 46: (0, 163), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 137: {11: (0, 6), 13: (0, 101)}, 138: {31: (1, {'@': 146}), 26: (1, {'@': 146}), 32: (1, {'@': 146}), 33: (1, {'@': 146}), 34: (1, {'@': 146}), 0: (1, {'@': 146}), 2: (1, {'@': 146}), 46: (1, {'@': 146}), 27: (1, {'@': 146}), 12: (1, {'@': 146}), 38: (1, {'@': 146}), 64: (1, {'@': 146}), 71: (1, {'@': 146}), 79: (1, {'@': 146}), 37: (1, {'@': 146}), 6: (1, {'@': 146}), 61: (1, {'@': 146}), 8: (1, {'@': 146}), 35: (1, {'@': 146}), 40: (1, {'@': 146}), 11: (1, {'@': 146}), 9: (1, {'@': 146}), 41: (1, {'@': 146}), 39: (1, {'@': 146}), 42: (1, {'@': 146}), 23: (1, {'@': 146}), 43: (1, {'@': 146}), 44: (1, {'@': 146}), 24: (1, {'@': 146}), 25: (1, {'@': 146})}, 139: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 77: (0, 253), 78: (0, 312), 79: (0, 484), 48: (0, 417), 80: (0, 476), 81: (0, 464), 83: (0, 426), 84: (0, 465), 85: (0, 446), 29: (0, 490), 86: (0, 89), 87: (0, 349), 88: (0, 57), 8: (0, 366), 68: (0, 339), 0: (0, 344), 91: (0, 337), 61: (0, 108), 46: (0, 163), 24: (1, {'@': 147}), 39: (1, {'@': 147}), 40: (1, {'@': 147}), 11: (1, {'@': 147}), 9: (1, {'@': 147}), 41: (1, {'@': 147}), 42: (1, {'@': 147}), 23: (1, {'@': 147}), 43: (1, {'@': 147}), 44: (1, {'@': 147}), 25: (1, {'@': 147})}, 140: {111: (0, 76), 9: (0, 63), 11: (1, {'@': 148}), 96: (1, {'@': 148}), 14: (1, {'@': 148}), 44: (1, {'@': 148})}, 141: {46: (0, 163), 48: (0, 410)}, 142: {9: (0, 383)}, 143: {6: (1, {'@': 149})}, 144: {27: (0, 330), 28: (0, 367), 26: (0, 376), 14: (1, {'@': 150}), 15: (1, {'@': 150}), 16: (1, {'@': 150}), 17: (1, {'@': 150}), 13: (1, {'@': 150}), 11: (1, {'@': 150}), 18: (1, {'@': 150}), 19: (1, {'@': 150}), 20: (1, {'@': 150}), 21: (1, {'@': 150}), 22: (1, {'@': 150}), 23: (1, {'@': 150}), 6: (1, {'@': 150}), 24: (1, {'@': 150}), 25: (1, {'@': 150})}, 145: {14: (1, {'@': 151}), 26: (1, {'@': 151}), 15: (1, {'@': 151}), 16: (1, {'@': 151}), 17: (1, {'@': 151}), 13: (1, {'@': 151}), 11: (1, {'@': 151}), 27: (1, {'@': 151}), 18: (1, {'@': 151}), 19: (1, {'@': 151}), 20: (1, {'@': 151}), 21: (1, {'@': 151}), 22: (1, {'@': 151}), 23: (1, {'@': 151}), 6: (1, {'@': 151}), 28: (1, {'@': 151}), 24: (1, {'@': 151}), 25: (1, {'@': 151})}, 146: {44: (0, 229)}, 147: {46: (0, 163), 48: (0, 254)}, 148: {6: (0, 451), 49: (0, 155), 50: (0, 154), 51: (0, 120), 29: (0, 159), 59: (0, 452), 53: (0, 115), 55: (0, 130), 57: (0, 338), 5: (0, 332), 7: (0, 362), 2: (0, 118), 1: (0, 352), 3: (0, 357), 60: (0, 378), 38: (0, 148), 8: (0, 366), 61: (0, 145), 64: (0, 157), 4: (0, 388), 0: (0, 370), 65: (0, 381), 46: (0, 163), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 149: {101: (0, 235), 6: (0, 451), 29: (0, 140), 112: (0, 217)}, 150: {6: (0, 451), 29: (0, 258)}, 151: {14: (0, 86), 13: (0, 101)}, 152: {94: (0, 204), 0: (1, {'@': 152}), 31: (1, {'@': 152}), 30: (1, {'@': 152}), 26: (1, {'@': 152}), 32: (1, {'@': 152}), 33: (1, {'@': 152}), 34: (1, {'@': 152}), 93: (1, {'@': 152}), 36: (1, {'@': 152}), 37: (1, {'@': 152}), 27: (1, {'@': 152}), 38: (1, {'@': 152}), 24: (1, {'@': 152}), 12: (1, {'@': 152}), 35: (1, {'@': 152}), 39: (1, {'@': 152}), 40: (1, {'@': 152}), 11: (1, {'@': 152}), 9: (1, {'@': 152}), 41: (1, {'@': 152}), 42: (1, {'@': 152}), 23: (1, {'@': 152}), 43: (1, {'@': 152}), 44: (1, {'@': 152}), 45: (1, {'@': 152}), 25: (1, {'@': 152})}, 153: {113: (0, 274), 114: (0, 308)}, 154: {115: (0, 343), 34: (0, 371), 99: (0, 365), 31: (0, 42), 12: (0, 37), 97: (0, 19), 116: (0, 40), 98: (0, 0), 38: (0, 2), 93: (0, 35), 117: (0, 486), 14: (1, {'@': 153}), 26: (1, {'@': 153}), 15: (1, {'@': 153}), 16: (1, {'@': 153}), 17: (1, {'@': 153}), 13: (1, {'@': 153}), 11: (1, {'@': 153}), 27: (1, {'@': 153}), 18: (1, {'@': 153}), 19: (1, {'@': 153}), 20: (1, {'@': 153}), 21: (1, {'@': 153}), 22: (1, {'@': 153}), 23: (1, {'@': 153}), 6: (1, {'@': 153}), 28: (1, {'@': 153}), 24: (1, {'@': 153}), 25: (1, {'@': 153})}, 155: {93: (0, 233), 118: (0, 62), 96: (0, 286), 0: (1, {'@': 154}), 31: (1, {'@': 154}), 14: (1, {'@': 154}), 26: (1, {'@': 154}), 34: (1, {'@': 154}), 15: (1, {'@': 154}), 16: (1, {'@': 154}), 17: (1, {'@': 154}), 13: (1, {'@': 154}), 11: (1, {'@': 154}), 27: (1, {'@': 154}), 97: (1, {'@': 154}), 18: (1, {'@': 154}), 98: (1, {'@': 154}), 12: (1, {'@': 154}), 38: (1, {'@': 154}), 19: (1, {'@': 154}), 20: (1, {'@': 154}), 30: (1, {'@': 154}), 99: (1, {'@': 154}), 21: (1, {'@': 154}), 22: (1, {'@': 154}), 36: (1, {'@': 154}), 23: (1, {'@': 154}), 6: (1, {'@': 154}), 28: (1, {'@': 154}), 24: (1, {'@': 154}), 25: (1, {'@': 154}), 9: (1, {'@': 154}), 44: (1, {'@': 154})}, 156: {0: (1, {'@': 155}), 31: (1, {'@': 155}), 2: (1, {'@': 155}), 26: (1, {'@': 155}), 32: (1, {'@': 155}), 33: (1, {'@': 155}), 34: (1, {'@': 155}), 46: (1, {'@': 155}), 27: (1, {'@': 155}), 12: (1, {'@': 155}), 38: (1, {'@': 155}), 30: (1, {'@': 155}), 64: (1, {'@': 155}), 71: (1, {'@': 155}), 79: (1, {'@': 155}), 93: (1, {'@': 155}), 36: (1, {'@': 155}), 37: (1, {'@': 155}), 6: (1, {'@': 155}), 61: (1, {'@': 155}), 24: (1, {'@': 155}), 94: (1, {'@': 155}), 8: (1, {'@': 155}), 35: (1, {'@': 155}), 39: (1, {'@': 155}), 9: (1, {'@': 155}), 42: (1, {'@': 155}), 40: (1, {'@': 155}), 11: (1, {'@': 155}), 41: (1, {'@': 155}), 23: (1, {'@': 155}), 43: (1, {'@': 155}), 44: (1, {'@': 155}), 45: (1, {'@': 155}), 25: (1, {'@': 155}), 13: (1, {'@': 155})}, 157: {14: (1, {'@': 156}), 26: (1, {'@': 156}), 15: (1, {'@': 156}), 16: (1, {'@': 156}), 17: (1, {'@': 156}), 13: (1, {'@': 156}), 11: (1, {'@': 156}), 27: (1, {'@': 156}), 18: (1, {'@': 156}), 19: (1, {'@': 156}), 20: (1, {'@': 156}), 21: (1, {'@': 156}), 22: (1, {'@': 156}), 23: (1, {'@': 156}), 6: (1, {'@': 156}), 28: (1, {'@': 156}), 24: (1, {'@': 156}), 25: (1, {'@': 156})}, 158: {29: (0, 200), 6: (0, 451)}, 159: {2: (0, 265), 109: (0, 408), 71: (0, 427), 39: (0, 409), 0: (1, {'@': 108}), 31: (1, {'@': 108}), 14: (1, {'@': 108}), 26: (1, {'@': 108}), 34: (1, {'@': 108}), 15: (1, {'@': 108}), 16: (1, {'@': 108}), 17: (1, {'@': 108}), 13: (1, {'@': 108}), 11: (1, {'@': 108}), 27: (1, {'@': 108}), 97: (1, {'@': 108}), 18: (1, {'@': 108}), 98: (1, {'@': 108}), 12: (1, {'@': 108}), 38: (1, {'@': 108}), 19: (1, {'@': 108}), 20: (1, {'@': 108}), 30: (1, {'@': 108}), 99: (1, {'@': 108}), 21: (1, {'@': 108}), 22: (1, {'@': 108}), 93: (1, {'@': 108}), 36: (1, {'@': 108}), 23: (1, {'@': 108}), 96: (1, {'@': 108}), 6: (1, {'@': 108}), 28: (1, {'@': 108}), 24: (1, {'@': 108}), 25: (1, {'@': 108})}, 160: {119: (0, 82), 9: (0, 68), 11: (1, {'@': 157})}, 161: {31: (1, {'@': 158}), 14: (1, {'@': 158}), 26: (1, {'@': 158}), 34: (1, {'@': 158}), 15: (1, {'@': 158}), 16: (1, {'@': 158}), 17: (1, {'@': 158}), 13: (1, {'@': 158}), 11: (1, {'@': 158}), 27: (1, {'@': 158}), 97: (1, {'@': 158}), 18: (1, {'@': 158}), 98: (1, {'@': 158}), 12: (1, {'@': 158}), 38: (1, {'@': 158}), 19: (1, {'@': 158}), 20: (1, {'@': 158}), 99: (1, {'@': 158}), 21: (1, {'@': 158}), 22: (1, {'@': 158}), 93: (1, {'@': 158}), 23: (1, {'@': 158}), 6: (1, {'@': 158}), 28: (1, {'@': 158}), 24: (1, {'@': 158}), 25: (1, {'@': 158}), 9: (1, {'@': 158})}, 162: {20: (1, {'@': 159}), 15: (1, {'@': 159}), 16: (1, {'@': 159}), 21: (1, {'@': 159}), 22: (1, {'@': 159}), 17: (1, {'@': 159}), 6: (1, {'@': 159}), 18: (1, {'@': 159}), 19: (1, {'@': 159}), 14: (1, {'@': 159})}, 163: {32: (1, {'@': 160}), 14: (1, {'@': 160}), 26: (1, {'@': 160}), 15: (1, {'@': 160}), 16: (1, {'@': 160}), 17: (1, {'@': 160}), 13: (1, {'@': 160}), 11: (1, {'@': 160}), 27: (1, {'@': 160}), 18: (1, {'@': 160}), 19: (1, {'@': 160}), 20: (1, {'@': 160}), 21: (1, {'@': 160}), 22: (1, {'@': 160}), 23: (1, {'@': 160}), 6: (1, {'@': 160}), 28: (1, {'@': 160}), 24: (1, {'@': 160}), 25: (1, {'@': 160}), 0: (1, {'@': 160}), 31: (1, {'@': 160}), 2: (1, {'@': 160}), 33: (1, {'@': 160}), 34: (1, {'@': 160}), 46: (1, {'@': 160}), 12: (1, {'@': 160}), 38: (1, {'@': 160}), 30: (1, {'@': 160}), 64: (1, {'@': 160}), 71: (1, {'@': 160}), 79: (1, {'@': 160}), 93: (1, {'@': 160}), 36: (1, {'@': 160}), 37: (1, {'@': 160}), 61: (1, {'@': 160}), 94: (1, {'@': 160}), 8: (1, {'@': 160}), 35: (1, {'@': 160}), 39: (1, {'@': 160}), 9: (1, {'@': 160}), 42: (1, {'@': 160}), 40: (1, {'@': 160}), 41: (1, {'@': 160}), 43: (1, {'@': 160}), 44: (1, {'@': 160}), 45: (1, {'@': 160})}, 164: {120: (0, 404), 121: (0, 407), 40: (0, 390)}, 165: {0: (1, {'@': 161}), 31: (1, {'@': 161}), 14: (1, {'@': 161}), 26: (1, {'@': 161}), 34: (1, {'@': 161}), 15: (1, {'@': 161}), 16: (1, {'@': 161}), 17: (1, {'@': 161}), 13: (1, {'@': 161}), 11: (1, {'@': 161}), 27: (1, {'@': 161}), 97: (1, {'@': 161}), 18: (1, {'@': 161}), 98: (1, {'@': 161}), 12: (1, {'@': 161}), 38: (1, {'@': 161}), 19: (1, {'@': 161}), 20: (1, {'@': 161}), 30: (1, {'@': 161}), 99: (1, {'@': 161}), 21: (1, {'@': 161}), 22: (1, {'@': 161}), 93: (1, {'@': 161}), 36: (1, {'@': 161}), 23: (1, {'@': 161}), 96: (1, {'@': 161}), 6: (1, {'@': 161}), 28: (1, {'@': 161}), 24: (1, {'@': 161}), 25: (1, {'@': 161}), 9: (1, {'@': 161}), 44: (1, {'@': 161})}, 166: {25: (0, 450)}, 167: {71: (0, 167), 2: (0, 186), 32: (0, 207), 76: (0, 306), 35: (0, 302), 78: (0, 312), 92: (0, 110), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 84: (0, 465), 85: (0, 446), 77: (0, 253), 8: (0, 366), 87: (0, 67), 68: (0, 339), 0: (0, 344), 91: (0, 337), 61: (0, 108), 25: (0, 117), 54: (0, 208), 6: (0, 451), 72: (0, 182), 64: (0, 175), 73: (0, 243), 75: (0, 257), 26: (0, 290), 27: (0, 318), 79: (0, 484), 31: (0, 423), 74: (0, 278), 83: (0, 426), 29: (0, 490), 38: (0, 69), 86: (0, 89), 88: (0, 57), 89: (0, 361), 34: (0, 334), 90: (0, 326), 46: (0, 163), 12: (0, 138)}, 168: {90: (0, 326), 74: (0, 278), 37: (0, 459), 32: (0, 207), 26: (0, 290), 27: (0, 318), 89: (0, 313), 35: (0, 302), 38: (0, 69), 12: (0, 138), 31: (0, 423), 33: (0, 488), 34: (0, 334), 24: (1, {'@': 162}), 39: (1, {'@': 162}), 40: (1, {'@': 162}), 11: (1, {'@': 162}), 9: (1, {'@': 162}), 41: (1, {'@': 162}), 42: (1, {'@': 162}), 23: (1, {'@': 162}), 43: (1, {'@': 162}), 44: (1, {'@': 162}), 25: (1, {'@': 162})}, 169: {79: (0, 8), 122: (0, 28)}, 170: {6: (0, 451), 29: (0, 1)}, 171: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 73: (0, 243), 32: (0, 207), 74: (0, 278), 75: (0, 257), 26: (0, 290), 76: (0, 306), 27: (0, 318), 77: (0, 253), 35: (0, 302), 78: (0, 312), 79: (0, 484), 31: (0, 423), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 83: (0, 426), 84: (0, 465), 85: (0, 446), 29: (0, 490), 92: (0, 458), 38: (0, 69), 86: (0, 89), 87: (0, 67), 88: (0, 57), 8: (0, 366), 89: (0, 361), 68: (0, 339), 0: (0, 344), 34: (0, 334), 90: (0, 326), 91: (0, 337), 61: (0, 108), 46: (0, 163), 12: (0, 138), 54: (0, 208)}, 172: {10: (0, 169)}, 173: {36: (0, 95), 0: (1, {'@': 163}), 31: (1, {'@': 163}), 26: (1, {'@': 163}), 32: (1, {'@': 163}), 33: (1, {'@': 163}), 34: (1, {'@': 163}), 37: (1, {'@': 163}), 27: (1, {'@': 163}), 38: (1, {'@': 163}), 24: (1, {'@': 163}), 12: (1, {'@': 163}), 35: (1, {'@': 163}), 39: (1, {'@': 163}), 40: (1, {'@': 163}), 11: (1, {'@': 163}), 9: (1, {'@': 163}), 41: (1, {'@': 163}), 42: (1, {'@': 163}), 23: (1, {'@': 163}), 43: (1, {'@': 163}), 44: (1, {'@': 163}), 25: (1, {'@': 163}), 45: (1, {'@': 163})}, 174: {42: (0, 164)}, 175: {0: (1, {'@': 164}), 31: (1, {'@': 164}), 2: (1, {'@': 164}), 26: (1, {'@': 164}), 32: (1, {'@': 164}), 33: (1, {'@': 164}), 34: (1, {'@': 164}), 46: (1, {'@': 164}), 27: (1, {'@': 164}), 12: (1, {'@': 164}), 38: (1, {'@': 164}), 30: (1, {'@': 164}), 64: (1, {'@': 164}), 71: (1, {'@': 164}), 79: (1, {'@': 164}), 93: (1, {'@': 164}), 36: (1, {'@': 164}), 37: (1, {'@': 164}), 6: (1, {'@': 164}), 61: (1, {'@': 164}), 24: (1, {'@': 164}), 94: (1, {'@': 164}), 8: (1, {'@': 164}), 35: (1, {'@': 164}), 39: (1, {'@': 164}), 9: (1, {'@': 164}), 42: (1, {'@': 164}), 40: (1, {'@': 164}), 11: (1, {'@': 164}), 41: (1, {'@': 164}), 23: (1, {'@': 164}), 43: (1, {'@': 164}), 44: (1, {'@': 164}), 45: (1, {'@': 164}), 25: (1, {'@': 164}), 13: (1, {'@': 164})}, 176: {40: (1, {'@': 165}), 11: (1, {'@': 165}), 9: (1, {'@': 165}), 41: (1, {'@': 165}), 39: (1, {'@': 165}), 42: (1, {'@': 165}), 23: (1, {'@': 165}), 43: (1, {'@': 165}), 44: (1, {'@': 165}), 24: (1, {'@': 165}), 25: (1, {'@': 165})}, 177: {24: (1, {'@': 166}), 39: (1, {'@': 166}), 40: (1, {'@': 166}), 11: (1, {'@': 166}), 9: (1, {'@': 166}), 41: (1, {'@': 166}), 42: (1, {'@': 166}), 23: (1, {'@': 166}), 43: (1, {'@': 166}), 44: (1, {'@': 166}), 25: (1, {'@': 166})}, 178: {45: (0, 377), 32: (0, 373)}, 179: {43: (1, {'@': 167}), 40: (1, {'@': 167})}, 180: {13: (0, 462), 32: (0, 373)}, 181: {29: (0, 494), 6: (0, 451)}, 182: {0: (1, {'@': 168}), 31: (1, {'@': 168}), 2: (1, {'@': 168}), 26: (1, {'@': 168}), 32: (1, {'@': 168}), 33: (1, {'@': 168}), 34: (1, {'@': 168}), 46: (1, {'@': 168}), 27: (1, {'@': 168}), 12: (1, {'@': 168}), 38: (1, {'@': 168}), 30: (1, {'@': 168}), 64: (1, {'@': 168}), 71: (1, {'@': 168}), 79: (1, {'@': 168}), 93: (1, {'@': 168}), 36: (1, {'@': 168}), 37: (1, {'@': 168}), 6: (1, {'@': 168}), 61: (1, {'@': 168}), 24: (1, {'@': 168}), 94: (1, {'@': 168}), 8: (1, {'@': 168}), 35: (1, {'@': 168}), 39: (1, {'@': 168}), 9: (1, {'@': 168}), 45: (1, {'@': 168}), 42: (1, {'@': 168}), 40: (1, {'@': 168}), 11: (1, {'@': 168}), 41: (1, {'@': 168}), 23: (1, {'@': 168}), 43: (1, {'@': 168}), 44: (1, {'@': 168}), 25: (1, {'@': 168}), 13: (1, {'@': 168})}, 183: {12: (0, 292)}, 184: {9: (0, 394), 11: (0, 156)}, 185: {6: (0, 451), 71: (0, 226), 48: (0, 187), 123: (0, 428), 68: (0, 232), 2: (0, 244), 8: (0, 366), 79: (0, 484), 29: (0, 119), 78: (0, 196), 46: (0, 163)}, 186: {71: (0, 167), 2: (0, 186), 32: (0, 207), 76: (0, 306), 35: (0, 302), 78: (0, 312), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 84: (0, 465), 85: (0, 446), 77: (0, 253), 124: (0, 415), 8: (0, 366), 87: (0, 67), 68: (0, 339), 92: (0, 184), 0: (0, 344), 91: (0, 337), 61: (0, 108), 54: (0, 208), 6: (0, 451), 72: (0, 182), 64: (0, 175), 73: (0, 243), 75: (0, 257), 26: (0, 290), 27: (0, 318), 79: (0, 484), 31: (0, 423), 74: (0, 278), 83: (0, 426), 29: (0, 490), 38: (0, 69), 86: (0, 89), 88: (0, 57), 89: (0, 361), 34: (0, 334), 90: (0, 326), 46: (0, 163), 12: (0, 138)}, 187: {32: (1, {'@': 169}), 9: (1, {'@': 169}), 25: (1, {'@': 169}), 11: (1, {'@': 169}), 45: (1, {'@': 169}), 13: (1, {'@': 169})}, 188: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 77: (0, 253), 78: (0, 312), 79: (0, 484), 48: (0, 417), 80: (0, 476), 84: (0, 465), 85: (0, 446), 29: (0, 490), 86: (0, 89), 8: (0, 366), 68: (0, 339), 88: (0, 26), 91: (0, 337), 61: (0, 108), 46: (0, 163)}, 189: {96: (0, 14), 45: (1, {'@': 140}), 32: (1, {'@': 140})}, 190: {32: (1, {'@': 170}), 9: (1, {'@': 170}), 25: (1, {'@': 170}), 11: (1, {'@': 170}), 45: (1, {'@': 170}), 13: (1, {'@': 170})}, 191: {90: (0, 326), 74: (0, 278), 37: (0, 459), 32: (0, 207), 45: (0, 104), 26: (0, 290), 27: (0, 318), 89: (0, 313), 35: (0, 302), 38: (0, 69), 12: (0, 138), 31: (0, 423), 33: (0, 488), 34: (0, 334)}, 192: {32: (1, {'@': 171}), 9: (1, {'@': 171}), 25: (1, {'@': 171}), 11: (1, {'@': 171}), 45: (1, {'@': 171}), 13: (1, {'@': 171})}, 193: {13: (0, 101), 20: (1, {'@': 172}), 15: (1, {'@': 172}), 16: (1, {'@': 172}), 21: (1, {'@': 172}), 22: (1, {'@': 172}), 17: (1, {'@': 172}), 6: (1, {'@': 172}), 18: (1, {'@': 172}), 19: (1, {'@': 172}), 14: (1, {'@': 172})}, 194: {2: (1, {'@': 173}), 71: (1, {'@': 173}), 79: (1, {'@': 173}), 11: (1, {'@': 173}), 6: (1, {'@': 173}), 46: (1, {'@': 173}), 8: (1, {'@': 173})}, 195: {46: (0, 163), 48: (0, 283)}, 196: {32: (1, {'@': 174}), 9: (1, {'@': 174}), 25: (1, {'@': 174}), 11: (1, {'@': 174}), 45: (1, {'@': 174}), 13: (1, {'@': 174})}, 197: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 73: (0, 243), 32: (0, 207), 74: (0, 278), 75: (0, 257), 26: (0, 290), 76: (0, 306), 27: (0, 318), 77: (0, 253), 35: (0, 302), 78: (0, 312), 79: (0, 484), 31: (0, 423), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 83: (0, 426), 84: (0, 465), 85: (0, 446), 29: (0, 490), 38: (0, 69), 86: (0, 89), 87: (0, 67), 92: (0, 466), 88: (0, 57), 8: (0, 366), 89: (0, 361), 68: (0, 339), 0: (0, 344), 34: (0, 334), 90: (0, 326), 91: (0, 337), 61: (0, 108), 46: (0, 163), 12: (0, 138), 54: (0, 208)}, 198: {23: (0, 13)}, 199: {32: (0, 373), 9: (1, {'@': 175}), 25: (1, {'@': 175}), 11: (1, {'@': 175}), 45: (1, {'@': 175}), 13: (1, {'@': 175})}, 200: {45: (0, 135), 2: (0, 127)}, 201: {32: (0, 284)}, 202: {48: (0, 142), 6: (0, 451), 46: (0, 163), 29: (0, 210)}, 203: {45: (0, 205), 0: (1, {'@': 176}), 31: (1, {'@': 176}), 14: (1, {'@': 176}), 26: (1, {'@': 176}), 34: (1, {'@': 176}), 13: (1, {'@': 176}), 27: (1, {'@': 176}), 97: (1, {'@': 176}), 98: (1, {'@': 176}), 12: (1, {'@': 176}), 38: (1, {'@': 176}), 30: (1, {'@': 176}), 99: (1, {'@': 176}), 93: (1, {'@': 176}), 36: (1, {'@': 176}), 96: (1, {'@': 176}), 28: (1, {'@': 176})}, 204: {71: (0, 167), 6: (0, 451), 72: (0, 182), 77: (0, 34), 2: (0, 186), 64: (0, 175), 8: (0, 366), 78: (0, 312), 79: (0, 484), 68: (0, 339), 48: (0, 417), 84: (0, 465), 85: (0, 446), 61: (0, 108), 29: (0, 490), 46: (0, 163)}, 205: {6: (0, 451), 49: (0, 155), 50: (0, 154), 51: (0, 120), 29: (0, 159), 52: (0, 143), 53: (0, 115), 54: (0, 432), 55: (0, 130), 56: (0, 277), 57: (0, 338), 5: (0, 332), 58: (0, 132), 7: (0, 362), 2: (0, 118), 59: (0, 144), 1: (0, 352), 3: (0, 357), 60: (0, 378), 38: (0, 148), 8: (0, 366), 61: (0, 145), 62: (0, 331), 64: (0, 157), 63: (0, 430), 4: (0, 388), 0: (0, 370), 65: (0, 381), 66: (0, 418), 67: (0, 441), 46: (0, 163), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 206: {6: (0, 451), 101: (0, 471), 29: (0, 140)}, 207: {31: (1, {'@': 177}), 26: (1, {'@': 177}), 32: (1, {'@': 177}), 33: (1, {'@': 177}), 34: (1, {'@': 177}), 0: (1, {'@': 177}), 2: (1, {'@': 177}), 46: (1, {'@': 177}), 27: (1, {'@': 177}), 12: (1, {'@': 177}), 38: (1, {'@': 177}), 64: (1, {'@': 177}), 71: (1, {'@': 177}), 79: (1, {'@': 177}), 37: (1, {'@': 177}), 6: (1, {'@': 177}), 61: (1, {'@': 177}), 8: (1, {'@': 177}), 35: (1, {'@': 177}), 40: (1, {'@': 177}), 11: (1, {'@': 177}), 9: (1, {'@': 177}), 41: (1, {'@': 177}), 39: (1, {'@': 177}), 42: (1, {'@': 177}), 23: (1, {'@': 177}), 43: (1, {'@': 177}), 44: (1, {'@': 177}), 24: (1, {'@': 177}), 25: (1, {'@': 177})}, 208: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 73: (0, 243), 32: (0, 207), 74: (0, 278), 75: (0, 257), 26: (0, 290), 76: (0, 306), 27: (0, 318), 77: (0, 253), 35: (0, 302), 78: (0, 312), 79: (0, 484), 31: (0, 423), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 83: (0, 426), 84: (0, 465), 85: (0, 446), 29: (0, 490), 38: (0, 69), 86: (0, 89), 87: (0, 67), 88: (0, 57), 92: (0, 198), 8: (0, 366), 89: (0, 361), 68: (0, 339), 0: (0, 344), 34: (0, 334), 90: (0, 326), 91: (0, 337), 61: (0, 108), 46: (0, 163), 12: (0, 138), 54: (0, 208)}, 209: {14: (1, {'@': 178}), 26: (1, {'@': 178}), 15: (1, {'@': 178}), 16: (1, {'@': 178}), 17: (1, {'@': 178}), 13: (1, {'@': 178}), 11: (1, {'@': 178}), 27: (1, {'@': 178}), 18: (1, {'@': 178}), 19: (1, {'@': 178}), 20: (1, {'@': 178}), 21: (1, {'@': 178}), 22: (1, {'@': 178}), 23: (1, {'@': 178}), 6: (1, {'@': 178}), 28: (1, {'@': 178}), 24: (1, {'@': 178}), 25: (1, {'@': 178})}, 210: {9: (0, 43)}, 211: {11: (0, 162)}, 212: {2: (0, 478), 44: (1, {'@': 179})}, 213: {46: (0, 163), 48: (0, 287)}, 214: {13: (0, 101), 14: (1, {'@': 180}), 15: (1, {'@': 180}), 16: (1, {'@': 180}), 17: (1, {'@': 180}), 11: (1, {'@': 180}), 18: (1, {'@': 180}), 19: (1, {'@': 180}), 20: (1, {'@': 180}), 21: (1, {'@': 180}), 22: (1, {'@': 180}), 23: (1, {'@': 180}), 6: (1, {'@': 180}), 24: (1, {'@': 180}), 25: (1, {'@': 180})}, 215: {20: (1, {'@': 181}), 15: (1, {'@': 181}), 16: (1, {'@': 181}), 21: (1, {'@': 181}), 22: (1, {'@': 181}), 17: (1, {'@': 181}), 6: (1, {'@': 181}), 18: (1, {'@': 181}), 19: (1, {'@': 181}), 14: (1, {'@': 181})}, 216: {13: (0, 101), 14: (1, {'@': 182}), 15: (1, {'@': 182}), 16: (1, {'@': 182}), 17: (1, {'@': 182}), 11: (1, {'@': 182}), 18: (1, {'@': 182}), 19: (1, {'@': 182}), 20: (1, {'@': 182}), 21: (1, {'@': 182}), 22: (1, {'@': 182}), 23: (1, {'@': 182}), 6: (1, {'@': 182}), 24: (1, {'@': 182}), 25: (1, {'@': 182})}, 217: {44: (0, 92)}, 218: {24: (0, 333), 13: (0, 101), 14: (1, {'@': 183}), 15: (1, {'@': 183}), 16: (1, {'@': 183}), 17: (1, {'@': 183}), 11: (1, {'@': 183}), 18: (1, {'@': 183}), 19: (1, {'@': 183}), 20: (1, {'@': 183}), 21: (1, {'@': 183}), 22: (1, {'@': 183}), 23: (1, {'@': 183}), 6: (1, {'@': 183}), 25: (1, {'@': 183})}, 219: {46: (0, 163), 48: (0, 298)}, 220: {0: (1, {'@': 184}), 31: (1, {'@': 184}), 14: (1, {'@': 184}), 26: (1, {'@': 184}), 34: (1, {'@': 184}), 15: (1, {'@': 184}), 16: (1, {'@': 184}), 17: (1, {'@': 184}), 13: (1, {'@': 184}), 11: (1, {'@': 184}), 27: (1, {'@': 184}), 97: (1, {'@': 184}), 18: (1, {'@': 184}), 98: (1, {'@': 184}), 12: (1, {'@': 184}), 38: (1, {'@': 184}), 19: (1, {'@': 184}), 20: (1, {'@': 184}), 30: (1, {'@': 184}), 99: (1, {'@': 184}), 21: (1, {'@': 184}), 22: (1, {'@': 184}), 93: (1, {'@': 184}), 36: (1, {'@': 184}), 23: (1, {'@': 184}), 96: (1, {'@': 184}), 6: (1, {'@': 184}), 28: (1, {'@': 184}), 24: (1, {'@': 184}), 25: (1, {'@': 184}), 9: (1, {'@': 184}), 44: (1, {'@': 184})}, 221: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 77: (0, 253), 78: (0, 312), 79: (0, 484), 48: (0, 417), 80: (0, 476), 84: (0, 465), 85: (0, 446), 88: (0, 439), 29: (0, 490), 86: (0, 89), 8: (0, 366), 68: (0, 339), 91: (0, 337), 61: (0, 108), 46: (0, 163)}, 222: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 73: (0, 243), 32: (0, 207), 74: (0, 278), 75: (0, 257), 26: (0, 290), 76: (0, 306), 27: (0, 318), 77: (0, 253), 35: (0, 302), 78: (0, 312), 79: (0, 484), 31: (0, 423), 33: (0, 488), 48: (0, 417), 80: (0, 476), 92: (0, 479), 81: (0, 464), 37: (0, 459), 82: (0, 455), 83: (0, 426), 84: (0, 465), 85: (0, 446), 29: (0, 490), 38: (0, 69), 86: (0, 89), 87: (0, 67), 88: (0, 57), 8: (0, 366), 89: (0, 361), 68: (0, 339), 0: (0, 344), 34: (0, 334), 90: (0, 326), 91: (0, 337), 61: (0, 108), 46: (0, 163), 12: (0, 138), 54: (0, 208)}, 223: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 73: (0, 243), 32: (0, 207), 74: (0, 278), 75: (0, 257), 26: (0, 290), 76: (0, 306), 27: (0, 318), 77: (0, 253), 35: (0, 302), 78: (0, 312), 79: (0, 484), 31: (0, 423), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 83: (0, 426), 84: (0, 465), 92: (0, 247), 85: (0, 446), 29: (0, 490), 38: (0, 69), 86: (0, 89), 87: (0, 67), 88: (0, 57), 8: (0, 366), 89: (0, 361), 68: (0, 339), 0: (0, 344), 34: (0, 334), 90: (0, 326), 91: (0, 337), 61: (0, 108), 46: (0, 163), 12: (0, 138), 54: (0, 208)}, 224: {6: (0, 451), 71: (0, 226), 48: (0, 187), 68: (0, 232), 2: (0, 244), 8: (0, 366), 79: (0, 484), 29: (0, 119), 78: (0, 196), 123: (0, 397), 11: (0, 340), 46: (0, 163)}, 225: {96: (0, 170), 2: (0, 58), 9: (1, {'@': 185}), 10: (1, {'@': 185}), 11: (1, {'@': 185})}, 226: {6: (0, 451), 71: (0, 226), 48: (0, 187), 68: (0, 232), 2: (0, 244), 8: (0, 366), 79: (0, 484), 29: (0, 119), 25: (0, 375), 78: (0, 196), 123: (0, 402), 46: (0, 163)}, 227: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 73: (0, 243), 32: (0, 207), 74: (0, 278), 75: (0, 257), 26: (0, 290), 76: (0, 306), 27: (0, 318), 77: (0, 253), 35: (0, 302), 92: (0, 468), 78: (0, 312), 79: (0, 484), 31: (0, 423), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 83: (0, 426), 84: (0, 465), 85: (0, 446), 29: (0, 490), 38: (0, 69), 86: (0, 89), 87: (0, 67), 88: (0, 57), 8: (0, 366), 89: (0, 361), 68: (0, 339), 0: (0, 344), 34: (0, 334), 90: (0, 326), 91: (0, 337), 61: (0, 108), 46: (0, 163), 12: (0, 138), 54: (0, 208)}, 228: {9: (0, 489), 14: (0, 492)}, 229: {20: (1, {'@': 186}), 15: (1, {'@': 186}), 16: (1, {'@': 186}), 21: (1, {'@': 186}), 22: (1, {'@': 186}), 17: (1, {'@': 186}), 6: (1, {'@': 186}), 18: (1, {'@': 186}), 19: (1, {'@': 186}), 14: (1, {'@': 186})}, 230: {46: (0, 163), 47: (0, 454), 48: (0, 78)}, 231: {60: (0, 378), 49: (0, 155), 6: (0, 451), 1: (0, 352), 29: (0, 56), 8: (0, 366), 53: (0, 115), 4: (0, 388), 0: (0, 370), 5: (0, 332), 2: (0, 393), 68: (0, 165), 7: (0, 362), 3: (0, 357), 57: (0, 53)}, 232: {32: (1, {'@': 187}), 9: (1, {'@': 187}), 25: (1, {'@': 187}), 11: (1, {'@': 187}), 45: (1, {'@': 187}), 13: (1, {'@': 187})}, 233: {60: (0, 378), 6: (0, 451), 49: (0, 33), 1: (0, 352), 29: (0, 56), 8: (0, 366), 4: (0, 388), 0: (0, 370), 5: (0, 332), 2: (0, 393), 68: (0, 165), 7: (0, 362), 3: (0, 357)}, 234: {14: (1, {'@': 188}), 15: (1, {'@': 188}), 16: (1, {'@': 188}), 17: (1, {'@': 188}), 18: (1, {'@': 188}), 19: (1, {'@': 188}), 20: (1, {'@': 188}), 21: (1, {'@': 188}), 22: (1, {'@': 188}), 6: (1, {'@': 188}), 44: (1, {'@': 188})}, 235: {96: (0, 77)}, 236: {44: (0, 99)}, 237: {32: (0, 398)}, 238: {32: (0, 79)}, 239: {11: (0, 249)}, 240: {71: (0, 167), 6: (0, 451), 72: (0, 182), 77: (0, 253), 2: (0, 186), 64: (0, 175), 8: (0, 366), 78: (0, 312), 79: (0, 484), 68: (0, 339), 86: (0, 89), 48: (0, 417), 84: (0, 465), 91: (0, 337), 85: (0, 446), 80: (0, 411), 61: (0, 108), 29: (0, 490), 46: (0, 163)}, 241: {11: (0, 256)}, 242: {6: (0, 451), 125: (0, 491), 29: (0, 438), 17: (0, 482), 104: (0, 480), 126: (0, 288), 15: (0, 264), 18: (0, 250), 19: (0, 299), 127: (0, 267), 22: (0, 255), 128: (0, 303), 21: (0, 113), 129: (0, 125), 16: (0, 149), 20: (1, {'@': 189})}, 243: {71: (0, 167), 2: (0, 186), 32: (0, 207), 76: (0, 306), 35: (0, 302), 78: (0, 312), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 84: (0, 465), 85: (0, 446), 92: (0, 453), 77: (0, 253), 8: (0, 366), 87: (0, 67), 68: (0, 339), 0: (0, 344), 91: (0, 337), 61: (0, 108), 54: (0, 208), 6: (0, 451), 72: (0, 182), 64: (0, 175), 73: (0, 243), 75: (0, 257), 26: (0, 290), 27: (0, 318), 79: (0, 484), 31: (0, 423), 74: (0, 278), 83: (0, 426), 29: (0, 490), 38: (0, 69), 86: (0, 89), 88: (0, 57), 89: (0, 361), 34: (0, 334), 90: (0, 326), 46: (0, 163), 12: (0, 138)}, 244: {6: (0, 451), 71: (0, 226), 48: (0, 187), 68: (0, 232), 130: (0, 224), 2: (0, 244), 79: (0, 484), 8: (0, 366), 29: (0, 119), 78: (0, 196), 123: (0, 392), 46: (0, 163)}, 245: {0: (1, {'@': 190}), 26: (1, {'@': 190}), 13: (1, {'@': 190}), 9: (1, {'@': 190}), 97: (1, {'@': 190}), 18: (1, {'@': 190}), 98: (1, {'@': 190}), 12: (1, {'@': 190}), 19: (1, {'@': 190}), 30: (1, {'@': 190}), 93: (1, {'@': 190}), 36: (1, {'@': 190}), 6: (1, {'@': 190}), 31: (1, {'@': 190}), 14: (1, {'@': 190}), 34: (1, {'@': 190}), 15: (1, {'@': 190}), 16: (1, {'@': 190}), 17: (1, {'@': 190}), 11: (1, {'@': 190}), 27: (1, {'@': 190}), 38: (1, {'@': 190}), 20: (1, {'@': 190}), 99: (1, {'@': 190}), 21: (1, {'@': 190}), 22: (1, {'@': 190}), 23: (1, {'@': 190}), 44: (1, {'@': 190}), 28: (1, {'@': 190}), 24: (1, {'@': 190}), 25: (1, {'@': 190})}, 246: {9: (1, {'@': 191}), 25: (1, {'@': 191})}, 247: {44: (0, 97)}, 248: {9: (0, 456)}, 249: {44: (1, {'@': 192})}, 250: {6: (0, 451), 29: (0, 225), 100: (0, 172)}, 251: {0: (1, {'@': 176}), 31: (1, {'@': 176}), 14: (1, {'@': 176}), 26: (1, {'@': 176}), 34: (1, {'@': 176}), 15: (1, {'@': 176}), 16: (1, {'@': 176}), 17: (1, {'@': 176}), 13: (1, {'@': 176}), 11: (1, {'@': 176}), 27: (1, {'@': 176}), 97: (1, {'@': 176}), 18: (1, {'@': 176}), 98: (1, {'@': 176}), 12: (1, {'@': 176}), 38: (1, {'@': 176}), 19: (1, {'@': 176}), 20: (1, {'@': 176}), 30: (1, {'@': 176}), 99: (1, {'@': 176}), 21: (1, {'@': 176}), 22: (1, {'@': 176}), 93: (1, {'@': 176}), 36: (1, {'@': 176}), 23: (1, {'@': 176}), 96: (1, {'@': 176}), 6: (1, {'@': 176}), 28: (1, {'@': 176}), 24: (1, {'@': 176}), 25: (1, {'@': 176}), 9: (1, {'@': 176}), 44: (1, {'@': 176})}, 252: {11: (0, 304)}, 253: {71: (0, 167), 6: (0, 451), 2: (0, 186), 131: (0, 152), 64: (0, 175), 8: (0, 366), 78: (0, 312), 79: (0, 484), 72: (0, 460), 68: (0, 339), 94: (0, 416), 48: (0, 417), 84: (0, 465), 85: (0, 446), 61: (0, 108), 29: (0, 490), 46: (0, 163), 0: (1, {'@': 193}), 31: (1, {'@': 193}), 30: (1, {'@': 193}), 26: (1, {'@': 193}), 32: (1, {'@': 193}), 33: (1, {'@': 193}), 34: (1, {'@': 193}), 93: (1, {'@': 193}), 36: (1, {'@': 193}), 37: (1, {'@': 193}), 27: (1, {'@': 193}), 38: (1, {'@': 193}), 24: (1, {'@': 193}), 12: (1, {'@': 193}), 35: (1, {'@': 193}), 39: (1, {'@': 193}), 40: (1, {'@': 193}), 11: (1, {'@': 193}), 9: (1, {'@': 193}), 41: (1, {'@': 193}), 42: (1, {'@': 193}), 23: (1, {'@': 193}), 43: (1, {'@': 193}), 44: (1, {'@': 193}), 45: (1, {'@': 193}), 25: (1, {'@': 193})}, 254: {11: (0, 473)}, 255: {101: (0, 235), 112: (0, 146), 6: (0, 451), 29: (0, 140)}, 256: {0: (1, {'@': 194}), 31: (1, {'@': 194}), 14: (1, {'@': 194}), 26: (1, {'@': 194}), 34: (1, {'@': 194}), 15: (1, {'@': 194}), 16: (1, {'@': 194}), 17: (1, {'@': 194}), 13: (1, {'@': 194}), 11: (1, {'@': 194}), 27: (1, {'@': 194}), 97: (1, {'@': 194}), 18: (1, {'@': 194}), 98: (1, {'@': 194}), 12: (1, {'@': 194}), 38: (1, {'@': 194}), 19: (1, {'@': 194}), 20: (1, {'@': 194}), 30: (1, {'@': 194}), 99: (1, {'@': 194}), 21: (1, {'@': 194}), 22: (1, {'@': 194}), 93: (1, {'@': 194}), 36: (1, {'@': 194}), 23: (1, {'@': 194}), 96: (1, {'@': 194}), 6: (1, {'@': 194}), 28: (1, {'@': 194}), 24: (1, {'@': 194}), 25: (1, {'@': 194}), 9: (1, {'@': 194}), 44: (1, {'@': 194})}, 257: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 73: (0, 243), 32: (0, 207), 74: (0, 278), 75: (0, 257), 26: (0, 290), 76: (0, 306), 27: (0, 318), 77: (0, 253), 35: (0, 302), 78: (0, 312), 79: (0, 484), 31: (0, 423), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 83: (0, 426), 84: (0, 465), 85: (0, 446), 29: (0, 490), 38: (0, 69), 86: (0, 89), 87: (0, 67), 88: (0, 57), 8: (0, 366), 89: (0, 361), 68: (0, 339), 92: (0, 174), 0: (0, 344), 34: (0, 334), 90: (0, 326), 91: (0, 337), 61: (0, 108), 46: (0, 163), 12: (0, 138), 54: (0, 208)}, 258: {11: (0, 461)}, 259: {44: (0, 419)}, 260: {60: (0, 378), 49: (0, 155), 6: (0, 451), 1: (0, 352), 57: (0, 338), 29: (0, 56), 8: (0, 366), 51: (0, 120), 53: (0, 115), 4: (0, 388), 0: (0, 370), 70: (0, 305), 5: (0, 332), 65: (0, 381), 2: (0, 393), 68: (0, 165), 7: (0, 362), 3: (0, 357)}, 261: {30: (0, 47), 0: (1, {'@': 195}), 31: (1, {'@': 195}), 14: (1, {'@': 195}), 26: (1, {'@': 195}), 34: (1, {'@': 195}), 15: (1, {'@': 195}), 16: (1, {'@': 195}), 17: (1, {'@': 195}), 13: (1, {'@': 195}), 11: (1, {'@': 195}), 27: (1, {'@': 195}), 97: (1, {'@': 195}), 18: (1, {'@': 195}), 98: (1, {'@': 195}), 12: (1, {'@': 195}), 38: (1, {'@': 195}), 19: (1, {'@': 195}), 20: (1, {'@': 195}), 99: (1, {'@': 195}), 21: (1, {'@': 195}), 22: (1, {'@': 195}), 93: (1, {'@': 195}), 36: (1, {'@': 195}), 23: (1, {'@': 195}), 6: (1, {'@': 195}), 28: (1, {'@': 195}), 24: (1, {'@': 195}), 25: (1, {'@': 195}), 9: (1, {'@': 195}), 44: (1, {'@': 195})}, 262: {91: (0, 23), 71: (0, 167), 6: (0, 451), 72: (0, 182), 77: (0, 253), 2: (0, 186), 64: (0, 175), 8: (0, 366), 78: (0, 312), 79: (0, 484), 68: (0, 339), 86: (0, 89), 48: (0, 417), 84: (0, 465), 85: (0, 446), 61: (0, 108), 29: (0, 490), 46: (0, 163)}, 263: {25: (0, 309)}, 264: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 77: (0, 253), 78: (0, 312), 79: (0, 484), 48: (0, 417), 80: (0, 476), 81: (0, 464), 83: (0, 426), 84: (0, 465), 85: (0, 446), 29: (0, 490), 86: (0, 89), 87: (0, 191), 88: (0, 57), 8: (0, 366), 68: (0, 339), 0: (0, 344), 91: (0, 337), 61: (0, 108), 46: (0, 163)}, 265: {95: (0, 160), 6: (0, 451), 49: (0, 155), 51: (0, 120), 53: (0, 115), 103: (0, 51), 29: (0, 355), 57: (0, 338), 5: (0, 332), 7: (0, 362), 1: (0, 352), 3: (0, 357), 60: (0, 378), 50: (0, 400), 8: (0, 366), 4: (0, 388), 0: (0, 370), 65: (0, 381), 2: (0, 393), 68: (0, 165), 70: (0, 161), 11: (1, {'@': 118})}, 266: {31: (1, {'@': 196}), 14: (1, {'@': 196}), 26: (1, {'@': 196}), 34: (1, {'@': 196}), 15: (1, {'@': 196}), 16: (1, {'@': 196}), 17: (1, {'@': 196}), 13: (1, {'@': 196}), 11: (1, {'@': 196}), 27: (1, {'@': 196}), 97: (1, {'@': 196}), 18: (1, {'@': 196}), 98: (1, {'@': 196}), 12: (1, {'@': 196}), 38: (1, {'@': 196}), 19: (1, {'@': 196}), 20: (1, {'@': 196}), 99: (1, {'@': 196}), 21: (1, {'@': 196}), 22: (1, {'@': 196}), 93: (1, {'@': 196}), 23: (1, {'@': 196}), 6: (1, {'@': 196}), 28: (1, {'@': 196}), 24: (1, {'@': 196}), 25: (1, {'@': 196}), 9: (1, {'@': 196})}, 267: {20: (1, {'@': 197}), 15: (1, {'@': 197}), 16: (1, {'@': 197}), 21: (1, {'@': 197}), 22: (1, {'@': 197}), 17: (1, {'@': 197}), 6: (1, {'@': 197}), 18: (1, {'@': 197}), 19: (1, {'@': 197})}, 268: {0: (1, {'@': 198}), 31: (1, {'@': 198}), 14: (1, {'@': 198}), 26: (1, {'@': 198}), 34: (1, {'@': 198}), 15: (1, {'@': 198}), 16: (1, {'@': 198}), 17: (1, {'@': 198}), 13: (1, {'@': 198}), 11: (1, {'@': 198}), 27: (1, {'@': 198}), 97: (1, {'@': 198}), 18: (1, {'@': 198}), 98: (1, {'@': 198}), 12: (1, {'@': 198}), 38: (1, {'@': 198}), 19: (1, {'@': 198}), 20: (1, {'@': 198}), 30: (1, {'@': 198}), 99: (1, {'@': 198}), 21: (1, {'@': 198}), 22: (1, {'@': 198}), 93: (1, {'@': 198}), 36: (1, {'@': 198}), 23: (1, {'@': 198}), 96: (1, {'@': 198}), 6: (1, {'@': 198}), 28: (1, {'@': 198}), 24: (1, {'@': 198}), 25: (1, {'@': 198}), 9: (1, {'@': 198}), 44: (1, {'@': 198})}, 269: {0: (1, {'@': 199}), 26: (1, {'@': 199}), 13: (1, {'@': 199}), 9: (1, {'@': 199}), 97: (1, {'@': 199}), 18: (1, {'@': 199}), 98: (1, {'@': 199}), 12: (1, {'@': 199}), 19: (1, {'@': 199}), 93: (1, {'@': 199}), 36: (1, {'@': 199}), 6: (1, {'@': 199}), 31: (1, {'@': 199}), 14: (1, {'@': 199}), 34: (1, {'@': 199}), 15: (1, {'@': 199}), 16: (1, {'@': 199}), 17: (1, {'@': 199}), 11: (1, {'@': 199}), 27: (1, {'@': 199}), 38: (1, {'@': 199}), 20: (1, {'@': 199}), 99: (1, {'@': 199}), 21: (1, {'@': 199}), 22: (1, {'@': 199}), 23: (1, {'@': 199}), 44: (1, {'@': 199}), 28: (1, {'@': 199}), 24: (1, {'@': 199}), 25: (1, {'@': 199})}, 270: {0: (1, {'@': 200}), 31: (1, {'@': 200}), 14: (1, {'@': 200}), 26: (1, {'@': 200}), 34: (1, {'@': 200}), 15: (1, {'@': 200}), 16: (1, {'@': 200}), 17: (1, {'@': 200}), 13: (1, {'@': 200}), 11: (1, {'@': 200}), 27: (1, {'@': 200}), 97: (1, {'@': 200}), 18: (1, {'@': 200}), 98: (1, {'@': 200}), 12: (1, {'@': 200}), 38: (1, {'@': 200}), 19: (1, {'@': 200}), 20: (1, {'@': 200}), 30: (1, {'@': 200}), 99: (1, {'@': 200}), 21: (1, {'@': 200}), 22: (1, {'@': 200}), 93: (1, {'@': 200}), 36: (1, {'@': 200}), 23: (1, {'@': 200}), 96: (1, {'@': 200}), 6: (1, {'@': 200}), 28: (1, {'@': 200}), 24: (1, {'@': 200}), 25: (1, {'@': 200}), 9: (1, {'@': 200}), 44: (1, {'@': 200})}, 271: {0: (1, {'@': 201}), 31: (1, {'@': 201}), 14: (1, {'@': 201}), 26: (1, {'@': 201}), 34: (1, {'@': 201}), 15: (1, {'@': 201}), 16: (1, {'@': 201}), 17: (1, {'@': 201}), 13: (1, {'@': 201}), 11: (1, {'@': 201}), 27: (1, {'@': 201}), 97: (1, {'@': 201}), 18: (1, {'@': 201}), 98: (1, {'@': 201}), 12: (1, {'@': 201}), 38: (1, {'@': 201}), 19: (1, {'@': 201}), 20: (1, {'@': 201}), 30: (1, {'@': 201}), 99: (1, {'@': 201}), 21: (1, {'@': 201}), 22: (1, {'@': 201}), 93: (1, {'@': 201}), 36: (1, {'@': 201}), 23: (1, {'@': 201}), 96: (1, {'@': 201}), 6: (1, {'@': 201}), 28: (1, {'@': 201}), 24: (1, {'@': 201}), 25: (1, {'@': 201}), 9: (1, {'@': 201}), 44: (1, {'@': 201})}, 272: {0: (1, {'@': 202}), 31: (1, {'@': 202}), 14: (1, {'@': 202}), 26: (1, {'@': 202}), 34: (1, {'@': 202}), 15: (1, {'@': 202}), 16: (1, {'@': 202}), 17: (1, {'@': 202}), 13: (1, {'@': 202}), 11: (1, {'@': 202}), 27: (1, {'@': 202}), 97: (1, {'@': 202}), 18: (1, {'@': 202}), 98: (1, {'@': 202}), 12: (1, {'@': 202}), 38: (1, {'@': 202}), 19: (1, {'@': 202}), 20: (1, {'@': 202}), 30: (1, {'@': 202}), 99: (1, {'@': 202}), 21: (1, {'@': 202}), 22: (1, {'@': 202}), 93: (1, {'@': 202}), 36: (1, {'@': 202}), 23: (1, {'@': 202}), 96: (1, {'@': 202}), 6: (1, {'@': 202}), 28: (1, {'@': 202}), 24: (1, {'@': 202}), 25: (1, {'@': 202}), 9: (1, {'@': 202}), 44: (1, {'@': 202})}, 273: {13: (0, 101), 20: (1, {'@': 203}), 15: (1, {'@': 203}), 16: (1, {'@': 203}), 21: (1, {'@': 203}), 22: (1, {'@': 203}), 17: (1, {'@': 203}), 6: (1, {'@': 203}), 18: (1, {'@': 203}), 19: (1, {'@': 203}), 14: (1, {'@': 203})}, 274: {9: (1, {'@': 204})}, 275: {11: (0, 311)}, 276: {11: (0, 315)}, 277: {13: (0, 101), 20: (1, {'@': 205}), 15: (1, {'@': 205}), 16: (1, {'@': 205}), 21: (1, {'@': 205}), 22: (1, {'@': 205}), 17: (1, {'@': 205}), 6: (1, {'@': 205}), 18: (1, {'@': 205}), 19: (1, {'@': 205}), 14: (1, {'@': 205})}, 278: {37: (0, 459), 32: (0, 207), 26: (0, 290), 27: (0, 318), 35: (0, 302), 38: (0, 69), 12: (0, 138), 31: (0, 423), 90: (0, 109), 33: (0, 488), 34: (0, 334), 0: (1, {'@': 206}), 2: (1, {'@': 206}), 64: (1, {'@': 206}), 71: (1, {'@': 206}), 79: (1, {'@': 206}), 6: (1, {'@': 206}), 61: (1, {'@': 206}), 46: (1, {'@': 206}), 8: (1, {'@': 206}), 40: (1, {'@': 206}), 11: (1, {'@': 206}), 9: (1, {'@': 206}), 41: (1, {'@': 206}), 39: (1, {'@': 206}), 42: (1, {'@': 206}), 23: (1, {'@': 206}), 43: (1, {'@': 206}), 44: (1, {'@': 206}), 24: (1, {'@': 206}), 25: (1, {'@': 206})}, 279: {11: (0, 317)}, 280: {0: (1, {'@': 207}), 31: (1, {'@': 207}), 2: (1, {'@': 207}), 26: (1, {'@': 207}), 32: (1, {'@': 207}), 33: (1, {'@': 207}), 34: (1, {'@': 207}), 46: (1, {'@': 207}), 27: (1, {'@': 207}), 12: (1, {'@': 207}), 38: (1, {'@': 207}), 30: (1, {'@': 207}), 64: (1, {'@': 207}), 71: (1, {'@': 207}), 79: (1, {'@': 207}), 93: (1, {'@': 207}), 36: (1, {'@': 207}), 37: (1, {'@': 207}), 6: (1, {'@': 207}), 61: (1, {'@': 207}), 24: (1, {'@': 207}), 94: (1, {'@': 207}), 8: (1, {'@': 207}), 35: (1, {'@': 207}), 39: (1, {'@': 207}), 9: (1, {'@': 207}), 42: (1, {'@': 207}), 40: (1, {'@': 207}), 11: (1, {'@': 207}), 41: (1, {'@': 207}), 23: (1, {'@': 207}), 43: (1, {'@': 207}), 44: (1, {'@': 207}), 45: (1, {'@': 207}), 25: (1, {'@': 207}), 13: (1, {'@': 207})}, 281: {6: (0, 451), 49: (0, 155), 50: (0, 154), 56: (0, 151), 51: (0, 120), 29: (0, 159), 52: (0, 143), 53: (0, 115), 54: (0, 432), 55: (0, 130), 57: (0, 338), 5: (0, 332), 58: (0, 132), 7: (0, 362), 2: (0, 118), 59: (0, 144), 1: (0, 352), 3: (0, 357), 60: (0, 378), 38: (0, 148), 8: (0, 366), 61: (0, 145), 62: (0, 331), 64: (0, 157), 63: (0, 430), 4: (0, 388), 0: (0, 370), 65: (0, 381), 66: (0, 418), 67: (0, 441), 46: (0, 163), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 282: {60: (0, 378), 49: (0, 155), 6: (0, 451), 1: (0, 352), 29: (0, 56), 8: (0, 366), 53: (0, 389), 4: (0, 388), 0: (0, 370), 5: (0, 332), 2: (0, 393), 68: (0, 165), 7: (0, 362), 3: (0, 357)}, 283: {9: (0, 387)}, 284: {6: (0, 451), 49: (0, 155), 50: (0, 154), 51: (0, 120), 29: (0, 159), 52: (0, 143), 53: (0, 115), 54: (0, 432), 55: (0, 130), 56: (0, 433), 57: (0, 338), 5: (0, 332), 58: (0, 132), 7: (0, 362), 2: (0, 118), 59: (0, 144), 1: (0, 352), 3: (0, 357), 60: (0, 378), 38: (0, 148), 8: (0, 366), 61: (0, 145), 62: (0, 331), 64: (0, 157), 63: (0, 430), 4: (0, 388), 0: (0, 370), 65: (0, 381), 66: (0, 418), 67: (0, 441), 46: (0, 163), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 285: {43: (1, {'@': 208}), 40: (1, {'@': 208})}, 286: {6: (0, 451), 109: (0, 395), 29: (0, 46)}, 287: {11: (0, 374)}, 288: {20: (1, {'@': 209}), 15: (1, {'@': 209}), 16: (1, {'@': 209}), 21: (1, {'@': 209}), 22: (1, {'@': 209}), 17: (1, {'@': 209}), 6: (1, {'@': 209}), 18: (1, {'@': 209}), 19: (1, {'@': 209}), 14: (1, {'@': 209})}, 289: {14: (1, {'@': 210}), 26: (1, {'@': 210}), 15: (1, {'@': 210}), 16: (1, {'@': 210}), 17: (1, {'@': 210}), 13: (1, {'@': 210}), 11: (1, {'@': 210}), 27: (1, {'@': 210}), 18: (1, {'@': 210}), 19: (1, {'@': 210}), 20: (1, {'@': 210}), 21: (1, {'@': 210}), 22: (1, {'@': 210}), 23: (1, {'@': 210}), 6: (1, {'@': 210}), 28: (1, {'@': 210}), 24: (1, {'@': 210}), 25: (1, {'@': 210})}, 290: {31: (1, {'@': 211}), 26: (1, {'@': 211}), 32: (1, {'@': 211}), 33: (1, {'@': 211}), 34: (1, {'@': 211}), 0: (1, {'@': 211}), 2: (1, {'@': 211}), 46: (1, {'@': 211}), 27: (1, {'@': 211}), 12: (1, {'@': 211}), 38: (1, {'@': 211}), 64: (1, {'@': 211}), 71: (1, {'@': 211}), 79: (1, {'@': 211}), 37: (1, {'@': 211}), 6: (1, {'@': 211}), 61: (1, {'@': 211}), 8: (1, {'@': 211}), 35: (1, {'@': 211}), 40: (1, {'@': 211}), 11: (1, {'@': 211}), 9: (1, {'@': 211}), 41: (1, {'@': 211}), 39: (1, {'@': 211}), 42: (1, {'@': 211}), 23: (1, {'@': 211}), 43: (1, {'@': 211}), 44: (1, {'@': 211}), 24: (1, {'@': 211}), 25: (1, {'@': 211})}, 291: {45: (0, 436)}, 292: {12: (0, 449)}, 293: {11: (0, 320)}, 294: {45: (0, 205)}, 295: {96: (0, 5), 44: (1, {'@': 212})}, 296: {13: (0, 101), 14: (1, {'@': 213}), 15: (1, {'@': 213}), 16: (1, {'@': 213}), 17: (1, {'@': 213}), 11: (1, {'@': 213}), 18: (1, {'@': 213}), 19: (1, {'@': 213}), 20: (1, {'@': 213}), 21: (1, {'@': 213}), 22: (1, {'@': 213}), 23: (1, {'@': 213}), 6: (1, {'@': 213}), 24: (1, {'@': 213}), 25: (1, {'@': 213})}, 297: {14: (1, {'@': 214}), 9: (1, {'@': 214})}, 298: {9: (0, 300)}, 299: {48: (0, 183), 46: (0, 163)}, 300: {6: (0, 451), 29: (0, 314)}, 301: {95: (0, 160), 6: (0, 451), 49: (0, 155), 103: (0, 323), 51: (0, 120), 53: (0, 115), 29: (0, 355), 57: (0, 338), 5: (0, 332), 7: (0, 362), 1: (0, 352), 3: (0, 357), 60: (0, 378), 50: (0, 400), 8: (0, 366), 4: (0, 388), 0: (0, 370), 65: (0, 381), 2: (0, 393), 68: (0, 165), 70: (0, 161), 11: (1, {'@': 118})}, 302: {31: (1, {'@': 215}), 26: (1, {'@': 215}), 32: (1, {'@': 215}), 33: (1, {'@': 215}), 34: (1, {'@': 215}), 0: (1, {'@': 215}), 2: (1, {'@': 215}), 46: (1, {'@': 215}), 27: (1, {'@': 215}), 12: (1, {'@': 215}), 38: (1, {'@': 215}), 64: (1, {'@': 215}), 71: (1, {'@': 215}), 79: (1, {'@': 215}), 37: (1, {'@': 215}), 6: (1, {'@': 215}), 61: (1, {'@': 215}), 8: (1, {'@': 215}), 35: (1, {'@': 215}), 40: (1, {'@': 215}), 11: (1, {'@': 215}), 9: (1, {'@': 215}), 41: (1, {'@': 215}), 39: (1, {'@': 215}), 42: (1, {'@': 215}), 23: (1, {'@': 215}), 43: (1, {'@': 215}), 44: (1, {'@': 215}), 24: (1, {'@': 215}), 25: (1, {'@': 215})}, 303: {20: (1, {'@': 216}), 15: (1, {'@': 216}), 16: (1, {'@': 216}), 21: (1, {'@': 216}), 22: (1, {'@': 216}), 17: (1, {'@': 216}), 6: (1, {'@': 216}), 18: (1, {'@': 216}), 19: (1, {'@': 216}), 14: (1, {'@': 216})}, 304: {0: (1, {'@': 217}), 31: (1, {'@': 217}), 14: (1, {'@': 217}), 26: (1, {'@': 217}), 34: (1, {'@': 217}), 15: (1, {'@': 217}), 16: (1, {'@': 217}), 17: (1, {'@': 217}), 13: (1, {'@': 217}), 11: (1, {'@': 217}), 27: (1, {'@': 217}), 97: (1, {'@': 217}), 18: (1, {'@': 217}), 98: (1, {'@': 217}), 12: (1, {'@': 217}), 38: (1, {'@': 217}), 19: (1, {'@': 217}), 20: (1, {'@': 217}), 30: (1, {'@': 217}), 99: (1, {'@': 217}), 21: (1, {'@': 217}), 22: (1, {'@': 217}), 93: (1, {'@': 217}), 36: (1, {'@': 217}), 23: (1, {'@': 217}), 96: (1, {'@': 217}), 6: (1, {'@': 217}), 28: (1, {'@': 217}), 24: (1, {'@': 217}), 25: (1, {'@': 217}), 9: (1, {'@': 217}), 44: (1, {'@': 217})}, 305: {25: (0, 324)}, 306: {6: (0, 451), 71: (0, 226), 48: (0, 187), 68: (0, 232), 2: (0, 244), 8: (0, 366), 79: (0, 484), 29: (0, 189), 78: (0, 196), 123: (0, 178), 46: (0, 163)}, 307: {11: (0, 386)}, 308: {9: (0, 391)}, 309: {31: (1, {'@': 218}), 14: (1, {'@': 218}), 26: (1, {'@': 218}), 34: (1, {'@': 218}), 15: (1, {'@': 218}), 16: (1, {'@': 218}), 17: (1, {'@': 218}), 13: (1, {'@': 218}), 11: (1, {'@': 218}), 27: (1, {'@': 218}), 97: (1, {'@': 218}), 18: (1, {'@': 218}), 98: (1, {'@': 218}), 12: (1, {'@': 218}), 38: (1, {'@': 218}), 19: (1, {'@': 218}), 20: (1, {'@': 218}), 99: (1, {'@': 218}), 21: (1, {'@': 218}), 22: (1, {'@': 218}), 93: (1, {'@': 218}), 23: (1, {'@': 218}), 6: (1, {'@': 218}), 28: (1, {'@': 218}), 24: (1, {'@': 218}), 25: (1, {'@': 218}), 9: (1, {'@': 218})}, 310: {11: (0, 440)}, 311: {20: (1, {'@': 219}), 15: (1, {'@': 219}), 16: (1, {'@': 219}), 21: (1, {'@': 219}), 22: (1, {'@': 219}), 17: (1, {'@': 219}), 6: (1, {'@': 219}), 18: (1, {'@': 219}), 19: (1, {'@': 219}), 14: (1, {'@': 219})}, 312: {0: (1, {'@': 220}), 31: (1, {'@': 220}), 2: (1, {'@': 220}), 26: (1, {'@': 220}), 32: (1, {'@': 220}), 33: (1, {'@': 220}), 34: (1, {'@': 220}), 46: (1, {'@': 220}), 27: (1, {'@': 220}), 12: (1, {'@': 220}), 38: (1, {'@': 220}), 30: (1, {'@': 220}), 64: (1, {'@': 220}), 71: (1, {'@': 220}), 79: (1, {'@': 220}), 93: (1, {'@': 220}), 36: (1, {'@': 220}), 37: (1, {'@': 220}), 6: (1, {'@': 220}), 61: (1, {'@': 220}), 24: (1, {'@': 220}), 94: (1, {'@': 220}), 8: (1, {'@': 220}), 35: (1, {'@': 220}), 39: (1, {'@': 220}), 9: (1, {'@': 220}), 42: (1, {'@': 220}), 40: (1, {'@': 220}), 11: (1, {'@': 220}), 41: (1, {'@': 220}), 23: (1, {'@': 220}), 43: (1, {'@': 220}), 44: (1, {'@': 220}), 45: (1, {'@': 220}), 25: (1, {'@': 220}), 13: (1, {'@': 220})}, 313: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 77: (0, 253), 78: (0, 312), 79: (0, 484), 48: (0, 417), 80: (0, 476), 81: (0, 464), 83: (0, 426), 84: (0, 465), 85: (0, 446), 29: (0, 490), 86: (0, 89), 87: (0, 349), 88: (0, 57), 8: (0, 366), 68: (0, 339), 0: (0, 344), 91: (0, 337), 61: (0, 108), 46: (0, 163)}, 314: {11: (0, 442)}, 315: {20: (1, {'@': 221}), 15: (1, {'@': 221}), 16: (1, {'@': 221}), 21: (1, {'@': 221}), 22: (1, {'@': 221}), 17: (1, {'@': 221}), 6: (1, {'@': 221}), 18: (1, {'@': 221}), 19: (1, {'@': 221}), 14: (1, {'@': 221})}, 316: {11: (0, 444)}, 317: {20: (1, {'@': 222}), 15: (1, {'@': 222}), 16: (1, {'@': 222}), 21: (1, {'@': 222}), 22: (1, {'@': 222}), 17: (1, {'@': 222}), 6: (1, {'@': 222}), 18: (1, {'@': 222}), 19: (1, {'@': 222}), 14: (1, {'@': 222})}, 318: {31: (1, {'@': 223}), 26: (1, {'@': 223}), 32: (1, {'@': 223}), 33: (1, {'@': 223}), 34: (1, {'@': 223}), 0: (1, {'@': 223}), 2: (1, {'@': 223}), 46: (1, {'@': 223}), 27: (1, {'@': 223}), 12: (1, {'@': 223}), 38: (1, {'@': 223}), 64: (1, {'@': 223}), 71: (1, {'@': 223}), 79: (1, {'@': 223}), 37: (1, {'@': 223}), 6: (1, {'@': 223}), 61: (1, {'@': 223}), 8: (1, {'@': 223}), 35: (1, {'@': 223}), 40: (1, {'@': 223}), 11: (1, {'@': 223}), 9: (1, {'@': 223}), 41: (1, {'@': 223}), 39: (1, {'@': 223}), 42: (1, {'@': 223}), 23: (1, {'@': 223}), 43: (1, {'@': 223}), 44: (1, {'@': 223}), 24: (1, {'@': 223}), 25: (1, {'@': 223})}, 319: {11: (0, 445)}, 320: {44: (1, {'@': 224})}, 321: {9: (0, 448)}, 322: {9: (0, 359)}, 323: {11: (0, 368)}, 324: {31: (1, {'@': 225}), 14: (1, {'@': 225}), 26: (1, {'@': 225}), 34: (1, {'@': 225}), 15: (1, {'@': 225}), 16: (1, {'@': 225}), 17: (1, {'@': 225}), 13: (1, {'@': 225}), 11: (1, {'@': 225}), 27: (1, {'@': 225}), 97: (1, {'@': 225}), 18: (1, {'@': 225}), 98: (1, {'@': 225}), 12: (1, {'@': 225}), 38: (1, {'@': 225}), 19: (1, {'@': 225}), 20: (1, {'@': 225}), 99: (1, {'@': 225}), 21: (1, {'@': 225}), 22: (1, {'@': 225}), 93: (1, {'@': 225}), 23: (1, {'@': 225}), 6: (1, {'@': 225}), 28: (1, {'@': 225}), 24: (1, {'@': 225}), 25: (1, {'@': 225}), 9: (1, {'@': 225})}, 325: {9: (0, 437)}, 326: {31: (1, {'@': 226}), 26: (1, {'@': 226}), 32: (1, {'@': 226}), 33: (1, {'@': 226}), 34: (1, {'@': 226}), 0: (1, {'@': 226}), 2: (1, {'@': 226}), 46: (1, {'@': 226}), 27: (1, {'@': 226}), 12: (1, {'@': 226}), 38: (1, {'@': 226}), 64: (1, {'@': 226}), 71: (1, {'@': 226}), 79: (1, {'@': 226}), 37: (1, {'@': 226}), 6: (1, {'@': 226}), 61: (1, {'@': 226}), 8: (1, {'@': 226}), 35: (1, {'@': 226}), 40: (1, {'@': 226}), 11: (1, {'@': 226}), 9: (1, {'@': 226}), 41: (1, {'@': 226}), 39: (1, {'@': 226}), 42: (1, {'@': 226}), 23: (1, {'@': 226}), 43: (1, {'@': 226}), 44: (1, {'@': 226}), 24: (1, {'@': 226}), 25: (1, {'@': 226})}, 327: {29: (0, 140), 6: (0, 451), 101: (0, 336)}, 328: {14: (1, {'@': 227}), 26: (1, {'@': 227}), 15: (1, {'@': 227}), 16: (1, {'@': 227}), 17: (1, {'@': 227}), 13: (1, {'@': 227}), 11: (1, {'@': 227}), 27: (1, {'@': 227}), 18: (1, {'@': 227}), 19: (1, {'@': 227}), 20: (1, {'@': 227}), 21: (1, {'@': 227}), 22: (1, {'@': 227}), 23: (1, {'@': 227}), 6: (1, {'@': 227}), 28: (1, {'@': 227}), 24: (1, {'@': 227}), 25: (1, {'@': 227})}, 329: {14: (1, {'@': 228}), 26: (1, {'@': 228}), 15: (1, {'@': 228}), 16: (1, {'@': 228}), 17: (1, {'@': 228}), 13: (1, {'@': 228}), 11: (1, {'@': 228}), 27: (1, {'@': 228}), 18: (1, {'@': 228}), 19: (1, {'@': 228}), 20: (1, {'@': 228}), 21: (1, {'@': 228}), 22: (1, {'@': 228}), 23: (1, {'@': 228}), 6: (1, {'@': 228}), 28: (1, {'@': 228}), 24: (1, {'@': 228}), 25: (1, {'@': 228})}, 330: {6: (0, 451), 49: (0, 155), 50: (0, 154), 51: (0, 120), 29: (0, 159), 52: (0, 143), 53: (0, 115), 54: (0, 432), 55: (0, 130), 56: (0, 17), 57: (0, 338), 5: (0, 332), 58: (0, 132), 7: (0, 362), 2: (0, 118), 59: (0, 144), 1: (0, 352), 3: (0, 357), 60: (0, 378), 38: (0, 148), 8: (0, 366), 61: (0, 145), 62: (0, 331), 64: (0, 157), 63: (0, 430), 4: (0, 388), 0: (0, 370), 65: (0, 381), 66: (0, 418), 67: (0, 441), 46: (0, 163), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 331: {6: (0, 451), 29: (0, 140), 101: (0, 295), 132: (0, 88)}, 332: {71: (0, 434)}, 333: {6: (0, 451), 49: (0, 155), 50: (0, 154), 51: (0, 120), 29: (0, 159), 52: (0, 143), 53: (0, 115), 54: (0, 432), 55: (0, 130), 56: (0, 296), 57: (0, 338), 5: (0, 332), 58: (0, 132), 7: (0, 362), 2: (0, 118), 59: (0, 144), 1: (0, 352), 3: (0, 357), 60: (0, 378), 38: (0, 148), 8: (0, 366), 61: (0, 145), 62: (0, 331), 64: (0, 157), 63: (0, 430), 4: (0, 388), 0: (0, 370), 65: (0, 381), 66: (0, 418), 67: (0, 441), 46: (0, 163), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 334: {31: (1, {'@': 229}), 26: (1, {'@': 229}), 32: (1, {'@': 229}), 33: (1, {'@': 229}), 34: (1, {'@': 229}), 0: (1, {'@': 229}), 2: (1, {'@': 229}), 46: (1, {'@': 229}), 27: (1, {'@': 229}), 12: (1, {'@': 229}), 38: (1, {'@': 229}), 64: (1, {'@': 229}), 71: (1, {'@': 229}), 79: (1, {'@': 229}), 37: (1, {'@': 229}), 6: (1, {'@': 229}), 61: (1, {'@': 229}), 8: (1, {'@': 229}), 35: (1, {'@': 229}), 40: (1, {'@': 229}), 11: (1, {'@': 229}), 9: (1, {'@': 229}), 41: (1, {'@': 229}), 39: (1, {'@': 229}), 42: (1, {'@': 229}), 23: (1, {'@': 229}), 43: (1, {'@': 229}), 44: (1, {'@': 229}), 24: (1, {'@': 229}), 25: (1, {'@': 229})}, 335: {0: (1, {'@': 230}), 31: (1, {'@': 230}), 2: (1, {'@': 230}), 26: (1, {'@': 230}), 32: (1, {'@': 230}), 33: (1, {'@': 230}), 34: (1, {'@': 230}), 46: (1, {'@': 230}), 27: (1, {'@': 230}), 12: (1, {'@': 230}), 38: (1, {'@': 230}), 30: (1, {'@': 230}), 64: (1, {'@': 230}), 71: (1, {'@': 230}), 79: (1, {'@': 230}), 93: (1, {'@': 230}), 36: (1, {'@': 230}), 37: (1, {'@': 230}), 6: (1, {'@': 230}), 61: (1, {'@': 230}), 24: (1, {'@': 230}), 94: (1, {'@': 230}), 8: (1, {'@': 230}), 35: (1, {'@': 230}), 39: (1, {'@': 230}), 9: (1, {'@': 230}), 42: (1, {'@': 230}), 40: (1, {'@': 230}), 11: (1, {'@': 230}), 41: (1, {'@': 230}), 23: (1, {'@': 230}), 43: (1, {'@': 230}), 44: (1, {'@': 230}), 45: (1, {'@': 230}), 25: (1, {'@': 230}), 13: (1, {'@': 230})}, 336: {14: (0, 474)}, 337: {133: (0, 7), 30: (0, 27), 0: (1, {'@': 231}), 31: (1, {'@': 231}), 26: (1, {'@': 231}), 32: (1, {'@': 231}), 33: (1, {'@': 231}), 34: (1, {'@': 231}), 35: (1, {'@': 231}), 36: (1, {'@': 231}), 37: (1, {'@': 231}), 27: (1, {'@': 231}), 24: (1, {'@': 231}), 12: (1, {'@': 231}), 38: (1, {'@': 231}), 39: (1, {'@': 231}), 40: (1, {'@': 231}), 11: (1, {'@': 231}), 9: (1, {'@': 231}), 41: (1, {'@': 231}), 42: (1, {'@': 231}), 23: (1, {'@': 231}), 43: (1, {'@': 231}), 44: (1, {'@': 231}), 25: (1, {'@': 231}), 45: (1, {'@': 231})}, 338: {134: (0, 55), 36: (0, 231), 0: (1, {'@': 232}), 31: (1, {'@': 232}), 14: (1, {'@': 232}), 26: (1, {'@': 232}), 34: (1, {'@': 232}), 15: (1, {'@': 232}), 16: (1, {'@': 232}), 17: (1, {'@': 232}), 13: (1, {'@': 232}), 11: (1, {'@': 232}), 27: (1, {'@': 232}), 97: (1, {'@': 232}), 18: (1, {'@': 232}), 98: (1, {'@': 232}), 12: (1, {'@': 232}), 38: (1, {'@': 232}), 19: (1, {'@': 232}), 20: (1, {'@': 232}), 99: (1, {'@': 232}), 21: (1, {'@': 232}), 22: (1, {'@': 232}), 93: (1, {'@': 232}), 23: (1, {'@': 232}), 6: (1, {'@': 232}), 28: (1, {'@': 232}), 24: (1, {'@': 232}), 25: (1, {'@': 232}), 9: (1, {'@': 232}), 44: (1, {'@': 232})}, 339: {0: (1, {'@': 233}), 31: (1, {'@': 233}), 2: (1, {'@': 233}), 26: (1, {'@': 233}), 32: (1, {'@': 233}), 33: (1, {'@': 233}), 34: (1, {'@': 233}), 46: (1, {'@': 233}), 27: (1, {'@': 233}), 12: (1, {'@': 233}), 38: (1, {'@': 233}), 30: (1, {'@': 233}), 64: (1, {'@': 233}), 71: (1, {'@': 233}), 79: (1, {'@': 233}), 93: (1, {'@': 233}), 36: (1, {'@': 233}), 37: (1, {'@': 233}), 6: (1, {'@': 233}), 61: (1, {'@': 233}), 24: (1, {'@': 233}), 94: (1, {'@': 233}), 8: (1, {'@': 233}), 35: (1, {'@': 233}), 39: (1, {'@': 233}), 9: (1, {'@': 233}), 42: (1, {'@': 233}), 40: (1, {'@': 233}), 11: (1, {'@': 233}), 41: (1, {'@': 233}), 23: (1, {'@': 233}), 43: (1, {'@': 233}), 44: (1, {'@': 233}), 45: (1, {'@': 233}), 25: (1, {'@': 233}), 13: (1, {'@': 233})}, 340: {32: (1, {'@': 234}), 9: (1, {'@': 234}), 25: (1, {'@': 234}), 11: (1, {'@': 234}), 45: (1, {'@': 234}), 13: (1, {'@': 234})}, 341: {14: (1, {'@': 235}), 26: (1, {'@': 235}), 15: (1, {'@': 235}), 16: (1, {'@': 235}), 17: (1, {'@': 235}), 13: (1, {'@': 235}), 11: (1, {'@': 235}), 27: (1, {'@': 235}), 18: (1, {'@': 235}), 19: (1, {'@': 235}), 20: (1, {'@': 235}), 21: (1, {'@': 235}), 22: (1, {'@': 235}), 23: (1, {'@': 235}), 6: (1, {'@': 235}), 28: (1, {'@': 235}), 24: (1, {'@': 235}), 25: (1, {'@': 235})}, 342: {0: (1, {'@': 236}), 1: (1, {'@': 236}), 2: (1, {'@': 236}), 3: (1, {'@': 236}), 4: (1, {'@': 236}), 5: (1, {'@': 236}), 6: (1, {'@': 236}), 7: (1, {'@': 236}), 8: (1, {'@': 236})}, 343: {60: (0, 378), 6: (0, 451), 49: (0, 155), 57: (0, 338), 29: (0, 355), 8: (0, 366), 50: (0, 18), 51: (0, 120), 53: (0, 115), 4: (0, 388), 7: (0, 362), 0: (0, 370), 5: (0, 332), 65: (0, 381), 2: (0, 393), 68: (0, 165), 1: (0, 352), 3: (0, 357), 70: (0, 161)}, 344: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 77: (0, 253), 78: (0, 312), 79: (0, 484), 48: (0, 417), 80: (0, 476), 84: (0, 465), 85: (0, 446), 29: (0, 490), 86: (0, 89), 81: (0, 133), 88: (0, 57), 8: (0, 366), 68: (0, 339), 91: (0, 337), 61: (0, 108), 46: (0, 163)}, 345: {0: (1, {'@': 237}), 1: (1, {'@': 237}), 2: (1, {'@': 237}), 3: (1, {'@': 237}), 4: (1, {'@': 237}), 5: (1, {'@': 237}), 6: (1, {'@': 237}), 7: (1, {'@': 237}), 8: (1, {'@': 237})}, 346: {32: (1, {'@': 238}), 9: (1, {'@': 238}), 25: (1, {'@': 238}), 11: (1, {'@': 238}), 45: (1, {'@': 238}), 13: (1, {'@': 238})}, 347: {14: (1, {'@': 239}), 26: (1, {'@': 239}), 15: (1, {'@': 239}), 16: (1, {'@': 239}), 17: (1, {'@': 239}), 13: (1, {'@': 239}), 11: (1, {'@': 239}), 27: (1, {'@': 239}), 18: (1, {'@': 239}), 19: (1, {'@': 239}), 20: (1, {'@': 239}), 21: (1, {'@': 239}), 22: (1, {'@': 239}), 23: (1, {'@': 239}), 6: (1, {'@': 239}), 28: (1, {'@': 239}), 24: (1, {'@': 239}), 25: (1, {'@': 239})}, 348: {11: (0, 220), 31: (1, {'@': 158}), 26: (1, {'@': 158}), 34: (1, {'@': 158}), 99: (1, {'@': 158}), 98: (1, {'@': 158}), 93: (1, {'@': 158}), 13: (1, {'@': 158}), 27: (1, {'@': 158}), 97: (1, {'@': 158}), 28: (1, {'@': 158}), 12: (1, {'@': 158}), 38: (1, {'@': 158})}, 349: {90: (0, 326), 74: (0, 278), 37: (0, 459), 32: (0, 207), 26: (0, 290), 27: (0, 318), 89: (0, 313), 35: (0, 302), 33: (0, 488), 38: (0, 69), 12: (0, 138), 31: (0, 423), 34: (0, 334), 24: (1, {'@': 240}), 39: (1, {'@': 240}), 40: (1, {'@': 240}), 11: (1, {'@': 240}), 9: (1, {'@': 240}), 41: (1, {'@': 240}), 42: (1, {'@': 240}), 23: (1, {'@': 240}), 43: (1, {'@': 240}), 44: (1, {'@': 240}), 25: (1, {'@': 240}), 45: (1, {'@': 240})}, 350: {32: (1, {'@': 241}), 9: (1, {'@': 241}), 25: (1, {'@': 241}), 11: (1, {'@': 241}), 45: (1, {'@': 241}), 13: (1, {'@': 241})}, 351: {6: (0, 451), 71: (0, 226), 48: (0, 187), 68: (0, 232), 2: (0, 244), 8: (0, 366), 79: (0, 484), 29: (0, 119), 78: (0, 196), 123: (0, 52), 46: (0, 163)}, 352: {79: (0, 481)}, 353: {2: (1, {'@': 242}), 71: (1, {'@': 242}), 79: (1, {'@': 242}), 11: (1, {'@': 242}), 6: (1, {'@': 242}), 46: (1, {'@': 242}), 8: (1, {'@': 242})}, 354: {20: (1, {'@': 243}), 15: (1, {'@': 243}), 16: (1, {'@': 243}), 21: (1, {'@': 243}), 22: (1, {'@': 243}), 17: (1, {'@': 243}), 6: (1, {'@': 243}), 18: (1, {'@': 243}), 19: (1, {'@': 243}), 14: (1, {'@': 243})}, 355: {2: (0, 265), 71: (0, 427), 0: (1, {'@': 108}), 96: (1, {'@': 108}), 30: (1, {'@': 108}), 9: (1, {'@': 108}), 11: (1, {'@': 108}), 93: (1, {'@': 108}), 36: (1, {'@': 108}), 14: (1, {'@': 108}), 26: (1, {'@': 108}), 15: (1, {'@': 108}), 16: (1, {'@': 108}), 17: (1, {'@': 108}), 13: (1, {'@': 108}), 27: (1, {'@': 108}), 18: (1, {'@': 108}), 19: (1, {'@': 108}), 20: (1, {'@': 108}), 21: (1, {'@': 108}), 22: (1, {'@': 108}), 23: (1, {'@': 108}), 6: (1, {'@': 108}), 28: (1, {'@': 108}), 24: (1, {'@': 108}), 25: (1, {'@': 108})}, 356: {79: (0, 206)}, 357: {79: (0, 71)}, 358: {11: (0, 294)}, 359: {6: (0, 451), 29: (0, 225), 100: (0, 276)}, 360: {39: (0, 197)}, 361: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 77: (0, 253), 78: (0, 312), 79: (0, 484), 48: (0, 417), 80: (0, 476), 81: (0, 464), 83: (0, 426), 84: (0, 465), 85: (0, 446), 87: (0, 168), 29: (0, 490), 86: (0, 89), 88: (0, 57), 8: (0, 366), 68: (0, 339), 0: (0, 344), 91: (0, 337), 61: (0, 108), 46: (0, 163)}, 362: {79: (0, 102)}, 363: {6: (0, 451), 71: (0, 226), 48: (0, 187), 68: (0, 232), 2: (0, 244), 8: (0, 366), 79: (0, 484), 29: (0, 119), 78: (0, 196), 123: (0, 199), 46: (0, 163)}, 364: {39: (0, 227)}, 365: {0: (1, {'@': 244}), 1: (1, {'@': 244}), 2: (1, {'@': 244}), 3: (1, {'@': 244}), 4: (1, {'@': 244}), 5: (1, {'@': 244}), 6: (1, {'@': 244}), 7: (1, {'@': 244}), 8: (1, {'@': 244})}, 366: {0: (1, {'@': 245}), 31: (1, {'@': 245}), 14: (1, {'@': 245}), 26: (1, {'@': 245}), 34: (1, {'@': 245}), 15: (1, {'@': 245}), 16: (1, {'@': 245}), 17: (1, {'@': 245}), 13: (1, {'@': 245}), 11: (1, {'@': 245}), 27: (1, {'@': 245}), 97: (1, {'@': 245}), 18: (1, {'@': 245}), 98: (1, {'@': 245}), 12: (1, {'@': 245}), 38: (1, {'@': 245}), 19: (1, {'@': 245}), 20: (1, {'@': 245}), 30: (1, {'@': 245}), 99: (1, {'@': 245}), 21: (1, {'@': 245}), 22: (1, {'@': 245}), 93: (1, {'@': 245}), 36: (1, {'@': 245}), 23: (1, {'@': 245}), 96: (1, {'@': 245}), 6: (1, {'@': 245}), 28: (1, {'@': 245}), 24: (1, {'@': 245}), 25: (1, {'@': 245}), 2: (1, {'@': 245}), 32: (1, {'@': 245}), 33: (1, {'@': 245}), 46: (1, {'@': 245}), 64: (1, {'@': 245}), 71: (1, {'@': 245}), 79: (1, {'@': 245}), 37: (1, {'@': 245}), 61: (1, {'@': 245}), 94: (1, {'@': 245}), 8: (1, {'@': 245}), 35: (1, {'@': 245}), 39: (1, {'@': 245}), 9: (1, {'@': 245}), 44: (1, {'@': 245}), 42: (1, {'@': 245}), 40: (1, {'@': 245}), 41: (1, {'@': 245}), 43: (1, {'@': 245}), 45: (1, {'@': 245})}, 367: {6: (0, 451), 49: (0, 155), 50: (0, 154), 51: (0, 120), 29: (0, 159), 52: (0, 143), 56: (0, 3), 53: (0, 115), 54: (0, 432), 55: (0, 130), 57: (0, 338), 5: (0, 332), 58: (0, 132), 7: (0, 362), 2: (0, 118), 59: (0, 144), 1: (0, 352), 3: (0, 357), 60: (0, 378), 38: (0, 148), 8: (0, 366), 61: (0, 145), 62: (0, 331), 64: (0, 157), 63: (0, 430), 4: (0, 388), 0: (0, 370), 65: (0, 381), 66: (0, 418), 67: (0, 441), 46: (0, 163), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 368: {14: (1, {'@': 246}), 9: (1, {'@': 246})}, 369: {0: (1, {'@': 247}), 26: (1, {'@': 247}), 2: (1, {'@': 247}), 32: (1, {'@': 247}), 33: (1, {'@': 247}), 54: (1, {'@': 247}), 75: (1, {'@': 247}), 82: (1, {'@': 247}), 12: (1, {'@': 247}), 64: (1, {'@': 247}), 37: (1, {'@': 247}), 61: (1, {'@': 247}), 6: (1, {'@': 247}), 8: (1, {'@': 247}), 35: (1, {'@': 247}), 31: (1, {'@': 247}), 34: (1, {'@': 247}), 11: (1, {'@': 247}), 46: (1, {'@': 247}), 27: (1, {'@': 247}), 38: (1, {'@': 247}), 71: (1, {'@': 247}), 79: (1, {'@': 247}), 73: (1, {'@': 247}), 76: (1, {'@': 247})}, 370: {60: (0, 378), 6: (0, 451), 49: (0, 103), 1: (0, 352), 29: (0, 56), 8: (0, 366), 4: (0, 388), 0: (0, 370), 5: (0, 332), 2: (0, 393), 68: (0, 165), 7: (0, 362), 3: (0, 357)}, 371: {6: (0, 451), 49: (0, 155), 51: (0, 120), 12: (0, 345), 53: (0, 115), 29: (0, 355), 50: (0, 341), 57: (0, 338), 5: (0, 332), 1: (0, 352), 7: (0, 362), 3: (0, 357), 60: (0, 378), 8: (0, 366), 4: (0, 388), 0: (0, 370), 65: (0, 381), 2: (0, 393), 68: (0, 165), 70: (0, 161)}, 372: {6: (0, 451), 101: (0, 15), 29: (0, 140)}, 373: {32: (0, 363)}, 374: {20: (1, {'@': 248}), 15: (1, {'@': 248}), 16: (1, {'@': 248}), 21: (1, {'@': 248}), 22: (1, {'@': 248}), 17: (1, {'@': 248}), 6: (1, {'@': 248}), 18: (1, {'@': 248}), 19: (1, {'@': 248}), 14: (1, {'@': 248})}, 375: {32: (1, {'@': 249}), 9: (1, {'@': 249}), 25: (1, {'@': 249}), 11: (1, {'@': 249}), 45: (1, {'@': 249}), 13: (1, {'@': 249})}, 376: {6: (0, 451), 49: (0, 155), 50: (0, 154), 51: (0, 120), 29: (0, 159), 52: (0, 143), 53: (0, 115), 54: (0, 432), 55: (0, 130), 56: (0, 24), 57: (0, 338), 5: (0, 332), 58: (0, 132), 7: (0, 362), 2: (0, 118), 59: (0, 144), 1: (0, 352), 3: (0, 357), 60: (0, 378), 38: (0, 148), 8: (0, 366), 61: (0, 145), 62: (0, 331), 64: (0, 157), 63: (0, 430), 4: (0, 388), 0: (0, 370), 65: (0, 381), 66: (0, 418), 67: (0, 441), 46: (0, 163), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 377: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 73: (0, 243), 32: (0, 207), 74: (0, 278), 75: (0, 257), 26: (0, 290), 76: (0, 306), 27: (0, 318), 77: (0, 253), 35: (0, 302), 78: (0, 312), 79: (0, 484), 31: (0, 423), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 83: (0, 426), 84: (0, 465), 85: (0, 446), 29: (0, 490), 38: (0, 69), 86: (0, 89), 87: (0, 67), 88: (0, 57), 8: (0, 366), 89: (0, 361), 68: (0, 339), 0: (0, 344), 34: (0, 334), 90: (0, 326), 92: (0, 364), 91: (0, 337), 61: (0, 108), 46: (0, 163), 12: (0, 138), 54: (0, 208)}, 378: {0: (1, {'@': 250}), 31: (1, {'@': 250}), 14: (1, {'@': 250}), 26: (1, {'@': 250}), 34: (1, {'@': 250}), 15: (1, {'@': 250}), 16: (1, {'@': 250}), 17: (1, {'@': 250}), 13: (1, {'@': 250}), 11: (1, {'@': 250}), 27: (1, {'@': 250}), 97: (1, {'@': 250}), 18: (1, {'@': 250}), 98: (1, {'@': 250}), 12: (1, {'@': 250}), 38: (1, {'@': 250}), 19: (1, {'@': 250}), 20: (1, {'@': 250}), 30: (1, {'@': 250}), 99: (1, {'@': 250}), 21: (1, {'@': 250}), 22: (1, {'@': 250}), 93: (1, {'@': 250}), 36: (1, {'@': 250}), 23: (1, {'@': 250}), 96: (1, {'@': 250}), 6: (1, {'@': 250}), 28: (1, {'@': 250}), 24: (1, {'@': 250}), 25: (1, {'@': 250}), 9: (1, {'@': 250}), 44: (1, {'@': 250})}, 379: {0: (1, {'@': 251}), 26: (1, {'@': 251}), 32: (1, {'@': 251}), 33: (1, {'@': 251}), 9: (1, {'@': 251}), 12: (1, {'@': 251}), 30: (1, {'@': 251}), 42: (1, {'@': 251}), 93: (1, {'@': 251}), 36: (1, {'@': 251}), 37: (1, {'@': 251}), 35: (1, {'@': 251}), 31: (1, {'@': 251}), 34: (1, {'@': 251}), 40: (1, {'@': 251}), 11: (1, {'@': 251}), 27: (1, {'@': 251}), 41: (1, {'@': 251}), 38: (1, {'@': 251}), 39: (1, {'@': 251}), 23: (1, {'@': 251}), 44: (1, {'@': 251}), 43: (1, {'@': 251}), 24: (1, {'@': 251}), 45: (1, {'@': 251}), 25: (1, {'@': 251})}, 380: {11: (1, {'@': 252}), 9: (1, {'@': 252})}, 381: {31: (1, {'@': 253}), 14: (1, {'@': 253}), 26: (1, {'@': 253}), 34: (1, {'@': 253}), 15: (1, {'@': 253}), 16: (1, {'@': 253}), 17: (1, {'@': 253}), 13: (1, {'@': 253}), 11: (1, {'@': 253}), 27: (1, {'@': 253}), 97: (1, {'@': 253}), 18: (1, {'@': 253}), 98: (1, {'@': 253}), 12: (1, {'@': 253}), 38: (1, {'@': 253}), 19: (1, {'@': 253}), 20: (1, {'@': 253}), 99: (1, {'@': 253}), 21: (1, {'@': 253}), 22: (1, {'@': 253}), 93: (1, {'@': 253}), 23: (1, {'@': 253}), 6: (1, {'@': 253}), 28: (1, {'@': 253}), 24: (1, {'@': 253}), 25: (1, {'@': 253}), 9: (1, {'@': 253}), 44: (1, {'@': 253})}, 382: {71: (0, 167), 2: (0, 186), 32: (0, 207), 76: (0, 306), 35: (0, 302), 78: (0, 312), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 84: (0, 465), 85: (0, 446), 77: (0, 253), 8: (0, 366), 87: (0, 67), 68: (0, 339), 0: (0, 344), 91: (0, 337), 61: (0, 108), 54: (0, 208), 6: (0, 451), 72: (0, 182), 64: (0, 175), 73: (0, 243), 75: (0, 257), 26: (0, 290), 27: (0, 318), 79: (0, 484), 31: (0, 423), 74: (0, 278), 83: (0, 426), 92: (0, 128), 29: (0, 490), 38: (0, 69), 86: (0, 89), 88: (0, 57), 89: (0, 361), 34: (0, 334), 90: (0, 326), 46: (0, 163), 12: (0, 138), 24: (1, {'@': 254}), 39: (1, {'@': 254}), 40: (1, {'@': 254}), 11: (1, {'@': 254}), 9: (1, {'@': 254}), 41: (1, {'@': 254}), 42: (1, {'@': 254}), 23: (1, {'@': 254}), 43: (1, {'@': 254}), 44: (1, {'@': 254}), 25: (1, {'@': 254})}, 383: {6: (0, 451), 29: (0, 307)}, 384: {44: (0, 413)}, 385: {0: (1, {'@': 255}), 31: (1, {'@': 255}), 2: (1, {'@': 255}), 26: (1, {'@': 255}), 32: (1, {'@': 255}), 33: (1, {'@': 255}), 34: (1, {'@': 255}), 46: (1, {'@': 255}), 27: (1, {'@': 255}), 12: (1, {'@': 255}), 38: (1, {'@': 255}), 30: (1, {'@': 255}), 64: (1, {'@': 255}), 71: (1, {'@': 255}), 79: (1, {'@': 255}), 93: (1, {'@': 255}), 36: (1, {'@': 255}), 37: (1, {'@': 255}), 6: (1, {'@': 255}), 61: (1, {'@': 255}), 24: (1, {'@': 255}), 94: (1, {'@': 255}), 8: (1, {'@': 255}), 35: (1, {'@': 255}), 39: (1, {'@': 255}), 9: (1, {'@': 255}), 42: (1, {'@': 255}), 40: (1, {'@': 255}), 11: (1, {'@': 255}), 41: (1, {'@': 255}), 23: (1, {'@': 255}), 43: (1, {'@': 255}), 44: (1, {'@': 255}), 45: (1, {'@': 255}), 25: (1, {'@': 255}), 13: (1, {'@': 255})}, 386: {20: (1, {'@': 256}), 15: (1, {'@': 256}), 16: (1, {'@': 256}), 21: (1, {'@': 256}), 22: (1, {'@': 256}), 17: (1, {'@': 256}), 6: (1, {'@': 256}), 18: (1, {'@': 256}), 19: (1, {'@': 256}), 14: (1, {'@': 256})}, 387: {46: (0, 163), 48: (0, 319)}, 388: {79: (0, 72)}, 389: {0: (1, {'@': 257}), 26: (1, {'@': 257}), 13: (1, {'@': 257}), 9: (1, {'@': 257}), 97: (1, {'@': 257}), 18: (1, {'@': 257}), 98: (1, {'@': 257}), 12: (1, {'@': 257}), 19: (1, {'@': 257}), 30: (1, {'@': 257}), 93: (1, {'@': 257}), 36: (1, {'@': 257}), 6: (1, {'@': 257}), 31: (1, {'@': 257}), 14: (1, {'@': 257}), 34: (1, {'@': 257}), 15: (1, {'@': 257}), 16: (1, {'@': 257}), 17: (1, {'@': 257}), 11: (1, {'@': 257}), 27: (1, {'@': 257}), 38: (1, {'@': 257}), 20: (1, {'@': 257}), 99: (1, {'@': 257}), 21: (1, {'@': 257}), 22: (1, {'@': 257}), 23: (1, {'@': 257}), 44: (1, {'@': 257}), 28: (1, {'@': 257}), 24: (1, {'@': 257}), 25: (1, {'@': 257})}, 390: {6: (0, 451), 71: (0, 226), 48: (0, 187), 68: (0, 232), 2: (0, 244), 8: (0, 366), 79: (0, 484), 29: (0, 119), 78: (0, 196), 123: (0, 180), 46: (0, 163)}, 391: {6: (0, 451), 29: (0, 316)}, 392: {11: (0, 350), 32: (0, 373), 9: (0, 353)}, 393: {60: (0, 378), 70: (0, 73), 49: (0, 155), 6: (0, 451), 1: (0, 352), 57: (0, 338), 29: (0, 56), 8: (0, 366), 51: (0, 120), 53: (0, 115), 4: (0, 388), 0: (0, 370), 5: (0, 332), 65: (0, 381), 2: (0, 393), 68: (0, 165), 7: (0, 362), 3: (0, 357)}, 394: {0: (1, {'@': 258}), 26: (1, {'@': 258}), 2: (1, {'@': 258}), 32: (1, {'@': 258}), 33: (1, {'@': 258}), 54: (1, {'@': 258}), 75: (1, {'@': 258}), 82: (1, {'@': 258}), 12: (1, {'@': 258}), 64: (1, {'@': 258}), 37: (1, {'@': 258}), 61: (1, {'@': 258}), 6: (1, {'@': 258}), 8: (1, {'@': 258}), 35: (1, {'@': 258}), 31: (1, {'@': 258}), 34: (1, {'@': 258}), 11: (1, {'@': 258}), 46: (1, {'@': 258}), 27: (1, {'@': 258}), 38: (1, {'@': 258}), 71: (1, {'@': 258}), 79: (1, {'@': 258}), 73: (1, {'@': 258}), 76: (1, {'@': 258})}, 395: {6: (0, 451), 29: (0, 65)}, 396: {71: (0, 167), 2: (0, 186), 32: (0, 207), 92: (0, 176), 76: (0, 306), 35: (0, 302), 78: (0, 312), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 84: (0, 465), 85: (0, 446), 77: (0, 253), 8: (0, 366), 87: (0, 67), 68: (0, 339), 0: (0, 344), 91: (0, 337), 61: (0, 108), 54: (0, 208), 6: (0, 451), 72: (0, 182), 64: (0, 175), 73: (0, 243), 75: (0, 257), 26: (0, 290), 27: (0, 318), 79: (0, 484), 31: (0, 423), 74: (0, 278), 83: (0, 426), 29: (0, 490), 38: (0, 69), 86: (0, 89), 88: (0, 57), 89: (0, 361), 34: (0, 334), 90: (0, 326), 46: (0, 163), 12: (0, 138), 24: (1, {'@': 259}), 39: (1, {'@': 259}), 40: (1, {'@': 259}), 11: (1, {'@': 259}), 9: (1, {'@': 259}), 41: (1, {'@': 259}), 42: (1, {'@': 259}), 23: (1, {'@': 259}), 43: (1, {'@': 259}), 44: (1, {'@': 259}), 25: (1, {'@': 259})}, 397: {11: (0, 192), 9: (0, 194), 32: (0, 373)}, 398: {6: (0, 451), 49: (0, 155), 50: (0, 154), 56: (0, 429), 51: (0, 120), 29: (0, 159), 52: (0, 143), 53: (0, 115), 54: (0, 432), 55: (0, 130), 57: (0, 338), 5: (0, 332), 58: (0, 132), 7: (0, 362), 2: (0, 118), 59: (0, 144), 1: (0, 352), 3: (0, 357), 60: (0, 378), 38: (0, 148), 8: (0, 366), 61: (0, 145), 62: (0, 331), 64: (0, 157), 63: (0, 430), 4: (0, 388), 0: (0, 370), 65: (0, 381), 66: (0, 418), 67: (0, 441), 46: (0, 163), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 399: {0: (1, {'@': 260}), 31: (1, {'@': 260}), 2: (1, {'@': 260}), 26: (1, {'@': 260}), 32: (1, {'@': 260}), 33: (1, {'@': 260}), 34: (1, {'@': 260}), 46: (1, {'@': 260}), 27: (1, {'@': 260}), 12: (1, {'@': 260}), 38: (1, {'@': 260}), 30: (1, {'@': 260}), 64: (1, {'@': 260}), 71: (1, {'@': 260}), 79: (1, {'@': 260}), 93: (1, {'@': 260}), 36: (1, {'@': 260}), 37: (1, {'@': 260}), 6: (1, {'@': 260}), 61: (1, {'@': 260}), 24: (1, {'@': 260}), 94: (1, {'@': 260}), 8: (1, {'@': 260}), 35: (1, {'@': 260}), 39: (1, {'@': 260}), 9: (1, {'@': 260}), 42: (1, {'@': 260}), 40: (1, {'@': 260}), 11: (1, {'@': 260}), 41: (1, {'@': 260}), 23: (1, {'@': 260}), 43: (1, {'@': 260}), 44: (1, {'@': 260}), 45: (1, {'@': 260}), 25: (1, {'@': 260}), 13: (1, {'@': 260})}, 400: {11: (1, {'@': 261}), 9: (1, {'@': 261})}, 401: {9: (0, 38)}, 402: {135: (0, 457), 32: (0, 373), 9: (0, 351), 25: (0, 346)}, 403: {11: (0, 487)}, 404: {43: (0, 177), 40: (0, 390), 121: (0, 179)}, 405: {11: (0, 291)}, 406: {13: (0, 101), 14: (1, {'@': 262}), 15: (1, {'@': 262}), 16: (1, {'@': 262}), 17: (1, {'@': 262}), 11: (1, {'@': 262}), 18: (1, {'@': 262}), 19: (1, {'@': 262}), 20: (1, {'@': 262}), 21: (1, {'@': 262}), 22: (1, {'@': 262}), 23: (1, {'@': 262}), 6: (1, {'@': 262}), 24: (1, {'@': 262}), 25: (1, {'@': 262})}, 407: {43: (1, {'@': 263}), 40: (1, {'@': 263})}, 408: {39: (0, 356)}, 409: {79: (0, 327)}, 410: {9: (0, 477)}, 411: {0: (1, {'@': 264}), 26: (1, {'@': 264}), 32: (1, {'@': 264}), 33: (1, {'@': 264}), 9: (1, {'@': 264}), 12: (1, {'@': 264}), 42: (1, {'@': 264}), 36: (1, {'@': 264}), 37: (1, {'@': 264}), 35: (1, {'@': 264}), 31: (1, {'@': 264}), 34: (1, {'@': 264}), 40: (1, {'@': 264}), 11: (1, {'@': 264}), 27: (1, {'@': 264}), 41: (1, {'@': 264}), 38: (1, {'@': 264}), 39: (1, {'@': 264}), 23: (1, {'@': 264}), 43: (1, {'@': 264}), 44: (1, {'@': 264}), 24: (1, {'@': 264}), 45: (1, {'@': 264}), 25: (1, {'@': 264})}, 412: {14: (1, {'@': 265}), 96: (1, {'@': 265}), 44: (1, {'@': 265}), 9: (1, {'@': 265}), 11: (1, {'@': 265})}, 413: {71: (0, 167), 2: (0, 186), 32: (0, 207), 76: (0, 306), 35: (0, 302), 78: (0, 312), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 84: (0, 465), 85: (0, 446), 77: (0, 253), 8: (0, 366), 87: (0, 67), 92: (0, 166), 68: (0, 339), 44: (0, 171), 0: (0, 344), 91: (0, 337), 61: (0, 108), 54: (0, 208), 6: (0, 451), 72: (0, 182), 64: (0, 175), 73: (0, 243), 75: (0, 257), 26: (0, 290), 27: (0, 318), 79: (0, 484), 31: (0, 423), 74: (0, 278), 83: (0, 426), 29: (0, 490), 38: (0, 69), 86: (0, 89), 88: (0, 57), 89: (0, 361), 34: (0, 334), 90: (0, 326), 46: (0, 163), 12: (0, 138)}, 414: {95: (0, 160), 6: (0, 451), 49: (0, 155), 51: (0, 120), 53: (0, 115), 29: (0, 355), 57: (0, 338), 5: (0, 332), 7: (0, 362), 1: (0, 352), 3: (0, 357), 60: (0, 378), 50: (0, 400), 8: (0, 366), 4: (0, 388), 0: (0, 370), 65: (0, 381), 103: (0, 252), 2: (0, 393), 68: (0, 165), 70: (0, 161), 11: (1, {'@': 118})}, 415: {71: (0, 167), 2: (0, 186), 32: (0, 207), 76: (0, 306), 11: (0, 31), 35: (0, 302), 78: (0, 312), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 84: (0, 465), 85: (0, 446), 92: (0, 91), 77: (0, 253), 8: (0, 366), 87: (0, 67), 68: (0, 339), 0: (0, 344), 91: (0, 337), 61: (0, 108), 54: (0, 208), 6: (0, 451), 72: (0, 182), 64: (0, 175), 73: (0, 243), 75: (0, 257), 26: (0, 290), 27: (0, 318), 79: (0, 484), 31: (0, 423), 74: (0, 278), 83: (0, 426), 29: (0, 490), 38: (0, 69), 86: (0, 89), 88: (0, 57), 89: (0, 361), 34: (0, 334), 90: (0, 326), 46: (0, 163), 12: (0, 138)}, 416: {71: (0, 167), 6: (0, 451), 72: (0, 182), 77: (0, 25), 2: (0, 186), 64: (0, 175), 8: (0, 366), 78: (0, 312), 79: (0, 484), 68: (0, 339), 48: (0, 417), 84: (0, 465), 85: (0, 446), 61: (0, 108), 29: (0, 490), 46: (0, 163)}, 417: {0: (1, {'@': 266}), 31: (1, {'@': 266}), 2: (1, {'@': 266}), 26: (1, {'@': 266}), 32: (1, {'@': 266}), 33: (1, {'@': 266}), 34: (1, {'@': 266}), 46: (1, {'@': 266}), 27: (1, {'@': 266}), 12: (1, {'@': 266}), 38: (1, {'@': 266}), 30: (1, {'@': 266}), 64: (1, {'@': 266}), 71: (1, {'@': 266}), 79: (1, {'@': 266}), 93: (1, {'@': 266}), 36: (1, {'@': 266}), 37: (1, {'@': 266}), 6: (1, {'@': 266}), 61: (1, {'@': 266}), 24: (1, {'@': 266}), 94: (1, {'@': 266}), 8: (1, {'@': 266}), 35: (1, {'@': 266}), 39: (1, {'@': 266}), 9: (1, {'@': 266}), 42: (1, {'@': 266}), 40: (1, {'@': 266}), 11: (1, {'@': 266}), 41: (1, {'@': 266}), 23: (1, {'@': 266}), 43: (1, {'@': 266}), 44: (1, {'@': 266}), 45: (1, {'@': 266}), 25: (1, {'@': 266}), 13: (1, {'@': 266})}, 418: {6: (1, {'@': 267})}, 419: {60: (0, 378), 49: (0, 155), 6: (0, 451), 1: (0, 352), 57: (0, 338), 29: (0, 56), 44: (0, 260), 8: (0, 366), 51: (0, 120), 53: (0, 115), 4: (0, 388), 0: (0, 370), 70: (0, 263), 5: (0, 332), 65: (0, 381), 2: (0, 393), 68: (0, 165), 7: (0, 362), 3: (0, 357)}, 420: {2: (0, 147)}, 421: {2: (0, 106)}, 422: {0: (1, {'@': 268}), 26: (1, {'@': 268}), 13: (1, {'@': 268}), 9: (1, {'@': 268}), 97: (1, {'@': 268}), 18: (1, {'@': 268}), 12: (1, {'@': 268}), 98: (1, {'@': 268}), 19: (1, {'@': 268}), 93: (1, {'@': 268}), 6: (1, {'@': 268}), 31: (1, {'@': 268}), 14: (1, {'@': 268}), 34: (1, {'@': 268}), 15: (1, {'@': 268}), 16: (1, {'@': 268}), 17: (1, {'@': 268}), 11: (1, {'@': 268}), 27: (1, {'@': 268}), 38: (1, {'@': 268}), 20: (1, {'@': 268}), 99: (1, {'@': 268}), 21: (1, {'@': 268}), 22: (1, {'@': 268}), 23: (1, {'@': 268}), 44: (1, {'@': 268}), 28: (1, {'@': 268}), 24: (1, {'@': 268}), 25: (1, {'@': 268})}, 423: {31: (1, {'@': 269}), 26: (1, {'@': 269}), 32: (1, {'@': 269}), 33: (1, {'@': 269}), 34: (1, {'@': 269}), 0: (1, {'@': 269}), 2: (1, {'@': 269}), 46: (1, {'@': 269}), 27: (1, {'@': 269}), 12: (1, {'@': 269}), 38: (1, {'@': 269}), 64: (1, {'@': 269}), 71: (1, {'@': 269}), 79: (1, {'@': 269}), 37: (1, {'@': 269}), 6: (1, {'@': 269}), 61: (1, {'@': 269}), 8: (1, {'@': 269}), 35: (1, {'@': 269}), 40: (1, {'@': 269}), 11: (1, {'@': 269}), 9: (1, {'@': 269}), 41: (1, {'@': 269}), 39: (1, {'@': 269}), 42: (1, {'@': 269}), 23: (1, {'@': 269}), 43: (1, {'@': 269}), 44: (1, {'@': 269}), 24: (1, {'@': 269}), 25: (1, {'@': 269})}, 424: {2: (0, 213)}, 425: {14: (0, 268), 13: (0, 101)}, 426: {31: (1, {'@': 270}), 26: (1, {'@': 270}), 32: (1, {'@': 270}), 33: (1, {'@': 270}), 34: (1, {'@': 270}), 37: (1, {'@': 270}), 27: (1, {'@': 270}), 12: (1, {'@': 270}), 24: (1, {'@': 270}), 35: (1, {'@': 270}), 38: (1, {'@': 270}), 39: (1, {'@': 270}), 40: (1, {'@': 270}), 11: (1, {'@': 270}), 9: (1, {'@': 270}), 41: (1, {'@': 270}), 42: (1, {'@': 270}), 23: (1, {'@': 270}), 43: (1, {'@': 270}), 44: (1, {'@': 270}), 25: (1, {'@': 270}), 45: (1, {'@': 270})}, 427: {60: (0, 378), 49: (0, 155), 6: (0, 451), 57: (0, 338), 29: (0, 56), 8: (0, 366), 70: (0, 49), 51: (0, 120), 53: (0, 115), 4: (0, 388), 7: (0, 362), 0: (0, 370), 5: (0, 332), 65: (0, 381), 2: (0, 393), 68: (0, 165), 1: (0, 352), 3: (0, 357)}, 428: {32: (0, 373), 9: (1, {'@': 271}), 25: (1, {'@': 271})}, 429: {14: (0, 270), 13: (0, 101)}, 430: {6: (1, {'@': 272})}, 431: {2: (0, 123)}, 432: {6: (0, 451), 49: (0, 155), 56: (0, 90), 50: (0, 154), 51: (0, 120), 29: (0, 159), 52: (0, 143), 53: (0, 115), 54: (0, 432), 55: (0, 130), 57: (0, 338), 5: (0, 332), 58: (0, 132), 7: (0, 362), 1: (0, 352), 2: (0, 118), 59: (0, 144), 3: (0, 357), 60: (0, 378), 38: (0, 148), 8: (0, 366), 61: (0, 145), 62: (0, 331), 4: (0, 388), 63: (0, 430), 64: (0, 157), 0: (0, 370), 65: (0, 381), 66: (0, 418), 67: (0, 441), 46: (0, 163), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 433: {14: (0, 271), 13: (0, 101)}, 434: {6: (0, 451), 49: (0, 155), 50: (0, 154), 51: (0, 120), 29: (0, 159), 52: (0, 143), 53: (0, 115), 54: (0, 432), 55: (0, 130), 56: (0, 54), 57: (0, 338), 5: (0, 332), 58: (0, 132), 7: (0, 362), 2: (0, 118), 59: (0, 144), 1: (0, 352), 3: (0, 357), 60: (0, 378), 38: (0, 148), 8: (0, 366), 61: (0, 145), 62: (0, 331), 64: (0, 157), 63: (0, 430), 4: (0, 388), 0: (0, 370), 65: (0, 381), 66: (0, 418), 67: (0, 441), 46: (0, 163), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 435: {32: (0, 281)}, 436: {6: (0, 451), 49: (0, 155), 50: (0, 154), 51: (0, 120), 29: (0, 159), 52: (0, 143), 53: (0, 115), 54: (0, 432), 55: (0, 130), 56: (0, 273), 57: (0, 338), 5: (0, 332), 58: (0, 132), 7: (0, 362), 2: (0, 118), 59: (0, 144), 1: (0, 352), 3: (0, 357), 60: (0, 378), 38: (0, 148), 8: (0, 366), 61: (0, 145), 62: (0, 331), 64: (0, 157), 63: (0, 430), 4: (0, 388), 0: (0, 370), 65: (0, 381), 66: (0, 418), 67: (0, 441), 46: (0, 163), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 437: {6: (0, 451), 29: (0, 225), 100: (0, 279)}, 438: {2: (0, 134), 96: (0, 158)}, 439: {0: (1, {'@': 273}), 26: (1, {'@': 273}), 32: (1, {'@': 273}), 33: (1, {'@': 273}), 9: (1, {'@': 273}), 12: (1, {'@': 273}), 42: (1, {'@': 273}), 37: (1, {'@': 273}), 35: (1, {'@': 273}), 31: (1, {'@': 273}), 34: (1, {'@': 273}), 40: (1, {'@': 273}), 11: (1, {'@': 273}), 27: (1, {'@': 273}), 41: (1, {'@': 273}), 38: (1, {'@': 273}), 39: (1, {'@': 273}), 23: (1, {'@': 273}), 43: (1, {'@': 273}), 44: (1, {'@': 273}), 24: (1, {'@': 273}), 45: (1, {'@': 273}), 25: (1, {'@': 273})}, 440: {20: (1, {'@': 274}), 15: (1, {'@': 274}), 16: (1, {'@': 274}), 21: (1, {'@': 274}), 22: (1, {'@': 274}), 17: (1, {'@': 274}), 6: (1, {'@': 274}), 18: (1, {'@': 274}), 19: (1, {'@': 274}), 14: (1, {'@': 274})}, 441: {6: (0, 451), 132: (0, 100), 29: (0, 140), 101: (0, 295)}, 442: {20: (1, {'@': 275}), 15: (1, {'@': 275}), 16: (1, {'@': 275}), 21: (1, {'@': 275}), 22: (1, {'@': 275}), 17: (1, {'@': 275}), 6: (1, {'@': 275}), 18: (1, {'@': 275}), 19: (1, {'@': 275}), 14: (1, {'@': 275})}, 443: {71: (0, 167), 6: (0, 451), 2: (0, 186), 64: (0, 175), 13: (0, 60), 8: (0, 366), 78: (0, 312), 79: (0, 484), 72: (0, 460), 68: (0, 339), 48: (0, 417), 84: (0, 465), 85: (0, 446), 61: (0, 108), 29: (0, 490), 46: (0, 163)}, 444: {20: (1, {'@': 276}), 15: (1, {'@': 276}), 16: (1, {'@': 276}), 21: (1, {'@': 276}), 22: (1, {'@': 276}), 17: (1, {'@': 276}), 6: (1, {'@': 276}), 18: (1, {'@': 276}), 19: (1, {'@': 276}), 14: (1, {'@': 276})}, 445: {20: (1, {'@': 277}), 15: (1, {'@': 277}), 16: (1, {'@': 277}), 21: (1, {'@': 277}), 22: (1, {'@': 277}), 17: (1, {'@': 277}), 6: (1, {'@': 277}), 18: (1, {'@': 277}), 19: (1, {'@': 277}), 14: (1, {'@': 277})}, 446: {0: (1, {'@': 278}), 31: (1, {'@': 278}), 2: (1, {'@': 278}), 26: (1, {'@': 278}), 32: (1, {'@': 278}), 33: (1, {'@': 278}), 34: (1, {'@': 278}), 46: (1, {'@': 278}), 27: (1, {'@': 278}), 12: (1, {'@': 278}), 38: (1, {'@': 278}), 30: (1, {'@': 278}), 64: (1, {'@': 278}), 71: (1, {'@': 278}), 79: (1, {'@': 278}), 93: (1, {'@': 278}), 36: (1, {'@': 278}), 37: (1, {'@': 278}), 6: (1, {'@': 278}), 61: (1, {'@': 278}), 24: (1, {'@': 278}), 94: (1, {'@': 278}), 8: (1, {'@': 278}), 35: (1, {'@': 278}), 39: (1, {'@': 278}), 9: (1, {'@': 278}), 42: (1, {'@': 278}), 40: (1, {'@': 278}), 11: (1, {'@': 278}), 41: (1, {'@': 278}), 23: (1, {'@': 278}), 43: (1, {'@': 278}), 44: (1, {'@': 278}), 45: (1, {'@': 278}), 25: (1, {'@': 278}), 13: (1, {'@': 278})}, 447: {93: (0, 87), 0: (1, {'@': 279}), 31: (1, {'@': 279}), 30: (1, {'@': 279}), 26: (1, {'@': 279}), 32: (1, {'@': 279}), 33: (1, {'@': 279}), 34: (1, {'@': 279}), 36: (1, {'@': 279}), 37: (1, {'@': 279}), 27: (1, {'@': 279}), 12: (1, {'@': 279}), 24: (1, {'@': 279}), 35: (1, {'@': 279}), 38: (1, {'@': 279}), 39: (1, {'@': 279}), 40: (1, {'@': 279}), 11: (1, {'@': 279}), 9: (1, {'@': 279}), 41: (1, {'@': 279}), 42: (1, {'@': 279}), 23: (1, {'@': 279}), 43: (1, {'@': 279}), 44: (1, {'@': 279}), 45: (1, {'@': 279}), 25: (1, {'@': 279})}, 448: {6: (0, 451), 29: (0, 225), 100: (0, 275)}, 449: {34: (0, 75)}, 450: {0: (1, {'@': 280}), 31: (1, {'@': 280}), 2: (1, {'@': 280}), 26: (1, {'@': 280}), 32: (1, {'@': 280}), 33: (1, {'@': 280}), 34: (1, {'@': 280}), 46: (1, {'@': 280}), 27: (1, {'@': 280}), 12: (1, {'@': 280}), 38: (1, {'@': 280}), 30: (1, {'@': 280}), 64: (1, {'@': 280}), 71: (1, {'@': 280}), 79: (1, {'@': 280}), 93: (1, {'@': 280}), 36: (1, {'@': 280}), 37: (1, {'@': 280}), 6: (1, {'@': 280}), 61: (1, {'@': 280}), 24: (1, {'@': 280}), 94: (1, {'@': 280}), 8: (1, {'@': 280}), 35: (1, {'@': 280}), 39: (1, {'@': 280}), 9: (1, {'@': 280}), 42: (1, {'@': 280}), 40: (1, {'@': 280}), 11: (1, {'@': 280}), 41: (1, {'@': 280}), 23: (1, {'@': 280}), 43: (1, {'@': 280}), 44: (1, {'@': 280}), 45: (1, {'@': 280}), 25: (1, {'@': 280}), 13: (1, {'@': 280})}, 451: {2: (1, {'@': 281}), 44: (1, {'@': 281}), 0: (1, {'@': 281}), 26: (1, {'@': 281}), 13: (1, {'@': 281}), 97: (1, {'@': 281}), 18: (1, {'@': 281}), 98: (1, {'@': 281}), 12: (1, {'@': 281}), 19: (1, {'@': 281}), 30: (1, {'@': 281}), 93: (1, {'@': 281}), 36: (1, {'@': 281}), 6: (1, {'@': 281}), 31: (1, {'@': 281}), 14: (1, {'@': 281}), 34: (1, {'@': 281}), 15: (1, {'@': 281}), 16: (1, {'@': 281}), 17: (1, {'@': 281}), 11: (1, {'@': 281}), 27: (1, {'@': 281}), 38: (1, {'@': 281}), 20: (1, {'@': 281}), 99: (1, {'@': 281}), 39: (1, {'@': 281}), 71: (1, {'@': 281}), 21: (1, {'@': 281}), 22: (1, {'@': 281}), 109: (1, {'@': 281}), 23: (1, {'@': 281}), 96: (1, {'@': 281}), 28: (1, {'@': 281}), 24: (1, {'@': 281}), 25: (1, {'@': 281}), 32: (1, {'@': 281}), 33: (1, {'@': 281}), 46: (1, {'@': 281}), 64: (1, {'@': 281}), 79: (1, {'@': 281}), 37: (1, {'@': 281}), 61: (1, {'@': 281}), 94: (1, {'@': 281}), 8: (1, {'@': 281}), 35: (1, {'@': 281}), 9: (1, {'@': 281}), 42: (1, {'@': 281}), 40: (1, {'@': 281}), 41: (1, {'@': 281}), 43: (1, {'@': 281}), 45: (1, {'@': 281}), 10: (1, {'@': 281})}, 452: {14: (1, {'@': 282}), 26: (1, {'@': 282}), 15: (1, {'@': 282}), 16: (1, {'@': 282}), 17: (1, {'@': 282}), 13: (1, {'@': 282}), 11: (1, {'@': 282}), 27: (1, {'@': 282}), 18: (1, {'@': 282}), 19: (1, {'@': 282}), 20: (1, {'@': 282}), 21: (1, {'@': 282}), 22: (1, {'@': 282}), 23: (1, {'@': 282}), 6: (1, {'@': 282}), 28: (1, {'@': 282}), 24: (1, {'@': 282}), 25: (1, {'@': 282})}, 453: {136: (0, 111), 41: (0, 382), 24: (1, {'@': 283}), 39: (1, {'@': 283}), 40: (1, {'@': 283}), 11: (1, {'@': 283}), 9: (1, {'@': 283}), 42: (1, {'@': 283}), 23: (1, {'@': 283}), 43: (1, {'@': 283}), 44: (1, {'@': 283}), 25: (1, {'@': 283})}, 454: {14: (1, {'@': 284}), 9: (1, {'@': 284})}, 455: {71: (0, 167), 6: (0, 451), 72: (0, 182), 77: (0, 443), 2: (0, 186), 64: (0, 175), 8: (0, 366), 78: (0, 312), 79: (0, 484), 68: (0, 339), 48: (0, 417), 84: (0, 465), 85: (0, 446), 61: (0, 108), 29: (0, 490), 46: (0, 163)}, 456: {6: (0, 451), 29: (0, 225), 100: (0, 321)}, 457: {9: (0, 185), 25: (0, 190)}, 458: {25: (0, 280)}, 459: {31: (1, {'@': 285}), 26: (1, {'@': 285}), 32: (1, {'@': 285}), 33: (1, {'@': 285}), 34: (1, {'@': 285}), 0: (1, {'@': 285}), 2: (1, {'@': 285}), 46: (1, {'@': 285}), 27: (1, {'@': 285}), 12: (1, {'@': 285}), 38: (1, {'@': 285}), 64: (1, {'@': 285}), 71: (1, {'@': 285}), 79: (1, {'@': 285}), 37: (1, {'@': 285}), 6: (1, {'@': 285}), 61: (1, {'@': 285}), 8: (1, {'@': 285}), 35: (1, {'@': 285}), 40: (1, {'@': 285}), 11: (1, {'@': 285}), 9: (1, {'@': 285}), 41: (1, {'@': 285}), 39: (1, {'@': 285}), 42: (1, {'@': 285}), 23: (1, {'@': 285}), 43: (1, {'@': 285}), 44: (1, {'@': 285}), 24: (1, {'@': 285}), 25: (1, {'@': 285})}, 460: {0: (1, {'@': 286}), 31: (1, {'@': 286}), 2: (1, {'@': 286}), 26: (1, {'@': 286}), 32: (1, {'@': 286}), 33: (1, {'@': 286}), 34: (1, {'@': 286}), 46: (1, {'@': 286}), 27: (1, {'@': 286}), 12: (1, {'@': 286}), 38: (1, {'@': 286}), 30: (1, {'@': 286}), 64: (1, {'@': 286}), 71: (1, {'@': 286}), 79: (1, {'@': 286}), 93: (1, {'@': 286}), 36: (1, {'@': 286}), 37: (1, {'@': 286}), 6: (1, {'@': 286}), 61: (1, {'@': 286}), 24: (1, {'@': 286}), 94: (1, {'@': 286}), 8: (1, {'@': 286}), 35: (1, {'@': 286}), 39: (1, {'@': 286}), 9: (1, {'@': 286}), 45: (1, {'@': 286}), 42: (1, {'@': 286}), 40: (1, {'@': 286}), 11: (1, {'@': 286}), 41: (1, {'@': 286}), 23: (1, {'@': 286}), 43: (1, {'@': 286}), 44: (1, {'@': 286}), 25: (1, {'@': 286}), 13: (1, {'@': 286})}, 461: {20: (1, {'@': 287}), 15: (1, {'@': 287}), 16: (1, {'@': 287}), 21: (1, {'@': 287}), 22: (1, {'@': 287}), 17: (1, {'@': 287}), 6: (1, {'@': 287}), 18: (1, {'@': 287}), 19: (1, {'@': 287}), 14: (1, {'@': 287})}, 462: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 73: (0, 243), 32: (0, 207), 74: (0, 278), 75: (0, 257), 26: (0, 290), 76: (0, 306), 27: (0, 318), 77: (0, 253), 35: (0, 302), 78: (0, 312), 79: (0, 484), 31: (0, 423), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 83: (0, 426), 84: (0, 465), 85: (0, 446), 29: (0, 490), 38: (0, 69), 86: (0, 89), 87: (0, 67), 88: (0, 57), 8: (0, 366), 89: (0, 361), 68: (0, 339), 92: (0, 285), 0: (0, 344), 34: (0, 334), 90: (0, 326), 91: (0, 337), 61: (0, 108), 46: (0, 163), 12: (0, 138), 54: (0, 208)}, 463: {2: (0, 141)}, 464: {31: (1, {'@': 288}), 26: (1, {'@': 288}), 32: (1, {'@': 288}), 33: (1, {'@': 288}), 34: (1, {'@': 288}), 37: (1, {'@': 288}), 27: (1, {'@': 288}), 12: (1, {'@': 288}), 24: (1, {'@': 288}), 35: (1, {'@': 288}), 38: (1, {'@': 288}), 39: (1, {'@': 288}), 40: (1, {'@': 288}), 11: (1, {'@': 288}), 9: (1, {'@': 288}), 41: (1, {'@': 288}), 42: (1, {'@': 288}), 23: (1, {'@': 288}), 43: (1, {'@': 288}), 44: (1, {'@': 288}), 25: (1, {'@': 288}), 45: (1, {'@': 288})}, 465: {0: (1, {'@': 289}), 31: (1, {'@': 289}), 2: (1, {'@': 289}), 26: (1, {'@': 289}), 32: (1, {'@': 289}), 33: (1, {'@': 289}), 34: (1, {'@': 289}), 46: (1, {'@': 289}), 27: (1, {'@': 289}), 12: (1, {'@': 289}), 38: (1, {'@': 289}), 30: (1, {'@': 289}), 64: (1, {'@': 289}), 71: (1, {'@': 289}), 79: (1, {'@': 289}), 93: (1, {'@': 289}), 36: (1, {'@': 289}), 37: (1, {'@': 289}), 6: (1, {'@': 289}), 61: (1, {'@': 289}), 24: (1, {'@': 289}), 94: (1, {'@': 289}), 8: (1, {'@': 289}), 35: (1, {'@': 289}), 39: (1, {'@': 289}), 9: (1, {'@': 289}), 42: (1, {'@': 289}), 40: (1, {'@': 289}), 11: (1, {'@': 289}), 41: (1, {'@': 289}), 23: (1, {'@': 289}), 43: (1, {'@': 289}), 44: (1, {'@': 289}), 45: (1, {'@': 289}), 25: (1, {'@': 289}), 13: (1, {'@': 289})}, 466: {24: (1, {'@': 290}), 39: (1, {'@': 290}), 40: (1, {'@': 290}), 11: (1, {'@': 290}), 9: (1, {'@': 290}), 41: (1, {'@': 290}), 42: (1, {'@': 290}), 23: (1, {'@': 290}), 43: (1, {'@': 290}), 44: (1, {'@': 290}), 25: (1, {'@': 290})}, 467: {0: (1, {'@': 291}), 26: (1, {'@': 291}), 13: (1, {'@': 291}), 9: (1, {'@': 291}), 97: (1, {'@': 291}), 18: (1, {'@': 291}), 12: (1, {'@': 291}), 98: (1, {'@': 291}), 19: (1, {'@': 291}), 93: (1, {'@': 291}), 6: (1, {'@': 291}), 31: (1, {'@': 291}), 14: (1, {'@': 291}), 34: (1, {'@': 291}), 15: (1, {'@': 291}), 16: (1, {'@': 291}), 17: (1, {'@': 291}), 11: (1, {'@': 291}), 27: (1, {'@': 291}), 38: (1, {'@': 291}), 20: (1, {'@': 291}), 99: (1, {'@': 291}), 21: (1, {'@': 291}), 22: (1, {'@': 291}), 23: (1, {'@': 291}), 44: (1, {'@': 291}), 28: (1, {'@': 291}), 24: (1, {'@': 291}), 25: (1, {'@': 291})}, 468: {24: (1, {'@': 292}), 39: (1, {'@': 292}), 40: (1, {'@': 292}), 11: (1, {'@': 292}), 9: (1, {'@': 292}), 41: (1, {'@': 292}), 42: (1, {'@': 292}), 23: (1, {'@': 292}), 43: (1, {'@': 292}), 44: (1, {'@': 292}), 25: (1, {'@': 292})}, 469: {2: (0, 150)}, 470: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 73: (0, 243), 32: (0, 207), 74: (0, 278), 75: (0, 257), 26: (0, 290), 76: (0, 306), 27: (0, 318), 77: (0, 253), 35: (0, 302), 78: (0, 312), 79: (0, 484), 31: (0, 423), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 83: (0, 426), 84: (0, 465), 85: (0, 446), 29: (0, 490), 38: (0, 69), 86: (0, 89), 87: (0, 67), 88: (0, 57), 8: (0, 366), 89: (0, 361), 68: (0, 339), 0: (0, 344), 34: (0, 334), 90: (0, 326), 91: (0, 337), 61: (0, 108), 46: (0, 163), 92: (0, 246), 12: (0, 138), 54: (0, 208)}, 471: {14: (0, 289)}, 472: {95: (0, 160), 6: (0, 451), 49: (0, 155), 51: (0, 120), 53: (0, 115), 103: (0, 20), 29: (0, 355), 57: (0, 338), 5: (0, 332), 7: (0, 362), 1: (0, 352), 3: (0, 357), 60: (0, 378), 50: (0, 400), 8: (0, 366), 4: (0, 388), 0: (0, 370), 65: (0, 381), 2: (0, 393), 68: (0, 165), 70: (0, 161), 11: (1, {'@': 118})}, 473: {20: (1, {'@': 293}), 15: (1, {'@': 293}), 16: (1, {'@': 293}), 21: (1, {'@': 293}), 22: (1, {'@': 293}), 17: (1, {'@': 293}), 6: (1, {'@': 293}), 18: (1, {'@': 293}), 19: (1, {'@': 293}), 14: (1, {'@': 293})}, 474: {14: (1, {'@': 294}), 26: (1, {'@': 294}), 15: (1, {'@': 294}), 16: (1, {'@': 294}), 17: (1, {'@': 294}), 13: (1, {'@': 294}), 11: (1, {'@': 294}), 27: (1, {'@': 294}), 18: (1, {'@': 294}), 19: (1, {'@': 294}), 20: (1, {'@': 294}), 21: (1, {'@': 294}), 22: (1, {'@': 294}), 23: (1, {'@': 294}), 6: (1, {'@': 294}), 28: (1, {'@': 294}), 24: (1, {'@': 294}), 25: (1, {'@': 294})}, 475: {2: (0, 195)}, 476: {137: (0, 173), 36: (0, 240), 0: (1, {'@': 295}), 31: (1, {'@': 295}), 26: (1, {'@': 295}), 32: (1, {'@': 295}), 33: (1, {'@': 295}), 34: (1, {'@': 295}), 37: (1, {'@': 295}), 27: (1, {'@': 295}), 38: (1, {'@': 295}), 24: (1, {'@': 295}), 12: (1, {'@': 295}), 35: (1, {'@': 295}), 39: (1, {'@': 295}), 40: (1, {'@': 295}), 11: (1, {'@': 295}), 9: (1, {'@': 295}), 41: (1, {'@': 295}), 42: (1, {'@': 295}), 23: (1, {'@': 295}), 43: (1, {'@': 295}), 44: (1, {'@': 295}), 25: (1, {'@': 295}), 45: (1, {'@': 295})}, 477: {46: (0, 163), 48: (0, 322)}, 478: {6: (0, 451), 29: (0, 140), 101: (0, 293)}, 479: {24: (1, {'@': 296}), 39: (1, {'@': 296}), 40: (1, {'@': 296}), 11: (1, {'@': 296}), 9: (1, {'@': 296}), 41: (1, {'@': 296}), 42: (1, {'@': 296}), 23: (1, {'@': 296}), 43: (1, {'@': 296}), 44: (1, {'@': 296}), 25: (1, {'@': 296})}, 480: {71: (0, 167), 6: (0, 451), 72: (0, 182), 2: (0, 186), 64: (0, 175), 73: (0, 243), 32: (0, 207), 74: (0, 278), 75: (0, 257), 26: (0, 290), 76: (0, 306), 27: (0, 318), 77: (0, 253), 35: (0, 302), 78: (0, 312), 79: (0, 484), 31: (0, 423), 33: (0, 488), 48: (0, 417), 80: (0, 476), 81: (0, 464), 37: (0, 459), 82: (0, 455), 83: (0, 426), 84: (0, 465), 92: (0, 493), 85: (0, 446), 29: (0, 490), 38: (0, 69), 86: (0, 89), 87: (0, 67), 88: (0, 57), 8: (0, 366), 89: (0, 361), 68: (0, 339), 0: (0, 344), 34: (0, 334), 90: (0, 326), 91: (0, 337), 61: (0, 108), 46: (0, 163), 12: (0, 138), 54: (0, 208)}, 481: {6: (0, 451), 29: (0, 238)}, 482: {138: (0, 124), 139: (0, 129), 140: (0, 112), 141: (0, 475), 142: (0, 424), 143: (0, 469), 144: (0, 420), 145: (0, 485), 146: (0, 421), 147: (0, 463), 148: (0, 431)}, 483: {9: (1, {'@': 297}), 25: (1, {'@': 297})}, 484: {29: (0, 116), 51: (0, 120), 126: (0, 288), 52: (0, 143), 17: (0, 482), 50: (0, 154), 55: (0, 130), 15: (0, 264), 57: (0, 338), 5: (0, 332), 58: (0, 132), 128: (0, 303), 18: (0, 250), 7: (0, 362), 1: (0, 352), 2: (0, 118), 59: (0, 144), 3: (0, 357), 16: (0, 149), 60: (0, 378), 38: (0, 148), 49: (0, 155), 8: (0, 366), 61: (0, 145), 62: (0, 331), 4: (0, 388), 63: (0, 430), 0: (0, 370), 65: (0, 381), 22: (0, 255), 66: (0, 418), 67: (0, 441), 6: (0, 451), 53: (0, 115), 54: (0, 432), 56: (0, 126), 19: (0, 299), 21: (0, 113), 104: (0, 480), 64: (0, 157), 46: (0, 163), 127: (0, 122), 48: (0, 131), 68: (0, 165), 69: (0, 105), 70: (0, 161)}, 485: {2: (0, 121)}, 486: {60: (0, 378), 6: (0, 451), 49: (0, 155), 57: (0, 338), 29: (0, 355), 8: (0, 366), 50: (0, 4), 51: (0, 120), 53: (0, 115), 4: (0, 388), 7: (0, 362), 0: (0, 370), 5: (0, 332), 65: (0, 381), 2: (0, 393), 68: (0, 165), 1: (0, 352), 3: (0, 357), 70: (0, 161)}, 487: {9: (1, {'@': 298}), 10: (1, {'@': 298}), 11: (1, {'@': 298})}, 488: {31: (1, {'@': 299}), 26: (1, {'@': 299}), 32: (1, {'@': 299}), 33: (1, {'@': 299}), 34: (1, {'@': 299}), 0: (1, {'@': 299}), 2: (1, {'@': 299}), 46: (1, {'@': 299}), 27: (1, {'@': 299}), 12: (1, {'@': 299}), 38: (1, {'@': 299}), 64: (1, {'@': 299}), 71: (1, {'@': 299}), 79: (1, {'@': 299}), 37: (1, {'@': 299}), 6: (1, {'@': 299}), 61: (1, {'@': 299}), 8: (1, {'@': 299}), 35: (1, {'@': 299}), 40: (1, {'@': 299}), 11: (1, {'@': 299}), 9: (1, {'@': 299}), 41: (1, {'@': 299}), 39: (1, {'@': 299}), 42: (1, {'@': 299}), 23: (1, {'@': 299}), 43: (1, {'@': 299}), 44: (1, {'@': 299}), 24: (1, {'@': 299}), 25: (1, {'@': 299})}, 489: {46: (0, 163), 47: (0, 297), 48: (0, 78)}, 490: {0: (1, {'@': 300}), 31: (1, {'@': 300}), 2: (1, {'@': 300}), 26: (1, {'@': 300}), 32: (1, {'@': 300}), 33: (1, {'@': 300}), 34: (1, {'@': 300}), 46: (1, {'@': 300}), 27: (1, {'@': 300}), 12: (1, {'@': 300}), 38: (1, {'@': 300}), 30: (1, {'@': 300}), 64: (1, {'@': 300}), 71: (1, {'@': 300}), 79: (1, {'@': 300}), 93: (1, {'@': 300}), 36: (1, {'@': 300}), 37: (1, {'@': 300}), 6: (1, {'@': 300}), 61: (1, {'@': 300}), 24: (1, {'@': 300}), 94: (1, {'@': 300}), 8: (1, {'@': 300}), 35: (1, {'@': 300}), 39: (1, {'@': 300}), 9: (1, {'@': 300}), 42: (1, {'@': 300}), 40: (1, {'@': 300}), 11: (1, {'@': 300}), 41: (1, {'@': 300}), 23: (1, {'@': 300}), 43: (1, {'@': 300}), 44: (1, {'@': 300}), 45: (1, {'@': 300}), 25: (1, {'@': 300}), 13: (1, {'@': 300})}, 491: {17: (0, 482), 6: (0, 451), 29: (0, 438), 104: (0, 480), 126: (0, 288), 127: (0, 107), 15: (0, 264), 18: (0, 250), 19: (0, 299), 22: (0, 255), 128: (0, 303), 21: (0, 113), 16: (0, 149), 20: (1, {'@': 301})}, 492: {14: (1, {'@': 302}), 15: (1, {'@': 302}), 16: (1, {'@': 302}), 17: (1, {'@': 302}), 18: (1, {'@': 302}), 19: (1, {'@': 302}), 20: (1, {'@': 302}), 21: (1, {'@': 302}), 22: (1, {'@': 302}), 6: (1, {'@': 302}), 44: (1, {'@': 302})}, 493: {44: (0, 215)}, 494: {2: (0, 301)}}, 'start_states': {'start': 242}, 'end_states': {'start': 125}}, 'lexer_conf': {'tokens': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}, {'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}], 'ignore': ['WS', 'COMMENT'], 'g_regex_flags': 0, '__type__': 'LexerConf'}, 'start': ['start'], '__type__': 'LALR_ContextualLexer'}, 'rules': [{'@': 301}, {'@': 189}, {'@': 216}, {'@': 256}, {'@': 274}, {'@': 275}, {'@': 277}, {'@': 248}, {'@': 221}, {'@': 276}, {'@': 293}, {'@': 287}, {'@': 243}, {'@': 95}, {'@': 219}, {'@': 222}, {'@': 159}, {'@': 126}, {'@': 186}, {'@': 209}, {'@': 204}, {'@': 130}, {'@': 128}, {'@': 181}, {'@': 137}, {'@': 296}, {'@': 100}, {'@': 290}, {'@': 292}, {'@': 166}, {'@': 259}, {'@': 136}, {'@': 254}, {'@': 283}, {'@': 116}, {'@': 147}, {'@': 162}, {'@': 208}, {'@': 187}, {'@': 169}, {'@': 140}, {'@': 170}, {'@': 238}, {'@': 249}, {'@': 175}, {'@': 171}, {'@': 234}, {'@': 241}, {'@': 174}, {'@': 240}, {'@': 270}, {'@': 206}, {'@': 285}, {'@': 146}, {'@': 229}, {'@': 269}, {'@': 177}, {'@': 211}, {'@': 223}, {'@': 117}, {'@': 299}, {'@': 215}, {'@': 145}, {'@': 288}, {'@': 104}, {'@': 109}, {'@': 163}, {'@': 295}, {'@': 85}, {'@': 231}, {'@': 279}, {'@': 125}, {'@': 152}, {'@': 193}, {'@': 286}, {'@': 168}, {'@': 300}, {'@': 233}, {'@': 266}, {'@': 134}, {'@': 164}, {'@': 155}, {'@': 220}, {'@': 278}, {'@': 289}, {'@': 129}, {'@': 97}, {'@': 255}, {'@': 230}, {'@': 139}, {'@': 207}, {'@': 280}, {'@': 260}, {'@': 96}, {'@': 302}, {'@': 188}, {'@': 120}, {'@': 246}, {'@': 90}, {'@': 192}, {'@': 205}, {'@': 172}, {'@': 203}, {'@': 185}, {'@': 123}, {'@': 81}, {'@': 298}, {'@': 212}, {'@': 179}, {'@': 224}, {'@': 119}, {'@': 148}, {'@': 150}, {'@': 262}, {'@': 213}, {'@': 183}, {'@': 82}, {'@': 92}, {'@': 87}, {'@': 182}, {'@': 180}, {'@': 153}, {'@': 151}, {'@': 156}, {'@': 143}, {'@': 84}, {'@': 132}, {'@': 282}, {'@': 178}, {'@': 294}, {'@': 210}, {'@': 227}, {'@': 83}, {'@': 239}, {'@': 235}, {'@': 228}, {'@': 88}, {'@': 158}, {'@': 196}, {'@': 225}, {'@': 218}, {'@': 253}, {'@': 111}, {'@': 141}, {'@': 107}, {'@': 232}, {'@': 195}, {'@': 138}, {'@': 112}, {'@': 154}, {'@': 108}, {'@': 161}, {'@': 131}, {'@': 184}, {'@': 250}, {'@': 124}, {'@': 201}, {'@': 198}, {'@': 200}, {'@': 202}, {'@': 122}, {'@': 157}, {'@': 118}, {'@': 261}, {'@': 176}, {'@': 102}, {'@': 114}, {'@': 194}, {'@': 217}, {'@': 245}, {'@': 281}, {'@': 160}, {'@': 121}, {'@': 86}, {'@': 89}, {'@': 237}, {'@': 80}, {'@': 236}, {'@': 244}, {'@': 149}, {'@': 267}, {'@': 144}, {'@': 272}, {'@': 197}, {'@': 133}, {'@': 263}, {'@': 167}, {'@': 142}, {'@': 165}, {'@': 105}, {'@': 271}, {'@': 242}, {'@': 173}, {'@': 226}, {'@': 135}, {'@': 273}, {'@': 94}, {'@': 264}, {'@': 101}, {'@': 127}, {'@': 91}, {'@': 251}, {'@': 103}, {'@': 93}, {'@': 99}, {'@': 297}, {'@': 191}, {'@': 258}, {'@': 247}, {'@': 284}, {'@': 214}, {'@': 265}, {'@': 115}, {'@': 291}, {'@': 268}, {'@': 106}, {'@': 199}, {'@': 257}, {'@': 190}, {'@': 98}, {'@': 113}, {'@': 252}, {'@': 110}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': None, 'ambiguity': 'auto', 'regex': False, 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'PERCENT', 'pattern': {'value': '%', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 1: {'name': '_DEFEQ', 'pattern': {'value': ':=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 2: {'name': 'EQ', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 3: {'name': 'GT', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 4: {'name': 'LT', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 5: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 6: {'name': '_IS', 'pattern': {'value': '(?:(?:(?:are|is)|∈)|be)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 7: {'name': 'PROP_VAL', 'pattern': {'value': '(?:(?i:(?:(?i:sometimes)|(?i:true)))|(?i:false))', 'flags': ['i'], '_width': [4, 9], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 8: {'name': 'COMP', 'pattern': {'value': '(?:(?:(?:!|\\~)|¬)|not)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 9: {'name': '_IMPLIES', 'pattern': {'value': '(?:(?:=>|⇒)|⟹\\ )', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 10: {'name': '_IFF', 'pattern': {'value': '(?:(?:(?:<=>|⟺)|⇔)|iff)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 11: {'name': 'CONJ', 'pattern': {'value': '(?:(?:(?:\\&|/\\\\)|∧)|and)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 12: {'name': 'DISJ', 'pattern': {'value': '(?:(?:(?:\\||\\\\/)|∨)|or)', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 13: {'name': 'VAR', 'pattern': {'value': '(?!(be|sup|inf|distinct|min|max|case|end|match|with|do|if|then|else|otherwise|iff|is|are|forall|exists|not|or|and|sometimes|true|false)\\b)[a-z_$][\\$a-zA-Z_0-9]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 14: {'name': 'ANNOTATION', 'pattern': {'value': '@[A-Za-z0-9_]+', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 15: {'name': 'COMMENT', 'pattern': {'value': '\\/\\/[^\n]*', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 16: {'name': 'INT', 'pattern': {'value': '(?:[0-9])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 17: {'name': 'WS', 'pattern': {'value': '(?:[ \t\x0c\r\n])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 18: {'name': 'ESCAPED_STRING', 'pattern': {'value': '".*?(?<!\\\\)(\\\\\\\\)*?"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 19: {'name': 'HASH', 'pattern': {'value': '#', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 20: {'name': '__ANON_0', 'pattern': {'value': 'save_aut', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 21: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 22: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 23: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 24: {'name': '__ANON_1', 'pattern': {'value': 'save_aut_img', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 25: {'name': 'CONTEXT', 'pattern': {'value': 'context', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 26: {'name': '__ANON_2', 'pattern': {'value': 'end_context', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 27: {'name': 'LOAD', 'pattern': {'value': 'load', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 28: {'name': '__ANON_3', 'pattern': {'value': 'assert_prop', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 29: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 30: {'name': 'IMPORT', 'pattern': {'value': 'import', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 31: {'name': 'FORGET', 'pattern': {'value': 'forget', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 32: {'name': 'STRUCTURE', 'pattern': {'value': 'Structure', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 33: {'name': 'DEFINING', 'pattern': {'value': 'defining', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 34: {'name': 'SHUFFLE', 'pattern': {'value': 'shuffle', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 35: {'name': '__ANON_4', 'pattern': {'value': 'shuffle_or', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 36: {'name': 'RESTRICT', 'pattern': {'value': 'Restrict', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 37: {'name': 'PLOT', 'pattern': {'value': 'plot', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 38: {'name': 'LET', 'pattern': {'value': 'Let', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 39: {'name': 'DEFINE', 'pattern': {'value': 'Define', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 40: {'name': 'ALIAS', 'pattern': {'value': 'Alias', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 41: {'name': '__ANON_5', 'pattern': {'value': '(?!(Define|Alias|Restrict)\\b)[A-Z][a-zA-Z_0-9]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 42: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 43: {'name': 'THEN', 'pattern': {'value': 'then', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 44: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 45: {'name': 'BACKSLASH', 'pattern': {'value': '\\', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 46: {'name': '__ANON_6', 'pattern': {'value': 'let', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 47: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 48: {'name': 'SEMICOLON', 'pattern': {'value': ';', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 49: {'name': 'MATCH', 'pattern': {'value': 'match', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 50: {'name': 'WITH', 'pattern': {'value': 'with', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 51: {'name': 'END', 'pattern': {'value': 'end', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 52: {'name': 'DO', 'pattern': {'value': 'do', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 53: {'name': 'CASE', 'pattern': {'value': 'case', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 54: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 55: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 56: {'name': '__ANON_7', 'pattern': {'value': '[^\x00-ÿ]', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 57: {'name': 'AT', 'pattern': {'value': '@', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 58: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 59: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 60: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 61: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 62: {'name': 'CIRCUMFLEX', 'pattern': {'value': '^', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 63: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 64: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 65: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 66: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 67: {'name': 'DISTINCT', 'pattern': {'value': 'distinct', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 68: {'name': 'NOT', 'pattern': {'value': 'not', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 69: {'name': 'MIN', 'pattern': {'value': 'min', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 70: {'name': 'MAX', 'pattern': {'value': 'max', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 71: {'name': 'INF', 'pattern': {'value': 'inf', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 72: {'name': 'SUP', 'pattern': {'value': 'sup', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 73: {'name': '__ANON_8', 'pattern': {'value': '≠', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 74: {'name': '__ANON_9', 'pattern': {'value': '≥', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 75: {'name': '__ANON_10', 'pattern': {'value': '≤', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 76: {'name': 'FORALL', 'pattern': {'value': 'forall', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 77: {'name': '__ANON_11', 'pattern': {'value': '∀', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 78: {'name': 'EXISTS', 'pattern': {'value': 'exists', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 79: {'name': '__ANON_12', 'pattern': {'value': '∃', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 80: {'origin': {'name': 'ge', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_9', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'formal_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': '_IFF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'iff', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'ne', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'not_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}, {'name': '__praline_mul_star_8', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': 'ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'conj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'ge', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'greater_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': 'ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_8', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': 'restriction', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'restrict_is', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': '__praline_mul_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_mul_star_8', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'disj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': '__praline_exponent_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': '__praline_sub_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_sub_star_6', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCTURE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'DEFINING', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'val_dict', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'directive_structure', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': 'praline_tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': 'pecan_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_pecan_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': '__div_expr_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': '__praline_exponent_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_exponent_star_10', '__type__': 'NonTerminal'}, {'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BACKSLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_lambda', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': '__praline_add_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_add_star_7', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'call_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': '__praline_div_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_div_star_9', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}, {'name': '__praline_sub_star_6', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': '__match_expr_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': '__add_expr_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': 'add_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mul_expr', '__type__': 'NonTerminal'}, {'name': '__add_expr_star_16', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'var_ref', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': '__args_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__args_star_19', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': 'sub_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_expr', '__type__': 'NonTerminal'}, {'name': '__sub_expr_star_15', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': 'div_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '__div_expr_star_18', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': '__div_expr_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__div_expr_star_18', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'call_is_not', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': '__varlist_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__varlist_star_14', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': 'varlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '__varlist_star_14', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': 'ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_ne', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg', '__type__': 'NonTerminal'}, {'name': '__args_star_19', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'formal_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MIN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'min_func', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RESTRICT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'restriction', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': '__praline_mul_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ALIAS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'directive_name', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_alias', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': 'pecan_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_pecan_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEFINE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_def', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comparison', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'def', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': '__operator_sym_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__operator_sym_plus_5', '__type__': 'NonTerminal'}, {'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__term_star_2', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': 'directive_name', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_5', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': 'mul_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_match_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': 'sub_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': '__term_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'spot_formula', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXISTS', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'partial_op_fst', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': 'varlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FORALL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'formula_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': 'praline_exponent', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': '__praline_exponent_star_10', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_exponent', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': 'div_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'formal_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arith', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 14, 'alias': 'directive_plot', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': 'string', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ESCAPED_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'escaped_str', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'int_const', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'partial_op_snd', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}, {'name': '__praline_add_star_7', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': '__term_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__term_star_2', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'WITH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__term_plus_1', '__type__': 'NonTerminal'}, {'name': 'END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_match', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': '__term_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__term_plus_1', '__type__': 'NonTerminal'}, {'name': 'match_arm', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_match_string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '__match_expr_star_3', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'praline_match_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'def_pred_is', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pecan_term', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'praline_match_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'praline_match_prepend', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'call_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DISTINCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'distinct', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': 'quant_formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'quant_formal_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'exists_sym', '__type__': 'NonTerminal'}, {'name': 'quant_formal', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'exists', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'directive_name', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_directive', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'forall_sym', '__type__': 'NonTerminal'}, {'name': 'quant_formal', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'forall', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'if_then_else', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'formal_var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'restriction', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_match_int', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': 'prog', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': '__praline_list_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_list_star_11', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': 'restriction', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'restrict_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': 'praline_exponent', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_exponent', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'call_is_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': 'mul_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'div_expr', '__type__': 'NonTerminal'}, {'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'index', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'def', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'inf_func', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': '__add_expr_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__add_expr_star_16', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SUP', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'sup_func', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MAX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'max_func', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ANNOTATION', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'annotation', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'def_pred_is_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': 'prop_val', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PROP_VAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'prop_val_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'def_pred_standard', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': 'operator_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__operator_sym_plus_5', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'operator_sym', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_list_gen', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': 'match_arm', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CASE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_match_arm', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline', '__type__': 'NonTerminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'NOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'not_elementof', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': 'quant_formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'quant_formal_list', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'if_then_else', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': '__val_dict_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__val_dict_star_13', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 215: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pred_definition', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'call_is_not_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'index_range', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SHUFFLE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'directive_shuffle', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 220: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pecan_term', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LOAD', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'directive_load_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_4', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 13, 'alias': 'directive_shuffle_or', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 223: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 224: {'origin': {'name': 'quant_formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'quant_formal_is_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 225: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'index_range', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': '__operator_sym_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'le', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'less_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 229: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': 'add_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_int', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 234: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'praline_match_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'greater', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': 'le', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_le', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': 'ge', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'less', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': 'praline_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_operator', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 243: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCTURE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'DEFINING', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'val_dict', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': 'directive_structure', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': 'le', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_10', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': 'int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'int_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': 'kv_pair', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'kv_pair', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'directive_end_context', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'call', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 251: {'origin': {'name': '__praline_div_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': '__args_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': 'arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'sub_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 254: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 255: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__praline_list_star_11', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 256: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'directive_save_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 257: {'origin': {'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 258: {'origin': {'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 259: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__term_star_2', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 260: {'origin': {'name': 'praline_tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 261: {'origin': {'name': 'arg', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 262: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pred', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'implies', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 263: {'origin': {'name': '__term_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_arm', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 264: {'origin': {'name': '__praline_add_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 265: {'origin': {'name': '__varlist_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 266: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_11', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 268: {'origin': {'name': '__sub_expr_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__sub_expr_star_15', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 269: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 270: {'origin': {'name': 'praline_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 271: {'origin': {'name': '__match_expr_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__match_expr_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 272: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_12', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 273: {'origin': {'name': '__praline_sub_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 274: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'directive_save_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 275: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'directive_save_aut_img', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 276: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'prop_val', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'directive_assert_prop', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 277: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'CONTEXT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'directive_context', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 278: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_list', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 279: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exponent', '__type__': 'NonTerminal'}, {'name': '__praline_div_star_9', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 280: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_list_gen', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 281: {'origin': {'name': 'var', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'var_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 282: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'bool', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'comp', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 283: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 284: {'origin': {'name': '__val_dict_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 285: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 286: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': 'praline_atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_app', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 287: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'FORGET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'directive_forget', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 288: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 289: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_tuple', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 290: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_let_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 291: {'origin': {'name': '__sub_expr_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 292: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'praline_let', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 293: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'directive_import', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 294: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'elementof', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 295: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 296: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_if', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 297: {'origin': {'name': '__praline_list_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 298: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'formal_is_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 299: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_7', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 300: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 301: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'prog', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 302: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': '__val_dict_star_13', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(transformer=None, postlex=None):
  return Lark._load_from_dict(DATA, MEMO, transformer=transformer, postlex=postlex)
