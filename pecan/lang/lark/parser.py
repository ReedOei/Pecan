# The file was automatically generated by Lark v0.9.0
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

import os
from io import open

class LarkError(Exception):
    pass

class GrammarError(LarkError):
    pass

class ParseError(LarkError):
    pass

class LexError(LarkError):
    pass

class UnexpectedEOF(ParseError):
    def __init__(self, expected):
        self.expected = expected

        message = ("Unexpected end-of-input. Expected one of: \n\t* %s\n" % '\n\t* '.join(x.name for x in self.expected))
        super(UnexpectedEOF, self).__init__(message)


class UnexpectedInput(LarkError):
    pos_in_stream = None

    def get_context(self, text, span=40):
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        before = text[start:pos].rsplit('\n', 1)[-1]
        after = text[pos:end].split('\n', 1)[0]
        return before + after + '\n' + ' ' * len(before) + '^\n'

    def match_examples(self, parse_fn, examples, token_type_match_fallback=False):
        """ Given a parser instance and a dictionary mapping some label with
            some malformed syntax examples, it'll return the label for the
            example that bests matches the current error.
        """
        assert self.state is not None, "Not supported for this exception"

        candidate = (None, False)
        for label, example in examples.items():
            assert not isinstance(example, STRING_TYPE)

            for malformed in example:
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        try:
                            if ut.token == self.token:  # Try exact match first
                                return label

                            if token_type_match_fallback:
                                # Fallback to token types match
                                if (ut.token.type == self.token.type) and not candidate[-1]:
                                    candidate = label, True

                        except AttributeError:
                            pass
                        if not candidate[0]:
                            candidate = label, False

        return candidate[0]


class UnexpectedCharacters(LexError, UnexpectedInput):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None):
        message = "No terminal defined for '%s' at line %d col %d" % (seq[lex_pos], line, column)

        self.line = line
        self.column = column
        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.pos_in_stream = lex_pos
        self.state = state

        message += '\n\n' + self.get_context(seq)
        if allowed:
            message += '\nExpecting: %s\n' % allowed
        if token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in token_history)

        super(UnexpectedCharacters, self).__init__(message)



class UnexpectedToken(ParseError, UnexpectedInput):
    def __init__(self, token, expected, considered_rules=None, state=None, puppet=None):
        self.token = token
        self.expected = expected     # XXX str shouldn't necessary
        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.considered_rules = considered_rules
        self.state = state
        self.pos_in_stream = getattr(token, 'pos_in_stream', None)
        self.puppet = puppet

        message = ("Unexpected token %r at line %s, column %s.\n"
                   "Expected one of: \n\t* %s\n"
                   % (token, self.line, self.column, '\n\t* '.join(self.expected)))

        super(UnexpectedToken, self).__init__(message)

class VisitError(LarkError):
    """VisitError is raised when visitors are interrupted by an exception

    It provides the following attributes for inspection:
    - obj: the tree node or token it was processing when the exception was raised
    - orig_exc: the exception that cause it to fail
    """
    def __init__(self, rule, obj, orig_exc):
        self.obj = obj
        self.orig_exc = orig_exc

        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

def classify(seq, key=None, value=None):
    d = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data, namespace, memo):
    if isinstance(data, dict):
        if '__type__' in data: # Object
            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


class Serialize(object):
    def memo_serialize(self, types_to_memoize):
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None):
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        postprocess = getattr(self, '_serialize', None)
        if postprocess:
            postprocess(res, memo)
        return res

    @classmethod
    def deserialize(cls, data, memo):
        namespace = getattr(cls, '__serialize_namespace__', {})
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)
        postprocess = getattr(inst, '_deserialize', None)
        if postprocess:
            postprocess()
        return inst


class SerializeMemoizer(Serialize):
    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize):
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value):
        return isinstance(value, self.types_to_memoize)

    def serialize(self):
        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data, namespace, memo):
        return _deserialize(data, namespace, memo)



try:
    STRING_TYPE = basestring
except NameError:   # Python 3
    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')
try:
    classtype = types.ClassType # Python2
except AttributeError:
    classtype = type    # Python3

def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (classtype, type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        return wraps(f.func)(create_decorator(lambda *args, **kw: f(*args[1:], **kw), True))

    else:
        return create_decorator(f.__func__.__call__, True)

try:
    import regex
except ImportError:
    regex = None

import sys, re
Py36 = (sys.version_info[:2] >= (3, 6))

import sre_parse
import sre_constants
categ_pattern = re.compile(r'\\p{[A-Za-z_]+}')
def get_regexp_width(expr):
    if regex:
        # Since `sre_parse` cannot deal with Unicode categories of the form `\p{Mn}`, we replace these with
        # a simple letter, which makes no difference as we are only trying to get the possible lengths of the regex
        # match here below.
        regexp_final = re.sub(categ_pattern, 'A', expr)
    else:
        if re.search(categ_pattern, expr):
            raise ImportError('`regex` module must be installed in order to use Unicode categories.', expr)
        regexp_final = expr
    try:
        return [int(x) for x in sre_parse.parse(regexp_final).getwidth()]
    except sre_constants.error:
        raise ValueError(expr)


class Meta:
    def __init__(self):
        self.empty = True

class Tree(object):
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self):
        queue = [self]
        subtrees = OrderedDict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            queue += [c for c in reversed(subtree.children)
                      if isinstance(c, Tree) and id(c) not in subtrees]

        del queue
        return reversed(list(subtrees.values()))

    def find_pred(self, pred):
        "Find all nodes where pred(tree) == True"
        return filter(pred, self.iter_subtrees())

    def find_data(self, data):
        "Find all nodes where tree.data == data"
        return self.find_pred(lambda t: t.data == data)


from inspect import getmembers, getmro

class Discard(Exception):
    pass

# Transformers

class _Decoratable:
    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            # Make sure the function isn't inherited (unless it's overwritten)
            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(value):
                continue

            # Skip if v_args already applied (at the function level)
            if hasattr(cls.__dict__[name], 'vargs_applied') or hasattr(value, 'vargs_applied'):
                continue

            static = isinstance(cls.__dict__[name], (staticmethod, classmethod))
            setattr(cls, name, decorator(value, static=static, **kwargs))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable):
    """Visits the tree recursively, starting with the leaves and finally the root (bottom-up)

    Calls its methods (provided by user via inheritance) according to tree.data
    The returned value replaces the old one in the structure.

    Can be used to implement map or reduce.
    """
    __visit_tokens__ = True   # For backwards compatibility

    def __init__(self,  visit_tokens=True):
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)


    def _transform_children(self, children):
        for c in children:
            try:
                if isinstance(c, Tree):
                    yield self._transform_tree(c)
                elif self.__visit_tokens__ and isinstance(c, Token):
                    yield self._call_userfunc_token(c)
                else:
                    yield c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        return self._transform_tree(tree)

    def __mul__(self, other):
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        "Default operation on tree (for override)"
        return Tree(data, children, meta)

    def __default_token__(self, token):
        "Default operation on token (for override)"
        return token



class InlineTransformer(Transformer):   # XXX Deprecated
    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    "Non-recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):           # Cancel recursion
        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer):
    "Non-recursive. Doesn't change the original tree."

    def transform(self, tree):
        # Tree to postfix
        rev_postfix = []
        q = [tree]
        while q:
            t = q.pop()
            rev_postfix.append( t )
            if isinstance(t, Tree):
                q += t.children

        # Postfix to tree
        stack = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []
                stack.append(self._call_userfunc(x, args))
            else:
                stack.append(x)

        t ,= stack  # We should have only one tree remaining
        return t



class Transformer_InPlaceRecursive(Transformer):
    "Recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)



# Visitors

class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        "Default operation on tree (for override)"
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase):
    """Bottom-up visitor, non-recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self,tree):
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree

class Visitor_Recursive(VisitorBase):
    """Bottom-up visitor, recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree):
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree



def visit_children_decor(func):
    "See Interpreter"
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter(_Decoratable):
    """Top-down visitor, recursive

    Visits the tree, starting with the root and finally the leaves (top-down)
    Calls its methods (provided by user via inheritance) according to tree.data

    Unlike Transformer and Visitor, the Interpreter doesn't automatically visit its sub-branches.
    The user has to explicitly call visit_children, or use the @visit_children_decor
    """

    def visit(self, tree):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)




# Decorators

def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)



def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   # XXX Deprecated
    return _apply_decorator(obj, _inline_args__func)



def _visitor_args_func_dec(func, visit_wrapper=None, static=False):
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    if static:
        f = wraps(func)(create_decorator(func, False))
    else:
        f = smart_decorator(func, create_decorator)
    f.vargs_applied = True
    f.visit_wrapper = visit_wrapper
    return f


def _vargs_inline(f, data, children, meta):
    return f(*children)
def _vargs_meta_inline(f, data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, data, children, meta):
    return f(children, meta)   # TODO swap these for consistency? Backwards incompatible!
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))

def v_args(inline=False, meta=False, tree=False, wrapper=None):
    "A convenience decorator factory, for modifying the behavior of user-supplied visitor methods"
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, visit_wrapper=func)
    return _visitor_args_dec



class Indenter:
    def __init__(self):
        self.paren_level = None
        self.indent_level = None
        assert self.tab_len > 0

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)



class Symbol(Serialize):
    __slots__ = ('name',)

    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)



class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term = False



class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'template_source', 'empty_indices'

    def __init__(self, keep_all_tokens=False, expand1=False, priority=None, template_source=None, empty_indices=()):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source
        )


class Rule(Serialize):
    """
        origin : a symbol
        expansion : a list of symbols
        order : index of this expansion amongst all rules of the same name
    """
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion





class Pattern(Serialize):

    def __init__(self, value, flags=()):
        self.value = value
        self.flags = frozenset(flags)

    def __repr__(self):
        return repr(self.to_regexp())

    # Pattern Hashing assumes all subclasses have a different priority!
    def __hash__(self):
        return hash((type(self), self.value, self.flags))
    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    def to_regexp(self):
        raise NotImplementedError()

    if Py36:
        # Python 3.6 changed syntax for flags in regular expression
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s:%s)' % (f, value))
            return value

    else:
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s)' % f) + value
            return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type = "str"

    def to_regexp(self):
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self):
        return len(self.value)
    max_width = min_width

class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type = "re"

    def to_regexp(self):
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self):
        return self._get_width()[0]
    @property
    def max_width(self):
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    def __init__(self, name, pattern, priority=1):
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)



class Token(Str):
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        try:
            self = super(Token, cls).__new__(cls, value)
        except UnicodeDecodeError:
            value = value.decode('latin1')
            self = super(Token, cls).__new__(cls, value)

        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        self.end_line = end_line
        self.end_column = end_column
        self.end_pos = end_pos
        return self

    def update(self, type_=None, value=None):
        return Token.new_borrow_pos(
            type_ if type_ is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer, state=None):
        self.lexer = lexer
        self.state = state

    def lex(self, stream, newline_types, ignore_types):
        newline_types = frozenset(newline_types)
        ignore_types = frozenset(ignore_types)
        line_ctr = LineCounter()
        last_token = None

        while line_ctr.char_pos < len(stream):
            lexer = self.lexer
            res = lexer.match(stream, line_ctr.char_pos)
            if not res:
                allowed = {v for m, tfi in lexer.mres for v in tfi.values()} - ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column, allowed=allowed, state=self.state, token_history=last_token and [last_token])

            value, type_ = res

            if type_ not in ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                line_ctr.feed(value, type_ in newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in lexer.callback:
                    t = lexer.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise ValueError("Callbacks must return a token (returned %r)" % t)
                yield t
                last_token = t
            else:
                if type_ in lexer.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    lexer.callback[type_](t2)
                line_ctr.feed(value, type_ in newline_types)




class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t

class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2





def _create_unless(terminals, g_regex_flags, re_):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = [] # {}
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority > retok.priority:
                continue
            s = strtok.pattern.value
            m = re_.match(retok.pattern.to_regexp(), s, g_regex_flags)
            if m and m.group(0) == s:
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(build_mres(unless, g_regex_flags, re_, match_whole=True))

    terminals = [t for t in terminals if t not in embedded_strs]
    return terminals, callback


def _build_mres(terminals, max_size, g_regex_flags, match_whole, re_):
    # Python sets an unreasonable group limit (currently 100) in its re module
    # Worse, the only way to know we reached it is by catching an AssertionError!
    # This function recursively tries less and less groups until it's successful.
    postfix = '$' if match_whole else ''
    mres = []
    while terminals:
        try:
            mre = re_.compile(u'|'.join(u'(?P<%s>%s)'%(t.name, t.pattern.to_regexp()+postfix) for t in terminals[:max_size]), g_regex_flags)
        except AssertionError:  # Yes, this is what Python provides us.. :/
            return _build_mres(terminals, max_size//2, g_regex_flags, match_whole, re_)

        # terms_from_name = {t.name: t for t in terminals[:max_size]}
        mres.append((mre, {i:n for n,i in mre.groupindex.items()} ))
        terminals = terminals[max_size:]
    return mres

def build_mres(terminals, g_regex_flags, re_, match_whole=False):
    return _build_mres(terminals, len(terminals), g_regex_flags, match_whole, re_)

def _regexp_has_newline(r):
    r"""Expressions that may indicate newlines in a regexp:
        - newlines (\n)
        - escaped newline (\\n)
        - anything but ([^...])
        - any-char (.) when the flag (?s) exists
        - spaces (\s)
    """
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)

class Lexer(object):
    """Lexer interface

    Method Signatures:
        lex(self, stream) -> Iterator[Token]
    """
    lex = NotImplemented


class TraditionalLexer(Lexer):

    def __init__(self, terminals, re_, ignore=(), user_callbacks={}, g_regex_flags=0):
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        terminals = list(terminals)

        self.re = re_
        # Sanitization
        for t in terminals:
            try:
                self.re.compile(t.pattern.to_regexp(), g_regex_flags)
            except self.re.error:
                raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

            if t.pattern.min_width == 0:
                raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

        assert set(ignore) <= {t.name for t in terminals}

        # Init
        self.newline_types = [t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp())]
        self.ignore_types = list(ignore)

        terminals.sort(key=lambda x:(-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = user_callbacks
        self.build(g_regex_flags)

    def build(self, g_regex_flags=0):
        terminals, self.callback = _create_unless(self.terminals, g_regex_flags, re_=self.re)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                # Already a callback there, probably UnlessCallback
                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self.mres = build_mres(terminals, g_regex_flags, self.re)

    def match(self, stream, pos):
        for mre, type_from_index in self.mres:
            m = mre.match(stream, pos)
            if m:
                return m.group(0), type_from_index[m.lastindex]

    def lex(self, stream):
        return _Lex(self).lex(stream, self.newline_types, self.ignore_types)




class ContextualLexer(Lexer):

    def __init__(self, terminals, states, re_, ignore=(), always_accept=(), user_callbacks={}, g_regex_flags=0):
        self.re = re_
        tokens_by_name = {}
        for t in terminals:
            assert t.name not in tokens_by_name, t
            tokens_by_name[t.name] = t

        lexer_by_tokens = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(ignore) | set(always_accept)
                state_tokens = [tokens_by_name[n] for n in accepts if n and n in tokens_by_name]
                lexer = TraditionalLexer(state_tokens, re_=self.re, ignore=ignore, user_callbacks=user_callbacks, g_regex_flags=g_regex_flags)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        self.root_lexer = TraditionalLexer(terminals, re_=self.re, ignore=ignore, user_callbacks=user_callbacks, g_regex_flags=g_regex_flags)

    def lex(self, stream, get_parser_state):
        parser_state = get_parser_state()
        l = _Lex(self.lexers[parser_state], parser_state)
        try:
            for x in l.lex(stream, self.root_lexer.newline_types, self.root_lexer.ignore_types):
                yield x
                parser_state = get_parser_state()
                l.lexer = self.lexers[parser_state]
                l.state = parser_state # For debug only, no need to worry about multithreading
        except UnexpectedCharacters as e:
            # In the contextual lexer, UnexpectedCharacters can mean that the terminal is defined,
            # but not in the current context.
            # This tests the input against the global context, to provide a nicer error.
            root_match = self.root_lexer.match(stream, e.pos_in_stream)
            if not root_match:
                raise

            value, type_ = root_match
            t = Token(type_, value, e.pos_in_stream, e.line, e.column)
            raise UnexpectedToken(t, e.allowed, state=e.state)



class LexerConf(Serialize):
    __serialize_fields__ = 'tokens', 'ignore', 'g_regex_flags'
    __serialize_namespace__ = TerminalDef,

    def __init__(self, tokens, ignore=(), postlex=None, callbacks=None, g_regex_flags=0):
        self.tokens = tokens
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags

    def _deserialize(self):
        self.callbacks = {} # TODO


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)

class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        # local reference to Tree.meta reduces number of presence checks
        if isinstance(res, Tree):
            res_meta = res.meta
            for c in children:
                if isinstance(c, Tree):
                    child_meta = c.meta
                    if not child_meta.empty:
                        res_meta.line = child_meta.line
                        res_meta.column = child_meta.column
                        res_meta.start_pos = child_meta.start_pos
                        res_meta.empty = False
                        break
                elif isinstance(c, Token):
                    res_meta.line = c.line
                    res_meta.column = c.column
                    res_meta.start_pos = c.pos_in_stream
                    res_meta.empty = False
                    break

            for c in reversed(children):
                if isinstance(c, Tree):
                    child_meta = c.meta
                    if not child_meta.empty:
                        res_meta.end_line = child_meta.end_line
                        res_meta.end_column = child_meta.end_column
                        res_meta.end_pos = child_meta.end_pos
                        res_meta.empty = False
                        break
                elif isinstance(c, Token):
                    res_meta.end_line = c.end_line
                    res_meta.end_column = c.end_column
                    res_meta.end_pos = c.end_pos
                    res_meta.empty = False
                    break

        return res


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR_NoPlaceholders(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)

def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')

def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices):
    # Prepare empty_indices as: How many Nones to insert at each index?
    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            # LALR without placeholders
            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])

class AmbiguousExpander:
    """Deal with the case where we're expanding children ('_rule') into a parent but the children
       are ambiguous. i.e. (parent->_ambig->_expand_this_rule). In this case, make the parent itself
       ambiguous with as many copies as their are ambiguous children, and then copy the ambiguous children
       into the right parents in the right places, essentially shifting the ambiguiuty up the tree."""
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(child):
            return hasattr(child, 'data') and child.data == '_ambig'

        #### When we're repeatedly expanding ambiguities we can end up with nested ambiguities.
        #    All children of an _ambig node should be a derivation of that ambig node, hence
        #    it is safe to assume that if we see an _ambig node nested within an ambig node
        #    it is safe to simply expand it into the parent _ambig node as an alternative derivation.
        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                to_expand = [j for j, grandchild in enumerate(child.children) if _is_ambig_tree(grandchild)]
                child.expand_kids_by_index(*to_expand)

        if not ambiguous:
            return self.node_builder(children)

        expand = [ iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children) ]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])

def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)

def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f

def inplace_transformer(func):
    @wraps(func)
    def f(children):
        # function name in a Transformer is a rule name.
        tree = Tree(func.__name__, children)
        return func(tree)
    return f

def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")
    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, keep_all_tokens=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                self.propagate_positions and PropagatePositions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
            ]))

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callbacks = {}

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.options.template_source or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                # XXX InlineTransformer is deprecated!
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                else:
                    if isinstance(transformer, InlineTransformer):
                        f = ptb_inline_args(f)
                    elif isinstance(transformer, Transformer_InPlace):
                        f = inplace_transformer(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks



class LALR_Parser(object):
    def __init__(self, parser_conf, debug=False):
        assert all(r.options.priority is None for r in parser_conf.rules), "LALR doesn't yet support prioritization"
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks)
        return inst

    def serialize(self, memo):
        return self._parse_table.serialize(memo)

    def parse(self, *args):
        return self.parser.parse(*args)


class _Parser:
    def __init__(self, parse_table, callbacks, debug=False):
        self.parse_table = parse_table
        self.callbacks = callbacks
        self.debug = debug

    def parse(self, seq, start, set_state=None, value_stack=None, state_stack=None):
        token = None
        stream = iter(seq)
        states = self.parse_table.states
        start_state = self.parse_table.start_states[start]
        end_state = self.parse_table.end_states[start]

        state_stack = state_stack or [start_state]
        value_stack = value_stack or []

        if set_state: set_state(start_state)

        def get_action(token):
            state = state_stack[-1]
            try:
                return states[state][token.type]
            except KeyError:
                expected = [s for s in states[state].keys() if s.isupper()]
                try:
                    puppet = ParserPuppet(self, state_stack, value_stack, start, stream, set_state)
                except NameError:
                    puppet = None
                raise UnexpectedToken(token, expected, state=state, puppet=puppet)

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = states[state_stack[-1]][rule.origin.name]
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        try:
            for token in stream:
                while True:
                    action, arg = get_action(token)
                    assert arg != end_state

                    if action is Shift:
                        state_stack.append(arg)
                        value_stack.append(token)
                        if set_state: set_state(arg)
                        break # next token
                    else:
                        reduce(arg)
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state_stack):
                    print('%d)' % i , s)
                print("")

            raise

        token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
        while True:
            _action, arg = get_action(token)
            assert(_action is Reduce)
            reduce(arg)
            if state_stack[-1] == end_state:
                return value_stack[-1]



class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()
        rules = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def get_frontend(parser, lexer):
    if parser=='lalr':
        if lexer is None:
            raise ValueError('The LALR parser requires use of a lexer')
        elif lexer == 'standard':
            return LALR_TraditionalLexer
        elif lexer == 'contextual':
            return LALR_ContextualLexer
        elif issubclass(lexer, Lexer):
            return partial(LALR_CustomLexer, lexer)
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser=='earley':
        if lexer=='standard':
            return Earley
        elif lexer=='dynamic':
            return XEarley
        elif lexer=='dynamic_complete':
            return XEarley_CompleteLex
        elif lexer=='contextual':
            raise ValueError('The Earley parser does not support the contextual parser')
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser == 'cyk':
        if lexer == 'standard':
            return CYK
        else:
            raise ValueError('CYK parser requires using standard parser.')
    else:
        raise ValueError('Unknown parser: %s' % parser)


class _ParserFrontend(Serialize):
    def _parse(self, input, start, *args):
        if start is None:
            start = self.start
            if len(start) > 1:
                raise ValueError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start)
            start ,= start
        return self.parser.parse(input, start, *args)


class WithLexer(_ParserFrontend):
    lexer = None
    parser = None
    lexer_conf = None
    start = None

    __serialize_fields__ = 'parser', 'lexer_conf', 'start'
    __serialize_namespace__ = LexerConf,

    def __init__(self, lexer_conf, parser_conf, re_, options=None):
        self.lexer_conf = lexer_conf
        self.start = parser_conf.start
        self.postlex = lexer_conf.postlex
        self.re = re_

    @classmethod
    def deserialize(cls, data, memo, callbacks, postlex, re_):
        inst = super(WithLexer, cls).deserialize(data, memo)
        inst.re = re_
        inst.postlex = postlex
        inst.parser = LALR_Parser.deserialize(inst.parser, memo, callbacks)
        inst.init_lexer()
        return inst

    def _serialize(self, data, memo):
        data['parser'] = data['parser'].serialize(memo)

    def lex(self, *args):
        stream = self.lexer.lex(*args)
        return self.postlex.process(stream) if self.postlex else stream

    def parse(self, text, start=None):
        token_stream = self.lex(text)
        return self._parse(token_stream, start)

    def init_traditional_lexer(self):
        self.lexer = TraditionalLexer(self.lexer_conf.tokens, re_=self.re, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks, g_regex_flags=self.lexer_conf.g_regex_flags)

class LALR_WithLexer(WithLexer):
    def __init__(self, lexer_conf, parser_conf, re_, options=None):
        debug = options.debug if options else False
        self.re = re_
        self.parser = LALR_Parser(parser_conf, debug=debug)
        WithLexer.__init__(self, lexer_conf, parser_conf, re_, options)

        self.init_lexer()

    def init_lexer(self):
        raise NotImplementedError()

class LALR_TraditionalLexer(LALR_WithLexer):
    def init_lexer(self):
        self.init_traditional_lexer()

class LALR_ContextualLexer(LALR_WithLexer):
    def init_lexer(self):
        states = {idx:list(t.keys()) for idx, t in self.parser._parse_table.states.items()}
        always_accept = self.postlex.always_accept if self.postlex else ()
        self.lexer = ContextualLexer(self.lexer_conf.tokens, states,
                                     re_=self.re,
                                     ignore=self.lexer_conf.ignore,
                                     always_accept=always_accept,
                                     user_callbacks=self.lexer_conf.callbacks,
                                     g_regex_flags=self.lexer_conf.g_regex_flags)


    def parse(self, text, start=None):
        parser_state = [None]
        def set_parser_state(s):
            parser_state[0] = s

        token_stream = self.lex(text, lambda: parser_state[0])
        return self._parse(token_stream, start, set_parser_state)


class LarkOptions(Serialize):
    """Specifies the options for Lark

    """
    OPTIONS_DOC = """
# General

    start - The start symbol. Either a string, or a list of strings for
            multiple possible starts (Default: "start")
    debug - Display debug information, such as warnings (default: False)
    transformer - Applies the transformer to every parse tree (equivlent to
                  applying it after the parse, but faster)
    propagate_positions - Propagates (line, column, end_line, end_column)
                          attributes into all tree branches.
    maybe_placeholders - When True, the `[]` operator returns `None` when not matched.
                         When `False`,  `[]` behaves like the `?` operator,
                             and returns no value at all.
                         (default=`False`. Recommended to set to `True`)
    regex - When True, uses the `regex` module instead of the stdlib `re`.
    cache - Cache the results of the Lark grammar analysis, for x2 to x3 faster loading.
            LALR only for now.
        When `False`, does nothing (default)
        When `True`, caches to a temporary file in the local directory
        When given a string, caches to the path pointed by the string

    g_regex_flags - Flags that are applied to all terminals
                    (both regex and strings)
    keep_all_tokens - Prevent the tree builder from automagically
                      removing "punctuation" tokens (default: False)

# Algorithm

    parser - Decides which parser engine to use
             Accepts "earley" or "lalr". (Default: "earley")
             (there is also a "cyk" option for legacy)

    lexer - Decides whether or not to use a lexer stage
        "auto" (default): Choose for me based on the parser
        "standard": Use a standard lexer
        "contextual": Stronger lexer (only works with parser="lalr")
        "dynamic": Flexible and powerful (only with parser="earley")
        "dynamic_complete": Same as dynamic, but tries *every* variation
                            of tokenizing possible.

    ambiguity - Decides how to handle ambiguity in the parse.
                Only relevant if parser="earley"
        "resolve": The parser will automatically choose the simplest
                    derivation (it chooses consistently: greedy for
                    tokens, non-greedy for rules)
        "explicit": The parser will return all derivations wrapped
                    in "_ambig" tree nodes (i.e. a forest).

# Domain Specific

    postlex - Lexer post-processing (Default: None) Only works with the
                standard and contextual lexers.
    priority - How priorities should be evaluated - auto, none, normal,
                invert (Default: auto)
    lexer_callbacks - Dictionary of callbacks for the lexer. May alter
                        tokens during lexing. Use with caution.
    edit_terminals - A callback
    """
    if __doc__:
        __doc__ += OPTIONS_DOC

    _defaults = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'regex': False,
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': False,
        'edit_terminals': None,
        'g_regex_flags': 0,
    }

    def __init__(self, options_dict):
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name != 'cache':
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], STRING_TYPE):
            options['start'] = [options['start']]

        self.__dict__['options'] = options

        assert self.parser in ('earley', 'lalr', 'cyk', None)

        if self.parser == 'earley' and self.transformer:
            raise ValueError('Cannot specify an embedded transformer when using the Earley algorithm.'
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ValueError("Unknown options: %s" % o.keys())

    def __getattr__(self, name):
        try:
            return self.options[name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name, value):
        assert name in self.options
        self.options[name] = value

    def serialize(self, memo):
        return self.options

    @classmethod
    def deserialize(cls, data, memo):
        return cls(data)


class Lark(Serialize):
    def __init__(self, grammar, **options):
        """
            grammar : a string or file-object containing the grammar spec (using Lark's ebnf syntax)
            options : a dictionary controlling various aspects of Lark.
        """

        self.options = LarkOptions(options)

        # Set regex or re module
        use_regex = self.options.regex
        if use_regex:
            if regex:
                self.re = regex
            else:
                raise ImportError('`regex` module must be installed if calling `Lark(regex=True)`.')
        else:
            self.re = re

        # Some, but not all file-like objects have a 'name' attribute
        try:
            self.source = grammar.name
        except AttributeError:
            self.source = '<string>'

        # Drain file-like objects to get their contents
        try:
            read = grammar.read
        except AttributeError:
            pass
        else:
            grammar = read()

        assert isinstance(grammar, STRING_TYPE)

        cache_fn = None
        if self.options.cache:
            if self.options.parser != 'lalr':
                raise NotImplementedError("cache only works with parser='lalr' for now")
            if isinstance(self.options.cache, STRING_TYPE):
                cache_fn = self.options.cache
            else:
                if self.options.cache is not True:
                    raise ValueError("cache must be bool or str")
                unhashable = ('transformer', 'postlex', 'lexer_callbacks', 'edit_terminals')
                from . import __version__
                options_str = ''.join(k+str(v) for k, v in options.items() if k not in unhashable)
                s = grammar + options_str + __version__
                md5 = hashlib.md5(s.encode()).hexdigest()
                cache_fn = '.lark_cache_%s.tmp' % md5

            if FS.exists(cache_fn):
                logging.debug('Loading grammar from cache: %s', cache_fn)
                with FS.open(cache_fn, 'rb') as f:
                    self._load(f, self.options.transformer, self.options.postlex)
                return

        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'standard'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        assert lexer in ('standard', 'contextual', 'dynamic', 'dynamic_complete') or issubclass(lexer, Lexer)

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            disambig_parsers = ['earley', 'cyk']
            assert self.options.parser in disambig_parsers, (
                'Only %s supports disambiguation right now') % ', '.join(disambig_parsers)

        if self.options.priority == 'auto':
            if self.options.parser in ('earley', 'cyk', ):
                self.options.priority = 'normal'
            elif self.options.parser in ('lalr', ):
                self.options.priority = None
        elif self.options.priority in ('invert', 'normal'):
            assert self.options.parser in ('earley', 'cyk'), "priorities are not supported for LALR at this time"

        assert self.options.priority in ('auto', None, 'normal', 'invert'), 'invalid priority option specified: {}. options are auto, none, normal, invert.'.format(self.options.priority)
        assert self.options.ambiguity not in ('resolve__antiscore_sum', ), 'resolve__antiscore_sum has been replaced with the option priority="invert"'
        assert self.options.ambiguity in ('resolve', 'explicit', 'auto', )

        # Parse the grammar file and compose the grammars (TODO)
        self.grammar = load_grammar(grammar, self.source, self.re)

        # Compile the EBNF grammar into BNF
        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name:t for t in self.terminals}

        # If the user asked to invert the priorities, negate them all here.
        # This replaces the old 'resolve__antiscore_sum' option.
        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
        # Else, if the user asked to disable priorities, strip them from the
        # rules. This allows the Earley parsers to skip an extra forest walk
        # for improved performance, if you don't need them (or didn't specify any).
        elif self.options.priority == None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None

        # TODO Deprecate lexer_callbacks?
        lexer_callbacks = dict(self.options.lexer_callbacks)
        if self.options.transformer:
            t = self.options.transformer
            for term in self.terminals:
                if hasattr(t, term.name):
                    lexer_callbacks[term.name] = getattr(t, term.name)

        self.lexer_conf = LexerConf(self.terminals, self.ignore_tokens, self.options.postlex, lexer_callbacks, self.options.g_regex_flags)

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logging.debug('Saving grammar to cache: %s', cache_fn)
            with FS.open(cache_fn, 'wb') as f:
                self.save(f)

    if __init__.__doc__:
        __init__.__doc__ += "\nOptions:\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self):
        return TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks, g_regex_flags=self.lexer_conf.g_regex_flags)

    def _prepare_callbacks(self):
        self.parser_class = get_frontend(self.options.parser, self.options.lexer)
        self._parse_tree_builder = ParseTreeBuilder(self.rules, self.options.tree_class or Tree, self.options.propagate_positions, self.options.keep_all_tokens, self.options.parser!='lalr' and self.options.ambiguity=='explicit', self.options.maybe_placeholders)
        self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)

    def _build_parser(self):
        self._prepare_callbacks()
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return self.parser_class(self.lexer_conf, parser_conf, self.re, options=self.options)

    def save(self, f):
        data, m = self.memo_serialize([TerminalDef, Rule])
        pickle.dump({'data': data, 'memo': m}, f)

    @classmethod
    def load(cls, f):
        inst = cls.__new__(cls)
        return inst._load(f)

    def _load(self, f, transformer=None, postlex=None):
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo = d['memo']
        data = d['data']

        assert memo
        memo = SerializeMemoizer.deserialize(memo, {'Rule': Rule, 'TerminalDef': TerminalDef}, {})
        options = dict(data['options'])
        if transformer is not None:
            options['transformer'] = transformer
        if postlex is not None:
            options['postlex'] = postlex
        self.options = LarkOptions.deserialize(options, memo)
        self.re = regex if self.options.regex else re
        self.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        self.source = '<deserialized>'
        self._prepare_callbacks()
        self.parser = self.parser_class.deserialize(data['parser'], memo, self._callbacks, self.options.postlex, self.re)
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, transformer=None, postlex=None):
        inst = cls.__new__(cls)
        return inst._load({'data': data, 'memo': memo}, transformer, postlex)

    @classmethod
    def open(cls, grammar_filename, rel_to=None, **options):
        """Create an instance of Lark with the grammar given by its filename

        If rel_to is provided, the function will find the grammar filename in relation to it.

        Example:

            >>> Lark.open("grammar_file.lark", rel_to=__file__, parser="lalr")
            Lark(...)

        """
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source, self.options.parser, self.options.lexer)


    def lex(self, text):
        "Only lex (and postlex) the text, without parsing it. Only relevant when lexer='standard'"
        if not hasattr(self, 'lexer'):
            self.lexer = self._build_lexer()
        stream = self.lexer.lex(text)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name):
        "Get information about a terminal"
        return self._terminals_dict[name]

    def parse(self, text, start=None, on_error=None):
        """Parse the given text, according to the options provided.

        Parameters:
            start: str - required if Lark was given multiple possible start symbols (using the start option).
            on_error: function - if provided, will be called on UnexpectedToken error. Return true to resume parsing. LALR only.

        Returns a tree, unless specified otherwise.
        """
        try:
            return self.parser.parse(text, start=start)
        except UnexpectedToken as e:
            if on_error is None:
                raise

            while True:
                if not on_error(e):
                    raise e
                try:
                    return e.puppet.resume_parse()
                except UnexpectedToken as e2:
                    e = e2



DATA = (
{'parser': {'parser': {'tokens': {0: 'LT', 1: 'praline_exponent', 2: 'app', 3: '__ANON_6', 4: 'praline_operator', 5: 'praline_list', 6: 'MATCH', 7: 'IF', 8: 'INT', 9: 'GT', 10: 'praline_mul', 11: 'int', 12: 'FALSE', 13: 'LSQB', 14: 'PERCENT', 15: 'praline_tuple', 16: 'LPAR', 17: 'LBRACE', 18: 'operator_sym', 19: 'praline_add', 20: 'DO', 21: 'operator_sym_char', 22: '__operator_sym_plus_6', 23: 'praline_div', 24: 'praline_sub', 25: 'BACKSLASH', 26: 'praline_atom', 27: 'term', 28: 'AT', 29: 'var', 30: 'EQ', 31: 'pecan_term', 32: 'VAR', 33: 'COMP', 34: 'string', 35: 'DISJ', 36: 'TRUE', 37: '__ANON_7', 38: 'MINUS', 39: 'ESCAPED_STRING', 40: 'COLON', 41: 'praline_arith', 42: 'CONJ', 43: '__praline_add_star_8', 44: 'PLUS', 45: 'DOT', 46: 'RSQB', 47: 'COMMA', 48: 'SEMICOLON', 49: 'THEN', 50: 'ELSE', 51: 'CASE', 52: 'IN', 53: 'RPAR', 54: 'END', 55: 'WITH', 56: '_DEFEQ', 57: 'varlist', 58: 'restriction', 59: 'mul_expr', 60: 'atom', 61: 'pred', 62: 'MIN', 63: 'FORALL', 64: 'arith', 65: 'bool', 66: 'forall_sym', 67: '__ANON_12', 68: 'expr', 69: 'EXISTS', 70: 'INF', 71: 'MAX', 72: 'div_expr', 73: 'sub_expr', 74: '__ANON_11', 75: 'add_expr', 76: 'comparison', 77: 'SUP', 78: 'exists_sym', 79: 'call', 80: 'DISTINCT', 81: 'ANNOTATION', 82: 'STRUCTURE', 83: 'HASH', 84: 'ALIAS', 85: 'DEFINE', 86: 'LET', 87: '$END', 88: '__ANON_5', 89: 'RESTRICT', 90: 'RBRACE', 91: 'CIRCUMFLEX', 92: 'SLASH', 93: 'STAR', 94: '_IS', 95: '_IMPLIES', 96: '__ANON_9', 97: '__ANON_8', 98: '__ANON_10', 99: '_IFF', 100: 'NOT', 101: 'DEFINING', 102: 'PROP_VAL', 103: 'prop_val', 104: 'arg', 105: 'praline', 106: 'pred_definition', 107: 'def', 108: 'directive_name', 109: 'formal', 110: 'match_expr', 111: 'kv_pair', 112: 'args', 113: '__def_star_1', 114: '__div_expr_star_19', 115: '__add_expr_star_17', 116: '__term_star_3', 117: '__praline_tuple_plus_13', 118: 'quant_formal', 119: '__praline_sub_star_7', 120: 'match_arm', 121: '__praline_mul_star_9', 122: 'val_dict', 123: '__term_plus_2', 124: 'ge', 125: 'le', 126: 'ne', 127: 'PLOT', 128: 'IMPORT', 129: '__ANON_1', 130: '__ANON_4', 131: '__ANON_0', 132: 'FORGET', 133: 'CONTEXT', 134: 'LOAD', 135: '__ANON_3', 136: '__ANON_2', 137: 'SHUFFLE', 138: '__praline_list_star_12', 139: '__praline_div_star_10', 140: '__mul_expr_star_18', 141: '__praline_exponent_star_11', 142: '__match_expr_plus_5', 143: '__varlist_star_15', 144: '__start_star_0', 145: 'start', 146: '__args_star_20', 147: '__val_dict_star_14', 148: '__sub_expr_star_16', 149: '__match_expr_star_4'}, 'states': {0: {0: (0, 319), 1: (0, 355), 2: (0, 366), 3: (0, 385), 4: (0, 314), 5: (0, 386), 6: (0, 379), 7: (0, 332), 8: (0, 345), 9: (0, 320), 10: (0, 2), 11: (0, 57), 12: (0, 45), 13: (0, 5), 14: (0, 20), 15: (0, 133), 16: (0, 183), 17: (0, 146), 18: (0, 118), 19: (0, 211), 20: (0, 213), 21: (0, 242), 22: (0, 238), 23: (0, 216), 24: (0, 287), 25: (0, 298), 26: (0, 305), 27: (0, 400), 28: (0, 409), 29: (0, 411), 30: (0, 431), 31: (0, 426), 32: (0, 10), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 38: (0, 247), 39: (0, 338), 40: (0, 241), 41: (0, 249), 42: (0, 243)}, 1: {39: (0, 338), 34: (0, 150)}, 2: {43: (0, 496), 44: (0, 471), 37: (1, {'@': 80}), 28: (1, {'@': 80}), 9: (1, {'@': 80}), 14: (1, {'@': 80}), 33: (1, {'@': 80}), 45: (1, {'@': 80}), 0: (1, {'@': 80}), 42: (1, {'@': 80}), 38: (1, {'@': 80}), 35: (1, {'@': 80}), 30: (1, {'@': 80}), 40: (1, {'@': 80}), 46: (1, {'@': 80}), 47: (1, {'@': 80}), 48: (1, {'@': 80}), 49: (1, {'@': 80}), 50: (1, {'@': 80}), 51: (1, {'@': 80}), 52: (1, {'@': 80}), 53: (1, {'@': 80}), 54: (1, {'@': 80}), 55: (1, {'@': 80}), 56: (1, {'@': 80})}, 3: {29: (0, 372), 57: (0, 353), 32: (0, 10)}, 4: {32: (0, 10), 58: (0, 182), 57: (0, 334), 29: (0, 372)}, 5: {2: (0, 366), 5: (0, 386), 6: (0, 379), 9: (0, 320), 15: (0, 133), 27: (0, 343), 16: (0, 183), 17: (0, 146), 22: (0, 238), 21: (0, 242), 23: (0, 216), 26: (0, 305), 30: (0, 431), 31: (0, 426), 32: (0, 10), 13: (0, 5), 39: (0, 338), 38: (0, 247), 41: (0, 249), 42: (0, 243), 24: (0, 287), 3: (0, 385), 0: (0, 319), 1: (0, 355), 4: (0, 314), 7: (0, 332), 8: (0, 345), 10: (0, 2), 11: (0, 57), 12: (0, 45), 14: (0, 20), 46: (0, 505), 18: (0, 118), 19: (0, 211), 20: (0, 213), 25: (0, 298), 28: (0, 409), 29: (0, 411), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 40: (0, 241)}, 6: {55: (0, 246)}, 7: {59: (0, 144), 60: (0, 138), 61: (0, 349), 7: (0, 33), 62: (0, 402), 34: (0, 27), 63: (0, 322), 64: (0, 504), 8: (0, 345), 65: (0, 473), 11: (0, 396), 29: (0, 347), 66: (0, 479), 67: (0, 476), 68: (0, 252), 69: (0, 50), 70: (0, 420), 71: (0, 414), 16: (0, 7), 72: (0, 360), 73: (0, 421), 12: (0, 54), 74: (0, 292), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 78: (0, 206), 79: (0, 399), 80: (0, 120), 81: (0, 335)}, 8: {82: (1, {'@': 81}), 32: (1, {'@': 81}), 83: (1, {'@': 81}), 84: (1, {'@': 81}), 85: (1, {'@': 81}), 86: (1, {'@': 81}), 87: (1, {'@': 81}), 88: (1, {'@': 81}), 89: (1, {'@': 81}), 90: (1, {'@': 81})}, 9: {82: (1, {'@': 82}), 32: (1, {'@': 82}), 83: (1, {'@': 82}), 84: (1, {'@': 82}), 85: (1, {'@': 82}), 86: (1, {'@': 82}), 87: (1, {'@': 82}), 88: (1, {'@': 82}), 89: (1, {'@': 82}), 90: (1, {'@': 82})}, 10: {44: (1, {'@': 83}), 37: (1, {'@': 83}), 9: (1, {'@': 83}), 91: (1, {'@': 83}), 14: (1, {'@': 83}), 33: (1, {'@': 83}), 92: (1, {'@': 83}), 16: (1, {'@': 83}), 0: (1, {'@': 83}), 39: (1, {'@': 83}), 40: (1, {'@': 83}), 35: (1, {'@': 83}), 8: (1, {'@': 83}), 28: (1, {'@': 83}), 32: (1, {'@': 83}), 93: (1, {'@': 83}), 45: (1, {'@': 83}), 42: (1, {'@': 83}), 12: (1, {'@': 83}), 38: (1, {'@': 83}), 36: (1, {'@': 83}), 13: (1, {'@': 83}), 30: (1, {'@': 83}), 17: (1, {'@': 83}), 47: (1, {'@': 83}), 53: (1, {'@': 83}), 94: (1, {'@': 83}), 46: (1, {'@': 83}), 95: (1, {'@': 83}), 96: (1, {'@': 83}), 97: (1, {'@': 83}), 98: (1, {'@': 83}), 99: (1, {'@': 83}), 52: (1, {'@': 83}), 100: (1, {'@': 83}), 82: (1, {'@': 83}), 84: (1, {'@': 83}), 85: (1, {'@': 83}), 88: (1, {'@': 83}), 89: (1, {'@': 83}), 83: (1, {'@': 83}), 90: (1, {'@': 83}), 86: (1, {'@': 83}), 87: (1, {'@': 83}), 48: (1, {'@': 83}), 54: (1, {'@': 83}), 55: (1, {'@': 83}), 51: (1, {'@': 83}), 49: (1, {'@': 83}), 50: (1, {'@': 83}), 56: (1, {'@': 83}), 101: (1, {'@': 83})}, 11: {30: (0, 204)}, 12: {16: (0, 38)}, 13: {}, 14: {94: (0, 147), 16: (0, 191)}, 15: {32: (0, 10), 29: (0, 218)}, 16: {45: (0, 177)}, 17: {59: (0, 144), 60: (0, 138), 7: (0, 33), 62: (0, 402), 34: (0, 27), 63: (0, 322), 8: (0, 345), 65: (0, 473), 11: (0, 396), 61: (0, 401), 29: (0, 347), 66: (0, 479), 67: (0, 476), 68: (0, 252), 69: (0, 50), 71: (0, 414), 70: (0, 420), 16: (0, 7), 73: (0, 421), 12: (0, 54), 74: (0, 292), 64: (0, 432), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 78: (0, 206), 79: (0, 399), 80: (0, 120), 81: (0, 335), 72: (0, 360)}, 18: {16: (0, 212)}, 19: {16: (0, 346)}, 20: {14: (1, {'@': 84}), 9: (1, {'@': 84}), 37: (1, {'@': 84}), 17: (1, {'@': 84}), 33: (1, {'@': 84}), 16: (1, {'@': 84}), 0: (1, {'@': 84}), 39: (1, {'@': 84}), 35: (1, {'@': 84}), 8: (1, {'@': 84}), 28: (1, {'@': 84}), 32: (1, {'@': 84}), 42: (1, {'@': 84}), 12: (1, {'@': 84}), 38: (1, {'@': 84}), 30: (1, {'@': 84}), 36: (1, {'@': 84}), 13: (1, {'@': 84}), 40: (1, {'@': 84}), 48: (1, {'@': 84}), 46: (1, {'@': 84}), 53: (1, {'@': 84}), 54: (1, {'@': 84}), 55: (1, {'@': 84}), 51: (1, {'@': 84}), 49: (1, {'@': 84}), 50: (1, {'@': 84}), 52: (1, {'@': 84}), 45: (1, {'@': 84}), 47: (1, {'@': 84})}, 21: {14: (1, {'@': 85}), 9: (1, {'@': 85}), 37: (1, {'@': 85}), 17: (1, {'@': 85}), 33: (1, {'@': 85}), 16: (1, {'@': 85}), 0: (1, {'@': 85}), 39: (1, {'@': 85}), 35: (1, {'@': 85}), 8: (1, {'@': 85}), 28: (1, {'@': 85}), 32: (1, {'@': 85}), 42: (1, {'@': 85}), 12: (1, {'@': 85}), 38: (1, {'@': 85}), 30: (1, {'@': 85}), 36: (1, {'@': 85}), 13: (1, {'@': 85}), 40: (1, {'@': 85}), 48: (1, {'@': 85}), 49: (1, {'@': 85}), 46: (1, {'@': 85}), 50: (1, {'@': 85}), 51: (1, {'@': 85}), 52: (1, {'@': 85}), 53: (1, {'@': 85}), 45: (1, {'@': 85}), 54: (1, {'@': 85}), 47: (1, {'@': 85}), 55: (1, {'@': 85})}, 22: {92: (0, 418), 44: (1, {'@': 86}), 95: (1, {'@': 86}), 9: (1, {'@': 86}), 96: (1, {'@': 86}), 33: (1, {'@': 86}), 97: (1, {'@': 86}), 0: (1, {'@': 86}), 98: (1, {'@': 86}), 35: (1, {'@': 86}), 99: (1, {'@': 86}), 53: (1, {'@': 86}), 93: (1, {'@': 86}), 42: (1, {'@': 86}), 38: (1, {'@': 86}), 30: (1, {'@': 86}), 82: (1, {'@': 86}), 84: (1, {'@': 86}), 85: (1, {'@': 86}), 88: (1, {'@': 86}), 89: (1, {'@': 86}), 32: (1, {'@': 86}), 83: (1, {'@': 86}), 90: (1, {'@': 86}), 86: (1, {'@': 86}), 87: (1, {'@': 86}), 49: (1, {'@': 86}), 46: (1, {'@': 86}), 50: (1, {'@': 86}), 47: (1, {'@': 86}), 45: (1, {'@': 86})}, 23: {102: (0, 281), 103: (0, 76)}, 24: {16: (0, 224)}, 25: {82: (1, {'@': 87}), 32: (1, {'@': 87}), 83: (1, {'@': 87}), 84: (1, {'@': 87}), 85: (1, {'@': 87}), 86: (1, {'@': 87}), 87: (1, {'@': 87}), 88: (1, {'@': 87}), 89: (1, {'@': 87})}, 26: {37: (1, {'@': 88}), 17: (1, {'@': 88}), 33: (1, {'@': 88}), 25: (1, {'@': 88}), 32: (1, {'@': 88}), 12: (1, {'@': 88}), 38: (1, {'@': 88}), 30: (1, {'@': 88}), 36: (1, {'@': 88}), 40: (1, {'@': 88}), 14: (1, {'@': 88}), 9: (1, {'@': 88}), 16: (1, {'@': 88}), 0: (1, {'@': 88}), 39: (1, {'@': 88}), 35: (1, {'@': 88}), 8: (1, {'@': 88}), 28: (1, {'@': 88}), 7: (1, {'@': 88}), 6: (1, {'@': 88}), 42: (1, {'@': 88}), 13: (1, {'@': 88}), 3: (1, {'@': 88}), 20: (1, {'@': 88})}, 27: {95: (1, {'@': 89}), 42: (1, {'@': 89}), 35: (1, {'@': 89}), 53: (1, {'@': 89}), 99: (1, {'@': 89}), 82: (1, {'@': 89}), 32: (1, {'@': 89}), 83: (1, {'@': 89}), 90: (1, {'@': 89}), 84: (1, {'@': 89}), 85: (1, {'@': 89}), 86: (1, {'@': 89}), 87: (1, {'@': 89}), 88: (1, {'@': 89}), 89: (1, {'@': 89}), 49: (1, {'@': 89}), 46: (1, {'@': 89}), 50: (1, {'@': 89})}, 28: {29: (0, 438), 32: (0, 10)}, 29: {16: (0, 222)}, 30: {32: (1, {'@': 90}), 53: (1, {'@': 90}), 16: (1, {'@': 90}), 39: (1, {'@': 90}), 13: (1, {'@': 90}), 8: (1, {'@': 90}), 17: (1, {'@': 90})}, 31: {1: (0, 355), 2: (0, 366), 4: (0, 493), 5: (0, 386), 8: (0, 345), 11: (0, 57), 10: (0, 2), 12: (0, 45), 13: (0, 5), 15: (0, 133), 16: (0, 183), 17: (0, 146), 19: (0, 211), 23: (0, 216), 26: (0, 305), 29: (0, 411), 31: (0, 426), 32: (0, 10), 34: (0, 397), 36: (0, 356), 38: (0, 247), 39: (0, 338), 41: (0, 249), 24: (0, 287), 45: (1, {'@': 91}), 46: (1, {'@': 91}), 47: (1, {'@': 91}), 54: (1, {'@': 91}), 51: (1, {'@': 91}), 48: (1, {'@': 91}), 49: (1, {'@': 91}), 50: (1, {'@': 91}), 52: (1, {'@': 91}), 53: (1, {'@': 91}), 55: (1, {'@': 91})}, 32: {47: (1, {'@': 92}), 40: (1, {'@': 92}), 53: (1, {'@': 92}), 95: (1, {'@': 92}), 56: (1, {'@': 92}), 46: (1, {'@': 92})}, 33: {59: (0, 144), 60: (0, 138), 7: (0, 33), 62: (0, 402), 34: (0, 27), 63: (0, 322), 8: (0, 345), 61: (0, 352), 65: (0, 473), 11: (0, 396), 29: (0, 347), 66: (0, 479), 67: (0, 476), 68: (0, 252), 69: (0, 50), 70: (0, 420), 71: (0, 414), 16: (0, 7), 73: (0, 421), 12: (0, 54), 74: (0, 292), 64: (0, 432), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 78: (0, 206), 79: (0, 399), 80: (0, 120), 81: (0, 335), 72: (0, 360)}, 34: {82: (1, {'@': 93}), 32: (1, {'@': 93}), 83: (1, {'@': 93}), 84: (1, {'@': 93}), 85: (1, {'@': 93}), 86: (1, {'@': 93}), 87: (1, {'@': 93}), 88: (1, {'@': 93}), 89: (1, {'@': 93}), 90: (1, {'@': 93})}, 35: {16: (0, 219)}, 36: {91: (0, 499), 44: (1, {'@': 94}), 37: (1, {'@': 94}), 28: (1, {'@': 94}), 9: (1, {'@': 94}), 14: (1, {'@': 94}), 33: (1, {'@': 94}), 92: (1, {'@': 94}), 93: (1, {'@': 94}), 45: (1, {'@': 94}), 0: (1, {'@': 94}), 42: (1, {'@': 94}), 38: (1, {'@': 94}), 35: (1, {'@': 94}), 30: (1, {'@': 94}), 40: (1, {'@': 94}), 46: (1, {'@': 94}), 47: (1, {'@': 94}), 48: (1, {'@': 94}), 49: (1, {'@': 94}), 50: (1, {'@': 94}), 52: (1, {'@': 94}), 53: (1, {'@': 94}), 54: (1, {'@': 94}), 55: (1, {'@': 94}), 51: (1, {'@': 94}), 56: (1, {'@': 94})}, 37: {95: (0, 392), 53: (1, {'@': 95}), 82: (1, {'@': 95}), 84: (1, {'@': 95}), 85: (1, {'@': 95}), 88: (1, {'@': 95}), 89: (1, {'@': 95}), 32: (1, {'@': 95}), 83: (1, {'@': 95}), 90: (1, {'@': 95}), 86: (1, {'@': 95}), 87: (1, {'@': 95}), 49: (1, {'@': 95}), 46: (1, {'@': 95}), 50: (1, {'@': 95})}, 38: {32: (0, 10), 29: (0, 503)}, 39: {59: (0, 144), 60: (0, 138), 68: (0, 202), 62: (0, 402), 8: (0, 345), 11: (0, 396), 29: (0, 408), 30: (0, 200), 71: (0, 414), 70: (0, 420), 73: (0, 421), 16: (0, 424), 64: (0, 432), 75: (0, 434), 32: (0, 10), 77: (0, 440), 38: (0, 444), 79: (0, 399), 81: (0, 335), 72: (0, 360)}, 40: {60: (0, 42), 62: (0, 402), 32: (0, 10), 8: (0, 345), 11: (0, 396), 77: (0, 440), 38: (0, 444), 71: (0, 414), 70: (0, 420), 79: (0, 399), 29: (0, 486), 81: (0, 335), 16: (0, 424)}, 41: {53: (0, 245), 47: (0, 233)}, 42: {94: (0, 51), 82: (1, {'@': 96}), 33: (1, {'@': 96}), 92: (1, {'@': 96}), 98: (1, {'@': 96}), 46: (1, {'@': 96}), 88: (1, {'@': 96}), 32: (1, {'@': 96}), 53: (1, {'@': 96}), 93: (1, {'@': 96}), 90: (1, {'@': 96}), 38: (1, {'@': 96}), 30: (1, {'@': 96}), 87: (1, {'@': 96}), 44: (1, {'@': 96}), 95: (1, {'@': 96}), 9: (1, {'@': 96}), 96: (1, {'@': 96}), 97: (1, {'@': 96}), 0: (1, {'@': 96}), 84: (1, {'@': 96}), 85: (1, {'@': 96}), 35: (1, {'@': 96}), 49: (1, {'@': 96}), 99: (1, {'@': 96}), 50: (1, {'@': 96}), 89: (1, {'@': 96}), 45: (1, {'@': 96}), 83: (1, {'@': 96}), 42: (1, {'@': 96}), 86: (1, {'@': 96}), 47: (1, {'@': 96})}, 43: {59: (0, 144), 60: (0, 138), 62: (0, 402), 8: (0, 345), 11: (0, 396), 29: (0, 408), 68: (0, 412), 104: (0, 331), 71: (0, 414), 70: (0, 420), 73: (0, 421), 16: (0, 424), 64: (0, 432), 75: (0, 434), 32: (0, 10), 77: (0, 440), 38: (0, 444), 79: (0, 399), 81: (0, 335), 72: (0, 360)}, 44: {45: (0, 250)}, 45: {44: (1, {'@': 97}), 37: (1, {'@': 97}), 9: (1, {'@': 97}), 91: (1, {'@': 97}), 14: (1, {'@': 97}), 33: (1, {'@': 97}), 92: (1, {'@': 97}), 16: (1, {'@': 97}), 0: (1, {'@': 97}), 39: (1, {'@': 97}), 40: (1, {'@': 97}), 35: (1, {'@': 97}), 8: (1, {'@': 97}), 28: (1, {'@': 97}), 32: (1, {'@': 97}), 93: (1, {'@': 97}), 45: (1, {'@': 97}), 42: (1, {'@': 97}), 12: (1, {'@': 97}), 38: (1, {'@': 97}), 36: (1, {'@': 97}), 13: (1, {'@': 97}), 30: (1, {'@': 97}), 17: (1, {'@': 97}), 46: (1, {'@': 97}), 47: (1, {'@': 97}), 48: (1, {'@': 97}), 53: (1, {'@': 97}), 54: (1, {'@': 97}), 55: (1, {'@': 97}), 51: (1, {'@': 97}), 49: (1, {'@': 97}), 50: (1, {'@': 97}), 52: (1, {'@': 97}), 56: (1, {'@': 97}), 95: (1, {'@': 97})}, 46: {95: (1, {'@': 98}), 42: (1, {'@': 98}), 35: (1, {'@': 98}), 53: (1, {'@': 98}), 99: (1, {'@': 98}), 82: (1, {'@': 98}), 32: (1, {'@': 98}), 83: (1, {'@': 98}), 90: (1, {'@': 98}), 84: (1, {'@': 98}), 85: (1, {'@': 98}), 86: (1, {'@': 98}), 87: (1, {'@': 98}), 88: (1, {'@': 98}), 89: (1, {'@': 98}), 49: (1, {'@': 98}), 46: (1, {'@': 98}), 50: (1, {'@': 98})}, 47: {59: (0, 144), 61: (0, 94), 60: (0, 138), 7: (0, 33), 62: (0, 402), 34: (0, 27), 63: (0, 322), 8: (0, 345), 65: (0, 473), 11: (0, 396), 29: (0, 347), 66: (0, 479), 67: (0, 476), 68: (0, 252), 69: (0, 50), 71: (0, 414), 70: (0, 420), 16: (0, 7), 73: (0, 421), 12: (0, 54), 74: (0, 292), 64: (0, 432), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 78: (0, 206), 79: (0, 399), 80: (0, 120), 81: (0, 335), 72: (0, 360)}, 48: {90: (0, 124)}, 49: {29: (0, 14), 83: (0, 310), 86: (0, 341), 89: (0, 4), 88: (0, 26), 105: (0, 8), 32: (0, 10), 106: (0, 9), 84: (0, 1), 107: (0, 348), 82: (0, 56), 108: (0, 0), 85: (0, 52), 87: (1, {'@': 99})}, 50: {32: (1, {'@': 100})}, 51: {29: (0, 419), 32: (0, 10), 100: (0, 430)}, 52: {1: (0, 355), 2: (0, 366), 4: (0, 236), 5: (0, 386), 8: (0, 345), 11: (0, 57), 10: (0, 2), 12: (0, 45), 13: (0, 5), 15: (0, 133), 16: (0, 183), 17: (0, 146), 19: (0, 211), 23: (0, 216), 26: (0, 305), 29: (0, 411), 31: (0, 426), 32: (0, 10), 34: (0, 397), 36: (0, 356), 38: (0, 247), 39: (0, 338), 41: (0, 249), 24: (0, 287)}, 53: {60: (0, 138), 62: (0, 402), 32: (0, 10), 8: (0, 345), 11: (0, 396), 59: (0, 383), 77: (0, 440), 38: (0, 444), 71: (0, 414), 70: (0, 420), 79: (0, 399), 29: (0, 486), 81: (0, 335), 16: (0, 424), 72: (0, 360)}, 54: {95: (1, {'@': 101}), 42: (1, {'@': 101}), 35: (1, {'@': 101}), 53: (1, {'@': 101}), 99: (1, {'@': 101}), 82: (1, {'@': 101}), 32: (1, {'@': 101}), 83: (1, {'@': 101}), 90: (1, {'@': 101}), 84: (1, {'@': 101}), 85: (1, {'@': 101}), 86: (1, {'@': 101}), 87: (1, {'@': 101}), 88: (1, {'@': 101}), 89: (1, {'@': 101}), 49: (1, {'@': 101}), 46: (1, {'@': 101}), 50: (1, {'@': 101})}, 55: {40: (0, 387)}, 56: {29: (0, 116), 32: (0, 10), 109: (0, 119)}, 57: {44: (1, {'@': 102}), 37: (1, {'@': 102}), 9: (1, {'@': 102}), 91: (1, {'@': 102}), 14: (1, {'@': 102}), 33: (1, {'@': 102}), 92: (1, {'@': 102}), 16: (1, {'@': 102}), 0: (1, {'@': 102}), 39: (1, {'@': 102}), 40: (1, {'@': 102}), 35: (1, {'@': 102}), 8: (1, {'@': 102}), 28: (1, {'@': 102}), 32: (1, {'@': 102}), 93: (1, {'@': 102}), 45: (1, {'@': 102}), 42: (1, {'@': 102}), 12: (1, {'@': 102}), 38: (1, {'@': 102}), 36: (1, {'@': 102}), 13: (1, {'@': 102}), 30: (1, {'@': 102}), 17: (1, {'@': 102}), 46: (1, {'@': 102}), 47: (1, {'@': 102}), 48: (1, {'@': 102}), 53: (1, {'@': 102}), 54: (1, {'@': 102}), 55: (1, {'@': 102}), 51: (1, {'@': 102}), 49: (1, {'@': 102}), 50: (1, {'@': 102}), 52: (1, {'@': 102}), 56: (1, {'@': 102}), 95: (1, {'@': 102})}, 58: {94: (0, 51), 44: (1, {'@': 103}), 95: (1, {'@': 103}), 9: (1, {'@': 103}), 96: (1, {'@': 103}), 33: (1, {'@': 103}), 92: (1, {'@': 103}), 97: (1, {'@': 103}), 0: (1, {'@': 103}), 98: (1, {'@': 103}), 35: (1, {'@': 103}), 99: (1, {'@': 103}), 53: (1, {'@': 103}), 93: (1, {'@': 103}), 42: (1, {'@': 103}), 38: (1, {'@': 103}), 30: (1, {'@': 103}), 82: (1, {'@': 103}), 84: (1, {'@': 103}), 85: (1, {'@': 103}), 88: (1, {'@': 103}), 89: (1, {'@': 103}), 32: (1, {'@': 103}), 83: (1, {'@': 103}), 90: (1, {'@': 103}), 86: (1, {'@': 103}), 87: (1, {'@': 103}), 49: (1, {'@': 103}), 46: (1, {'@': 103}), 50: (1, {'@': 103}), 47: (1, {'@': 103}), 45: (1, {'@': 103})}, 59: {13: (0, 446), 29: (0, 318), 110: (0, 488), 16: (0, 370), 32: (0, 10), 8: (0, 345), 39: (0, 338), 31: (0, 354), 17: (0, 146), 11: (0, 449), 53: (0, 207), 34: (0, 501)}, 60: {90: (0, 359), 95: (0, 392)}, 61: {50: (0, 171)}, 62: {30: (0, 255)}, 63: {11: (0, 437), 39: (0, 338), 8: (0, 345), 34: (0, 261)}, 64: {13: (0, 446), 29: (0, 318), 110: (0, 229), 16: (0, 370), 32: (0, 10), 8: (0, 345), 39: (0, 338), 31: (0, 354), 17: (0, 146), 11: (0, 449), 34: (0, 501)}, 65: {45: (1, {'@': 104})}, 66: {29: (0, 116), 32: (0, 10), 109: (0, 263)}, 67: {52: (0, 163)}, 68: {59: (0, 144), 60: (0, 138), 62: (0, 402), 29: (0, 408), 75: (0, 434), 32: (0, 10), 8: (0, 345), 11: (0, 396), 77: (0, 440), 68: (0, 128), 38: (0, 444), 71: (0, 414), 70: (0, 420), 79: (0, 399), 81: (0, 335), 73: (0, 421), 16: (0, 424), 72: (0, 360), 64: (0, 432)}, 69: {82: (1, {'@': 105}), 32: (1, {'@': 105}), 83: (1, {'@': 105}), 84: (1, {'@': 105}), 85: (1, {'@': 105}), 86: (1, {'@': 105}), 87: (1, {'@': 105}), 88: (1, {'@': 105}), 89: (1, {'@': 105}), 90: (1, {'@': 105})}, 70: {82: (1, {'@': 106}), 32: (1, {'@': 106}), 83: (1, {'@': 106}), 84: (1, {'@': 106}), 85: (1, {'@': 106}), 86: (1, {'@': 106}), 87: (1, {'@': 106}), 88: (1, {'@': 106}), 89: (1, {'@': 106}), 90: (1, {'@': 106})}, 71: {47: (1, {'@': 107}), 40: (1, {'@': 107}), 53: (1, {'@': 107}), 95: (1, {'@': 107}), 56: (1, {'@': 107}), 46: (1, {'@': 107})}, 72: {29: (0, 116), 32: (0, 10), 109: (0, 265)}, 73: {53: (0, 162)}, 74: {60: (0, 138), 62: (0, 402), 32: (0, 10), 8: (0, 345), 11: (0, 396), 77: (0, 440), 72: (0, 132), 38: (0, 444), 71: (0, 414), 70: (0, 420), 79: (0, 399), 29: (0, 486), 81: (0, 335), 16: (0, 424)}, 75: {29: (0, 116), 32: (0, 10), 109: (0, 268)}, 76: {47: (0, 143)}, 77: {16: (0, 88), 44: (1, {'@': 108}), 95: (1, {'@': 108}), 9: (1, {'@': 108}), 96: (1, {'@': 108}), 33: (1, {'@': 108}), 92: (1, {'@': 108}), 97: (1, {'@': 108}), 0: (1, {'@': 108}), 98: (1, {'@': 108}), 35: (1, {'@': 108}), 99: (1, {'@': 108}), 53: (1, {'@': 108}), 93: (1, {'@': 108}), 42: (1, {'@': 108}), 38: (1, {'@': 108}), 30: (1, {'@': 108}), 94: (1, {'@': 108}), 82: (1, {'@': 108}), 84: (1, {'@': 108}), 85: (1, {'@': 108}), 88: (1, {'@': 108}), 89: (1, {'@': 108}), 32: (1, {'@': 108}), 83: (1, {'@': 108}), 90: (1, {'@': 108}), 86: (1, {'@': 108}), 87: (1, {'@': 108}), 49: (1, {'@': 108}), 46: (1, {'@': 108}), 50: (1, {'@': 108}), 47: (1, {'@': 108}), 45: (1, {'@': 108})}, 78: {95: (0, 392), 46: (0, 373)}, 79: {45: (0, 269)}, 80: {13: (0, 446), 29: (0, 318), 110: (0, 364), 16: (0, 370), 32: (0, 10), 8: (0, 345), 39: (0, 338), 31: (0, 354), 17: (0, 146), 11: (0, 449), 34: (0, 501)}, 81: {101: (1, {'@': 109}), 53: (1, {'@': 109}), 47: (1, {'@': 109})}, 82: {47: (1, {'@': 110}), 90: (1, {'@': 110})}, 83: {111: (0, 271), 39: (0, 338), 34: (0, 407)}, 84: {44: (1, {'@': 111}), 95: (1, {'@': 111}), 9: (1, {'@': 111}), 96: (1, {'@': 111}), 33: (1, {'@': 111}), 92: (1, {'@': 111}), 97: (1, {'@': 111}), 0: (1, {'@': 111}), 98: (1, {'@': 111}), 35: (1, {'@': 111}), 99: (1, {'@': 111}), 53: (1, {'@': 111}), 93: (1, {'@': 111}), 42: (1, {'@': 111}), 38: (1, {'@': 111}), 30: (1, {'@': 111}), 94: (1, {'@': 111}), 82: (1, {'@': 111}), 84: (1, {'@': 111}), 85: (1, {'@': 111}), 88: (1, {'@': 111}), 89: (1, {'@': 111}), 32: (1, {'@': 111}), 83: (1, {'@': 111}), 90: (1, {'@': 111}), 86: (1, {'@': 111}), 87: (1, {'@': 111}), 49: (1, {'@': 111}), 46: (1, {'@': 111}), 50: (1, {'@': 111}), 47: (1, {'@': 111}), 45: (1, {'@': 111})}, 85: {82: (1, {'@': 112}), 84: (1, {'@': 112}), 85: (1, {'@': 112}), 88: (1, {'@': 112}), 89: (1, {'@': 112}), 32: (1, {'@': 112}), 45: (1, {'@': 112}), 83: (1, {'@': 112}), 90: (1, {'@': 112}), 86: (1, {'@': 112}), 87: (1, {'@': 112})}, 86: {59: (0, 144), 60: (0, 138), 7: (0, 33), 62: (0, 402), 34: (0, 27), 63: (0, 322), 8: (0, 345), 65: (0, 473), 11: (0, 396), 29: (0, 347), 66: (0, 479), 67: (0, 476), 68: (0, 252), 69: (0, 50), 61: (0, 214), 71: (0, 414), 70: (0, 420), 16: (0, 7), 73: (0, 421), 12: (0, 54), 74: (0, 292), 64: (0, 432), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 78: (0, 206), 79: (0, 399), 80: (0, 120), 81: (0, 335), 72: (0, 360)}, 87: {29: (0, 411), 31: (0, 426), 5: (0, 386), 8: (0, 345), 32: (0, 10), 34: (0, 397), 13: (0, 5), 12: (0, 45), 11: (0, 57), 36: (0, 356), 16: (0, 183), 26: (0, 377), 39: (0, 338), 15: (0, 133), 17: (0, 146), 37: (1, {'@': 113}), 91: (1, {'@': 113}), 48: (1, {'@': 113}), 33: (1, {'@': 113}), 92: (1, {'@': 113}), 56: (1, {'@': 113}), 46: (1, {'@': 113}), 53: (1, {'@': 113}), 93: (1, {'@': 113}), 54: (1, {'@': 113}), 38: (1, {'@': 113}), 30: (1, {'@': 113}), 55: (1, {'@': 113}), 40: (1, {'@': 113}), 51: (1, {'@': 113}), 44: (1, {'@': 113}), 9: (1, {'@': 113}), 14: (1, {'@': 113}), 0: (1, {'@': 113}), 35: (1, {'@': 113}), 49: (1, {'@': 113}), 50: (1, {'@': 113}), 52: (1, {'@': 113}), 28: (1, {'@': 113}), 45: (1, {'@': 113}), 42: (1, {'@': 113}), 47: (1, {'@': 113})}, 88: {59: (0, 144), 60: (0, 138), 62: (0, 402), 104: (0, 403), 8: (0, 345), 11: (0, 396), 29: (0, 408), 112: (0, 278), 68: (0, 412), 71: (0, 414), 70: (0, 420), 73: (0, 421), 16: (0, 424), 64: (0, 432), 75: (0, 434), 32: (0, 10), 77: (0, 440), 38: (0, 444), 79: (0, 399), 81: (0, 335), 72: (0, 360), 53: (1, {'@': 114})}, 89: {37: (1, {'@': 115}), 48: (1, {'@': 115}), 33: (1, {'@': 115}), 92: (1, {'@': 115}), 56: (1, {'@': 115}), 46: (1, {'@': 115}), 53: (1, {'@': 115}), 93: (1, {'@': 115}), 54: (1, {'@': 115}), 38: (1, {'@': 115}), 30: (1, {'@': 115}), 55: (1, {'@': 115}), 40: (1, {'@': 115}), 51: (1, {'@': 115}), 44: (1, {'@': 115}), 9: (1, {'@': 115}), 14: (1, {'@': 115}), 0: (1, {'@': 115}), 35: (1, {'@': 115}), 49: (1, {'@': 115}), 50: (1, {'@': 115}), 52: (1, {'@': 115}), 28: (1, {'@': 115}), 45: (1, {'@': 115}), 42: (1, {'@': 115}), 47: (1, {'@': 115})}, 90: {32: (0, 10), 29: (0, 283)}, 91: {59: (0, 144), 60: (0, 138), 7: (0, 33), 62: (0, 402), 34: (0, 27), 61: (0, 198), 63: (0, 322), 8: (0, 345), 65: (0, 473), 11: (0, 396), 29: (0, 347), 66: (0, 479), 67: (0, 476), 68: (0, 252), 69: (0, 50), 70: (0, 420), 71: (0, 414), 16: (0, 7), 73: (0, 421), 12: (0, 54), 74: (0, 292), 64: (0, 432), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 78: (0, 206), 79: (0, 399), 80: (0, 120), 81: (0, 335), 72: (0, 360)}, 92: {59: (0, 144), 45: (0, 284), 60: (0, 138), 62: (0, 402), 64: (0, 286), 75: (0, 434), 32: (0, 10), 8: (0, 345), 11: (0, 396), 77: (0, 440), 38: (0, 444), 71: (0, 414), 70: (0, 420), 79: (0, 399), 29: (0, 486), 81: (0, 335), 73: (0, 421), 16: (0, 424), 72: (0, 360)}, 93: {82: (1, {'@': 116}), 33: (1, {'@': 116}), 92: (1, {'@': 116}), 98: (1, {'@': 116}), 46: (1, {'@': 116}), 88: (1, {'@': 116}), 32: (1, {'@': 116}), 53: (1, {'@': 116}), 90: (1, {'@': 116}), 38: (1, {'@': 116}), 30: (1, {'@': 116}), 47: (1, {'@': 116}), 95: (1, {'@': 116}), 9: (1, {'@': 116}), 96: (1, {'@': 116}), 97: (1, {'@': 116}), 0: (1, {'@': 116}), 84: (1, {'@': 116}), 85: (1, {'@': 116}), 35: (1, {'@': 116}), 49: (1, {'@': 116}), 99: (1, {'@': 116}), 50: (1, {'@': 116}), 89: (1, {'@': 116}), 45: (1, {'@': 116}), 83: (1, {'@': 116}), 42: (1, {'@': 116}), 86: (1, {'@': 116}), 87: (1, {'@': 116})}, 94: {90: (0, 289), 95: (0, 392)}, 95: {95: (0, 392), 90: (0, 290)}, 96: {59: (0, 144), 60: (0, 138), 62: (0, 402), 32: (0, 10), 8: (0, 345), 11: (0, 396), 77: (0, 440), 38: (0, 444), 71: (0, 414), 70: (0, 420), 75: (0, 134), 79: (0, 399), 29: (0, 486), 81: (0, 335), 16: (0, 424), 72: (0, 360)}, 97: {40: (0, 279), 46: (1, {'@': 117}), 47: (1, {'@': 117})}, 98: {45: (1, {'@': 118}), 46: (1, {'@': 118}), 47: (1, {'@': 118}), 54: (1, {'@': 118}), 51: (1, {'@': 118}), 48: (1, {'@': 118}), 49: (1, {'@': 118}), 50: (1, {'@': 118}), 52: (1, {'@': 118}), 53: (1, {'@': 118}), 55: (1, {'@': 118})}, 99: {45: (1, {'@': 119}), 46: (1, {'@': 119}), 47: (1, {'@': 119}), 54: (1, {'@': 119}), 51: (1, {'@': 119}), 48: (1, {'@': 119}), 49: (1, {'@': 119}), 50: (1, {'@': 119}), 52: (1, {'@': 119}), 53: (1, {'@': 119}), 55: (1, {'@': 119})}, 100: {29: (0, 184), 32: (0, 10)}, 101: {0: (0, 319), 1: (0, 355), 2: (0, 366), 3: (0, 385), 4: (0, 314), 5: (0, 386), 6: (0, 379), 7: (0, 332), 8: (0, 345), 9: (0, 320), 10: (0, 2), 11: (0, 57), 12: (0, 45), 13: (0, 5), 14: (0, 20), 15: (0, 133), 16: (0, 183), 17: (0, 146), 18: (0, 118), 19: (0, 211), 20: (0, 213), 21: (0, 242), 22: (0, 238), 23: (0, 216), 24: (0, 287), 25: (0, 298), 26: (0, 305), 28: (0, 409), 27: (0, 291), 29: (0, 411), 30: (0, 431), 31: (0, 426), 32: (0, 10), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 38: (0, 247), 39: (0, 338), 40: (0, 241), 41: (0, 249), 42: (0, 243)}, 102: {44: (1, {'@': 120}), 37: (1, {'@': 120}), 9: (1, {'@': 120}), 91: (1, {'@': 120}), 14: (1, {'@': 120}), 33: (1, {'@': 120}), 92: (1, {'@': 120}), 16: (1, {'@': 120}), 0: (1, {'@': 120}), 39: (1, {'@': 120}), 40: (1, {'@': 120}), 35: (1, {'@': 120}), 8: (1, {'@': 120}), 28: (1, {'@': 120}), 32: (1, {'@': 120}), 93: (1, {'@': 120}), 45: (1, {'@': 120}), 42: (1, {'@': 120}), 12: (1, {'@': 120}), 38: (1, {'@': 120}), 36: (1, {'@': 120}), 13: (1, {'@': 120}), 30: (1, {'@': 120}), 17: (1, {'@': 120}), 46: (1, {'@': 120}), 47: (1, {'@': 120}), 48: (1, {'@': 120}), 53: (1, {'@': 120}), 54: (1, {'@': 120}), 55: (1, {'@': 120}), 51: (1, {'@': 120}), 49: (1, {'@': 120}), 50: (1, {'@': 120}), 52: (1, {'@': 120}), 56: (1, {'@': 120}), 95: (1, {'@': 120})}, 103: {44: (1, {'@': 121}), 95: (1, {'@': 121}), 9: (1, {'@': 121}), 96: (1, {'@': 121}), 33: (1, {'@': 121}), 92: (1, {'@': 121}), 97: (1, {'@': 121}), 0: (1, {'@': 121}), 98: (1, {'@': 121}), 35: (1, {'@': 121}), 99: (1, {'@': 121}), 53: (1, {'@': 121}), 93: (1, {'@': 121}), 42: (1, {'@': 121}), 38: (1, {'@': 121}), 30: (1, {'@': 121}), 94: (1, {'@': 121}), 82: (1, {'@': 121}), 84: (1, {'@': 121}), 85: (1, {'@': 121}), 88: (1, {'@': 121}), 89: (1, {'@': 121}), 32: (1, {'@': 121}), 83: (1, {'@': 121}), 90: (1, {'@': 121}), 86: (1, {'@': 121}), 87: (1, {'@': 121}), 49: (1, {'@': 121}), 46: (1, {'@': 121}), 50: (1, {'@': 121}), 47: (1, {'@': 121}), 45: (1, {'@': 121})}, 104: {52: (0, 125)}, 105: {95: (1, {'@': 122}), 42: (1, {'@': 122}), 35: (1, {'@': 122}), 53: (1, {'@': 122}), 99: (1, {'@': 122}), 82: (1, {'@': 122}), 32: (1, {'@': 122}), 83: (1, {'@': 122}), 90: (1, {'@': 122}), 84: (1, {'@': 122}), 85: (1, {'@': 122}), 86: (1, {'@': 122}), 87: (1, {'@': 122}), 88: (1, {'@': 122}), 89: (1, {'@': 122}), 49: (1, {'@': 122}), 46: (1, {'@': 122}), 50: (1, {'@': 122})}, 106: {37: (1, {'@': 123}), 17: (1, {'@': 123}), 33: (1, {'@': 123}), 25: (1, {'@': 123}), 32: (1, {'@': 123}), 53: (1, {'@': 123}), 12: (1, {'@': 123}), 38: (1, {'@': 123}), 30: (1, {'@': 123}), 36: (1, {'@': 123}), 40: (1, {'@': 123}), 14: (1, {'@': 123}), 9: (1, {'@': 123}), 16: (1, {'@': 123}), 0: (1, {'@': 123}), 39: (1, {'@': 123}), 35: (1, {'@': 123}), 8: (1, {'@': 123}), 28: (1, {'@': 123}), 7: (1, {'@': 123}), 6: (1, {'@': 123}), 42: (1, {'@': 123}), 13: (1, {'@': 123}), 3: (1, {'@': 123}), 20: (1, {'@': 123})}, 107: {95: (0, 392), 82: (1, {'@': 124}), 32: (1, {'@': 124}), 83: (1, {'@': 124}), 84: (1, {'@': 124}), 85: (1, {'@': 124}), 86: (1, {'@': 124}), 87: (1, {'@': 124}), 88: (1, {'@': 124}), 89: (1, {'@': 124}), 90: (1, {'@': 124})}, 108: {47: (0, 277), 53: (1, {'@': 125}), 94: (1, {'@': 125}), 90: (1, {'@': 125}), 45: (1, {'@': 125})}, 109: {45: (1, {'@': 126}), 53: (1, {'@': 126}), 47: (1, {'@': 126}), 90: (1, {'@': 126}), 94: (1, {'@': 126})}, 110: {113: (0, 483), 47: (0, 463), 53: (0, 478)}, 111: {32: (1, {'@': 127}), 62: (1, {'@': 127}), 16: (1, {'@': 127}), 70: (1, {'@': 127}), 81: (1, {'@': 127}), 38: (1, {'@': 127}), 71: (1, {'@': 127}), 8: (1, {'@': 127}), 77: (1, {'@': 127})}, 112: {59: (0, 144), 60: (0, 138), 7: (0, 33), 62: (0, 402), 34: (0, 27), 61: (0, 152), 63: (0, 322), 8: (0, 345), 65: (0, 473), 11: (0, 396), 29: (0, 347), 66: (0, 479), 67: (0, 476), 68: (0, 252), 69: (0, 50), 71: (0, 414), 70: (0, 420), 16: (0, 7), 73: (0, 421), 12: (0, 54), 74: (0, 292), 64: (0, 432), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 78: (0, 206), 79: (0, 399), 80: (0, 120), 81: (0, 335), 72: (0, 360)}, 113: {90: (0, 282), 95: (0, 392)}, 114: {101: (1, {'@': 128}), 53: (1, {'@': 128}), 47: (1, {'@': 128})}, 115: {32: (0, 10), 29: (0, 55)}, 116: {94: (0, 126), 16: (0, 153), 101: (1, {'@': 129}), 53: (1, {'@': 129}), 47: (1, {'@': 129})}, 117: {37: (1, {'@': 130}), 48: (1, {'@': 130}), 33: (1, {'@': 130}), 56: (1, {'@': 130}), 46: (1, {'@': 130}), 53: (1, {'@': 130}), 54: (1, {'@': 130}), 38: (1, {'@': 130}), 30: (1, {'@': 130}), 55: (1, {'@': 130}), 51: (1, {'@': 130}), 40: (1, {'@': 130}), 14: (1, {'@': 130}), 9: (1, {'@': 130}), 0: (1, {'@': 130}), 35: (1, {'@': 130}), 49: (1, {'@': 130}), 50: (1, {'@': 130}), 52: (1, {'@': 130}), 28: (1, {'@': 130}), 45: (1, {'@': 130}), 42: (1, {'@': 130}), 47: (1, {'@': 130})}, 118: {1: (0, 355), 4: (0, 448), 2: (0, 366), 5: (0, 386), 8: (0, 345), 11: (0, 57), 10: (0, 2), 12: (0, 45), 13: (0, 5), 15: (0, 133), 16: (0, 183), 17: (0, 146), 19: (0, 211), 23: (0, 216), 26: (0, 305), 29: (0, 411), 31: (0, 426), 32: (0, 10), 34: (0, 397), 36: (0, 356), 38: (0, 247), 39: (0, 338), 41: (0, 249), 24: (0, 287)}, 119: {101: (0, 232)}, 120: {17: (0, 456)}, 121: {29: (0, 372), 32: (0, 10), 57: (0, 195)}, 122: {59: (0, 144), 60: (0, 138), 7: (0, 33), 62: (0, 402), 34: (0, 27), 63: (0, 322), 8: (0, 345), 65: (0, 473), 11: (0, 396), 29: (0, 347), 66: (0, 479), 67: (0, 476), 68: (0, 252), 69: (0, 50), 61: (0, 95), 71: (0, 414), 70: (0, 420), 16: (0, 7), 73: (0, 421), 12: (0, 54), 74: (0, 292), 64: (0, 432), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 78: (0, 206), 79: (0, 399), 80: (0, 120), 81: (0, 335), 72: (0, 360)}, 123: {26: (0, 305), 1: (0, 355), 23: (0, 329), 2: (0, 366), 29: (0, 411), 31: (0, 426), 5: (0, 386), 8: (0, 345), 32: (0, 10), 34: (0, 397), 13: (0, 5), 12: (0, 45), 11: (0, 57), 36: (0, 356), 16: (0, 183), 39: (0, 338), 15: (0, 133), 17: (0, 146)}, 124: {44: (1, {'@': 131}), 37: (1, {'@': 131}), 9: (1, {'@': 131}), 91: (1, {'@': 131}), 14: (1, {'@': 131}), 33: (1, {'@': 131}), 92: (1, {'@': 131}), 16: (1, {'@': 131}), 0: (1, {'@': 131}), 39: (1, {'@': 131}), 40: (1, {'@': 131}), 35: (1, {'@': 131}), 8: (1, {'@': 131}), 28: (1, {'@': 131}), 32: (1, {'@': 131}), 93: (1, {'@': 131}), 45: (1, {'@': 131}), 42: (1, {'@': 131}), 12: (1, {'@': 131}), 38: (1, {'@': 131}), 36: (1, {'@': 131}), 13: (1, {'@': 131}), 30: (1, {'@': 131}), 17: (1, {'@': 131}), 46: (1, {'@': 131}), 47: (1, {'@': 131}), 48: (1, {'@': 131}), 53: (1, {'@': 131}), 54: (1, {'@': 131}), 55: (1, {'@': 131}), 51: (1, {'@': 131}), 49: (1, {'@': 131}), 50: (1, {'@': 131}), 52: (1, {'@': 131}), 56: (1, {'@': 131}), 95: (1, {'@': 131})}, 125: {17: (0, 188)}, 126: {29: (0, 300), 32: (0, 10)}, 127: {29: (0, 411), 31: (0, 426), 5: (0, 386), 8: (0, 345), 32: (0, 10), 34: (0, 397), 13: (0, 5), 12: (0, 45), 11: (0, 57), 36: (0, 356), 16: (0, 183), 26: (0, 377), 39: (0, 338), 15: (0, 133), 95: (0, 458), 17: (0, 146)}, 128: {95: (1, {'@': 132}), 42: (1, {'@': 132}), 35: (1, {'@': 132}), 53: (1, {'@': 132}), 99: (1, {'@': 132}), 82: (1, {'@': 132}), 32: (1, {'@': 132}), 83: (1, {'@': 132}), 90: (1, {'@': 132}), 84: (1, {'@': 132}), 85: (1, {'@': 132}), 86: (1, {'@': 132}), 87: (1, {'@': 132}), 88: (1, {'@': 132}), 89: (1, {'@': 132}), 49: (1, {'@': 132}), 46: (1, {'@': 132}), 50: (1, {'@': 132})}, 129: {29: (0, 428), 32: (0, 10)}, 130: {53: (0, 327)}, 131: {95: (1, {'@': 133}), 42: (1, {'@': 133}), 35: (1, {'@': 133}), 53: (1, {'@': 133}), 99: (1, {'@': 133}), 82: (1, {'@': 133}), 32: (1, {'@': 133}), 83: (1, {'@': 133}), 90: (1, {'@': 133}), 84: (1, {'@': 133}), 85: (1, {'@': 133}), 86: (1, {'@': 133}), 87: (1, {'@': 133}), 88: (1, {'@': 133}), 89: (1, {'@': 133}), 49: (1, {'@': 133}), 46: (1, {'@': 133}), 50: (1, {'@': 133})}, 132: {82: (1, {'@': 134}), 33: (1, {'@': 134}), 92: (1, {'@': 134}), 98: (1, {'@': 134}), 46: (1, {'@': 134}), 88: (1, {'@': 134}), 32: (1, {'@': 134}), 53: (1, {'@': 134}), 93: (1, {'@': 134}), 90: (1, {'@': 134}), 38: (1, {'@': 134}), 30: (1, {'@': 134}), 87: (1, {'@': 134}), 44: (1, {'@': 134}), 95: (1, {'@': 134}), 9: (1, {'@': 134}), 96: (1, {'@': 134}), 97: (1, {'@': 134}), 0: (1, {'@': 134}), 84: (1, {'@': 134}), 85: (1, {'@': 134}), 35: (1, {'@': 134}), 49: (1, {'@': 134}), 99: (1, {'@': 134}), 50: (1, {'@': 134}), 89: (1, {'@': 134}), 45: (1, {'@': 134}), 83: (1, {'@': 134}), 42: (1, {'@': 134}), 86: (1, {'@': 134}), 47: (1, {'@': 134})}, 133: {44: (1, {'@': 135}), 37: (1, {'@': 135}), 9: (1, {'@': 135}), 91: (1, {'@': 135}), 14: (1, {'@': 135}), 33: (1, {'@': 135}), 92: (1, {'@': 135}), 16: (1, {'@': 135}), 0: (1, {'@': 135}), 39: (1, {'@': 135}), 40: (1, {'@': 135}), 35: (1, {'@': 135}), 8: (1, {'@': 135}), 28: (1, {'@': 135}), 32: (1, {'@': 135}), 93: (1, {'@': 135}), 45: (1, {'@': 135}), 42: (1, {'@': 135}), 12: (1, {'@': 135}), 38: (1, {'@': 135}), 36: (1, {'@': 135}), 13: (1, {'@': 135}), 30: (1, {'@': 135}), 17: (1, {'@': 135}), 46: (1, {'@': 135}), 47: (1, {'@': 135}), 48: (1, {'@': 135}), 53: (1, {'@': 135}), 54: (1, {'@': 135}), 55: (1, {'@': 135}), 51: (1, {'@': 135}), 49: (1, {'@': 135}), 50: (1, {'@': 135}), 52: (1, {'@': 135}), 56: (1, {'@': 135}), 95: (1, {'@': 135})}, 134: {82: (1, {'@': 136}), 33: (1, {'@': 136}), 92: (1, {'@': 136}), 98: (1, {'@': 136}), 46: (1, {'@': 136}), 88: (1, {'@': 136}), 32: (1, {'@': 136}), 53: (1, {'@': 136}), 90: (1, {'@': 136}), 38: (1, {'@': 136}), 30: (1, {'@': 136}), 47: (1, {'@': 136}), 95: (1, {'@': 136}), 9: (1, {'@': 136}), 96: (1, {'@': 136}), 97: (1, {'@': 136}), 0: (1, {'@': 136}), 84: (1, {'@': 136}), 85: (1, {'@': 136}), 35: (1, {'@': 136}), 49: (1, {'@': 136}), 99: (1, {'@': 136}), 50: (1, {'@': 136}), 89: (1, {'@': 136}), 45: (1, {'@': 136}), 83: (1, {'@': 136}), 42: (1, {'@': 136}), 86: (1, {'@': 136}), 87: (1, {'@': 136})}, 135: {109: (0, 351), 29: (0, 116), 32: (0, 10)}, 136: {13: (0, 446), 29: (0, 318), 110: (0, 97), 16: (0, 370), 32: (0, 10), 8: (0, 345), 39: (0, 338), 31: (0, 354), 17: (0, 146), 11: (0, 449), 34: (0, 501)}, 137: {82: (1, {'@': 137}), 32: (1, {'@': 137}), 83: (1, {'@': 137}), 84: (1, {'@': 137}), 85: (1, {'@': 137}), 86: (1, {'@': 137}), 87: (1, {'@': 137}), 88: (1, {'@': 137}), 89: (1, {'@': 137}), 90: (1, {'@': 137})}, 138: {94: (0, 51), 92: (0, 40), 114: (0, 22), 44: (1, {'@': 138}), 95: (1, {'@': 138}), 9: (1, {'@': 138}), 96: (1, {'@': 138}), 33: (1, {'@': 138}), 97: (1, {'@': 138}), 0: (1, {'@': 138}), 98: (1, {'@': 138}), 35: (1, {'@': 138}), 99: (1, {'@': 138}), 53: (1, {'@': 138}), 93: (1, {'@': 138}), 42: (1, {'@': 138}), 38: (1, {'@': 138}), 30: (1, {'@': 138}), 82: (1, {'@': 138}), 84: (1, {'@': 138}), 85: (1, {'@': 138}), 88: (1, {'@': 138}), 89: (1, {'@': 138}), 32: (1, {'@': 138}), 83: (1, {'@': 138}), 90: (1, {'@': 138}), 86: (1, {'@': 138}), 87: (1, {'@': 138}), 49: (1, {'@': 138}), 46: (1, {'@': 138}), 50: (1, {'@': 138}), 47: (1, {'@': 138}), 45: (1, {'@': 138})}, 139: {37: (1, {'@': 139}), 28: (1, {'@': 139}), 9: (1, {'@': 139}), 14: (1, {'@': 139}), 33: (1, {'@': 139}), 45: (1, {'@': 139}), 0: (1, {'@': 139}), 42: (1, {'@': 139}), 35: (1, {'@': 139}), 30: (1, {'@': 139}), 40: (1, {'@': 139}), 46: (1, {'@': 139}), 47: (1, {'@': 139}), 48: (1, {'@': 139}), 49: (1, {'@': 139}), 50: (1, {'@': 139}), 52: (1, {'@': 139}), 53: (1, {'@': 139}), 54: (1, {'@': 139}), 55: (1, {'@': 139}), 51: (1, {'@': 139}), 56: (1, {'@': 139})}, 140: {39: (0, 338), 34: (0, 481)}, 141: {93: (0, 450), 44: (1, {'@': 140}), 37: (1, {'@': 140}), 28: (1, {'@': 140}), 9: (1, {'@': 140}), 14: (1, {'@': 140}), 33: (1, {'@': 140}), 45: (1, {'@': 140}), 0: (1, {'@': 140}), 42: (1, {'@': 140}), 38: (1, {'@': 140}), 35: (1, {'@': 140}), 30: (1, {'@': 140}), 40: (1, {'@': 140}), 46: (1, {'@': 140}), 47: (1, {'@': 140}), 48: (1, {'@': 140}), 49: (1, {'@': 140}), 50: (1, {'@': 140}), 52: (1, {'@': 140}), 53: (1, {'@': 140}), 54: (1, {'@': 140}), 55: (1, {'@': 140}), 51: (1, {'@': 140}), 56: (1, {'@': 140})}, 142: {47: (1, {'@': 141}), 40: (1, {'@': 141}), 53: (1, {'@': 141}), 95: (1, {'@': 141}), 56: (1, {'@': 141}), 46: (1, {'@': 141})}, 143: {29: (0, 350), 32: (0, 10)}, 144: {115: (0, 258), 44: (0, 53), 95: (1, {'@': 142}), 9: (1, {'@': 142}), 96: (1, {'@': 142}), 53: (1, {'@': 142}), 33: (1, {'@': 142}), 97: (1, {'@': 142}), 92: (1, {'@': 142}), 0: (1, {'@': 142}), 42: (1, {'@': 142}), 38: (1, {'@': 142}), 98: (1, {'@': 142}), 30: (1, {'@': 142}), 35: (1, {'@': 142}), 99: (1, {'@': 142}), 82: (1, {'@': 142}), 84: (1, {'@': 142}), 85: (1, {'@': 142}), 88: (1, {'@': 142}), 89: (1, {'@': 142}), 32: (1, {'@': 142}), 83: (1, {'@': 142}), 90: (1, {'@': 142}), 86: (1, {'@': 142}), 87: (1, {'@': 142}), 49: (1, {'@': 142}), 46: (1, {'@': 142}), 50: (1, {'@': 142}), 47: (1, {'@': 142}), 45: (1, {'@': 142})}, 145: {59: (0, 144), 60: (0, 138), 7: (0, 33), 62: (0, 402), 34: (0, 27), 63: (0, 322), 8: (0, 345), 65: (0, 473), 11: (0, 396), 29: (0, 347), 66: (0, 479), 67: (0, 476), 68: (0, 252), 69: (0, 50), 61: (0, 201), 71: (0, 414), 70: (0, 420), 16: (0, 7), 73: (0, 421), 12: (0, 54), 74: (0, 292), 64: (0, 432), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 78: (0, 206), 79: (0, 399), 80: (0, 120), 81: (0, 335), 72: (0, 360)}, 146: {59: (0, 144), 60: (0, 138), 62: (0, 402), 86: (0, 341), 63: (0, 322), 65: (0, 473), 84: (0, 1), 66: (0, 479), 67: (0, 476), 83: (0, 310), 68: (0, 252), 70: (0, 420), 29: (0, 256), 107: (0, 48), 7: (0, 33), 75: (0, 434), 105: (0, 8), 32: (0, 10), 39: (0, 338), 82: (0, 56), 36: (0, 46), 38: (0, 444), 79: (0, 399), 81: (0, 335), 72: (0, 360), 34: (0, 27), 61: (0, 60), 8: (0, 345), 106: (0, 9), 11: (0, 396), 69: (0, 50), 71: (0, 414), 16: (0, 7), 73: (0, 421), 12: (0, 54), 74: (0, 292), 64: (0, 432), 76: (0, 297), 89: (0, 4), 88: (0, 26), 33: (0, 270), 77: (0, 440), 78: (0, 206), 108: (0, 0), 80: (0, 120), 85: (0, 52)}, 147: {29: (0, 217), 32: (0, 10)}, 148: {0: (0, 319), 1: (0, 355), 2: (0, 366), 3: (0, 385), 4: (0, 314), 5: (0, 386), 6: (0, 379), 7: (0, 332), 8: (0, 345), 9: (0, 320), 10: (0, 2), 11: (0, 57), 12: (0, 45), 13: (0, 5), 14: (0, 20), 15: (0, 133), 16: (0, 183), 27: (0, 98), 17: (0, 146), 18: (0, 118), 19: (0, 211), 20: (0, 213), 21: (0, 242), 22: (0, 238), 23: (0, 216), 24: (0, 287), 25: (0, 298), 26: (0, 305), 28: (0, 409), 29: (0, 411), 30: (0, 431), 31: (0, 426), 32: (0, 10), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 38: (0, 247), 39: (0, 338), 40: (0, 241), 41: (0, 249), 42: (0, 243)}, 149: {46: (1, {'@': 143}), 47: (1, {'@': 143})}, 150: {30: (0, 172)}, 151: {2: (0, 366), 5: (0, 386), 6: (0, 379), 9: (0, 320), 15: (0, 133), 16: (0, 183), 17: (0, 146), 22: (0, 238), 21: (0, 242), 23: (0, 216), 26: (0, 305), 30: (0, 431), 31: (0, 426), 32: (0, 10), 13: (0, 5), 39: (0, 338), 38: (0, 247), 41: (0, 249), 42: (0, 243), 24: (0, 287), 3: (0, 385), 0: (0, 319), 1: (0, 355), 4: (0, 314), 7: (0, 332), 8: (0, 345), 10: (0, 2), 11: (0, 57), 12: (0, 45), 14: (0, 20), 18: (0, 118), 19: (0, 211), 20: (0, 213), 25: (0, 298), 28: (0, 409), 29: (0, 411), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 40: (0, 241), 27: (0, 208), 45: (1, {'@': 144}), 46: (1, {'@': 144}), 47: (1, {'@': 144}), 54: (1, {'@': 144}), 51: (1, {'@': 144}), 48: (1, {'@': 144}), 49: (1, {'@': 144}), 50: (1, {'@': 144}), 52: (1, {'@': 144}), 53: (1, {'@': 144}), 55: (1, {'@': 144})}, 152: {90: (0, 467), 95: (0, 392)}, 153: {29: (0, 372), 32: (0, 10), 57: (0, 272)}, 154: {48: (0, 342), 116: (0, 209), 45: (1, {'@': 145}), 46: (1, {'@': 145}), 47: (1, {'@': 145}), 54: (1, {'@': 145}), 51: (1, {'@': 145}), 49: (1, {'@': 145}), 50: (1, {'@': 145}), 52: (1, {'@': 145}), 53: (1, {'@': 145}), 55: (1, {'@': 145})}, 155: {53: (0, 137)}, 156: {48: (1, {'@': 146}), 49: (1, {'@': 146}), 46: (1, {'@': 146}), 50: (1, {'@': 146}), 52: (1, {'@': 146}), 53: (1, {'@': 146}), 45: (1, {'@': 146}), 54: (1, {'@': 146}), 55: (1, {'@': 146}), 47: (1, {'@': 146}), 51: (1, {'@': 146})}, 157: {1: (0, 355), 2: (0, 366), 4: (0, 493), 5: (0, 386), 8: (0, 345), 11: (0, 57), 10: (0, 2), 12: (0, 45), 13: (0, 5), 15: (0, 133), 16: (0, 183), 17: (0, 146), 19: (0, 211), 23: (0, 216), 26: (0, 305), 29: (0, 411), 31: (0, 426), 32: (0, 10), 34: (0, 397), 36: (0, 356), 38: (0, 247), 39: (0, 338), 41: (0, 249), 24: (0, 287)}, 158: {32: (1, {'@': 147}), 53: (1, {'@': 147}), 16: (1, {'@': 147}), 39: (1, {'@': 147}), 13: (1, {'@': 147}), 8: (1, {'@': 147}), 17: (1, {'@': 147})}, 159: {94: (0, 100), 45: (1, {'@': 148})}, 160: {47: (1, {'@': 149}), 40: (1, {'@': 149}), 53: (1, {'@': 149}), 95: (1, {'@': 149}), 56: (1, {'@': 149}), 46: (1, {'@': 149})}, 161: {45: (1, {'@': 150}), 46: (1, {'@': 150}), 47: (1, {'@': 150}), 54: (1, {'@': 150}), 51: (1, {'@': 150}), 48: (1, {'@': 150}), 49: (1, {'@': 150}), 50: (1, {'@': 150}), 52: (1, {'@': 150}), 53: (1, {'@': 150}), 55: (1, {'@': 150})}, 162: {82: (1, {'@': 151}), 32: (1, {'@': 151}), 83: (1, {'@': 151}), 84: (1, {'@': 151}), 85: (1, {'@': 151}), 86: (1, {'@': 151}), 87: (1, {'@': 151}), 88: (1, {'@': 151}), 89: (1, {'@': 151}), 90: (1, {'@': 151})}, 163: {0: (0, 319), 1: (0, 355), 2: (0, 366), 3: (0, 385), 4: (0, 314), 5: (0, 386), 6: (0, 379), 7: (0, 332), 8: (0, 345), 9: (0, 320), 10: (0, 2), 11: (0, 57), 12: (0, 45), 13: (0, 5), 14: (0, 20), 15: (0, 133), 16: (0, 183), 17: (0, 146), 18: (0, 118), 19: (0, 211), 20: (0, 213), 21: (0, 242), 22: (0, 238), 23: (0, 216), 24: (0, 287), 27: (0, 99), 25: (0, 298), 26: (0, 305), 28: (0, 409), 29: (0, 411), 30: (0, 431), 31: (0, 426), 32: (0, 10), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 38: (0, 247), 39: (0, 338), 40: (0, 241), 41: (0, 249), 42: (0, 243)}, 164: {54: (1, {'@': 152}), 51: (1, {'@': 152})}, 165: {52: (0, 148)}, 166: {47: (0, 436), 53: (1, {'@': 153})}, 167: {45: (1, {'@': 154}), 46: (1, {'@': 154}), 47: (1, {'@': 154}), 54: (1, {'@': 154}), 51: (1, {'@': 154}), 48: (1, {'@': 154}), 49: (1, {'@': 154}), 50: (1, {'@': 154}), 52: (1, {'@': 154}), 53: (1, {'@': 154}), 55: (1, {'@': 154})}, 168: {40: (0, 279), 95: (0, 101)}, 169: {82: (1, {'@': 155}), 32: (1, {'@': 155}), 83: (1, {'@': 155}), 84: (1, {'@': 155}), 85: (1, {'@': 155}), 86: (1, {'@': 155}), 87: (1, {'@': 155}), 88: (1, {'@': 155}), 89: (1, {'@': 155}), 90: (1, {'@': 155})}, 170: {59: (0, 144), 60: (0, 138), 7: (0, 33), 62: (0, 402), 34: (0, 27), 63: (0, 322), 8: (0, 345), 65: (0, 473), 11: (0, 396), 29: (0, 347), 66: (0, 479), 67: (0, 476), 68: (0, 252), 69: (0, 50), 61: (0, 234), 71: (0, 414), 70: (0, 420), 16: (0, 7), 73: (0, 421), 12: (0, 54), 74: (0, 292), 64: (0, 432), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 78: (0, 206), 79: (0, 399), 80: (0, 120), 81: (0, 335), 72: (0, 360)}, 171: {0: (0, 319), 1: (0, 355), 2: (0, 366), 3: (0, 385), 4: (0, 314), 5: (0, 386), 6: (0, 379), 7: (0, 332), 8: (0, 345), 9: (0, 320), 10: (0, 2), 11: (0, 57), 12: (0, 45), 13: (0, 5), 14: (0, 20), 15: (0, 133), 16: (0, 183), 17: (0, 146), 18: (0, 118), 19: (0, 211), 20: (0, 213), 21: (0, 242), 22: (0, 238), 23: (0, 216), 24: (0, 287), 25: (0, 298), 26: (0, 305), 27: (0, 489), 28: (0, 409), 29: (0, 411), 30: (0, 431), 31: (0, 426), 32: (0, 10), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 38: (0, 247), 39: (0, 338), 40: (0, 241), 41: (0, 249), 42: (0, 243)}, 172: {30: (0, 333)}, 173: {57: (0, 330), 29: (0, 372), 32: (0, 10)}, 174: {92: (0, 480), 44: (1, {'@': 156}), 37: (1, {'@': 156}), 28: (1, {'@': 156}), 9: (1, {'@': 156}), 14: (1, {'@': 156}), 33: (1, {'@': 156}), 93: (1, {'@': 156}), 45: (1, {'@': 156}), 0: (1, {'@': 156}), 42: (1, {'@': 156}), 38: (1, {'@': 156}), 35: (1, {'@': 156}), 30: (1, {'@': 156}), 40: (1, {'@': 156}), 46: (1, {'@': 156}), 47: (1, {'@': 156}), 48: (1, {'@': 156}), 49: (1, {'@': 156}), 50: (1, {'@': 156}), 51: (1, {'@': 156}), 52: (1, {'@': 156}), 53: (1, {'@': 156}), 54: (1, {'@': 156}), 55: (1, {'@': 156}), 56: (1, {'@': 156})}, 175: {29: (0, 308), 32: (0, 10)}, 176: {90: (0, 205)}, 177: {82: (1, {'@': 157}), 32: (1, {'@': 157}), 83: (1, {'@': 157}), 84: (1, {'@': 157}), 85: (1, {'@': 157}), 86: (1, {'@': 157}), 87: (1, {'@': 157}), 88: (1, {'@': 157}), 89: (1, {'@': 157}), 90: (1, {'@': 157})}, 178: {82: (1, {'@': 158}), 32: (1, {'@': 158}), 83: (1, {'@': 158}), 84: (1, {'@': 158}), 85: (1, {'@': 158}), 86: (1, {'@': 158}), 87: (1, {'@': 158}), 88: (1, {'@': 158}), 89: (1, {'@': 158}), 90: (1, {'@': 158})}, 179: {59: (0, 144), 61: (0, 223), 60: (0, 138), 7: (0, 33), 62: (0, 402), 34: (0, 27), 63: (0, 322), 8: (0, 345), 65: (0, 473), 11: (0, 396), 29: (0, 347), 66: (0, 479), 67: (0, 476), 68: (0, 252), 69: (0, 50), 71: (0, 414), 70: (0, 420), 16: (0, 7), 73: (0, 421), 12: (0, 54), 74: (0, 292), 64: (0, 432), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 78: (0, 206), 79: (0, 399), 80: (0, 120), 81: (0, 335), 72: (0, 360)}, 180: {46: (0, 102)}, 181: {0: (0, 319), 1: (0, 355), 2: (0, 366), 3: (0, 385), 4: (0, 314), 5: (0, 386), 6: (0, 379), 7: (0, 332), 8: (0, 345), 9: (0, 320), 10: (0, 2), 11: (0, 57), 12: (0, 45), 13: (0, 5), 14: (0, 20), 15: (0, 133), 16: (0, 183), 17: (0, 146), 18: (0, 118), 19: (0, 211), 20: (0, 213), 21: (0, 242), 22: (0, 238), 23: (0, 216), 24: (0, 287), 25: (0, 298), 26: (0, 305), 27: (0, 251), 28: (0, 409), 29: (0, 411), 30: (0, 431), 31: (0, 426), 32: (0, 10), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 38: (0, 247), 39: (0, 338), 40: (0, 241), 41: (0, 249), 42: (0, 243)}, 182: {45: (0, 325)}, 183: {2: (0, 366), 117: (0, 362), 5: (0, 386), 6: (0, 379), 9: (0, 320), 15: (0, 133), 16: (0, 183), 17: (0, 146), 22: (0, 238), 21: (0, 242), 23: (0, 216), 27: (0, 452), 26: (0, 305), 30: (0, 431), 31: (0, 426), 32: (0, 10), 13: (0, 5), 39: (0, 338), 38: (0, 247), 41: (0, 249), 42: (0, 243), 24: (0, 287), 3: (0, 385), 0: (0, 319), 1: (0, 355), 4: (0, 314), 7: (0, 332), 8: (0, 345), 10: (0, 2), 11: (0, 57), 12: (0, 45), 14: (0, 20), 18: (0, 118), 19: (0, 211), 20: (0, 213), 25: (0, 298), 28: (0, 409), 29: (0, 411), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 40: (0, 241)}, 184: {16: (0, 253), 45: (1, {'@': 159})}, 185: {29: (0, 116), 109: (0, 262), 32: (0, 10)}, 186: {26: (0, 305), 1: (0, 355), 2: (0, 366), 29: (0, 411), 31: (0, 426), 5: (0, 386), 8: (0, 345), 32: (0, 10), 34: (0, 397), 13: (0, 5), 12: (0, 45), 10: (0, 220), 11: (0, 57), 36: (0, 356), 23: (0, 216), 16: (0, 183), 39: (0, 338), 15: (0, 133), 17: (0, 146)}, 187: {29: (0, 62), 32: (0, 10)}, 188: {29: (0, 372), 32: (0, 10), 57: (0, 491)}, 189: {16: (0, 273)}, 190: {34: (0, 73), 39: (0, 338)}, 191: {59: (0, 144), 60: (0, 138), 62: (0, 402), 104: (0, 403), 8: (0, 345), 11: (0, 396), 29: (0, 408), 112: (0, 410), 68: (0, 412), 71: (0, 414), 70: (0, 420), 73: (0, 421), 16: (0, 424), 64: (0, 432), 75: (0, 434), 32: (0, 10), 77: (0, 440), 38: (0, 444), 79: (0, 399), 81: (0, 335), 72: (0, 360), 53: (1, {'@': 114})}, 192: {0: (0, 319), 1: (0, 355), 2: (0, 366), 3: (0, 385), 4: (0, 314), 5: (0, 386), 6: (0, 379), 7: (0, 332), 8: (0, 345), 9: (0, 320), 10: (0, 2), 11: (0, 57), 12: (0, 45), 13: (0, 5), 14: (0, 20), 15: (0, 133), 16: (0, 183), 17: (0, 146), 18: (0, 118), 19: (0, 211), 20: (0, 213), 21: (0, 242), 22: (0, 238), 23: (0, 216), 24: (0, 287), 25: (0, 298), 26: (0, 305), 28: (0, 409), 29: (0, 411), 30: (0, 431), 31: (0, 426), 32: (0, 10), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 38: (0, 247), 39: (0, 338), 40: (0, 241), 41: (0, 249), 27: (0, 16), 42: (0, 243)}, 193: {59: (0, 144), 60: (0, 138), 7: (0, 33), 62: (0, 402), 34: (0, 27), 63: (0, 322), 8: (0, 345), 65: (0, 473), 11: (0, 396), 61: (0, 225), 29: (0, 347), 66: (0, 479), 67: (0, 476), 68: (0, 252), 69: (0, 50), 71: (0, 414), 70: (0, 420), 16: (0, 7), 73: (0, 421), 12: (0, 54), 74: (0, 292), 64: (0, 432), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 78: (0, 206), 79: (0, 399), 80: (0, 120), 81: (0, 335), 72: (0, 360)}, 194: {95: (1, {'@': 160}), 42: (1, {'@': 160}), 35: (1, {'@': 160}), 53: (1, {'@': 160}), 99: (1, {'@': 160}), 82: (1, {'@': 160}), 32: (1, {'@': 160}), 83: (1, {'@': 160}), 90: (1, {'@': 160}), 84: (1, {'@': 160}), 85: (1, {'@': 160}), 86: (1, {'@': 160}), 87: (1, {'@': 160}), 88: (1, {'@': 160}), 89: (1, {'@': 160}), 49: (1, {'@': 160}), 46: (1, {'@': 160}), 50: (1, {'@': 160})}, 195: {90: (0, 257)}, 196: {59: (0, 144), 68: (0, 237), 60: (0, 138), 62: (0, 402), 30: (0, 235), 8: (0, 345), 11: (0, 396), 29: (0, 408), 71: (0, 414), 70: (0, 420), 73: (0, 421), 16: (0, 424), 64: (0, 432), 75: (0, 434), 32: (0, 10), 77: (0, 440), 38: (0, 444), 79: (0, 399), 81: (0, 335), 72: (0, 360)}, 197: {34: (0, 340), 39: (0, 338)}, 198: {50: (0, 259), 95: (0, 392), 53: (1, {'@': 161}), 82: (1, {'@': 161}), 84: (1, {'@': 161}), 85: (1, {'@': 161}), 88: (1, {'@': 161}), 89: (1, {'@': 161}), 32: (1, {'@': 161}), 83: (1, {'@': 161}), 90: (1, {'@': 161}), 86: (1, {'@': 161}), 87: (1, {'@': 161}), 49: (1, {'@': 161}), 46: (1, {'@': 161})}, 199: {38: (0, 466), 37: (1, {'@': 162}), 28: (1, {'@': 162}), 9: (1, {'@': 162}), 14: (1, {'@': 162}), 33: (1, {'@': 162}), 45: (1, {'@': 162}), 0: (1, {'@': 162}), 42: (1, {'@': 162}), 35: (1, {'@': 162}), 30: (1, {'@': 162}), 40: (1, {'@': 162}), 46: (1, {'@': 162}), 47: (1, {'@': 162}), 48: (1, {'@': 162}), 49: (1, {'@': 162}), 50: (1, {'@': 162}), 52: (1, {'@': 162}), 53: (1, {'@': 162}), 54: (1, {'@': 162}), 55: (1, {'@': 162}), 51: (1, {'@': 162}), 56: (1, {'@': 162})}, 200: {32: (1, {'@': 163}), 62: (1, {'@': 163}), 16: (1, {'@': 163}), 70: (1, {'@': 163}), 81: (1, {'@': 163}), 38: (1, {'@': 163}), 71: (1, {'@': 163}), 8: (1, {'@': 163}), 77: (1, {'@': 163})}, 201: {95: (0, 392), 53: (1, {'@': 164}), 82: (1, {'@': 164}), 84: (1, {'@': 164}), 85: (1, {'@': 164}), 88: (1, {'@': 164}), 89: (1, {'@': 164}), 32: (1, {'@': 164}), 83: (1, {'@': 164}), 90: (1, {'@': 164}), 86: (1, {'@': 164}), 87: (1, {'@': 164}), 49: (1, {'@': 164}), 46: (1, {'@': 164}), 50: (1, {'@': 164})}, 202: {95: (1, {'@': 165}), 42: (1, {'@': 165}), 35: (1, {'@': 165}), 53: (1, {'@': 165}), 99: (1, {'@': 165}), 82: (1, {'@': 165}), 32: (1, {'@': 165}), 83: (1, {'@': 165}), 90: (1, {'@': 165}), 84: (1, {'@': 165}), 85: (1, {'@': 165}), 86: (1, {'@': 165}), 87: (1, {'@': 165}), 88: (1, {'@': 165}), 89: (1, {'@': 165}), 49: (1, {'@': 165}), 46: (1, {'@': 165}), 50: (1, {'@': 165})}, 203: {82: (1, {'@': 166}), 33: (1, {'@': 166}), 92: (1, {'@': 166}), 98: (1, {'@': 166}), 46: (1, {'@': 166}), 88: (1, {'@': 166}), 32: (1, {'@': 166}), 53: (1, {'@': 166}), 93: (1, {'@': 166}), 90: (1, {'@': 166}), 38: (1, {'@': 166}), 30: (1, {'@': 166}), 87: (1, {'@': 166}), 44: (1, {'@': 166}), 95: (1, {'@': 166}), 9: (1, {'@': 166}), 96: (1, {'@': 166}), 97: (1, {'@': 166}), 0: (1, {'@': 166}), 84: (1, {'@': 166}), 85: (1, {'@': 166}), 35: (1, {'@': 166}), 49: (1, {'@': 166}), 99: (1, {'@': 166}), 50: (1, {'@': 166}), 89: (1, {'@': 166}), 45: (1, {'@': 166}), 83: (1, {'@': 166}), 42: (1, {'@': 166}), 86: (1, {'@': 166}), 47: (1, {'@': 166})}, 204: {32: (1, {'@': 167}), 62: (1, {'@': 167}), 16: (1, {'@': 167}), 70: (1, {'@': 167}), 81: (1, {'@': 167}), 38: (1, {'@': 167}), 71: (1, {'@': 167}), 8: (1, {'@': 167}), 77: (1, {'@': 167})}, 205: {95: (1, {'@': 168}), 42: (1, {'@': 168}), 35: (1, {'@': 168}), 53: (1, {'@': 168}), 99: (1, {'@': 168}), 82: (1, {'@': 168}), 32: (1, {'@': 168}), 83: (1, {'@': 168}), 90: (1, {'@': 168}), 84: (1, {'@': 168}), 85: (1, {'@': 168}), 86: (1, {'@': 168}), 87: (1, {'@': 168}), 88: (1, {'@': 168}), 89: (1, {'@': 168}), 49: (1, {'@': 168}), 46: (1, {'@': 168}), 50: (1, {'@': 168})}, 206: {118: (0, 460), 32: (0, 10), 29: (0, 372), 57: (0, 159)}, 207: {47: (1, {'@': 169}), 40: (1, {'@': 169}), 53: (1, {'@': 169}), 95: (1, {'@': 169}), 56: (1, {'@': 169}), 46: (1, {'@': 169})}, 208: {48: (1, {'@': 170}), 49: (1, {'@': 170}), 46: (1, {'@': 170}), 50: (1, {'@': 170}), 52: (1, {'@': 170}), 53: (1, {'@': 170}), 45: (1, {'@': 170}), 54: (1, {'@': 170}), 55: (1, {'@': 170}), 47: (1, {'@': 170}), 51: (1, {'@': 170})}, 209: {48: (0, 151), 45: (1, {'@': 171}), 46: (1, {'@': 171}), 47: (1, {'@': 171}), 54: (1, {'@': 171}), 51: (1, {'@': 171}), 49: (1, {'@': 171}), 50: (1, {'@': 171}), 52: (1, {'@': 171}), 53: (1, {'@': 171}), 55: (1, {'@': 171})}, 210: {44: (1, {'@': 172}), 37: (1, {'@': 172}), 9: (1, {'@': 172}), 91: (1, {'@': 172}), 14: (1, {'@': 172}), 33: (1, {'@': 172}), 92: (1, {'@': 172}), 16: (1, {'@': 172}), 0: (1, {'@': 172}), 39: (1, {'@': 172}), 40: (1, {'@': 172}), 35: (1, {'@': 172}), 8: (1, {'@': 172}), 28: (1, {'@': 172}), 32: (1, {'@': 172}), 93: (1, {'@': 172}), 45: (1, {'@': 172}), 42: (1, {'@': 172}), 12: (1, {'@': 172}), 38: (1, {'@': 172}), 36: (1, {'@': 172}), 13: (1, {'@': 172}), 30: (1, {'@': 172}), 17: (1, {'@': 172}), 46: (1, {'@': 172}), 47: (1, {'@': 172}), 48: (1, {'@': 172}), 53: (1, {'@': 172}), 54: (1, {'@': 172}), 55: (1, {'@': 172}), 51: (1, {'@': 172}), 49: (1, {'@': 172}), 50: (1, {'@': 172}), 52: (1, {'@': 172}), 56: (1, {'@': 172}), 95: (1, {'@': 172})}, 211: {38: (0, 231), 119: (0, 199), 37: (1, {'@': 173}), 28: (1, {'@': 173}), 9: (1, {'@': 173}), 14: (1, {'@': 173}), 33: (1, {'@': 173}), 45: (1, {'@': 173}), 0: (1, {'@': 173}), 42: (1, {'@': 173}), 35: (1, {'@': 173}), 30: (1, {'@': 173}), 40: (1, {'@': 173}), 46: (1, {'@': 173}), 47: (1, {'@': 173}), 48: (1, {'@': 173}), 49: (1, {'@': 173}), 50: (1, {'@': 173}), 52: (1, {'@': 173}), 53: (1, {'@': 173}), 54: (1, {'@': 173}), 55: (1, {'@': 173}), 51: (1, {'@': 173}), 56: (1, {'@': 173})}, 212: {39: (0, 338), 34: (0, 487)}, 213: {2: (0, 366), 27: (0, 154), 5: (0, 386), 6: (0, 379), 9: (0, 320), 15: (0, 133), 16: (0, 183), 17: (0, 146), 22: (0, 238), 21: (0, 242), 23: (0, 216), 26: (0, 305), 30: (0, 431), 31: (0, 426), 32: (0, 10), 13: (0, 5), 39: (0, 338), 38: (0, 247), 41: (0, 249), 42: (0, 243), 24: (0, 287), 3: (0, 385), 0: (0, 319), 1: (0, 355), 4: (0, 314), 7: (0, 332), 8: (0, 345), 10: (0, 2), 11: (0, 57), 12: (0, 45), 14: (0, 20), 18: (0, 118), 19: (0, 211), 20: (0, 213), 25: (0, 298), 28: (0, 409), 29: (0, 411), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 40: (0, 241)}, 214: {95: (0, 392), 82: (1, {'@': 174}), 32: (1, {'@': 174}), 83: (1, {'@': 174}), 84: (1, {'@': 174}), 85: (1, {'@': 174}), 86: (1, {'@': 174}), 87: (1, {'@': 174}), 88: (1, {'@': 174}), 89: (1, {'@': 174}), 90: (1, {'@': 174})}, 215: {51: (0, 228), 54: (0, 161), 120: (0, 164)}, 216: {121: (0, 141), 93: (0, 123), 44: (1, {'@': 175}), 37: (1, {'@': 175}), 28: (1, {'@': 175}), 9: (1, {'@': 175}), 14: (1, {'@': 175}), 33: (1, {'@': 175}), 45: (1, {'@': 175}), 0: (1, {'@': 175}), 42: (1, {'@': 175}), 38: (1, {'@': 175}), 35: (1, {'@': 175}), 30: (1, {'@': 175}), 40: (1, {'@': 175}), 46: (1, {'@': 175}), 47: (1, {'@': 175}), 48: (1, {'@': 175}), 49: (1, {'@': 175}), 50: (1, {'@': 175}), 52: (1, {'@': 175}), 53: (1, {'@': 175}), 54: (1, {'@': 175}), 55: (1, {'@': 175}), 51: (1, {'@': 175}), 56: (1, {'@': 175})}, 217: {16: (0, 465), 56: (0, 17)}, 218: {40: (0, 47)}, 219: {39: (0, 338), 34: (0, 155)}, 220: {37: (1, {'@': 176}), 48: (1, {'@': 176}), 33: (1, {'@': 176}), 56: (1, {'@': 176}), 46: (1, {'@': 176}), 53: (1, {'@': 176}), 54: (1, {'@': 176}), 38: (1, {'@': 176}), 30: (1, {'@': 176}), 55: (1, {'@': 176}), 40: (1, {'@': 176}), 51: (1, {'@': 176}), 44: (1, {'@': 176}), 9: (1, {'@': 176}), 14: (1, {'@': 176}), 0: (1, {'@': 176}), 35: (1, {'@': 176}), 49: (1, {'@': 176}), 50: (1, {'@': 176}), 52: (1, {'@': 176}), 28: (1, {'@': 176}), 45: (1, {'@': 176}), 42: (1, {'@': 176}), 47: (1, {'@': 176})}, 221: {49: (0, 455)}, 222: {29: (0, 110), 32: (0, 10)}, 223: {95: (0, 392), 53: (1, {'@': 177}), 82: (1, {'@': 177}), 84: (1, {'@': 177}), 85: (1, {'@': 177}), 88: (1, {'@': 177}), 89: (1, {'@': 177}), 32: (1, {'@': 177}), 83: (1, {'@': 177}), 90: (1, {'@': 177}), 86: (1, {'@': 177}), 87: (1, {'@': 177}), 49: (1, {'@': 177}), 46: (1, {'@': 177}), 50: (1, {'@': 177})}, 224: {29: (0, 116), 109: (0, 506), 32: (0, 10)}, 225: {95: (0, 392), 53: (1, {'@': 178}), 82: (1, {'@': 178}), 84: (1, {'@': 178}), 85: (1, {'@': 178}), 88: (1, {'@': 178}), 89: (1, {'@': 178}), 32: (1, {'@': 178}), 83: (1, {'@': 178}), 90: (1, {'@': 178}), 86: (1, {'@': 178}), 87: (1, {'@': 178}), 49: (1, {'@': 178}), 46: (1, {'@': 178}), 50: (1, {'@': 178})}, 226: {14: (1, {'@': 179}), 9: (1, {'@': 179}), 37: (1, {'@': 179}), 17: (1, {'@': 179}), 33: (1, {'@': 179}), 16: (1, {'@': 179}), 0: (1, {'@': 179}), 39: (1, {'@': 179}), 35: (1, {'@': 179}), 8: (1, {'@': 179}), 28: (1, {'@': 179}), 32: (1, {'@': 179}), 42: (1, {'@': 179}), 12: (1, {'@': 179}), 38: (1, {'@': 179}), 30: (1, {'@': 179}), 36: (1, {'@': 179}), 13: (1, {'@': 179}), 40: (1, {'@': 179}), 48: (1, {'@': 179}), 46: (1, {'@': 179}), 53: (1, {'@': 179}), 54: (1, {'@': 179}), 55: (1, {'@': 179}), 51: (1, {'@': 179}), 49: (1, {'@': 179}), 50: (1, {'@': 179}), 52: (1, {'@': 179}), 45: (1, {'@': 179}), 47: (1, {'@': 179})}, 227: {54: (1, {'@': 180}), 51: (1, {'@': 180})}, 228: {13: (0, 446), 29: (0, 318), 110: (0, 168), 16: (0, 370), 32: (0, 10), 8: (0, 345), 39: (0, 338), 31: (0, 354), 17: (0, 146), 11: (0, 449), 34: (0, 501)}, 229: {40: (0, 279), 47: (1, {'@': 181}), 53: (1, {'@': 181}), 95: (1, {'@': 181}), 56: (1, {'@': 181}), 46: (1, {'@': 181})}, 230: {0: (0, 319), 1: (0, 355), 2: (0, 366), 3: (0, 385), 4: (0, 314), 5: (0, 386), 6: (0, 379), 7: (0, 332), 8: (0, 345), 9: (0, 320), 10: (0, 2), 11: (0, 57), 12: (0, 45), 13: (0, 5), 27: (0, 149), 14: (0, 20), 15: (0, 133), 16: (0, 183), 17: (0, 146), 18: (0, 118), 19: (0, 211), 20: (0, 213), 21: (0, 242), 22: (0, 238), 23: (0, 216), 24: (0, 287), 25: (0, 298), 26: (0, 305), 28: (0, 409), 29: (0, 411), 30: (0, 431), 31: (0, 426), 32: (0, 10), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 38: (0, 247), 39: (0, 338), 40: (0, 241), 41: (0, 249), 42: (0, 243)}, 231: {1: (0, 355), 2: (0, 366), 5: (0, 386), 8: (0, 345), 12: (0, 45), 11: (0, 57), 10: (0, 2), 13: (0, 5), 15: (0, 133), 16: (0, 183), 17: (0, 146), 23: (0, 216), 26: (0, 305), 19: (0, 395), 29: (0, 411), 31: (0, 426), 32: (0, 10), 34: (0, 397), 36: (0, 356), 39: (0, 338)}, 232: {122: (0, 301), 17: (0, 260)}, 233: {37: (1, {'@': 182}), 17: (1, {'@': 182}), 33: (1, {'@': 182}), 25: (1, {'@': 182}), 32: (1, {'@': 182}), 53: (1, {'@': 182}), 12: (1, {'@': 182}), 38: (1, {'@': 182}), 30: (1, {'@': 182}), 36: (1, {'@': 182}), 40: (1, {'@': 182}), 14: (1, {'@': 182}), 9: (1, {'@': 182}), 16: (1, {'@': 182}), 0: (1, {'@': 182}), 39: (1, {'@': 182}), 35: (1, {'@': 182}), 8: (1, {'@': 182}), 28: (1, {'@': 182}), 7: (1, {'@': 182}), 6: (1, {'@': 182}), 42: (1, {'@': 182}), 13: (1, {'@': 182}), 3: (1, {'@': 182}), 20: (1, {'@': 182})}, 234: {95: (0, 392), 53: (1, {'@': 183}), 82: (1, {'@': 183}), 84: (1, {'@': 183}), 85: (1, {'@': 183}), 88: (1, {'@': 183}), 89: (1, {'@': 183}), 32: (1, {'@': 183}), 83: (1, {'@': 183}), 90: (1, {'@': 183}), 86: (1, {'@': 183}), 87: (1, {'@': 183}), 49: (1, {'@': 183}), 46: (1, {'@': 183}), 50: (1, {'@': 183})}, 235: {32: (1, {'@': 184}), 62: (1, {'@': 184}), 16: (1, {'@': 184}), 70: (1, {'@': 184}), 81: (1, {'@': 184}), 38: (1, {'@': 184}), 71: (1, {'@': 184}), 8: (1, {'@': 184}), 77: (1, {'@': 184})}, 236: {18: (0, 157), 0: (0, 319), 14: (0, 20), 22: (0, 238), 28: (0, 409), 9: (0, 320), 40: (0, 241), 30: (0, 431), 33: (0, 422), 35: (0, 416), 42: (0, 243), 21: (0, 242), 37: (0, 226), 56: (0, 192)}, 237: {95: (1, {'@': 185}), 42: (1, {'@': 185}), 35: (1, {'@': 185}), 53: (1, {'@': 185}), 99: (1, {'@': 185}), 82: (1, {'@': 185}), 32: (1, {'@': 185}), 83: (1, {'@': 185}), 90: (1, {'@': 185}), 84: (1, {'@': 185}), 85: (1, {'@': 185}), 86: (1, {'@': 185}), 87: (1, {'@': 185}), 88: (1, {'@': 185}), 89: (1, {'@': 185}), 49: (1, {'@': 185}), 46: (1, {'@': 185}), 50: (1, {'@': 185})}, 238: {0: (0, 319), 14: (0, 20), 28: (0, 409), 21: (0, 21), 40: (0, 241), 30: (0, 431), 33: (0, 422), 35: (0, 416), 42: (0, 243), 9: (0, 320), 37: (0, 226), 32: (1, {'@': 186}), 16: (1, {'@': 186}), 39: (1, {'@': 186}), 12: (1, {'@': 186}), 38: (1, {'@': 186}), 36: (1, {'@': 186}), 13: (1, {'@': 186}), 8: (1, {'@': 186}), 17: (1, {'@': 186}), 48: (1, {'@': 186}), 49: (1, {'@': 186}), 46: (1, {'@': 186}), 50: (1, {'@': 186}), 52: (1, {'@': 186}), 53: (1, {'@': 186}), 45: (1, {'@': 186}), 54: (1, {'@': 186}), 55: (1, {'@': 186}), 47: (1, {'@': 186}), 51: (1, {'@': 186})}, 239: {44: (1, {'@': 187}), 37: (1, {'@': 187}), 9: (1, {'@': 187}), 91: (1, {'@': 187}), 14: (1, {'@': 187}), 33: (1, {'@': 187}), 92: (1, {'@': 187}), 16: (1, {'@': 187}), 0: (1, {'@': 187}), 39: (1, {'@': 187}), 40: (1, {'@': 187}), 35: (1, {'@': 187}), 8: (1, {'@': 187}), 28: (1, {'@': 187}), 32: (1, {'@': 187}), 93: (1, {'@': 187}), 45: (1, {'@': 187}), 42: (1, {'@': 187}), 12: (1, {'@': 187}), 38: (1, {'@': 187}), 36: (1, {'@': 187}), 13: (1, {'@': 187}), 30: (1, {'@': 187}), 17: (1, {'@': 187}), 46: (1, {'@': 187}), 47: (1, {'@': 187}), 48: (1, {'@': 187}), 53: (1, {'@': 187}), 54: (1, {'@': 187}), 55: (1, {'@': 187}), 51: (1, {'@': 187}), 49: (1, {'@': 187}), 50: (1, {'@': 187}), 52: (1, {'@': 187}), 56: (1, {'@': 187}), 95: (1, {'@': 187})}, 240: {34: (0, 462), 39: (0, 338)}, 241: {14: (1, {'@': 188}), 9: (1, {'@': 188}), 37: (1, {'@': 188}), 17: (1, {'@': 188}), 33: (1, {'@': 188}), 16: (1, {'@': 188}), 0: (1, {'@': 188}), 39: (1, {'@': 188}), 35: (1, {'@': 188}), 8: (1, {'@': 188}), 28: (1, {'@': 188}), 32: (1, {'@': 188}), 42: (1, {'@': 188}), 12: (1, {'@': 188}), 38: (1, {'@': 188}), 30: (1, {'@': 188}), 36: (1, {'@': 188}), 13: (1, {'@': 188}), 40: (1, {'@': 188}), 48: (1, {'@': 188}), 46: (1, {'@': 188}), 53: (1, {'@': 188}), 54: (1, {'@': 188}), 55: (1, {'@': 188}), 51: (1, {'@': 188}), 49: (1, {'@': 188}), 50: (1, {'@': 188}), 52: (1, {'@': 188}), 45: (1, {'@': 188}), 47: (1, {'@': 188})}, 242: {14: (1, {'@': 189}), 9: (1, {'@': 189}), 37: (1, {'@': 189}), 17: (1, {'@': 189}), 33: (1, {'@': 189}), 16: (1, {'@': 189}), 0: (1, {'@': 189}), 39: (1, {'@': 189}), 35: (1, {'@': 189}), 8: (1, {'@': 189}), 28: (1, {'@': 189}), 32: (1, {'@': 189}), 42: (1, {'@': 189}), 12: (1, {'@': 189}), 38: (1, {'@': 189}), 30: (1, {'@': 189}), 36: (1, {'@': 189}), 13: (1, {'@': 189}), 40: (1, {'@': 189}), 48: (1, {'@': 189}), 49: (1, {'@': 189}), 46: (1, {'@': 189}), 50: (1, {'@': 189}), 51: (1, {'@': 189}), 52: (1, {'@': 189}), 53: (1, {'@': 189}), 45: (1, {'@': 189}), 54: (1, {'@': 189}), 47: (1, {'@': 189}), 55: (1, {'@': 189})}, 243: {14: (1, {'@': 190}), 9: (1, {'@': 190}), 37: (1, {'@': 190}), 17: (1, {'@': 190}), 33: (1, {'@': 190}), 16: (1, {'@': 190}), 0: (1, {'@': 190}), 39: (1, {'@': 190}), 35: (1, {'@': 190}), 8: (1, {'@': 190}), 28: (1, {'@': 190}), 32: (1, {'@': 190}), 42: (1, {'@': 190}), 12: (1, {'@': 190}), 38: (1, {'@': 190}), 30: (1, {'@': 190}), 36: (1, {'@': 190}), 13: (1, {'@': 190}), 40: (1, {'@': 190}), 48: (1, {'@': 190}), 46: (1, {'@': 190}), 53: (1, {'@': 190}), 54: (1, {'@': 190}), 55: (1, {'@': 190}), 51: (1, {'@': 190}), 49: (1, {'@': 190}), 50: (1, {'@': 190}), 52: (1, {'@': 190}), 45: (1, {'@': 190}), 47: (1, {'@': 190})}, 244: {32: (1, {'@': 191}), 62: (1, {'@': 191}), 16: (1, {'@': 191}), 70: (1, {'@': 191}), 81: (1, {'@': 191}), 38: (1, {'@': 191}), 71: (1, {'@': 191}), 8: (1, {'@': 191}), 77: (1, {'@': 191})}, 245: {44: (1, {'@': 192}), 37: (1, {'@': 192}), 9: (1, {'@': 192}), 91: (1, {'@': 192}), 14: (1, {'@': 192}), 33: (1, {'@': 192}), 92: (1, {'@': 192}), 16: (1, {'@': 192}), 0: (1, {'@': 192}), 39: (1, {'@': 192}), 40: (1, {'@': 192}), 35: (1, {'@': 192}), 8: (1, {'@': 192}), 28: (1, {'@': 192}), 32: (1, {'@': 192}), 93: (1, {'@': 192}), 45: (1, {'@': 192}), 42: (1, {'@': 192}), 12: (1, {'@': 192}), 38: (1, {'@': 192}), 36: (1, {'@': 192}), 13: (1, {'@': 192}), 30: (1, {'@': 192}), 17: (1, {'@': 192}), 46: (1, {'@': 192}), 47: (1, {'@': 192}), 48: (1, {'@': 192}), 53: (1, {'@': 192}), 54: (1, {'@': 192}), 55: (1, {'@': 192}), 51: (1, {'@': 192}), 49: (1, {'@': 192}), 50: (1, {'@': 192}), 52: (1, {'@': 192}), 56: (1, {'@': 192}), 95: (1, {'@': 192})}, 246: {123: (0, 215), 51: (0, 228), 120: (0, 227)}, 247: {1: (0, 355), 2: (0, 366), 5: (0, 386), 8: (0, 345), 12: (0, 45), 11: (0, 57), 10: (0, 2), 13: (0, 5), 15: (0, 133), 16: (0, 183), 17: (0, 146), 19: (0, 211), 23: (0, 216), 24: (0, 139), 26: (0, 305), 29: (0, 411), 31: (0, 426), 32: (0, 10), 34: (0, 397), 36: (0, 356), 39: (0, 338)}, 248: {53: (0, 276)}, 249: {37: (1, {'@': 193}), 28: (1, {'@': 193}), 9: (1, {'@': 193}), 14: (1, {'@': 193}), 33: (1, {'@': 193}), 45: (1, {'@': 193}), 0: (1, {'@': 193}), 42: (1, {'@': 193}), 35: (1, {'@': 193}), 30: (1, {'@': 193}), 40: (1, {'@': 193}), 46: (1, {'@': 193}), 47: (1, {'@': 193}), 48: (1, {'@': 193}), 53: (1, {'@': 193}), 54: (1, {'@': 193}), 55: (1, {'@': 193}), 51: (1, {'@': 193}), 49: (1, {'@': 193}), 50: (1, {'@': 193}), 52: (1, {'@': 193}), 56: (1, {'@': 193})}, 250: {59: (0, 144), 60: (0, 138), 7: (0, 33), 62: (0, 402), 34: (0, 27), 63: (0, 322), 8: (0, 345), 65: (0, 473), 11: (0, 396), 61: (0, 37), 29: (0, 347), 66: (0, 479), 67: (0, 476), 68: (0, 252), 69: (0, 50), 71: (0, 414), 70: (0, 420), 16: (0, 7), 73: (0, 421), 12: (0, 54), 74: (0, 292), 64: (0, 432), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 78: (0, 206), 79: (0, 399), 80: (0, 120), 81: (0, 335), 72: (0, 360)}, 251: {46: (0, 294)}, 252: {30: (0, 316), 0: (0, 196), 96: (0, 244), 33: (0, 11), 9: (0, 39), 97: (0, 404), 124: (0, 288), 98: (0, 285), 125: (0, 68), 92: (0, 317), 126: (0, 311), 95: (1, {'@': 194}), 42: (1, {'@': 194}), 35: (1, {'@': 194}), 53: (1, {'@': 194}), 99: (1, {'@': 194}), 82: (1, {'@': 194}), 32: (1, {'@': 194}), 83: (1, {'@': 194}), 90: (1, {'@': 194}), 84: (1, {'@': 194}), 85: (1, {'@': 194}), 86: (1, {'@': 194}), 87: (1, {'@': 194}), 88: (1, {'@': 194}), 89: (1, {'@': 194}), 49: (1, {'@': 194}), 46: (1, {'@': 194}), 50: (1, {'@': 194})}, 253: {29: (0, 372), 57: (0, 296), 32: (0, 10)}, 254: {56: (0, 442)}, 255: {34: (0, 304), 8: (0, 345), 39: (0, 338), 11: (0, 306)}, 256: {100: (0, 104), 13: (0, 337), 16: (0, 406), 52: (0, 378), 94: (0, 147), 44: (1, {'@': 195}), 95: (1, {'@': 195}), 9: (1, {'@': 195}), 96: (1, {'@': 195}), 33: (1, {'@': 195}), 92: (1, {'@': 195}), 97: (1, {'@': 195}), 0: (1, {'@': 195}), 98: (1, {'@': 195}), 35: (1, {'@': 195}), 99: (1, {'@': 195}), 93: (1, {'@': 195}), 90: (1, {'@': 195}), 42: (1, {'@': 195}), 38: (1, {'@': 195}), 30: (1, {'@': 195})}, 257: {95: (1, {'@': 196}), 42: (1, {'@': 196}), 35: (1, {'@': 196}), 53: (1, {'@': 196}), 99: (1, {'@': 196}), 82: (1, {'@': 196}), 32: (1, {'@': 196}), 83: (1, {'@': 196}), 90: (1, {'@': 196}), 84: (1, {'@': 196}), 85: (1, {'@': 196}), 86: (1, {'@': 196}), 87: (1, {'@': 196}), 88: (1, {'@': 196}), 89: (1, {'@': 196}), 49: (1, {'@': 196}), 46: (1, {'@': 196}), 50: (1, {'@': 196})}, 258: {44: (0, 413), 95: (1, {'@': 197}), 9: (1, {'@': 197}), 96: (1, {'@': 197}), 53: (1, {'@': 197}), 33: (1, {'@': 197}), 97: (1, {'@': 197}), 92: (1, {'@': 197}), 0: (1, {'@': 197}), 42: (1, {'@': 197}), 38: (1, {'@': 197}), 98: (1, {'@': 197}), 30: (1, {'@': 197}), 35: (1, {'@': 197}), 99: (1, {'@': 197}), 82: (1, {'@': 197}), 84: (1, {'@': 197}), 85: (1, {'@': 197}), 88: (1, {'@': 197}), 89: (1, {'@': 197}), 32: (1, {'@': 197}), 83: (1, {'@': 197}), 90: (1, {'@': 197}), 86: (1, {'@': 197}), 87: (1, {'@': 197}), 49: (1, {'@': 197}), 46: (1, {'@': 197}), 50: (1, {'@': 197}), 47: (1, {'@': 197}), 45: (1, {'@': 197})}, 259: {59: (0, 144), 60: (0, 138), 7: (0, 33), 62: (0, 402), 34: (0, 27), 63: (0, 322), 8: (0, 345), 65: (0, 473), 11: (0, 396), 29: (0, 347), 66: (0, 479), 67: (0, 476), 68: (0, 252), 69: (0, 50), 61: (0, 302), 71: (0, 414), 70: (0, 420), 16: (0, 7), 73: (0, 421), 12: (0, 54), 74: (0, 292), 64: (0, 432), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 78: (0, 206), 79: (0, 399), 80: (0, 120), 81: (0, 335), 72: (0, 360)}, 260: {39: (0, 338), 111: (0, 433), 34: (0, 407), 90: (0, 405)}, 261: {47: (1, {'@': 198}), 53: (1, {'@': 198})}, 262: {47: (0, 135)}, 263: {53: (0, 307)}, 264: {0: (0, 319), 1: (0, 355), 2: (0, 366), 3: (0, 385), 4: (0, 314), 5: (0, 386), 6: (0, 379), 7: (0, 332), 8: (0, 345), 9: (0, 320), 10: (0, 2), 11: (0, 57), 12: (0, 45), 13: (0, 5), 14: (0, 20), 15: (0, 133), 16: (0, 183), 17: (0, 146), 18: (0, 118), 27: (0, 361), 19: (0, 211), 20: (0, 213), 21: (0, 242), 22: (0, 238), 23: (0, 216), 24: (0, 287), 25: (0, 298), 26: (0, 305), 28: (0, 409), 29: (0, 411), 30: (0, 431), 31: (0, 426), 32: (0, 10), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 38: (0, 247), 39: (0, 338), 40: (0, 241), 41: (0, 249), 42: (0, 243)}, 265: {53: (0, 309)}, 266: {44: (1, {'@': 199}), 37: (1, {'@': 199}), 9: (1, {'@': 199}), 91: (1, {'@': 199}), 14: (1, {'@': 199}), 33: (1, {'@': 199}), 92: (1, {'@': 199}), 16: (1, {'@': 199}), 0: (1, {'@': 199}), 39: (1, {'@': 199}), 40: (1, {'@': 199}), 35: (1, {'@': 199}), 8: (1, {'@': 199}), 28: (1, {'@': 199}), 32: (1, {'@': 199}), 93: (1, {'@': 199}), 45: (1, {'@': 199}), 42: (1, {'@': 199}), 12: (1, {'@': 199}), 38: (1, {'@': 199}), 36: (1, {'@': 199}), 13: (1, {'@': 199}), 30: (1, {'@': 199}), 17: (1, {'@': 199}), 46: (1, {'@': 199}), 47: (1, {'@': 199}), 48: (1, {'@': 199}), 53: (1, {'@': 199}), 54: (1, {'@': 199}), 55: (1, {'@': 199}), 51: (1, {'@': 199}), 49: (1, {'@': 199}), 50: (1, {'@': 199}), 52: (1, {'@': 199}), 56: (1, {'@': 199}), 95: (1, {'@': 199})}, 267: {30: (0, 63)}, 268: {53: (0, 451)}, 269: {82: (1, {'@': 200}), 32: (1, {'@': 200}), 83: (1, {'@': 200}), 84: (1, {'@': 200}), 85: (1, {'@': 200}), 86: (1, {'@': 200}), 87: (1, {'@': 200}), 88: (1, {'@': 200}), 89: (1, {'@': 200}), 90: (1, {'@': 200})}, 270: {59: (0, 144), 60: (0, 138), 62: (0, 402), 34: (0, 27), 8: (0, 345), 11: (0, 396), 29: (0, 347), 68: (0, 252), 65: (0, 500), 71: (0, 414), 70: (0, 420), 16: (0, 7), 73: (0, 421), 12: (0, 54), 64: (0, 432), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 79: (0, 399), 80: (0, 120), 81: (0, 335), 72: (0, 360)}, 271: {47: (1, {'@': 201}), 90: (1, {'@': 201})}, 272: {53: (0, 114)}, 273: {59: (0, 144), 60: (0, 138), 62: (0, 402), 104: (0, 403), 8: (0, 345), 11: (0, 396), 29: (0, 408), 68: (0, 412), 71: (0, 414), 70: (0, 420), 73: (0, 421), 16: (0, 424), 64: (0, 432), 75: (0, 434), 112: (0, 454), 32: (0, 10), 77: (0, 440), 38: (0, 444), 79: (0, 399), 81: (0, 335), 72: (0, 360), 53: (1, {'@': 114})}, 274: {40: (0, 279), 47: (0, 30), 53: (0, 32)}, 275: {56: (0, 86)}, 276: {44: (1, {'@': 202}), 95: (1, {'@': 202}), 9: (1, {'@': 202}), 96: (1, {'@': 202}), 33: (1, {'@': 202}), 92: (1, {'@': 202}), 97: (1, {'@': 202}), 0: (1, {'@': 202}), 98: (1, {'@': 202}), 35: (1, {'@': 202}), 99: (1, {'@': 202}), 53: (1, {'@': 202}), 93: (1, {'@': 202}), 42: (1, {'@': 202}), 38: (1, {'@': 202}), 30: (1, {'@': 202}), 94: (1, {'@': 202}), 82: (1, {'@': 202}), 84: (1, {'@': 202}), 85: (1, {'@': 202}), 88: (1, {'@': 202}), 89: (1, {'@': 202}), 32: (1, {'@': 202}), 83: (1, {'@': 202}), 90: (1, {'@': 202}), 86: (1, {'@': 202}), 87: (1, {'@': 202}), 49: (1, {'@': 202}), 46: (1, {'@': 202}), 50: (1, {'@': 202}), 47: (1, {'@': 202}), 45: (1, {'@': 202})}, 277: {29: (0, 109), 32: (0, 10)}, 278: {53: (0, 457)}, 279: {40: (0, 64)}, 280: {32: (0, 10), 29: (0, 323)}, 281: {47: (1, {'@': 203})}, 282: {44: (1, {'@': 204}), 95: (1, {'@': 204}), 9: (1, {'@': 204}), 96: (1, {'@': 204}), 33: (1, {'@': 204}), 92: (1, {'@': 204}), 97: (1, {'@': 204}), 0: (1, {'@': 204}), 98: (1, {'@': 204}), 35: (1, {'@': 204}), 99: (1, {'@': 204}), 53: (1, {'@': 204}), 93: (1, {'@': 204}), 42: (1, {'@': 204}), 38: (1, {'@': 204}), 30: (1, {'@': 204}), 94: (1, {'@': 204}), 82: (1, {'@': 204}), 84: (1, {'@': 204}), 85: (1, {'@': 204}), 88: (1, {'@': 204}), 89: (1, {'@': 204}), 32: (1, {'@': 204}), 83: (1, {'@': 204}), 90: (1, {'@': 204}), 86: (1, {'@': 204}), 87: (1, {'@': 204}), 49: (1, {'@': 204}), 46: (1, {'@': 204}), 50: (1, {'@': 204}), 47: (1, {'@': 204}), 45: (1, {'@': 204})}, 283: {45: (1, {'@': 205}), 53: (1, {'@': 205}), 47: (1, {'@': 205}), 90: (1, {'@': 205}), 94: (1, {'@': 205})}, 284: {59: (0, 144), 60: (0, 138), 62: (0, 402), 75: (0, 434), 32: (0, 10), 8: (0, 345), 11: (0, 396), 64: (0, 459), 77: (0, 440), 38: (0, 444), 71: (0, 414), 70: (0, 420), 79: (0, 399), 29: (0, 486), 81: (0, 335), 73: (0, 421), 16: (0, 424), 72: (0, 360)}, 285: {32: (1, {'@': 206}), 62: (1, {'@': 206}), 16: (1, {'@': 206}), 70: (1, {'@': 206}), 81: (1, {'@': 206}), 38: (1, {'@': 206}), 71: (1, {'@': 206}), 8: (1, {'@': 206}), 77: (1, {'@': 206})}, 286: {46: (0, 464)}, 287: {37: (1, {'@': 207}), 28: (1, {'@': 207}), 9: (1, {'@': 207}), 14: (1, {'@': 207}), 33: (1, {'@': 207}), 45: (1, {'@': 207}), 0: (1, {'@': 207}), 42: (1, {'@': 207}), 35: (1, {'@': 207}), 30: (1, {'@': 207}), 40: (1, {'@': 207}), 46: (1, {'@': 207}), 47: (1, {'@': 207}), 48: (1, {'@': 207}), 49: (1, {'@': 207}), 50: (1, {'@': 207}), 52: (1, {'@': 207}), 53: (1, {'@': 207}), 54: (1, {'@': 207}), 55: (1, {'@': 207}), 51: (1, {'@': 207}), 56: (1, {'@': 207})}, 288: {59: (0, 144), 60: (0, 138), 62: (0, 402), 29: (0, 408), 75: (0, 434), 32: (0, 10), 8: (0, 345), 11: (0, 396), 77: (0, 440), 68: (0, 194), 38: (0, 444), 71: (0, 414), 70: (0, 420), 79: (0, 399), 81: (0, 335), 73: (0, 421), 16: (0, 424), 72: (0, 360), 64: (0, 432)}, 289: {44: (1, {'@': 208}), 95: (1, {'@': 208}), 9: (1, {'@': 208}), 96: (1, {'@': 208}), 33: (1, {'@': 208}), 92: (1, {'@': 208}), 97: (1, {'@': 208}), 0: (1, {'@': 208}), 98: (1, {'@': 208}), 35: (1, {'@': 208}), 99: (1, {'@': 208}), 53: (1, {'@': 208}), 93: (1, {'@': 208}), 42: (1, {'@': 208}), 38: (1, {'@': 208}), 30: (1, {'@': 208}), 94: (1, {'@': 208}), 82: (1, {'@': 208}), 84: (1, {'@': 208}), 85: (1, {'@': 208}), 88: (1, {'@': 208}), 89: (1, {'@': 208}), 32: (1, {'@': 208}), 83: (1, {'@': 208}), 90: (1, {'@': 208}), 86: (1, {'@': 208}), 87: (1, {'@': 208}), 49: (1, {'@': 208}), 46: (1, {'@': 208}), 50: (1, {'@': 208}), 47: (1, {'@': 208}), 45: (1, {'@': 208})}, 290: {44: (1, {'@': 209}), 95: (1, {'@': 209}), 9: (1, {'@': 209}), 96: (1, {'@': 209}), 33: (1, {'@': 209}), 92: (1, {'@': 209}), 97: (1, {'@': 209}), 0: (1, {'@': 209}), 98: (1, {'@': 209}), 35: (1, {'@': 209}), 99: (1, {'@': 209}), 53: (1, {'@': 209}), 93: (1, {'@': 209}), 42: (1, {'@': 209}), 38: (1, {'@': 209}), 30: (1, {'@': 209}), 94: (1, {'@': 209}), 82: (1, {'@': 209}), 84: (1, {'@': 209}), 85: (1, {'@': 209}), 88: (1, {'@': 209}), 89: (1, {'@': 209}), 32: (1, {'@': 209}), 83: (1, {'@': 209}), 90: (1, {'@': 209}), 86: (1, {'@': 209}), 87: (1, {'@': 209}), 49: (1, {'@': 209}), 46: (1, {'@': 209}), 50: (1, {'@': 209}), 47: (1, {'@': 209}), 45: (1, {'@': 209})}, 291: {54: (1, {'@': 210}), 51: (1, {'@': 210})}, 292: {32: (1, {'@': 211})}, 293: {37: (1, {'@': 212}), 48: (1, {'@': 212}), 33: (1, {'@': 212}), 56: (1, {'@': 212}), 46: (1, {'@': 212}), 53: (1, {'@': 212}), 54: (1, {'@': 212}), 38: (1, {'@': 212}), 30: (1, {'@': 212}), 55: (1, {'@': 212}), 40: (1, {'@': 212}), 51: (1, {'@': 212}), 44: (1, {'@': 212}), 9: (1, {'@': 212}), 14: (1, {'@': 212}), 0: (1, {'@': 212}), 35: (1, {'@': 212}), 49: (1, {'@': 212}), 50: (1, {'@': 212}), 52: (1, {'@': 212}), 28: (1, {'@': 212}), 45: (1, {'@': 212}), 42: (1, {'@': 212}), 47: (1, {'@': 212})}, 294: {44: (1, {'@': 213}), 37: (1, {'@': 213}), 9: (1, {'@': 213}), 91: (1, {'@': 213}), 14: (1, {'@': 213}), 33: (1, {'@': 213}), 92: (1, {'@': 213}), 16: (1, {'@': 213}), 0: (1, {'@': 213}), 39: (1, {'@': 213}), 40: (1, {'@': 213}), 35: (1, {'@': 213}), 8: (1, {'@': 213}), 28: (1, {'@': 213}), 32: (1, {'@': 213}), 93: (1, {'@': 213}), 45: (1, {'@': 213}), 42: (1, {'@': 213}), 12: (1, {'@': 213}), 38: (1, {'@': 213}), 36: (1, {'@': 213}), 13: (1, {'@': 213}), 30: (1, {'@': 213}), 17: (1, {'@': 213}), 46: (1, {'@': 213}), 47: (1, {'@': 213}), 48: (1, {'@': 213}), 53: (1, {'@': 213}), 54: (1, {'@': 213}), 55: (1, {'@': 213}), 51: (1, {'@': 213}), 49: (1, {'@': 213}), 50: (1, {'@': 213}), 52: (1, {'@': 213}), 56: (1, {'@': 213}), 95: (1, {'@': 213})}, 295: {45: (0, 339)}, 296: {53: (0, 468)}, 297: {95: (1, {'@': 214}), 42: (1, {'@': 214}), 35: (1, {'@': 214}), 53: (1, {'@': 214}), 99: (1, {'@': 214}), 82: (1, {'@': 214}), 32: (1, {'@': 214}), 83: (1, {'@': 214}), 90: (1, {'@': 214}), 84: (1, {'@': 214}), 85: (1, {'@': 214}), 86: (1, {'@': 214}), 87: (1, {'@': 214}), 88: (1, {'@': 214}), 89: (1, {'@': 214}), 49: (1, {'@': 214}), 46: (1, {'@': 214}), 50: (1, {'@': 214})}, 298: {26: (0, 305), 2: (0, 127), 29: (0, 411), 31: (0, 426), 5: (0, 386), 8: (0, 345), 32: (0, 10), 34: (0, 397), 13: (0, 5), 12: (0, 45), 11: (0, 57), 36: (0, 356), 16: (0, 183), 39: (0, 338), 15: (0, 133), 17: (0, 146)}, 299: {95: (1, {'@': 215}), 42: (1, {'@': 215}), 35: (1, {'@': 215}), 53: (1, {'@': 215}), 99: (1, {'@': 215}), 82: (1, {'@': 215}), 32: (1, {'@': 215}), 83: (1, {'@': 215}), 90: (1, {'@': 215}), 84: (1, {'@': 215}), 85: (1, {'@': 215}), 86: (1, {'@': 215}), 87: (1, {'@': 215}), 88: (1, {'@': 215}), 89: (1, {'@': 215}), 49: (1, {'@': 215}), 46: (1, {'@': 215}), 50: (1, {'@': 215})}, 300: {16: (0, 173), 101: (1, {'@': 216}), 53: (1, {'@': 216}), 47: (1, {'@': 216})}, 301: {45: (0, 398), 82: (1, {'@': 217}), 32: (1, {'@': 217}), 83: (1, {'@': 217}), 84: (1, {'@': 217}), 85: (1, {'@': 217}), 86: (1, {'@': 217}), 87: (1, {'@': 217}), 88: (1, {'@': 217}), 89: (1, {'@': 217}), 90: (1, {'@': 217})}, 302: {95: (0, 392), 53: (1, {'@': 218}), 82: (1, {'@': 218}), 84: (1, {'@': 218}), 85: (1, {'@': 218}), 88: (1, {'@': 218}), 89: (1, {'@': 218}), 32: (1, {'@': 218}), 83: (1, {'@': 218}), 90: (1, {'@': 218}), 86: (1, {'@': 218}), 87: (1, {'@': 218}), 49: (1, {'@': 218}), 46: (1, {'@': 218}), 50: (1, {'@': 218})}, 303: {46: (0, 210), 47: (0, 230)}, 304: {47: (1, {'@': 219}), 53: (1, {'@': 219})}, 305: {44: (1, {'@': 220}), 37: (1, {'@': 220}), 9: (1, {'@': 220}), 91: (1, {'@': 220}), 14: (1, {'@': 220}), 33: (1, {'@': 220}), 92: (1, {'@': 220}), 16: (1, {'@': 220}), 0: (1, {'@': 220}), 39: (1, {'@': 220}), 40: (1, {'@': 220}), 35: (1, {'@': 220}), 8: (1, {'@': 220}), 28: (1, {'@': 220}), 32: (1, {'@': 220}), 93: (1, {'@': 220}), 45: (1, {'@': 220}), 42: (1, {'@': 220}), 12: (1, {'@': 220}), 38: (1, {'@': 220}), 36: (1, {'@': 220}), 13: (1, {'@': 220}), 30: (1, {'@': 220}), 17: (1, {'@': 220}), 46: (1, {'@': 220}), 47: (1, {'@': 220}), 48: (1, {'@': 220}), 53: (1, {'@': 220}), 54: (1, {'@': 220}), 55: (1, {'@': 220}), 51: (1, {'@': 220}), 49: (1, {'@': 220}), 50: (1, {'@': 220}), 52: (1, {'@': 220}), 56: (1, {'@': 220}), 95: (1, {'@': 220})}, 306: {47: (1, {'@': 221}), 53: (1, {'@': 221})}, 307: {82: (1, {'@': 222}), 32: (1, {'@': 222}), 83: (1, {'@': 222}), 84: (1, {'@': 222}), 85: (1, {'@': 222}), 86: (1, {'@': 222}), 87: (1, {'@': 222}), 88: (1, {'@': 222}), 89: (1, {'@': 222}), 90: (1, {'@': 222})}, 308: {16: (0, 3), 45: (1, {'@': 223})}, 309: {82: (1, {'@': 224}), 32: (1, {'@': 224}), 83: (1, {'@': 224}), 84: (1, {'@': 224}), 85: (1, {'@': 224}), 86: (1, {'@': 224}), 87: (1, {'@': 224}), 88: (1, {'@': 224}), 89: (1, {'@': 224}), 90: (1, {'@': 224})}, 310: {127: (0, 29), 128: (0, 35), 129: (0, 18), 130: (0, 24), 131: (0, 19), 132: (0, 12), 133: (0, 324), 134: (0, 374), 135: (0, 382), 136: (0, 365), 137: (0, 313)}, 311: {59: (0, 144), 60: (0, 138), 62: (0, 402), 68: (0, 105), 29: (0, 408), 75: (0, 434), 32: (0, 10), 8: (0, 345), 11: (0, 396), 77: (0, 440), 38: (0, 444), 71: (0, 414), 70: (0, 420), 79: (0, 399), 81: (0, 335), 73: (0, 421), 16: (0, 424), 72: (0, 360), 64: (0, 432)}, 312: {82: (1, {'@': 225}), 32: (1, {'@': 225}), 83: (1, {'@': 225}), 84: (1, {'@': 225}), 85: (1, {'@': 225}), 86: (1, {'@': 225}), 87: (1, {'@': 225}), 88: (1, {'@': 225}), 89: (1, {'@': 225}), 90: (1, {'@': 225})}, 313: {16: (0, 185)}, 314: {0: (0, 319), 28: (0, 409), 30: (0, 431), 33: (0, 422), 35: (0, 416), 9: (0, 320), 37: (0, 226), 18: (0, 31), 14: (0, 20), 40: (0, 241), 22: (0, 238), 21: (0, 242), 42: (0, 243), 45: (1, {'@': 226}), 46: (1, {'@': 226}), 47: (1, {'@': 226}), 54: (1, {'@': 226}), 51: (1, {'@': 226}), 48: (1, {'@': 226}), 49: (1, {'@': 226}), 50: (1, {'@': 226}), 52: (1, {'@': 226}), 53: (1, {'@': 226}), 55: (1, {'@': 226})}, 315: {53: (0, 34)}, 316: {59: (0, 144), 60: (0, 138), 62: (0, 402), 29: (0, 408), 75: (0, 434), 32: (0, 10), 68: (0, 425), 8: (0, 345), 11: (0, 396), 77: (0, 440), 38: (0, 444), 71: (0, 414), 70: (0, 420), 79: (0, 399), 81: (0, 335), 73: (0, 421), 16: (0, 424), 72: (0, 360), 64: (0, 432)}, 317: {30: (0, 111)}, 318: {47: (1, {'@': 227}), 40: (1, {'@': 227}), 53: (1, {'@': 227}), 95: (1, {'@': 227}), 56: (1, {'@': 227}), 46: (1, {'@': 227})}, 319: {14: (1, {'@': 228}), 9: (1, {'@': 228}), 37: (1, {'@': 228}), 17: (1, {'@': 228}), 33: (1, {'@': 228}), 16: (1, {'@': 228}), 0: (1, {'@': 228}), 39: (1, {'@': 228}), 35: (1, {'@': 228}), 8: (1, {'@': 228}), 28: (1, {'@': 228}), 32: (1, {'@': 228}), 42: (1, {'@': 228}), 12: (1, {'@': 228}), 38: (1, {'@': 228}), 30: (1, {'@': 228}), 36: (1, {'@': 228}), 13: (1, {'@': 228}), 40: (1, {'@': 228}), 48: (1, {'@': 228}), 46: (1, {'@': 228}), 53: (1, {'@': 228}), 54: (1, {'@': 228}), 55: (1, {'@': 228}), 51: (1, {'@': 228}), 49: (1, {'@': 228}), 50: (1, {'@': 228}), 52: (1, {'@': 228}), 45: (1, {'@': 228}), 47: (1, {'@': 228})}, 320: {14: (1, {'@': 229}), 9: (1, {'@': 229}), 37: (1, {'@': 229}), 17: (1, {'@': 229}), 33: (1, {'@': 229}), 16: (1, {'@': 229}), 0: (1, {'@': 229}), 39: (1, {'@': 229}), 35: (1, {'@': 229}), 8: (1, {'@': 229}), 28: (1, {'@': 229}), 32: (1, {'@': 229}), 42: (1, {'@': 229}), 12: (1, {'@': 229}), 38: (1, {'@': 229}), 30: (1, {'@': 229}), 36: (1, {'@': 229}), 13: (1, {'@': 229}), 40: (1, {'@': 229}), 48: (1, {'@': 229}), 46: (1, {'@': 229}), 53: (1, {'@': 229}), 54: (1, {'@': 229}), 55: (1, {'@': 229}), 51: (1, {'@': 229}), 49: (1, {'@': 229}), 50: (1, {'@': 229}), 52: (1, {'@': 229}), 45: (1, {'@': 229}), 47: (1, {'@': 229})}, 321: {47: (0, 66)}, 322: {32: (1, {'@': 230})}, 323: {53: (0, 423)}, 324: {16: (0, 140)}, 325: {82: (1, {'@': 231}), 32: (1, {'@': 231}), 83: (1, {'@': 231}), 84: (1, {'@': 231}), 85: (1, {'@': 231}), 86: (1, {'@': 231}), 87: (1, {'@': 231}), 88: (1, {'@': 231}), 89: (1, {'@': 231}), 90: (1, {'@': 231})}, 326: {32: (0, 10), 29: (0, 189)}, 327: {56: (0, 442), 44: (1, {'@': 121}), 95: (1, {'@': 121}), 9: (1, {'@': 121}), 96: (1, {'@': 121}), 33: (1, {'@': 121}), 92: (1, {'@': 121}), 97: (1, {'@': 121}), 0: (1, {'@': 121}), 98: (1, {'@': 121}), 35: (1, {'@': 121}), 99: (1, {'@': 121}), 93: (1, {'@': 121}), 90: (1, {'@': 121}), 42: (1, {'@': 121}), 38: (1, {'@': 121}), 30: (1, {'@': 121}), 94: (1, {'@': 121})}, 328: {0: (0, 319), 1: (0, 355), 2: (0, 366), 3: (0, 385), 4: (0, 314), 5: (0, 386), 27: (0, 67), 6: (0, 379), 7: (0, 332), 8: (0, 345), 9: (0, 320), 10: (0, 2), 11: (0, 57), 12: (0, 45), 13: (0, 5), 14: (0, 20), 15: (0, 133), 16: (0, 183), 17: (0, 146), 18: (0, 118), 19: (0, 211), 20: (0, 213), 21: (0, 242), 22: (0, 238), 23: (0, 216), 24: (0, 287), 25: (0, 298), 26: (0, 305), 28: (0, 409), 29: (0, 411), 30: (0, 431), 31: (0, 426), 32: (0, 10), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 38: (0, 247), 39: (0, 338), 40: (0, 241), 41: (0, 249), 42: (0, 243)}, 329: {37: (1, {'@': 232}), 48: (1, {'@': 232}), 33: (1, {'@': 232}), 56: (1, {'@': 232}), 46: (1, {'@': 232}), 53: (1, {'@': 232}), 93: (1, {'@': 232}), 54: (1, {'@': 232}), 38: (1, {'@': 232}), 30: (1, {'@': 232}), 55: (1, {'@': 232}), 51: (1, {'@': 232}), 40: (1, {'@': 232}), 44: (1, {'@': 232}), 9: (1, {'@': 232}), 14: (1, {'@': 232}), 0: (1, {'@': 232}), 35: (1, {'@': 232}), 49: (1, {'@': 232}), 50: (1, {'@': 232}), 52: (1, {'@': 232}), 28: (1, {'@': 232}), 45: (1, {'@': 232}), 42: (1, {'@': 232}), 47: (1, {'@': 232})}, 330: {53: (0, 81)}, 331: {47: (1, {'@': 233}), 53: (1, {'@': 233})}, 332: {0: (0, 319), 1: (0, 355), 2: (0, 366), 3: (0, 385), 4: (0, 314), 5: (0, 386), 6: (0, 379), 7: (0, 332), 8: (0, 345), 9: (0, 320), 10: (0, 2), 11: (0, 57), 12: (0, 45), 13: (0, 5), 14: (0, 20), 15: (0, 133), 16: (0, 183), 17: (0, 146), 18: (0, 118), 19: (0, 211), 20: (0, 213), 21: (0, 242), 22: (0, 238), 23: (0, 216), 24: (0, 287), 25: (0, 298), 26: (0, 305), 28: (0, 409), 29: (0, 411), 30: (0, 431), 31: (0, 426), 32: (0, 10), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 38: (0, 247), 39: (0, 338), 27: (0, 221), 40: (0, 241), 41: (0, 249), 42: (0, 243)}, 333: {9: (0, 375)}, 334: {94: (0, 175)}, 335: {13: (0, 490)}, 336: {53: (0, 69)}, 337: {59: (0, 144), 60: (0, 138), 64: (0, 447), 62: (0, 402), 75: (0, 434), 32: (0, 10), 8: (0, 345), 11: (0, 396), 77: (0, 440), 38: (0, 444), 71: (0, 414), 70: (0, 420), 79: (0, 399), 29: (0, 486), 81: (0, 335), 73: (0, 421), 16: (0, 424), 72: (0, 360)}, 338: {44: (1, {'@': 234}), 37: (1, {'@': 234}), 9: (1, {'@': 234}), 91: (1, {'@': 234}), 14: (1, {'@': 234}), 33: (1, {'@': 234}), 92: (1, {'@': 234}), 16: (1, {'@': 234}), 0: (1, {'@': 234}), 39: (1, {'@': 234}), 40: (1, {'@': 234}), 35: (1, {'@': 234}), 8: (1, {'@': 234}), 28: (1, {'@': 234}), 32: (1, {'@': 234}), 93: (1, {'@': 234}), 45: (1, {'@': 234}), 42: (1, {'@': 234}), 12: (1, {'@': 234}), 38: (1, {'@': 234}), 36: (1, {'@': 234}), 13: (1, {'@': 234}), 30: (1, {'@': 234}), 17: (1, {'@': 234}), 46: (1, {'@': 234}), 47: (1, {'@': 234}), 95: (1, {'@': 234}), 53: (1, {'@': 234}), 99: (1, {'@': 234}), 82: (1, {'@': 234}), 83: (1, {'@': 234}), 90: (1, {'@': 234}), 84: (1, {'@': 234}), 85: (1, {'@': 234}), 86: (1, {'@': 234}), 87: (1, {'@': 234}), 88: (1, {'@': 234}), 89: (1, {'@': 234}), 48: (1, {'@': 234}), 54: (1, {'@': 234}), 55: (1, {'@': 234}), 51: (1, {'@': 234}), 49: (1, {'@': 234}), 50: (1, {'@': 234}), 52: (1, {'@': 234}), 56: (1, {'@': 234})}, 339: {2: (0, 366), 5: (0, 386), 6: (0, 379), 9: (0, 320), 15: (0, 133), 16: (0, 183), 17: (0, 146), 22: (0, 238), 21: (0, 242), 23: (0, 216), 26: (0, 305), 27: (0, 180), 30: (0, 431), 31: (0, 426), 32: (0, 10), 13: (0, 5), 39: (0, 338), 38: (0, 247), 41: (0, 249), 42: (0, 243), 24: (0, 287), 3: (0, 385), 0: (0, 319), 1: (0, 355), 4: (0, 314), 7: (0, 332), 8: (0, 345), 10: (0, 2), 11: (0, 57), 12: (0, 45), 14: (0, 20), 18: (0, 118), 19: (0, 211), 20: (0, 213), 25: (0, 298), 28: (0, 409), 29: (0, 411), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 40: (0, 241), 45: (0, 181)}, 340: {53: (0, 70)}, 341: {58: (0, 369), 32: (0, 10), 57: (0, 334), 29: (0, 372)}, 342: {2: (0, 366), 5: (0, 386), 6: (0, 379), 9: (0, 320), 15: (0, 133), 16: (0, 183), 17: (0, 146), 22: (0, 238), 21: (0, 242), 23: (0, 216), 26: (0, 305), 30: (0, 431), 31: (0, 426), 32: (0, 10), 13: (0, 5), 39: (0, 338), 38: (0, 247), 41: (0, 249), 42: (0, 243), 24: (0, 287), 3: (0, 385), 0: (0, 319), 1: (0, 355), 4: (0, 314), 7: (0, 332), 8: (0, 345), 10: (0, 2), 11: (0, 57), 12: (0, 45), 14: (0, 20), 27: (0, 156), 18: (0, 118), 19: (0, 211), 20: (0, 213), 25: (0, 298), 28: (0, 409), 29: (0, 411), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 40: (0, 241), 45: (1, {'@': 235}), 46: (1, {'@': 235}), 47: (1, {'@': 235}), 54: (1, {'@': 235}), 51: (1, {'@': 235}), 48: (1, {'@': 235}), 49: (1, {'@': 235}), 50: (1, {'@': 235}), 52: (1, {'@': 235}), 53: (1, {'@': 235}), 55: (1, {'@': 235})}, 343: {138: (0, 303), 45: (0, 295), 46: (0, 266), 47: (0, 264)}, 344: {47: (0, 72)}, 345: {44: (1, {'@': 236}), 37: (1, {'@': 236}), 9: (1, {'@': 236}), 91: (1, {'@': 236}), 14: (1, {'@': 236}), 33: (1, {'@': 236}), 92: (1, {'@': 236}), 16: (1, {'@': 236}), 0: (1, {'@': 236}), 39: (1, {'@': 236}), 40: (1, {'@': 236}), 35: (1, {'@': 236}), 8: (1, {'@': 236}), 28: (1, {'@': 236}), 32: (1, {'@': 236}), 93: (1, {'@': 236}), 45: (1, {'@': 236}), 42: (1, {'@': 236}), 12: (1, {'@': 236}), 38: (1, {'@': 236}), 36: (1, {'@': 236}), 13: (1, {'@': 236}), 30: (1, {'@': 236}), 17: (1, {'@': 236}), 46: (1, {'@': 236}), 47: (1, {'@': 236}), 95: (1, {'@': 236}), 96: (1, {'@': 236}), 97: (1, {'@': 236}), 98: (1, {'@': 236}), 99: (1, {'@': 236}), 53: (1, {'@': 236}), 94: (1, {'@': 236}), 82: (1, {'@': 236}), 84: (1, {'@': 236}), 85: (1, {'@': 236}), 88: (1, {'@': 236}), 89: (1, {'@': 236}), 83: (1, {'@': 236}), 90: (1, {'@': 236}), 86: (1, {'@': 236}), 87: (1, {'@': 236}), 48: (1, {'@': 236}), 54: (1, {'@': 236}), 55: (1, {'@': 236}), 51: (1, {'@': 236}), 49: (1, {'@': 236}), 50: (1, {'@': 236}), 52: (1, {'@': 236}), 56: (1, {'@': 236})}, 346: {39: (0, 338), 32: (0, 10), 29: (0, 453), 34: (0, 498)}, 347: {100: (0, 104), 52: (0, 378), 13: (0, 337), 16: (0, 417), 44: (1, {'@': 195}), 95: (1, {'@': 195}), 9: (1, {'@': 195}), 96: (1, {'@': 195}), 33: (1, {'@': 195}), 92: (1, {'@': 195}), 97: (1, {'@': 195}), 0: (1, {'@': 195}), 98: (1, {'@': 195}), 35: (1, {'@': 195}), 99: (1, {'@': 195}), 53: (1, {'@': 195}), 93: (1, {'@': 195}), 42: (1, {'@': 195}), 38: (1, {'@': 195}), 30: (1, {'@': 195}), 94: (1, {'@': 195}), 82: (1, {'@': 195}), 84: (1, {'@': 195}), 85: (1, {'@': 195}), 88: (1, {'@': 195}), 89: (1, {'@': 195}), 32: (1, {'@': 195}), 83: (1, {'@': 195}), 90: (1, {'@': 195}), 86: (1, {'@': 195}), 87: (1, {'@': 195}), 49: (1, {'@': 195}), 46: (1, {'@': 195}), 50: (1, {'@': 195})}, 348: {82: (1, {'@': 237}), 32: (1, {'@': 237}), 83: (1, {'@': 237}), 84: (1, {'@': 237}), 85: (1, {'@': 237}), 86: (1, {'@': 237}), 87: (1, {'@': 237}), 88: (1, {'@': 237}), 89: (1, {'@': 237})}, 349: {53: (0, 131), 95: (0, 392)}, 350: {53: (0, 439)}, 351: {47: (0, 75)}, 352: {49: (0, 91), 95: (0, 392)}, 353: {53: (0, 65)}, 354: {47: (1, {'@': 238}), 40: (1, {'@': 238}), 53: (1, {'@': 238}), 95: (1, {'@': 238}), 56: (1, {'@': 238}), 46: (1, {'@': 238})}, 355: {92: (0, 389), 139: (0, 174), 44: (1, {'@': 239}), 37: (1, {'@': 239}), 28: (1, {'@': 239}), 9: (1, {'@': 239}), 14: (1, {'@': 239}), 33: (1, {'@': 239}), 93: (1, {'@': 239}), 45: (1, {'@': 239}), 0: (1, {'@': 239}), 42: (1, {'@': 239}), 38: (1, {'@': 239}), 35: (1, {'@': 239}), 30: (1, {'@': 239}), 40: (1, {'@': 239}), 46: (1, {'@': 239}), 47: (1, {'@': 239}), 48: (1, {'@': 239}), 49: (1, {'@': 239}), 50: (1, {'@': 239}), 51: (1, {'@': 239}), 52: (1, {'@': 239}), 53: (1, {'@': 239}), 54: (1, {'@': 239}), 55: (1, {'@': 239}), 56: (1, {'@': 239})}, 356: {44: (1, {'@': 240}), 37: (1, {'@': 240}), 9: (1, {'@': 240}), 91: (1, {'@': 240}), 14: (1, {'@': 240}), 33: (1, {'@': 240}), 92: (1, {'@': 240}), 16: (1, {'@': 240}), 0: (1, {'@': 240}), 39: (1, {'@': 240}), 40: (1, {'@': 240}), 35: (1, {'@': 240}), 8: (1, {'@': 240}), 28: (1, {'@': 240}), 32: (1, {'@': 240}), 93: (1, {'@': 240}), 45: (1, {'@': 240}), 42: (1, {'@': 240}), 12: (1, {'@': 240}), 38: (1, {'@': 240}), 36: (1, {'@': 240}), 13: (1, {'@': 240}), 30: (1, {'@': 240}), 17: (1, {'@': 240}), 46: (1, {'@': 240}), 47: (1, {'@': 240}), 48: (1, {'@': 240}), 53: (1, {'@': 240}), 54: (1, {'@': 240}), 55: (1, {'@': 240}), 51: (1, {'@': 240}), 49: (1, {'@': 240}), 50: (1, {'@': 240}), 52: (1, {'@': 240}), 56: (1, {'@': 240}), 95: (1, {'@': 240})}, 357: {94: (0, 477), 40: (1, {'@': 227}), 56: (1, {'@': 227})}, 358: {0: (0, 319), 1: (0, 355), 2: (0, 366), 3: (0, 385), 4: (0, 314), 5: (0, 386), 6: (0, 379), 7: (0, 332), 8: (0, 345), 9: (0, 320), 10: (0, 2), 27: (0, 79), 11: (0, 57), 12: (0, 45), 13: (0, 5), 14: (0, 20), 15: (0, 133), 16: (0, 183), 17: (0, 146), 18: (0, 118), 19: (0, 211), 20: (0, 213), 21: (0, 242), 22: (0, 238), 23: (0, 216), 24: (0, 287), 25: (0, 298), 26: (0, 305), 28: (0, 409), 29: (0, 411), 30: (0, 431), 31: (0, 426), 32: (0, 10), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 38: (0, 247), 39: (0, 338), 40: (0, 241), 41: (0, 249), 42: (0, 243)}, 359: {44: (1, {'@': 241}), 37: (1, {'@': 241}), 9: (1, {'@': 241}), 91: (1, {'@': 241}), 14: (1, {'@': 241}), 33: (1, {'@': 241}), 92: (1, {'@': 241}), 16: (1, {'@': 241}), 0: (1, {'@': 241}), 39: (1, {'@': 241}), 40: (1, {'@': 241}), 35: (1, {'@': 241}), 8: (1, {'@': 241}), 28: (1, {'@': 241}), 32: (1, {'@': 241}), 93: (1, {'@': 241}), 45: (1, {'@': 241}), 42: (1, {'@': 241}), 12: (1, {'@': 241}), 38: (1, {'@': 241}), 36: (1, {'@': 241}), 13: (1, {'@': 241}), 30: (1, {'@': 241}), 17: (1, {'@': 241}), 46: (1, {'@': 241}), 47: (1, {'@': 241}), 48: (1, {'@': 241}), 53: (1, {'@': 241}), 54: (1, {'@': 241}), 55: (1, {'@': 241}), 51: (1, {'@': 241}), 49: (1, {'@': 241}), 50: (1, {'@': 241}), 52: (1, {'@': 241}), 56: (1, {'@': 241}), 95: (1, {'@': 241})}, 360: {140: (0, 380), 93: (0, 461), 44: (1, {'@': 242}), 95: (1, {'@': 242}), 9: (1, {'@': 242}), 96: (1, {'@': 242}), 53: (1, {'@': 242}), 33: (1, {'@': 242}), 97: (1, {'@': 242}), 92: (1, {'@': 242}), 0: (1, {'@': 242}), 42: (1, {'@': 242}), 38: (1, {'@': 242}), 98: (1, {'@': 242}), 30: (1, {'@': 242}), 35: (1, {'@': 242}), 99: (1, {'@': 242}), 82: (1, {'@': 242}), 84: (1, {'@': 242}), 85: (1, {'@': 242}), 88: (1, {'@': 242}), 89: (1, {'@': 242}), 32: (1, {'@': 242}), 83: (1, {'@': 242}), 90: (1, {'@': 242}), 86: (1, {'@': 242}), 87: (1, {'@': 242}), 49: (1, {'@': 242}), 46: (1, {'@': 242}), 50: (1, {'@': 242}), 47: (1, {'@': 242}), 45: (1, {'@': 242})}, 361: {46: (1, {'@': 243}), 47: (1, {'@': 243})}, 362: {2: (0, 366), 5: (0, 386), 6: (0, 379), 9: (0, 320), 15: (0, 133), 16: (0, 183), 17: (0, 146), 22: (0, 238), 21: (0, 242), 23: (0, 216), 26: (0, 305), 27: (0, 41), 30: (0, 431), 31: (0, 426), 32: (0, 10), 13: (0, 5), 39: (0, 338), 38: (0, 247), 53: (0, 427), 41: (0, 249), 42: (0, 243), 24: (0, 287), 3: (0, 385), 0: (0, 319), 1: (0, 355), 4: (0, 314), 7: (0, 332), 8: (0, 345), 10: (0, 2), 11: (0, 57), 12: (0, 45), 14: (0, 20), 18: (0, 118), 19: (0, 211), 20: (0, 213), 25: (0, 298), 28: (0, 409), 29: (0, 411), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 40: (0, 241)}, 363: {111: (0, 82), 39: (0, 338), 34: (0, 407)}, 364: {40: (0, 279), 46: (1, {'@': 244}), 47: (1, {'@': 244})}, 365: {16: (0, 190)}, 366: {29: (0, 411), 31: (0, 426), 5: (0, 386), 8: (0, 345), 32: (0, 10), 34: (0, 397), 13: (0, 5), 12: (0, 45), 141: (0, 36), 11: (0, 57), 36: (0, 356), 16: (0, 183), 26: (0, 377), 39: (0, 338), 91: (0, 367), 15: (0, 133), 17: (0, 146), 44: (1, {'@': 245}), 37: (1, {'@': 245}), 28: (1, {'@': 245}), 9: (1, {'@': 245}), 14: (1, {'@': 245}), 33: (1, {'@': 245}), 92: (1, {'@': 245}), 93: (1, {'@': 245}), 45: (1, {'@': 245}), 0: (1, {'@': 245}), 42: (1, {'@': 245}), 38: (1, {'@': 245}), 35: (1, {'@': 245}), 30: (1, {'@': 245}), 40: (1, {'@': 245}), 46: (1, {'@': 245}), 47: (1, {'@': 245}), 48: (1, {'@': 245}), 49: (1, {'@': 245}), 50: (1, {'@': 245}), 52: (1, {'@': 245}), 53: (1, {'@': 245}), 54: (1, {'@': 245}), 55: (1, {'@': 245}), 51: (1, {'@': 245}), 56: (1, {'@': 245})}, 367: {26: (0, 305), 2: (0, 435), 29: (0, 411), 31: (0, 426), 5: (0, 386), 8: (0, 345), 32: (0, 10), 34: (0, 397), 13: (0, 5), 12: (0, 45), 11: (0, 57), 36: (0, 356), 16: (0, 183), 39: (0, 338), 15: (0, 133), 17: (0, 146)}, 368: {47: (0, 83), 90: (0, 85)}, 369: {45: (0, 169)}, 370: {13: (0, 446), 142: (0, 59), 29: (0, 318), 16: (0, 370), 110: (0, 274), 32: (0, 10), 8: (0, 345), 39: (0, 338), 31: (0, 354), 17: (0, 146), 11: (0, 449), 34: (0, 501)}, 371: {82: (1, {'@': 246}), 84: (1, {'@': 246}), 85: (1, {'@': 246}), 88: (1, {'@': 246}), 89: (1, {'@': 246}), 32: (1, {'@': 246}), 45: (1, {'@': 246}), 83: (1, {'@': 246}), 90: (1, {'@': 246}), 86: (1, {'@': 246}), 87: (1, {'@': 246})}, 372: {47: (0, 90), 143: (0, 108), 53: (1, {'@': 247}), 94: (1, {'@': 247}), 90: (1, {'@': 247}), 45: (1, {'@': 247})}, 373: {44: (1, {'@': 248}), 95: (1, {'@': 248}), 9: (1, {'@': 248}), 96: (1, {'@': 248}), 33: (1, {'@': 248}), 92: (1, {'@': 248}), 97: (1, {'@': 248}), 0: (1, {'@': 248}), 98: (1, {'@': 248}), 35: (1, {'@': 248}), 99: (1, {'@': 248}), 53: (1, {'@': 248}), 93: (1, {'@': 248}), 42: (1, {'@': 248}), 38: (1, {'@': 248}), 30: (1, {'@': 248}), 94: (1, {'@': 248}), 82: (1, {'@': 248}), 84: (1, {'@': 248}), 85: (1, {'@': 248}), 88: (1, {'@': 248}), 89: (1, {'@': 248}), 32: (1, {'@': 248}), 83: (1, {'@': 248}), 90: (1, {'@': 248}), 86: (1, {'@': 248}), 87: (1, {'@': 248}), 49: (1, {'@': 248}), 46: (1, {'@': 248}), 50: (1, {'@': 248}), 47: (1, {'@': 248}), 45: (1, {'@': 248})}, 374: {16: (0, 240)}, 375: {108: (0, 358), 88: (0, 26)}, 376: {82: (1, {'@': 249}), 33: (1, {'@': 249}), 92: (1, {'@': 249}), 98: (1, {'@': 249}), 46: (1, {'@': 249}), 88: (1, {'@': 249}), 32: (1, {'@': 249}), 53: (1, {'@': 249}), 90: (1, {'@': 249}), 38: (1, {'@': 249}), 30: (1, {'@': 249}), 47: (1, {'@': 249}), 44: (1, {'@': 249}), 95: (1, {'@': 249}), 9: (1, {'@': 249}), 96: (1, {'@': 249}), 97: (1, {'@': 249}), 0: (1, {'@': 249}), 84: (1, {'@': 249}), 85: (1, {'@': 249}), 35: (1, {'@': 249}), 49: (1, {'@': 249}), 99: (1, {'@': 249}), 50: (1, {'@': 249}), 89: (1, {'@': 249}), 45: (1, {'@': 249}), 83: (1, {'@': 249}), 42: (1, {'@': 249}), 86: (1, {'@': 249}), 87: (1, {'@': 249})}, 377: {44: (1, {'@': 250}), 37: (1, {'@': 250}), 9: (1, {'@': 250}), 91: (1, {'@': 250}), 14: (1, {'@': 250}), 33: (1, {'@': 250}), 92: (1, {'@': 250}), 16: (1, {'@': 250}), 0: (1, {'@': 250}), 39: (1, {'@': 250}), 40: (1, {'@': 250}), 35: (1, {'@': 250}), 8: (1, {'@': 250}), 28: (1, {'@': 250}), 32: (1, {'@': 250}), 93: (1, {'@': 250}), 45: (1, {'@': 250}), 42: (1, {'@': 250}), 12: (1, {'@': 250}), 38: (1, {'@': 250}), 36: (1, {'@': 250}), 13: (1, {'@': 250}), 30: (1, {'@': 250}), 17: (1, {'@': 250}), 46: (1, {'@': 250}), 47: (1, {'@': 250}), 48: (1, {'@': 250}), 53: (1, {'@': 250}), 54: (1, {'@': 250}), 55: (1, {'@': 250}), 51: (1, {'@': 250}), 49: (1, {'@': 250}), 50: (1, {'@': 250}), 52: (1, {'@': 250}), 56: (1, {'@': 250}), 95: (1, {'@': 250})}, 378: {17: (0, 121)}, 379: {0: (0, 319), 1: (0, 355), 2: (0, 366), 3: (0, 385), 4: (0, 314), 5: (0, 386), 6: (0, 379), 7: (0, 332), 8: (0, 345), 9: (0, 320), 10: (0, 2), 11: (0, 57), 12: (0, 45), 13: (0, 5), 14: (0, 20), 15: (0, 133), 16: (0, 183), 17: (0, 146), 18: (0, 118), 19: (0, 211), 20: (0, 213), 21: (0, 242), 22: (0, 238), 23: (0, 216), 24: (0, 287), 25: (0, 298), 26: (0, 305), 28: (0, 409), 29: (0, 411), 30: (0, 431), 31: (0, 426), 32: (0, 10), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 38: (0, 247), 39: (0, 338), 27: (0, 6), 40: (0, 241), 41: (0, 249), 42: (0, 243)}, 380: {93: (0, 74), 44: (1, {'@': 251}), 95: (1, {'@': 251}), 9: (1, {'@': 251}), 96: (1, {'@': 251}), 53: (1, {'@': 251}), 33: (1, {'@': 251}), 97: (1, {'@': 251}), 92: (1, {'@': 251}), 0: (1, {'@': 251}), 42: (1, {'@': 251}), 38: (1, {'@': 251}), 98: (1, {'@': 251}), 30: (1, {'@': 251}), 35: (1, {'@': 251}), 99: (1, {'@': 251}), 82: (1, {'@': 251}), 84: (1, {'@': 251}), 85: (1, {'@': 251}), 88: (1, {'@': 251}), 89: (1, {'@': 251}), 32: (1, {'@': 251}), 83: (1, {'@': 251}), 90: (1, {'@': 251}), 86: (1, {'@': 251}), 87: (1, {'@': 251}), 49: (1, {'@': 251}), 46: (1, {'@': 251}), 50: (1, {'@': 251}), 47: (1, {'@': 251}), 45: (1, {'@': 251})}, 381: {59: (0, 144), 60: (0, 138), 62: (0, 402), 104: (0, 403), 8: (0, 345), 11: (0, 396), 29: (0, 408), 68: (0, 412), 71: (0, 414), 70: (0, 420), 73: (0, 421), 16: (0, 424), 64: (0, 432), 112: (0, 248), 75: (0, 434), 32: (0, 10), 77: (0, 440), 38: (0, 444), 79: (0, 399), 81: (0, 335), 72: (0, 360), 53: (1, {'@': 114})}, 382: {16: (0, 23)}, 383: {82: (1, {'@': 252}), 33: (1, {'@': 252}), 92: (1, {'@': 252}), 98: (1, {'@': 252}), 46: (1, {'@': 252}), 88: (1, {'@': 252}), 32: (1, {'@': 252}), 53: (1, {'@': 252}), 90: (1, {'@': 252}), 38: (1, {'@': 252}), 30: (1, {'@': 252}), 47: (1, {'@': 252}), 44: (1, {'@': 252}), 95: (1, {'@': 252}), 9: (1, {'@': 252}), 96: (1, {'@': 252}), 97: (1, {'@': 252}), 0: (1, {'@': 252}), 84: (1, {'@': 252}), 85: (1, {'@': 252}), 35: (1, {'@': 252}), 49: (1, {'@': 252}), 99: (1, {'@': 252}), 50: (1, {'@': 252}), 89: (1, {'@': 252}), 45: (1, {'@': 252}), 83: (1, {'@': 252}), 42: (1, {'@': 252}), 86: (1, {'@': 252}), 87: (1, {'@': 252})}, 384: {94: (0, 51), 82: (1, {'@': 253}), 33: (1, {'@': 253}), 92: (1, {'@': 253}), 98: (1, {'@': 253}), 46: (1, {'@': 253}), 88: (1, {'@': 253}), 32: (1, {'@': 253}), 53: (1, {'@': 253}), 93: (1, {'@': 253}), 90: (1, {'@': 253}), 38: (1, {'@': 253}), 30: (1, {'@': 253}), 87: (1, {'@': 253}), 44: (1, {'@': 253}), 95: (1, {'@': 253}), 9: (1, {'@': 253}), 96: (1, {'@': 253}), 97: (1, {'@': 253}), 0: (1, {'@': 253}), 84: (1, {'@': 253}), 85: (1, {'@': 253}), 35: (1, {'@': 253}), 49: (1, {'@': 253}), 99: (1, {'@': 253}), 50: (1, {'@': 253}), 89: (1, {'@': 253}), 45: (1, {'@': 253}), 83: (1, {'@': 253}), 42: (1, {'@': 253}), 86: (1, {'@': 253}), 47: (1, {'@': 253})}, 385: {13: (0, 446), 29: (0, 357), 110: (0, 393), 16: (0, 370), 32: (0, 10), 8: (0, 345), 39: (0, 338), 31: (0, 354), 17: (0, 146), 11: (0, 449), 34: (0, 501)}, 386: {44: (1, {'@': 254}), 37: (1, {'@': 254}), 9: (1, {'@': 254}), 91: (1, {'@': 254}), 14: (1, {'@': 254}), 33: (1, {'@': 254}), 92: (1, {'@': 254}), 16: (1, {'@': 254}), 0: (1, {'@': 254}), 39: (1, {'@': 254}), 40: (1, {'@': 254}), 35: (1, {'@': 254}), 8: (1, {'@': 254}), 28: (1, {'@': 254}), 32: (1, {'@': 254}), 93: (1, {'@': 254}), 45: (1, {'@': 254}), 42: (1, {'@': 254}), 12: (1, {'@': 254}), 38: (1, {'@': 254}), 36: (1, {'@': 254}), 13: (1, {'@': 254}), 30: (1, {'@': 254}), 17: (1, {'@': 254}), 46: (1, {'@': 254}), 47: (1, {'@': 254}), 48: (1, {'@': 254}), 53: (1, {'@': 254}), 54: (1, {'@': 254}), 55: (1, {'@': 254}), 51: (1, {'@': 254}), 49: (1, {'@': 254}), 50: (1, {'@': 254}), 52: (1, {'@': 254}), 56: (1, {'@': 254}), 95: (1, {'@': 254})}, 387: {59: (0, 144), 60: (0, 138), 7: (0, 33), 62: (0, 402), 34: (0, 27), 63: (0, 322), 8: (0, 345), 65: (0, 473), 11: (0, 396), 29: (0, 347), 66: (0, 479), 67: (0, 476), 68: (0, 252), 69: (0, 50), 61: (0, 113), 71: (0, 414), 70: (0, 420), 16: (0, 7), 73: (0, 421), 12: (0, 54), 74: (0, 292), 64: (0, 432), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 78: (0, 206), 79: (0, 399), 80: (0, 120), 81: (0, 335), 72: (0, 360)}, 388: {83: (0, 310), 86: (0, 341), 144: (0, 49), 106: (0, 9), 84: (0, 1), 82: (0, 56), 29: (0, 14), 107: (0, 25), 89: (0, 4), 88: (0, 26), 105: (0, 8), 32: (0, 10), 108: (0, 0), 85: (0, 52), 145: (0, 13), 87: (1, {'@': 255})}, 389: {26: (0, 305), 2: (0, 366), 29: (0, 411), 31: (0, 426), 5: (0, 386), 8: (0, 345), 32: (0, 10), 34: (0, 397), 13: (0, 5), 12: (0, 45), 11: (0, 57), 36: (0, 356), 16: (0, 183), 39: (0, 338), 15: (0, 133), 17: (0, 146), 1: (0, 482)}, 390: {45: (0, 92)}, 391: {109: (0, 321), 29: (0, 116), 32: (0, 10)}, 392: {59: (0, 144), 60: (0, 138), 7: (0, 33), 62: (0, 402), 34: (0, 27), 63: (0, 322), 8: (0, 345), 65: (0, 473), 11: (0, 396), 29: (0, 347), 66: (0, 479), 67: (0, 476), 68: (0, 252), 69: (0, 50), 61: (0, 415), 71: (0, 414), 70: (0, 420), 16: (0, 7), 73: (0, 421), 12: (0, 54), 74: (0, 292), 64: (0, 432), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 78: (0, 206), 79: (0, 399), 80: (0, 120), 81: (0, 335), 72: (0, 360)}, 393: {56: (0, 328), 40: (0, 279)}, 394: {95: (1, {'@': 256}), 9: (1, {'@': 256}), 96: (1, {'@': 256}), 33: (1, {'@': 256}), 97: (1, {'@': 256}), 92: (1, {'@': 256}), 53: (1, {'@': 256}), 0: (1, {'@': 256}), 42: (1, {'@': 256}), 98: (1, {'@': 256}), 30: (1, {'@': 256}), 35: (1, {'@': 256}), 99: (1, {'@': 256}), 82: (1, {'@': 256}), 84: (1, {'@': 256}), 85: (1, {'@': 256}), 88: (1, {'@': 256}), 89: (1, {'@': 256}), 32: (1, {'@': 256}), 83: (1, {'@': 256}), 90: (1, {'@': 256}), 86: (1, {'@': 256}), 87: (1, {'@': 256}), 49: (1, {'@': 256}), 46: (1, {'@': 256}), 50: (1, {'@': 256}), 47: (1, {'@': 256})}, 395: {37: (1, {'@': 257}), 48: (1, {'@': 257}), 33: (1, {'@': 257}), 56: (1, {'@': 257}), 46: (1, {'@': 257}), 53: (1, {'@': 257}), 54: (1, {'@': 257}), 38: (1, {'@': 257}), 30: (1, {'@': 257}), 55: (1, {'@': 257}), 51: (1, {'@': 257}), 40: (1, {'@': 257}), 14: (1, {'@': 257}), 9: (1, {'@': 257}), 0: (1, {'@': 257}), 35: (1, {'@': 257}), 49: (1, {'@': 257}), 50: (1, {'@': 257}), 52: (1, {'@': 257}), 28: (1, {'@': 257}), 45: (1, {'@': 257}), 42: (1, {'@': 257}), 47: (1, {'@': 257})}, 396: {44: (1, {'@': 258}), 95: (1, {'@': 258}), 9: (1, {'@': 258}), 96: (1, {'@': 258}), 33: (1, {'@': 258}), 92: (1, {'@': 258}), 97: (1, {'@': 258}), 0: (1, {'@': 258}), 98: (1, {'@': 258}), 35: (1, {'@': 258}), 99: (1, {'@': 258}), 53: (1, {'@': 258}), 93: (1, {'@': 258}), 42: (1, {'@': 258}), 38: (1, {'@': 258}), 30: (1, {'@': 258}), 94: (1, {'@': 258}), 82: (1, {'@': 258}), 84: (1, {'@': 258}), 85: (1, {'@': 258}), 88: (1, {'@': 258}), 89: (1, {'@': 258}), 32: (1, {'@': 258}), 83: (1, {'@': 258}), 90: (1, {'@': 258}), 86: (1, {'@': 258}), 87: (1, {'@': 258}), 49: (1, {'@': 258}), 46: (1, {'@': 258}), 50: (1, {'@': 258}), 47: (1, {'@': 258}), 45: (1, {'@': 258})}, 397: {44: (1, {'@': 259}), 37: (1, {'@': 259}), 9: (1, {'@': 259}), 91: (1, {'@': 259}), 14: (1, {'@': 259}), 33: (1, {'@': 259}), 92: (1, {'@': 259}), 16: (1, {'@': 259}), 0: (1, {'@': 259}), 39: (1, {'@': 259}), 40: (1, {'@': 259}), 35: (1, {'@': 259}), 8: (1, {'@': 259}), 28: (1, {'@': 259}), 32: (1, {'@': 259}), 93: (1, {'@': 259}), 45: (1, {'@': 259}), 42: (1, {'@': 259}), 12: (1, {'@': 259}), 38: (1, {'@': 259}), 36: (1, {'@': 259}), 13: (1, {'@': 259}), 30: (1, {'@': 259}), 17: (1, {'@': 259}), 46: (1, {'@': 259}), 47: (1, {'@': 259}), 48: (1, {'@': 259}), 53: (1, {'@': 259}), 54: (1, {'@': 259}), 55: (1, {'@': 259}), 51: (1, {'@': 259}), 49: (1, {'@': 259}), 50: (1, {'@': 259}), 52: (1, {'@': 259}), 56: (1, {'@': 259}), 95: (1, {'@': 259})}, 398: {82: (1, {'@': 260}), 32: (1, {'@': 260}), 83: (1, {'@': 260}), 84: (1, {'@': 260}), 85: (1, {'@': 260}), 86: (1, {'@': 260}), 87: (1, {'@': 260}), 88: (1, {'@': 260}), 89: (1, {'@': 260}), 90: (1, {'@': 260})}, 399: {44: (1, {'@': 261}), 95: (1, {'@': 261}), 9: (1, {'@': 261}), 96: (1, {'@': 261}), 33: (1, {'@': 261}), 92: (1, {'@': 261}), 97: (1, {'@': 261}), 0: (1, {'@': 261}), 98: (1, {'@': 261}), 35: (1, {'@': 261}), 99: (1, {'@': 261}), 53: (1, {'@': 261}), 93: (1, {'@': 261}), 42: (1, {'@': 261}), 38: (1, {'@': 261}), 30: (1, {'@': 261}), 94: (1, {'@': 261}), 82: (1, {'@': 261}), 84: (1, {'@': 261}), 85: (1, {'@': 261}), 88: (1, {'@': 261}), 89: (1, {'@': 261}), 32: (1, {'@': 261}), 83: (1, {'@': 261}), 90: (1, {'@': 261}), 86: (1, {'@': 261}), 87: (1, {'@': 261}), 49: (1, {'@': 261}), 46: (1, {'@': 261}), 50: (1, {'@': 261}), 47: (1, {'@': 261}), 45: (1, {'@': 261})}, 400: {45: (0, 178)}, 401: {95: (0, 392), 82: (1, {'@': 262}), 32: (1, {'@': 262}), 83: (1, {'@': 262}), 84: (1, {'@': 262}), 85: (1, {'@': 262}), 86: (1, {'@': 262}), 87: (1, {'@': 262}), 88: (1, {'@': 262}), 89: (1, {'@': 262}), 90: (1, {'@': 262})}, 402: {17: (0, 115)}, 403: {146: (0, 166), 47: (0, 43), 53: (1, {'@': 263})}, 404: {32: (1, {'@': 264}), 62: (1, {'@': 264}), 16: (1, {'@': 264}), 70: (1, {'@': 264}), 81: (1, {'@': 264}), 38: (1, {'@': 264}), 71: (1, {'@': 264}), 8: (1, {'@': 264}), 77: (1, {'@': 264})}, 405: {82: (1, {'@': 265}), 84: (1, {'@': 265}), 85: (1, {'@': 265}), 88: (1, {'@': 265}), 89: (1, {'@': 265}), 32: (1, {'@': 265}), 45: (1, {'@': 265}), 83: (1, {'@': 265}), 90: (1, {'@': 265}), 86: (1, {'@': 265}), 87: (1, {'@': 265})}, 406: {59: (0, 144), 60: (0, 138), 62: (0, 402), 104: (0, 403), 8: (0, 345), 11: (0, 396), 29: (0, 408), 112: (0, 130), 68: (0, 412), 71: (0, 414), 70: (0, 420), 73: (0, 421), 16: (0, 424), 64: (0, 432), 75: (0, 434), 32: (0, 10), 77: (0, 440), 38: (0, 444), 79: (0, 399), 81: (0, 335), 72: (0, 360), 53: (1, {'@': 114})}, 407: {40: (0, 326)}, 408: {13: (0, 337), 16: (0, 417), 44: (1, {'@': 195}), 95: (1, {'@': 195}), 82: (1, {'@': 195}), 92: (1, {'@': 195}), 84: (1, {'@': 195}), 85: (1, {'@': 195}), 35: (1, {'@': 195}), 49: (1, {'@': 195}), 99: (1, {'@': 195}), 46: (1, {'@': 195}), 88: (1, {'@': 195}), 50: (1, {'@': 195}), 89: (1, {'@': 195}), 32: (1, {'@': 195}), 53: (1, {'@': 195}), 93: (1, {'@': 195}), 83: (1, {'@': 195}), 90: (1, {'@': 195}), 42: (1, {'@': 195}), 38: (1, {'@': 195}), 86: (1, {'@': 195}), 87: (1, {'@': 195}), 94: (1, {'@': 195}), 47: (1, {'@': 195})}, 409: {14: (1, {'@': 266}), 9: (1, {'@': 266}), 37: (1, {'@': 266}), 17: (1, {'@': 266}), 33: (1, {'@': 266}), 16: (1, {'@': 266}), 0: (1, {'@': 266}), 39: (1, {'@': 266}), 35: (1, {'@': 266}), 8: (1, {'@': 266}), 28: (1, {'@': 266}), 32: (1, {'@': 266}), 42: (1, {'@': 266}), 12: (1, {'@': 266}), 38: (1, {'@': 266}), 30: (1, {'@': 266}), 36: (1, {'@': 266}), 13: (1, {'@': 266}), 40: (1, {'@': 266}), 48: (1, {'@': 266}), 46: (1, {'@': 266}), 53: (1, {'@': 266}), 54: (1, {'@': 266}), 55: (1, {'@': 266}), 51: (1, {'@': 266}), 49: (1, {'@': 266}), 50: (1, {'@': 266}), 52: (1, {'@': 266}), 45: (1, {'@': 266}), 47: (1, {'@': 266})}, 410: {53: (0, 254)}, 411: {44: (1, {'@': 267}), 37: (1, {'@': 267}), 9: (1, {'@': 267}), 91: (1, {'@': 267}), 14: (1, {'@': 267}), 33: (1, {'@': 267}), 92: (1, {'@': 267}), 16: (1, {'@': 267}), 0: (1, {'@': 267}), 39: (1, {'@': 267}), 40: (1, {'@': 267}), 35: (1, {'@': 267}), 8: (1, {'@': 267}), 28: (1, {'@': 267}), 32: (1, {'@': 267}), 93: (1, {'@': 267}), 45: (1, {'@': 267}), 42: (1, {'@': 267}), 12: (1, {'@': 267}), 38: (1, {'@': 267}), 36: (1, {'@': 267}), 13: (1, {'@': 267}), 30: (1, {'@': 267}), 17: (1, {'@': 267}), 46: (1, {'@': 267}), 47: (1, {'@': 267}), 48: (1, {'@': 267}), 53: (1, {'@': 267}), 54: (1, {'@': 267}), 55: (1, {'@': 267}), 51: (1, {'@': 267}), 49: (1, {'@': 267}), 50: (1, {'@': 267}), 52: (1, {'@': 267}), 56: (1, {'@': 267}), 95: (1, {'@': 267})}, 412: {47: (1, {'@': 268}), 53: (1, {'@': 268})}, 413: {60: (0, 138), 62: (0, 402), 59: (0, 376), 32: (0, 10), 8: (0, 345), 11: (0, 396), 77: (0, 440), 38: (0, 444), 71: (0, 414), 70: (0, 420), 79: (0, 399), 29: (0, 486), 81: (0, 335), 16: (0, 424), 72: (0, 360)}, 414: {17: (0, 28)}, 415: {95: (0, 392), 53: (1, {'@': 269}), 82: (1, {'@': 269}), 84: (1, {'@': 269}), 85: (1, {'@': 269}), 88: (1, {'@': 269}), 89: (1, {'@': 269}), 32: (1, {'@': 269}), 83: (1, {'@': 269}), 90: (1, {'@': 269}), 86: (1, {'@': 269}), 87: (1, {'@': 269}), 49: (1, {'@': 269}), 46: (1, {'@': 269}), 50: (1, {'@': 269})}, 416: {14: (1, {'@': 270}), 9: (1, {'@': 270}), 37: (1, {'@': 270}), 17: (1, {'@': 270}), 33: (1, {'@': 270}), 16: (1, {'@': 270}), 0: (1, {'@': 270}), 39: (1, {'@': 270}), 35: (1, {'@': 270}), 8: (1, {'@': 270}), 28: (1, {'@': 270}), 32: (1, {'@': 270}), 42: (1, {'@': 270}), 12: (1, {'@': 270}), 38: (1, {'@': 270}), 30: (1, {'@': 270}), 36: (1, {'@': 270}), 13: (1, {'@': 270}), 40: (1, {'@': 270}), 48: (1, {'@': 270}), 46: (1, {'@': 270}), 53: (1, {'@': 270}), 54: (1, {'@': 270}), 55: (1, {'@': 270}), 51: (1, {'@': 270}), 49: (1, {'@': 270}), 50: (1, {'@': 270}), 52: (1, {'@': 270}), 45: (1, {'@': 270}), 47: (1, {'@': 270})}, 417: {59: (0, 144), 60: (0, 138), 62: (0, 402), 104: (0, 403), 8: (0, 345), 11: (0, 396), 29: (0, 408), 68: (0, 412), 71: (0, 414), 70: (0, 420), 73: (0, 421), 16: (0, 424), 64: (0, 432), 75: (0, 434), 32: (0, 10), 112: (0, 445), 77: (0, 440), 38: (0, 444), 79: (0, 399), 81: (0, 335), 72: (0, 360), 53: (1, {'@': 114})}, 418: {60: (0, 384), 62: (0, 402), 32: (0, 10), 8: (0, 345), 11: (0, 396), 77: (0, 440), 38: (0, 444), 71: (0, 414), 70: (0, 420), 79: (0, 399), 29: (0, 486), 81: (0, 335), 16: (0, 424)}, 419: {16: (0, 381), 44: (1, {'@': 271}), 95: (1, {'@': 271}), 9: (1, {'@': 271}), 96: (1, {'@': 271}), 33: (1, {'@': 271}), 92: (1, {'@': 271}), 97: (1, {'@': 271}), 0: (1, {'@': 271}), 98: (1, {'@': 271}), 35: (1, {'@': 271}), 99: (1, {'@': 271}), 53: (1, {'@': 271}), 93: (1, {'@': 271}), 42: (1, {'@': 271}), 38: (1, {'@': 271}), 30: (1, {'@': 271}), 94: (1, {'@': 271}), 82: (1, {'@': 271}), 84: (1, {'@': 271}), 85: (1, {'@': 271}), 88: (1, {'@': 271}), 89: (1, {'@': 271}), 32: (1, {'@': 271}), 83: (1, {'@': 271}), 90: (1, {'@': 271}), 86: (1, {'@': 271}), 87: (1, {'@': 271}), 49: (1, {'@': 271}), 46: (1, {'@': 271}), 50: (1, {'@': 271}), 47: (1, {'@': 271}), 45: (1, {'@': 271})}, 420: {17: (0, 15)}, 421: {95: (1, {'@': 272}), 9: (1, {'@': 272}), 96: (1, {'@': 272}), 53: (1, {'@': 272}), 33: (1, {'@': 272}), 97: (1, {'@': 272}), 92: (1, {'@': 272}), 0: (1, {'@': 272}), 42: (1, {'@': 272}), 98: (1, {'@': 272}), 30: (1, {'@': 272}), 35: (1, {'@': 272}), 99: (1, {'@': 272}), 82: (1, {'@': 272}), 84: (1, {'@': 272}), 85: (1, {'@': 272}), 88: (1, {'@': 272}), 89: (1, {'@': 272}), 32: (1, {'@': 272}), 83: (1, {'@': 272}), 90: (1, {'@': 272}), 86: (1, {'@': 272}), 87: (1, {'@': 272}), 49: (1, {'@': 272}), 46: (1, {'@': 272}), 50: (1, {'@': 272}), 47: (1, {'@': 272}), 45: (1, {'@': 272})}, 422: {14: (1, {'@': 273}), 9: (1, {'@': 273}), 37: (1, {'@': 273}), 17: (1, {'@': 273}), 33: (1, {'@': 273}), 16: (1, {'@': 273}), 0: (1, {'@': 273}), 39: (1, {'@': 273}), 35: (1, {'@': 273}), 8: (1, {'@': 273}), 28: (1, {'@': 273}), 32: (1, {'@': 273}), 42: (1, {'@': 273}), 12: (1, {'@': 273}), 38: (1, {'@': 273}), 30: (1, {'@': 273}), 36: (1, {'@': 273}), 13: (1, {'@': 273}), 40: (1, {'@': 273}), 48: (1, {'@': 273}), 46: (1, {'@': 273}), 53: (1, {'@': 273}), 54: (1, {'@': 273}), 55: (1, {'@': 273}), 51: (1, {'@': 273}), 49: (1, {'@': 273}), 50: (1, {'@': 273}), 52: (1, {'@': 273}), 45: (1, {'@': 273}), 47: (1, {'@': 273})}, 423: {82: (1, {'@': 274}), 32: (1, {'@': 274}), 83: (1, {'@': 274}), 84: (1, {'@': 274}), 85: (1, {'@': 274}), 86: (1, {'@': 274}), 87: (1, {'@': 274}), 88: (1, {'@': 274}), 89: (1, {'@': 274}), 90: (1, {'@': 274})}, 424: {59: (0, 144), 60: (0, 138), 62: (0, 402), 64: (0, 443), 75: (0, 434), 32: (0, 10), 8: (0, 345), 11: (0, 396), 77: (0, 440), 38: (0, 444), 71: (0, 414), 70: (0, 420), 79: (0, 399), 29: (0, 486), 81: (0, 335), 73: (0, 421), 16: (0, 424), 72: (0, 360)}, 425: {95: (1, {'@': 275}), 42: (1, {'@': 275}), 35: (1, {'@': 275}), 53: (1, {'@': 275}), 99: (1, {'@': 275}), 82: (1, {'@': 275}), 32: (1, {'@': 275}), 83: (1, {'@': 275}), 90: (1, {'@': 275}), 84: (1, {'@': 275}), 85: (1, {'@': 275}), 86: (1, {'@': 275}), 87: (1, {'@': 275}), 88: (1, {'@': 275}), 89: (1, {'@': 275}), 49: (1, {'@': 275}), 46: (1, {'@': 275}), 50: (1, {'@': 275})}, 426: {44: (1, {'@': 276}), 37: (1, {'@': 276}), 9: (1, {'@': 276}), 91: (1, {'@': 276}), 14: (1, {'@': 276}), 33: (1, {'@': 276}), 92: (1, {'@': 276}), 16: (1, {'@': 276}), 0: (1, {'@': 276}), 39: (1, {'@': 276}), 40: (1, {'@': 276}), 35: (1, {'@': 276}), 8: (1, {'@': 276}), 28: (1, {'@': 276}), 32: (1, {'@': 276}), 93: (1, {'@': 276}), 45: (1, {'@': 276}), 42: (1, {'@': 276}), 12: (1, {'@': 276}), 38: (1, {'@': 276}), 36: (1, {'@': 276}), 13: (1, {'@': 276}), 30: (1, {'@': 276}), 17: (1, {'@': 276}), 46: (1, {'@': 276}), 47: (1, {'@': 276}), 48: (1, {'@': 276}), 53: (1, {'@': 276}), 54: (1, {'@': 276}), 55: (1, {'@': 276}), 51: (1, {'@': 276}), 49: (1, {'@': 276}), 50: (1, {'@': 276}), 52: (1, {'@': 276}), 56: (1, {'@': 276}), 95: (1, {'@': 276})}, 427: {44: (1, {'@': 277}), 37: (1, {'@': 277}), 9: (1, {'@': 277}), 91: (1, {'@': 277}), 14: (1, {'@': 277}), 33: (1, {'@': 277}), 92: (1, {'@': 277}), 16: (1, {'@': 277}), 0: (1, {'@': 277}), 39: (1, {'@': 277}), 40: (1, {'@': 277}), 35: (1, {'@': 277}), 8: (1, {'@': 277}), 28: (1, {'@': 277}), 32: (1, {'@': 277}), 93: (1, {'@': 277}), 45: (1, {'@': 277}), 42: (1, {'@': 277}), 12: (1, {'@': 277}), 38: (1, {'@': 277}), 36: (1, {'@': 277}), 13: (1, {'@': 277}), 30: (1, {'@': 277}), 17: (1, {'@': 277}), 46: (1, {'@': 277}), 47: (1, {'@': 277}), 48: (1, {'@': 277}), 53: (1, {'@': 277}), 54: (1, {'@': 277}), 55: (1, {'@': 277}), 51: (1, {'@': 277}), 49: (1, {'@': 277}), 50: (1, {'@': 277}), 52: (1, {'@': 277}), 56: (1, {'@': 277}), 95: (1, {'@': 277})}, 428: {40: (0, 122)}, 429: {37: (1, {'@': 278}), 48: (1, {'@': 278}), 33: (1, {'@': 278}), 56: (1, {'@': 278}), 46: (1, {'@': 278}), 53: (1, {'@': 278}), 93: (1, {'@': 278}), 54: (1, {'@': 278}), 38: (1, {'@': 278}), 30: (1, {'@': 278}), 55: (1, {'@': 278}), 51: (1, {'@': 278}), 40: (1, {'@': 278}), 44: (1, {'@': 278}), 9: (1, {'@': 278}), 14: (1, {'@': 278}), 0: (1, {'@': 278}), 35: (1, {'@': 278}), 49: (1, {'@': 278}), 50: (1, {'@': 278}), 52: (1, {'@': 278}), 28: (1, {'@': 278}), 45: (1, {'@': 278}), 42: (1, {'@': 278}), 47: (1, {'@': 278})}, 430: {29: (0, 77), 32: (0, 10)}, 431: {14: (1, {'@': 279}), 9: (1, {'@': 279}), 37: (1, {'@': 279}), 17: (1, {'@': 279}), 33: (1, {'@': 279}), 16: (1, {'@': 279}), 0: (1, {'@': 279}), 39: (1, {'@': 279}), 35: (1, {'@': 279}), 8: (1, {'@': 279}), 28: (1, {'@': 279}), 32: (1, {'@': 279}), 42: (1, {'@': 279}), 12: (1, {'@': 279}), 38: (1, {'@': 279}), 30: (1, {'@': 279}), 36: (1, {'@': 279}), 13: (1, {'@': 279}), 40: (1, {'@': 279}), 48: (1, {'@': 279}), 46: (1, {'@': 279}), 53: (1, {'@': 279}), 54: (1, {'@': 279}), 55: (1, {'@': 279}), 51: (1, {'@': 279}), 49: (1, {'@': 279}), 50: (1, {'@': 279}), 52: (1, {'@': 279}), 45: (1, {'@': 279}), 47: (1, {'@': 279})}, 432: {95: (1, {'@': 280}), 9: (1, {'@': 280}), 82: (1, {'@': 280}), 96: (1, {'@': 280}), 33: (1, {'@': 280}), 97: (1, {'@': 280}), 92: (1, {'@': 280}), 0: (1, {'@': 280}), 84: (1, {'@': 280}), 85: (1, {'@': 280}), 98: (1, {'@': 280}), 35: (1, {'@': 280}), 99: (1, {'@': 280}), 88: (1, {'@': 280}), 89: (1, {'@': 280}), 32: (1, {'@': 280}), 83: (1, {'@': 280}), 90: (1, {'@': 280}), 42: (1, {'@': 280}), 30: (1, {'@': 280}), 86: (1, {'@': 280}), 87: (1, {'@': 280}), 49: (1, {'@': 280}), 46: (1, {'@': 280}), 50: (1, {'@': 280}), 53: (1, {'@': 280}), 47: (1, {'@': 280})}, 433: {47: (0, 363), 147: (0, 368), 90: (0, 371)}, 434: {38: (0, 497), 148: (0, 475), 95: (1, {'@': 281}), 9: (1, {'@': 281}), 96: (1, {'@': 281}), 53: (1, {'@': 281}), 33: (1, {'@': 281}), 97: (1, {'@': 281}), 92: (1, {'@': 281}), 0: (1, {'@': 281}), 42: (1, {'@': 281}), 98: (1, {'@': 281}), 30: (1, {'@': 281}), 35: (1, {'@': 281}), 99: (1, {'@': 281}), 82: (1, {'@': 281}), 84: (1, {'@': 281}), 85: (1, {'@': 281}), 88: (1, {'@': 281}), 89: (1, {'@': 281}), 32: (1, {'@': 281}), 83: (1, {'@': 281}), 90: (1, {'@': 281}), 86: (1, {'@': 281}), 87: (1, {'@': 281}), 49: (1, {'@': 281}), 46: (1, {'@': 281}), 50: (1, {'@': 281}), 47: (1, {'@': 281}), 45: (1, {'@': 281})}, 435: {29: (0, 411), 31: (0, 426), 5: (0, 386), 8: (0, 345), 32: (0, 10), 34: (0, 397), 13: (0, 5), 12: (0, 45), 11: (0, 57), 36: (0, 356), 16: (0, 183), 26: (0, 377), 39: (0, 338), 15: (0, 133), 17: (0, 146), 37: (1, {'@': 282}), 91: (1, {'@': 282}), 48: (1, {'@': 282}), 33: (1, {'@': 282}), 92: (1, {'@': 282}), 56: (1, {'@': 282}), 46: (1, {'@': 282}), 53: (1, {'@': 282}), 93: (1, {'@': 282}), 54: (1, {'@': 282}), 38: (1, {'@': 282}), 30: (1, {'@': 282}), 55: (1, {'@': 282}), 40: (1, {'@': 282}), 51: (1, {'@': 282}), 44: (1, {'@': 282}), 9: (1, {'@': 282}), 14: (1, {'@': 282}), 0: (1, {'@': 282}), 35: (1, {'@': 282}), 49: (1, {'@': 282}), 50: (1, {'@': 282}), 52: (1, {'@': 282}), 28: (1, {'@': 282}), 45: (1, {'@': 282}), 42: (1, {'@': 282}), 47: (1, {'@': 282})}, 436: {104: (0, 494), 59: (0, 144), 60: (0, 138), 62: (0, 402), 8: (0, 345), 11: (0, 396), 29: (0, 408), 68: (0, 412), 71: (0, 414), 70: (0, 420), 73: (0, 421), 16: (0, 424), 64: (0, 432), 75: (0, 434), 32: (0, 10), 77: (0, 440), 38: (0, 444), 79: (0, 399), 81: (0, 335), 72: (0, 360)}, 437: {47: (1, {'@': 283}), 53: (1, {'@': 283})}, 438: {40: (0, 112)}, 439: {82: (1, {'@': 284}), 32: (1, {'@': 284}), 83: (1, {'@': 284}), 84: (1, {'@': 284}), 85: (1, {'@': 284}), 86: (1, {'@': 284}), 87: (1, {'@': 284}), 88: (1, {'@': 284}), 89: (1, {'@': 284}), 90: (1, {'@': 284})}, 440: {17: (0, 129)}, 441: {47: (0, 136), 46: (0, 142)}, 442: {59: (0, 144), 60: (0, 138), 7: (0, 33), 62: (0, 402), 34: (0, 27), 63: (0, 322), 8: (0, 345), 65: (0, 473), 11: (0, 396), 29: (0, 347), 66: (0, 479), 67: (0, 476), 68: (0, 252), 61: (0, 107), 69: (0, 50), 71: (0, 414), 70: (0, 420), 16: (0, 7), 73: (0, 421), 12: (0, 54), 74: (0, 292), 64: (0, 432), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 78: (0, 206), 79: (0, 399), 80: (0, 120), 81: (0, 335), 72: (0, 360)}, 443: {53: (0, 84)}, 444: {60: (0, 58), 62: (0, 402), 32: (0, 10), 8: (0, 345), 11: (0, 396), 77: (0, 440), 38: (0, 444), 71: (0, 414), 70: (0, 420), 79: (0, 399), 29: (0, 486), 81: (0, 335), 16: (0, 424)}, 445: {53: (0, 103)}, 446: {13: (0, 446), 29: (0, 318), 46: (0, 502), 110: (0, 495), 16: (0, 370), 32: (0, 10), 8: (0, 345), 39: (0, 338), 31: (0, 354), 17: (0, 146), 11: (0, 449), 34: (0, 501)}, 447: {45: (0, 390), 46: (0, 394)}, 448: {18: (0, 157), 0: (0, 319), 14: (0, 20), 22: (0, 238), 37: (0, 226), 28: (0, 409), 40: (0, 241), 30: (0, 431), 33: (0, 422), 35: (0, 416), 42: (0, 243), 21: (0, 242), 9: (0, 320), 45: (1, {'@': 285}), 46: (1, {'@': 285}), 47: (1, {'@': 285}), 54: (1, {'@': 285}), 51: (1, {'@': 285}), 48: (1, {'@': 285}), 49: (1, {'@': 285}), 50: (1, {'@': 285}), 52: (1, {'@': 285}), 53: (1, {'@': 285}), 55: (1, {'@': 285})}, 449: {47: (1, {'@': 286}), 40: (1, {'@': 286}), 53: (1, {'@': 286}), 95: (1, {'@': 286}), 56: (1, {'@': 286}), 46: (1, {'@': 286})}, 450: {26: (0, 305), 1: (0, 355), 2: (0, 366), 29: (0, 411), 31: (0, 426), 5: (0, 386), 8: (0, 345), 32: (0, 10), 34: (0, 397), 13: (0, 5), 12: (0, 45), 11: (0, 57), 36: (0, 356), 16: (0, 183), 39: (0, 338), 15: (0, 133), 17: (0, 146), 23: (0, 429)}, 451: {82: (1, {'@': 287}), 32: (1, {'@': 287}), 83: (1, {'@': 287}), 84: (1, {'@': 287}), 85: (1, {'@': 287}), 86: (1, {'@': 287}), 87: (1, {'@': 287}), 88: (1, {'@': 287}), 89: (1, {'@': 287}), 90: (1, {'@': 287})}, 452: {53: (0, 239), 47: (0, 106)}, 453: {47: (0, 280)}, 454: {53: (0, 470)}, 455: {0: (0, 319), 1: (0, 355), 2: (0, 366), 3: (0, 385), 4: (0, 314), 5: (0, 386), 6: (0, 379), 7: (0, 332), 8: (0, 345), 9: (0, 320), 27: (0, 61), 10: (0, 2), 11: (0, 57), 12: (0, 45), 13: (0, 5), 14: (0, 20), 15: (0, 133), 16: (0, 183), 17: (0, 146), 18: (0, 118), 19: (0, 211), 20: (0, 213), 21: (0, 242), 22: (0, 238), 23: (0, 216), 24: (0, 287), 25: (0, 298), 26: (0, 305), 28: (0, 409), 29: (0, 411), 30: (0, 431), 31: (0, 426), 32: (0, 10), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 38: (0, 247), 39: (0, 338), 40: (0, 241), 41: (0, 249), 42: (0, 243)}, 456: {29: (0, 372), 57: (0, 176), 32: (0, 10)}, 457: {44: (1, {'@': 288}), 95: (1, {'@': 288}), 9: (1, {'@': 288}), 96: (1, {'@': 288}), 33: (1, {'@': 288}), 92: (1, {'@': 288}), 97: (1, {'@': 288}), 0: (1, {'@': 288}), 98: (1, {'@': 288}), 35: (1, {'@': 288}), 99: (1, {'@': 288}), 53: (1, {'@': 288}), 93: (1, {'@': 288}), 42: (1, {'@': 288}), 38: (1, {'@': 288}), 30: (1, {'@': 288}), 94: (1, {'@': 288}), 82: (1, {'@': 288}), 84: (1, {'@': 288}), 85: (1, {'@': 288}), 88: (1, {'@': 288}), 89: (1, {'@': 288}), 32: (1, {'@': 288}), 83: (1, {'@': 288}), 90: (1, {'@': 288}), 86: (1, {'@': 288}), 87: (1, {'@': 288}), 49: (1, {'@': 288}), 46: (1, {'@': 288}), 50: (1, {'@': 288}), 47: (1, {'@': 288}), 45: (1, {'@': 288})}, 458: {0: (0, 319), 1: (0, 355), 2: (0, 366), 3: (0, 385), 4: (0, 314), 5: (0, 386), 6: (0, 379), 7: (0, 332), 8: (0, 345), 9: (0, 320), 10: (0, 2), 11: (0, 57), 12: (0, 45), 13: (0, 5), 14: (0, 20), 15: (0, 133), 16: (0, 183), 17: (0, 146), 18: (0, 118), 19: (0, 211), 20: (0, 213), 21: (0, 242), 22: (0, 238), 23: (0, 216), 24: (0, 287), 25: (0, 298), 26: (0, 305), 27: (0, 167), 28: (0, 409), 29: (0, 411), 30: (0, 431), 31: (0, 426), 32: (0, 10), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 38: (0, 247), 39: (0, 338), 40: (0, 241), 41: (0, 249), 42: (0, 243)}, 459: {46: (0, 472)}, 460: {45: (0, 145)}, 461: {60: (0, 138), 62: (0, 402), 72: (0, 203), 32: (0, 10), 8: (0, 345), 11: (0, 396), 77: (0, 440), 38: (0, 444), 71: (0, 414), 70: (0, 420), 79: (0, 399), 29: (0, 486), 81: (0, 335), 16: (0, 424)}, 462: {47: (0, 484)}, 463: {29: (0, 267), 32: (0, 10)}, 464: {95: (1, {'@': 289}), 9: (1, {'@': 289}), 96: (1, {'@': 289}), 33: (1, {'@': 289}), 97: (1, {'@': 289}), 92: (1, {'@': 289}), 53: (1, {'@': 289}), 0: (1, {'@': 289}), 42: (1, {'@': 289}), 98: (1, {'@': 289}), 30: (1, {'@': 289}), 35: (1, {'@': 289}), 99: (1, {'@': 289}), 82: (1, {'@': 289}), 84: (1, {'@': 289}), 85: (1, {'@': 289}), 88: (1, {'@': 289}), 89: (1, {'@': 289}), 32: (1, {'@': 289}), 83: (1, {'@': 289}), 90: (1, {'@': 289}), 86: (1, {'@': 289}), 87: (1, {'@': 289}), 49: (1, {'@': 289}), 46: (1, {'@': 289}), 50: (1, {'@': 289}), 47: (1, {'@': 289})}, 465: {59: (0, 144), 60: (0, 138), 62: (0, 402), 104: (0, 403), 8: (0, 345), 11: (0, 396), 29: (0, 408), 68: (0, 412), 71: (0, 414), 70: (0, 420), 73: (0, 421), 16: (0, 424), 112: (0, 492), 64: (0, 432), 75: (0, 434), 32: (0, 10), 77: (0, 440), 38: (0, 444), 79: (0, 399), 81: (0, 335), 72: (0, 360), 53: (1, {'@': 114})}, 466: {1: (0, 355), 2: (0, 366), 5: (0, 386), 8: (0, 345), 12: (0, 45), 11: (0, 57), 10: (0, 2), 13: (0, 5), 15: (0, 133), 16: (0, 183), 19: (0, 117), 17: (0, 146), 23: (0, 216), 26: (0, 305), 29: (0, 411), 31: (0, 426), 32: (0, 10), 34: (0, 397), 36: (0, 356), 39: (0, 338)}, 467: {44: (1, {'@': 290}), 95: (1, {'@': 290}), 9: (1, {'@': 290}), 96: (1, {'@': 290}), 33: (1, {'@': 290}), 92: (1, {'@': 290}), 97: (1, {'@': 290}), 0: (1, {'@': 290}), 98: (1, {'@': 290}), 35: (1, {'@': 290}), 99: (1, {'@': 290}), 53: (1, {'@': 290}), 93: (1, {'@': 290}), 42: (1, {'@': 290}), 38: (1, {'@': 290}), 30: (1, {'@': 290}), 94: (1, {'@': 290}), 82: (1, {'@': 290}), 84: (1, {'@': 290}), 85: (1, {'@': 290}), 88: (1, {'@': 290}), 89: (1, {'@': 290}), 32: (1, {'@': 290}), 83: (1, {'@': 290}), 90: (1, {'@': 290}), 86: (1, {'@': 290}), 87: (1, {'@': 290}), 49: (1, {'@': 290}), 46: (1, {'@': 290}), 50: (1, {'@': 290}), 47: (1, {'@': 290}), 45: (1, {'@': 290})}, 468: {45: (1, {'@': 291})}, 469: {29: (0, 315), 32: (0, 10)}, 470: {47: (1, {'@': 292}), 90: (1, {'@': 292})}, 471: {26: (0, 305), 1: (0, 355), 2: (0, 366), 29: (0, 411), 31: (0, 426), 5: (0, 386), 8: (0, 345), 32: (0, 10), 34: (0, 397), 13: (0, 5), 12: (0, 45), 11: (0, 57), 36: (0, 356), 23: (0, 216), 10: (0, 293), 16: (0, 183), 39: (0, 338), 15: (0, 133), 17: (0, 146)}, 472: {95: (1, {'@': 293}), 9: (1, {'@': 293}), 96: (1, {'@': 293}), 33: (1, {'@': 293}), 97: (1, {'@': 293}), 92: (1, {'@': 293}), 53: (1, {'@': 293}), 0: (1, {'@': 293}), 42: (1, {'@': 293}), 98: (1, {'@': 293}), 30: (1, {'@': 293}), 35: (1, {'@': 293}), 99: (1, {'@': 293}), 82: (1, {'@': 293}), 84: (1, {'@': 293}), 85: (1, {'@': 293}), 88: (1, {'@': 293}), 89: (1, {'@': 293}), 32: (1, {'@': 293}), 83: (1, {'@': 293}), 90: (1, {'@': 293}), 86: (1, {'@': 293}), 87: (1, {'@': 293}), 49: (1, {'@': 293}), 46: (1, {'@': 293}), 50: (1, {'@': 293}), 47: (1, {'@': 293})}, 473: {35: (0, 170), 99: (0, 179), 42: (0, 193), 95: (1, {'@': 294}), 53: (1, {'@': 294}), 82: (1, {'@': 294}), 84: (1, {'@': 294}), 85: (1, {'@': 294}), 88: (1, {'@': 294}), 89: (1, {'@': 294}), 32: (1, {'@': 294}), 83: (1, {'@': 294}), 90: (1, {'@': 294}), 86: (1, {'@': 294}), 87: (1, {'@': 294}), 49: (1, {'@': 294}), 46: (1, {'@': 294}), 50: (1, {'@': 294})}, 474: {29: (0, 336), 32: (0, 10)}, 475: {38: (0, 96), 95: (1, {'@': 295}), 9: (1, {'@': 295}), 96: (1, {'@': 295}), 53: (1, {'@': 295}), 33: (1, {'@': 295}), 97: (1, {'@': 295}), 92: (1, {'@': 295}), 0: (1, {'@': 295}), 42: (1, {'@': 295}), 98: (1, {'@': 295}), 30: (1, {'@': 295}), 35: (1, {'@': 295}), 99: (1, {'@': 295}), 82: (1, {'@': 295}), 84: (1, {'@': 295}), 85: (1, {'@': 295}), 88: (1, {'@': 295}), 89: (1, {'@': 295}), 32: (1, {'@': 295}), 83: (1, {'@': 295}), 90: (1, {'@': 295}), 86: (1, {'@': 295}), 87: (1, {'@': 295}), 49: (1, {'@': 295}), 46: (1, {'@': 295}), 50: (1, {'@': 295}), 47: (1, {'@': 295}), 45: (1, {'@': 295})}, 476: {32: (1, {'@': 296})}, 477: {27: (0, 165), 0: (0, 319), 1: (0, 355), 2: (0, 366), 3: (0, 385), 4: (0, 314), 5: (0, 386), 6: (0, 379), 7: (0, 332), 8: (0, 345), 9: (0, 320), 10: (0, 2), 11: (0, 57), 12: (0, 45), 13: (0, 5), 14: (0, 20), 15: (0, 133), 16: (0, 183), 17: (0, 146), 18: (0, 118), 19: (0, 211), 20: (0, 213), 21: (0, 242), 22: (0, 238), 23: (0, 216), 24: (0, 287), 25: (0, 298), 26: (0, 305), 28: (0, 409), 29: (0, 411), 30: (0, 431), 31: (0, 426), 32: (0, 10), 33: (0, 422), 34: (0, 397), 35: (0, 416), 36: (0, 356), 37: (0, 226), 38: (0, 247), 39: (0, 338), 40: (0, 241), 41: (0, 249), 42: (0, 243)}, 478: {82: (1, {'@': 297}), 32: (1, {'@': 297}), 83: (1, {'@': 297}), 84: (1, {'@': 297}), 85: (1, {'@': 297}), 86: (1, {'@': 297}), 87: (1, {'@': 297}), 88: (1, {'@': 297}), 89: (1, {'@': 297}), 90: (1, {'@': 297})}, 479: {118: (0, 44), 32: (0, 10), 29: (0, 372), 57: (0, 159)}, 480: {26: (0, 305), 2: (0, 366), 29: (0, 411), 31: (0, 426), 5: (0, 386), 8: (0, 345), 32: (0, 10), 34: (0, 397), 13: (0, 5), 12: (0, 45), 11: (0, 57), 36: (0, 356), 16: (0, 183), 39: (0, 338), 15: (0, 133), 17: (0, 146), 1: (0, 89)}, 481: {47: (0, 197)}, 482: {37: (1, {'@': 298}), 48: (1, {'@': 298}), 33: (1, {'@': 298}), 92: (1, {'@': 298}), 56: (1, {'@': 298}), 46: (1, {'@': 298}), 53: (1, {'@': 298}), 93: (1, {'@': 298}), 54: (1, {'@': 298}), 38: (1, {'@': 298}), 30: (1, {'@': 298}), 55: (1, {'@': 298}), 40: (1, {'@': 298}), 51: (1, {'@': 298}), 44: (1, {'@': 298}), 9: (1, {'@': 298}), 14: (1, {'@': 298}), 0: (1, {'@': 298}), 35: (1, {'@': 298}), 49: (1, {'@': 298}), 50: (1, {'@': 298}), 52: (1, {'@': 298}), 28: (1, {'@': 298}), 45: (1, {'@': 298}), 42: (1, {'@': 298}), 47: (1, {'@': 298})}, 483: {47: (0, 187), 53: (0, 312)}, 484: {39: (0, 338), 34: (0, 344)}, 485: {82: (1, {'@': 299}), 32: (1, {'@': 299}), 83: (1, {'@': 299}), 84: (1, {'@': 299}), 85: (1, {'@': 299}), 86: (1, {'@': 299}), 87: (1, {'@': 299}), 88: (1, {'@': 299}), 89: (1, {'@': 299}), 90: (1, {'@': 299})}, 486: {16: (0, 417), 82: (1, {'@': 195}), 33: (1, {'@': 195}), 92: (1, {'@': 195}), 98: (1, {'@': 195}), 46: (1, {'@': 195}), 88: (1, {'@': 195}), 32: (1, {'@': 195}), 53: (1, {'@': 195}), 93: (1, {'@': 195}), 90: (1, {'@': 195}), 38: (1, {'@': 195}), 30: (1, {'@': 195}), 47: (1, {'@': 195}), 94: (1, {'@': 195}), 44: (1, {'@': 195}), 95: (1, {'@': 195}), 9: (1, {'@': 195}), 96: (1, {'@': 195}), 97: (1, {'@': 195}), 0: (1, {'@': 195}), 84: (1, {'@': 195}), 85: (1, {'@': 195}), 35: (1, {'@': 195}), 49: (1, {'@': 195}), 99: (1, {'@': 195}), 50: (1, {'@': 195}), 89: (1, {'@': 195}), 45: (1, {'@': 195}), 83: (1, {'@': 195}), 42: (1, {'@': 195}), 86: (1, {'@': 195}), 87: (1, {'@': 195})}, 487: {47: (0, 469)}, 488: {47: (0, 158), 53: (0, 160), 40: (0, 279)}, 489: {45: (1, {'@': 300}), 46: (1, {'@': 300}), 47: (1, {'@': 300}), 54: (1, {'@': 300}), 51: (1, {'@': 300}), 48: (1, {'@': 300}), 49: (1, {'@': 300}), 50: (1, {'@': 300}), 52: (1, {'@': 300}), 53: (1, {'@': 300}), 55: (1, {'@': 300})}, 490: {59: (0, 144), 60: (0, 138), 7: (0, 33), 62: (0, 402), 34: (0, 27), 63: (0, 322), 8: (0, 345), 65: (0, 473), 11: (0, 396), 29: (0, 347), 61: (0, 78), 66: (0, 479), 67: (0, 476), 68: (0, 252), 69: (0, 50), 71: (0, 414), 70: (0, 420), 16: (0, 7), 73: (0, 421), 12: (0, 54), 74: (0, 292), 64: (0, 432), 75: (0, 434), 76: (0, 297), 32: (0, 10), 33: (0, 270), 77: (0, 440), 39: (0, 338), 36: (0, 46), 38: (0, 444), 78: (0, 206), 79: (0, 399), 80: (0, 120), 81: (0, 335), 72: (0, 360)}, 491: {90: (0, 299)}, 492: {53: (0, 275)}, 493: {18: (0, 157), 0: (0, 319), 14: (0, 20), 22: (0, 238), 28: (0, 409), 40: (0, 241), 30: (0, 431), 35: (0, 416), 42: (0, 243), 33: (0, 422), 37: (0, 226), 21: (0, 242), 9: (0, 320), 45: (1, {'@': 301}), 46: (1, {'@': 301}), 47: (1, {'@': 301}), 48: (1, {'@': 301}), 53: (1, {'@': 301}), 54: (1, {'@': 301}), 55: (1, {'@': 301}), 51: (1, {'@': 301}), 49: (1, {'@': 301}), 50: (1, {'@': 301}), 52: (1, {'@': 301}), 56: (1, {'@': 301})}, 494: {47: (1, {'@': 302}), 53: (1, {'@': 302})}, 495: {149: (0, 441), 47: (0, 80), 46: (0, 71), 40: (0, 279)}, 496: {44: (0, 186), 37: (1, {'@': 303}), 28: (1, {'@': 303}), 9: (1, {'@': 303}), 14: (1, {'@': 303}), 33: (1, {'@': 303}), 45: (1, {'@': 303}), 0: (1, {'@': 303}), 42: (1, {'@': 303}), 38: (1, {'@': 303}), 35: (1, {'@': 303}), 30: (1, {'@': 303}), 40: (1, {'@': 303}), 46: (1, {'@': 303}), 47: (1, {'@': 303}), 48: (1, {'@': 303}), 49: (1, {'@': 303}), 50: (1, {'@': 303}), 51: (1, {'@': 303}), 52: (1, {'@': 303}), 53: (1, {'@': 303}), 54: (1, {'@': 303}), 55: (1, {'@': 303}), 56: (1, {'@': 303})}, 497: {59: (0, 144), 60: (0, 138), 62: (0, 402), 32: (0, 10), 8: (0, 345), 11: (0, 396), 77: (0, 440), 38: (0, 444), 71: (0, 414), 70: (0, 420), 79: (0, 399), 29: (0, 486), 72: (0, 360), 81: (0, 335), 16: (0, 424), 75: (0, 93)}, 498: {47: (0, 474)}, 499: {26: (0, 305), 2: (0, 87), 29: (0, 411), 31: (0, 426), 5: (0, 386), 8: (0, 345), 32: (0, 10), 34: (0, 397), 13: (0, 5), 12: (0, 45), 11: (0, 57), 36: (0, 356), 16: (0, 183), 39: (0, 338), 15: (0, 133), 17: (0, 146)}, 500: {95: (1, {'@': 304}), 42: (1, {'@': 304}), 35: (1, {'@': 304}), 53: (1, {'@': 304}), 99: (1, {'@': 304}), 82: (1, {'@': 304}), 32: (1, {'@': 304}), 83: (1, {'@': 304}), 90: (1, {'@': 304}), 84: (1, {'@': 304}), 85: (1, {'@': 304}), 86: (1, {'@': 304}), 87: (1, {'@': 304}), 88: (1, {'@': 304}), 89: (1, {'@': 304}), 49: (1, {'@': 304}), 46: (1, {'@': 304}), 50: (1, {'@': 304})}, 501: {47: (1, {'@': 305}), 40: (1, {'@': 305}), 53: (1, {'@': 305}), 95: (1, {'@': 305}), 56: (1, {'@': 305}), 46: (1, {'@': 305})}, 502: {47: (1, {'@': 306}), 40: (1, {'@': 306}), 53: (1, {'@': 306}), 95: (1, {'@': 306}), 56: (1, {'@': 306}), 46: (1, {'@': 306})}, 503: {53: (0, 485)}, 504: {53: (0, 84), 95: (1, {'@': 280}), 9: (1, {'@': 280}), 96: (1, {'@': 280}), 33: (1, {'@': 280}), 97: (1, {'@': 280}), 92: (1, {'@': 280}), 0: (1, {'@': 280}), 42: (1, {'@': 280}), 98: (1, {'@': 280}), 30: (1, {'@': 280}), 35: (1, {'@': 280}), 99: (1, {'@': 280})}, 505: {44: (1, {'@': 307}), 37: (1, {'@': 307}), 9: (1, {'@': 307}), 91: (1, {'@': 307}), 14: (1, {'@': 307}), 33: (1, {'@': 307}), 92: (1, {'@': 307}), 16: (1, {'@': 307}), 0: (1, {'@': 307}), 39: (1, {'@': 307}), 40: (1, {'@': 307}), 35: (1, {'@': 307}), 8: (1, {'@': 307}), 28: (1, {'@': 307}), 32: (1, {'@': 307}), 93: (1, {'@': 307}), 45: (1, {'@': 307}), 42: (1, {'@': 307}), 12: (1, {'@': 307}), 38: (1, {'@': 307}), 36: (1, {'@': 307}), 13: (1, {'@': 307}), 30: (1, {'@': 307}), 17: (1, {'@': 307}), 46: (1, {'@': 307}), 47: (1, {'@': 307}), 48: (1, {'@': 307}), 53: (1, {'@': 307}), 54: (1, {'@': 307}), 55: (1, {'@': 307}), 51: (1, {'@': 307}), 49: (1, {'@': 307}), 50: (1, {'@': 307}), 52: (1, {'@': 307}), 56: (1, {'@': 307}), 95: (1, {'@': 307})}, 506: {47: (0, 391)}}, 'start_states': {'start': 388}, 'end_states': {'start': 13}}, 'lexer_conf': {'tokens': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}, {'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}], 'ignore': ['WS', 'COMMENT'], 'g_regex_flags': 0, '__type__': 'LexerConf'}, 'start': ['start'], '__type__': 'LALR_ContextualLexer'}, 'rules': [{'@': 99}, {'@': 255}, {'@': 82}, {'@': 105}, {'@': 274}, {'@': 93}, {'@': 106}, {'@': 151}, {'@': 224}, {'@': 284}, {'@': 137}, {'@': 299}, {'@': 260}, {'@': 217}, {'@': 287}, {'@': 222}, {'@': 225}, {'@': 297}, {'@': 231}, {'@': 155}, {'@': 81}, {'@': 203}, {'@': 157}, {'@': 200}, {'@': 158}, {'@': 88}, {'@': 300}, {'@': 154}, {'@': 118}, {'@': 119}, {'@': 150}, {'@': 144}, {'@': 171}, {'@': 235}, {'@': 145}, {'@': 226}, {'@': 91}, {'@': 285}, {'@': 210}, {'@': 286}, {'@': 305}, {'@': 227}, {'@': 141}, {'@': 107}, {'@': 306}, {'@': 181}, {'@': 149}, {'@': 169}, {'@': 92}, {'@': 238}, {'@': 301}, {'@': 193}, {'@': 186}, {'@': 84}, {'@': 279}, {'@': 229}, {'@': 228}, {'@': 188}, {'@': 270}, {'@': 190}, {'@': 273}, {'@': 179}, {'@': 266}, {'@': 139}, {'@': 207}, {'@': 162}, {'@': 173}, {'@': 303}, {'@': 80}, {'@': 140}, {'@': 175}, {'@': 156}, {'@': 239}, {'@': 94}, {'@': 245}, {'@': 250}, {'@': 220}, {'@': 267}, {'@': 102}, {'@': 259}, {'@': 240}, {'@': 97}, {'@': 187}, {'@': 276}, {'@': 254}, {'@': 135}, {'@': 241}, {'@': 131}, {'@': 172}, {'@': 199}, {'@': 307}, {'@': 213}, {'@': 120}, {'@': 192}, {'@': 277}, {'@': 112}, {'@': 246}, {'@': 265}, {'@': 292}, {'@': 223}, {'@': 104}, {'@': 124}, {'@': 262}, {'@': 174}, {'@': 129}, {'@': 128}, {'@': 216}, {'@': 109}, {'@': 148}, {'@': 159}, {'@': 291}, {'@': 125}, {'@': 247}, {'@': 294}, {'@': 269}, {'@': 218}, {'@': 161}, {'@': 177}, {'@': 183}, {'@': 178}, {'@': 95}, {'@': 164}, {'@': 194}, {'@': 98}, {'@': 101}, {'@': 89}, {'@': 133}, {'@': 214}, {'@': 304}, {'@': 168}, {'@': 196}, {'@': 215}, {'@': 275}, {'@': 122}, {'@': 185}, {'@': 165}, {'@': 132}, {'@': 160}, {'@': 280}, {'@': 256}, {'@': 293}, {'@': 289}, {'@': 272}, {'@': 295}, {'@': 281}, {'@': 197}, {'@': 142}, {'@': 251}, {'@': 242}, {'@': 86}, {'@': 138}, {'@': 195}, {'@': 258}, {'@': 103}, {'@': 111}, {'@': 261}, {'@': 204}, {'@': 290}, {'@': 208}, {'@': 209}, {'@': 248}, {'@': 153}, {'@': 263}, {'@': 114}, {'@': 268}, {'@': 121}, {'@': 271}, {'@': 108}, {'@': 202}, {'@': 288}, {'@': 236}, {'@': 83}, {'@': 234}, {'@': 167}, {'@': 127}, {'@': 264}, {'@': 163}, {'@': 191}, {'@': 184}, {'@': 206}, {'@': 230}, {'@': 211}, {'@': 100}, {'@': 296}, {'@': 87}, {'@': 237}, {'@': 283}, {'@': 198}, {'@': 221}, {'@': 219}, {'@': 180}, {'@': 152}, {'@': 146}, {'@': 170}, {'@': 244}, {'@': 117}, {'@': 90}, {'@': 147}, {'@': 189}, {'@': 85}, {'@': 257}, {'@': 130}, {'@': 212}, {'@': 176}, {'@': 232}, {'@': 278}, {'@': 298}, {'@': 115}, {'@': 282}, {'@': 113}, {'@': 243}, {'@': 143}, {'@': 123}, {'@': 182}, {'@': 110}, {'@': 201}, {'@': 205}, {'@': 126}, {'@': 116}, {'@': 136}, {'@': 252}, {'@': 249}, {'@': 166}, {'@': 134}, {'@': 96}, {'@': 253}, {'@': 233}, {'@': 302}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': None, 'ambiguity': 'auto', 'regex': False, 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'PERCENT', 'pattern': {'value': '%', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 1: {'name': '_DEFEQ', 'pattern': {'value': ':=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 2: {'name': 'EQ', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 3: {'name': 'GT', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 4: {'name': 'LT', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 5: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 6: {'name': '_IS', 'pattern': {'value': '(?:(?:(?:are|is)|∈)|be)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 7: {'name': 'PROP_VAL', 'pattern': {'value': '(?:(?i:(?:(?i:sometimes)|(?i:true)))|(?i:false))', 'flags': ['i'], '_width': [4, 9], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 8: {'name': 'COMP', 'pattern': {'value': '(?:(?:(?:!|\\~)|¬)|not)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 9: {'name': '_IMPLIES', 'pattern': {'value': '(?:(?:=>|⇒)|⟹\\ )', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 10: {'name': '_IFF', 'pattern': {'value': '(?:(?:(?:<=>|⟺)|⇔)|iff)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 11: {'name': 'CONJ', 'pattern': {'value': '(?:(?:(?:\\&|/\\\\)|∧)|and)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 12: {'name': 'DISJ', 'pattern': {'value': '(?:(?:(?:\\||\\\\/)|∨)|or)', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 13: {'name': 'VAR', 'pattern': {'value': '(?!(be|sup|inf|distinct|min|max|case|end|match|with|do|if|then|else|otherwise|iff|is|are|forall|exists|not|or|and|sometimes|true|false)\\b)[a-z_$][\\$a-zA-Z_0-9]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 14: {'name': 'ANNOTATION', 'pattern': {'value': '@[A-Za-z0-9_]+', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 15: {'name': 'COMMENT', 'pattern': {'value': '\\/\\/[^\n]*', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 16: {'name': 'INT', 'pattern': {'value': '(?:[0-9])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 17: {'name': 'WS', 'pattern': {'value': '(?:[ \t\x0c\r\n])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 18: {'name': 'ESCAPED_STRING', 'pattern': {'value': '".*?(?<!\\\\)(\\\\\\\\)*?"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 19: {'name': 'HASH', 'pattern': {'value': '#', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 20: {'name': '__ANON_0', 'pattern': {'value': 'save_aut', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 21: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 22: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 23: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 24: {'name': '__ANON_1', 'pattern': {'value': 'save_aut_img', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 25: {'name': 'CONTEXT', 'pattern': {'value': 'context', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 26: {'name': '__ANON_2', 'pattern': {'value': 'end_context', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 27: {'name': 'LOAD', 'pattern': {'value': 'load', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 28: {'name': '__ANON_3', 'pattern': {'value': 'assert_prop', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 29: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 30: {'name': 'IMPORT', 'pattern': {'value': 'import', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 31: {'name': 'FORGET', 'pattern': {'value': 'forget', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 32: {'name': 'STRUCTURE', 'pattern': {'value': 'Structure', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 33: {'name': 'DEFINING', 'pattern': {'value': 'defining', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 34: {'name': 'SHUFFLE', 'pattern': {'value': 'shuffle', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 35: {'name': '__ANON_4', 'pattern': {'value': 'shuffle_or', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 36: {'name': 'RESTRICT', 'pattern': {'value': 'Restrict', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 37: {'name': 'PLOT', 'pattern': {'value': 'plot', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 38: {'name': 'LET', 'pattern': {'value': 'Let', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 39: {'name': 'DEFINE', 'pattern': {'value': 'Define', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 40: {'name': 'ALIAS', 'pattern': {'value': 'Alias', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 41: {'name': '__ANON_5', 'pattern': {'value': '(?!(Define|Alias|Restrict)\\b)[A-Z][a-zA-Z_0-9]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 42: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 43: {'name': 'THEN', 'pattern': {'value': 'then', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 44: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 45: {'name': 'BACKSLASH', 'pattern': {'value': '\\', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 46: {'name': '__ANON_6', 'pattern': {'value': 'let', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 47: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 48: {'name': 'SEMICOLON', 'pattern': {'value': ';', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 49: {'name': 'MATCH', 'pattern': {'value': 'match', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 50: {'name': 'WITH', 'pattern': {'value': 'with', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 51: {'name': 'END', 'pattern': {'value': 'end', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 52: {'name': 'DO', 'pattern': {'value': 'do', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 53: {'name': 'CASE', 'pattern': {'value': 'case', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 54: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 55: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 56: {'name': '__ANON_7', 'pattern': {'value': '[^\x00-ÿ]', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 57: {'name': 'AT', 'pattern': {'value': '@', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 58: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 59: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 60: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 61: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 62: {'name': 'CIRCUMFLEX', 'pattern': {'value': '^', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 63: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 64: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 65: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 66: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 67: {'name': 'DISTINCT', 'pattern': {'value': 'distinct', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 68: {'name': 'NOT', 'pattern': {'value': 'not', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 69: {'name': 'MIN', 'pattern': {'value': 'min', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 70: {'name': 'MAX', 'pattern': {'value': 'max', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 71: {'name': 'INF', 'pattern': {'value': 'inf', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 72: {'name': 'SUP', 'pattern': {'value': 'sup', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 73: {'name': '__ANON_8', 'pattern': {'value': '≠', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 74: {'name': '__ANON_9', 'pattern': {'value': '≥', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 75: {'name': '__ANON_10', 'pattern': {'value': '≤', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 76: {'name': 'FORALL', 'pattern': {'value': 'forall', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 77: {'name': '__ANON_11', 'pattern': {'value': '∀', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 78: {'name': 'EXISTS', 'pattern': {'value': 'exists', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 79: {'name': '__ANON_12', 'pattern': {'value': '∃', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 80: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline', '__type__': 'NonTerminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pred_definition', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': 'var', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'var_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': '__operator_sym_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__operator_sym_plus_6', '__type__': 'NonTerminal'}, {'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': 'div_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '__div_expr_star_19', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'def', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': 'directive_name', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_5', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'spot_formula', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': '__match_expr_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'partial_op_fst', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'directive_save_aut_img', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': 'praline_exponent', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': '__praline_exponent_star_11', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_exponent', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'forall_sym', '__type__': 'NonTerminal'}, {'name': 'quant_formal', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'forall', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': '__div_expr_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'formula_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'prog', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXISTS', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'formal_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_int', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': 'restriction', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'restrict_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'directive_save_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'CONTEXT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'directive_context', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'call_is_not', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'formal_is_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': '__val_dict_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': '__val_dict_star_14', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': '__praline_exponent_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_exponent_star_11', '__type__': 'NonTerminal'}, {'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': '__praline_div_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_div_star_10', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': '__sub_expr_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': '__match_expr_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__match_expr_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_let_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'praline_let', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_list_gen', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'call_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'ne', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'not_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': '__praline_tuple_plus_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'def_pred_standard', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': 'varlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '__varlist_star_15', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': '__varlist_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__varlist_star_15', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': 'ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'formal_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'formal_var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': '__praline_sub_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_sub_star_7', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': 'pecan_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_pecan_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'le', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'less_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': '__mul_expr_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__mul_expr_star_18', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_tuple', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': '__sub_expr_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__sub_expr_star_16', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'directive_import', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': 'div_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}, {'name': '__praline_mul_star_9', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '__match_expr_star_4', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': 'add_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': '__praline_list_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_list_star_12', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__term_star_3', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': '__term_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': '__match_expr_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__match_expr_plus_5', '__type__': 'NonTerminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': 'quant_formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'quant_formal_list', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__match_expr_plus_5', '__type__': 'NonTerminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'praline_match_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'WITH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__term_plus_2', '__type__': 'NonTerminal'}, {'name': 'END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_match', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'directive_end_context', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': '__term_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__term_plus_2', '__type__': 'NonTerminal'}, {'name': 'match_arm', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg', '__type__': 'NonTerminal'}, {'name': '__args_star_20', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BACKSLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_lambda', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'restriction', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exponent', '__type__': 'NonTerminal'}, {'name': '__praline_div_star_10', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEFINE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_def', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'directive_name', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_directive', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': 'quant_formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'quant_formal_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'ge', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'greater_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'if_then_else', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}, {'name': '__praline_sub_star_7', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': 'ge', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'exists_sym', '__type__': 'NonTerminal'}, {'name': 'quant_formal', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'exists', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'greater', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': '__mul_expr_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': 'ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_ne', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DISTINCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'distinct', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__match_expr_plus_5', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'praline_match_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': '__term_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__term_star_3', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__term_star_3', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__praline_list_star_12', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'def_pred_is_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': '__praline_add_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_add_star_8', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': '_IFF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'iff', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'conj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_7', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': '__term_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_arm', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'praline_match_prepend', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': '__praline_tuple_plus_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_tuple_plus_13', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'disj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': 'le', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_le', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'less', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': 'operator_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__operator_sym_plus_6', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'operator_sym', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': '__operator_sym_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': 'ge', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_9', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': 'praline_tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__praline_tuple_plus_13', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': 'praline_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'var_ref', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'elementof', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': 'add_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mul_expr', '__type__': 'NonTerminal'}, {'name': '__add_expr_star_17', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': '__def_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'EQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ALIAS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'directive_name', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_alias', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': '__val_dict_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__val_dict_star_14', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'call_is_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': 'prop_val', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PROP_VAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'prop_val_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MIN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'min_func', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': '__varlist_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': 'le', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_10', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'inf_func', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SUP', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'sup_func', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': 'match_arm', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CASE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_match_arm', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_11', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': '__praline_add_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_list_gen', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comparison', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 215: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'NOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'not_elementof', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'formal_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCTURE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'DEFINING', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'val_dict', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'directive_structure', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'if_then_else', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': '__def_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__def_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'EQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 220: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': '__def_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__def_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'EQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'int', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_4', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 13, 'alias': 'directive_shuffle_or', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 223: {'origin': {'name': 'restriction', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'restrict_is', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 224: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LOAD', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'directive_load_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 225: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '__def_star_1', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 14, 'alias': 'directive_plot', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_match_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 229: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FORALL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RESTRICT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'restriction', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': '__praline_mul_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': '__args_star_20', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 234: {'origin': {'name': 'string', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ESCAPED_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'escaped_str', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': 'int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'int_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'def', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pecan_term', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'praline_match_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': 'pecan_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_pecan_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': 'mul_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 243: {'origin': {'name': '__praline_list_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': '__match_expr_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': 'praline_exponent', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_exponent', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': 'varlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ANNOTATION', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'annotation', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': '__add_expr_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__add_expr_star_17', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': 'praline_atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_app', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 251: {'origin': {'name': 'mul_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'div_expr', '__type__': 'NonTerminal'}, {'name': '__mul_expr_star_18', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': '__add_expr_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': '__div_expr_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__div_expr_star_19', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 254: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_list', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 255: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': 'prog', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 256: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'index', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 257: {'origin': {'name': '__praline_sub_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 258: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'int_const', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 259: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 260: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCTURE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'DEFINING', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'val_dict', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': 'directive_structure', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 261: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'call', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 262: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'def_pred_is', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 263: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 264: {'origin': {'name': 'ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_8', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 265: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 266: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 268: {'origin': {'name': 'arg', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 269: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pred', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'implies', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 270: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 271: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'call_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 272: {'origin': {'name': 'arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'sub_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 273: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 274: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'directive_save_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 275: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 276: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pecan_term', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 277: {'origin': {'name': 'praline_tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__praline_tuple_plus_13', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 278: {'origin': {'name': '__praline_mul_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_mul_star_9', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 279: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 280: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arith', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 281: {'origin': {'name': 'sub_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 282: {'origin': {'name': '__praline_exponent_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 283: {'origin': {'name': '__def_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'EQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'int', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 284: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'prop_val', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'directive_assert_prop', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 285: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'partial_op_snd', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 286: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_match_int', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 287: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SHUFFLE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'directive_shuffle', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 288: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'call_is_not_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 289: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'index_range', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 290: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MAX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'max_func', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 291: {'origin': {'name': 'quant_formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'quant_formal_is_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 292: {'origin': {'name': 'kv_pair', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'kv_pair', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 293: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'index_range', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 294: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 295: {'origin': {'name': 'sub_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_expr', '__type__': 'NonTerminal'}, {'name': '__sub_expr_star_16', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 296: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_12', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 297: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 15, 'alias': 'directive_plot', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 298: {'origin': {'name': '__praline_div_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 299: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'FORGET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'directive_forget', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 300: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_if', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 301: {'origin': {'name': 'praline_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_operator', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 302: {'origin': {'name': '__args_star_20', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__args_star_20', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 303: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}, {'name': '__praline_add_star_8', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 304: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'bool', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'comp', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 305: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_match_string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 306: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 307: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(transformer=None, postlex=None):
  return Lark._load_from_dict(DATA, MEMO, transformer=transformer, postlex=postlex)
