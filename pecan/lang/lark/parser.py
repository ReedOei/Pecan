# The file was automatically generated by Lark v0.8.1
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark.
#
#    It is licensed under GPLv2 or above.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, contact me via email.
#
#    If GPL is incompatible with your free or open-source project,
#    contact me and we'll work it out (for free).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    See <http://www.gnu.org/licenses/>.
#
#

import os
from io import open

class LarkError(Exception):
    pass

class GrammarError(LarkError):
    pass

class ParseError(LarkError):
    pass

class LexError(LarkError):
    pass

class UnexpectedEOF(ParseError):
    def __init__(self, expected):
        self.expected = expected

        message = ("Unexpected end-of-input. Expected one of: \n\t* %s\n" % '\n\t* '.join(x.name for x in self.expected))
        super(UnexpectedEOF, self).__init__(message)


class UnexpectedInput(LarkError):
    pos_in_stream = None

    def get_context(self, text, span=40):
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        before = text[start:pos].rsplit('\n', 1)[-1]
        after = text[pos:end].split('\n', 1)[0]
        return before + after + '\n' + ' ' * len(before) + '^\n'

    def match_examples(self, parse_fn, examples):
        """ Given a parser instance and a dictionary mapping some label with
            some malformed syntax examples, it'll return the label for the
            example that bests matches the current error.
        """
        assert self.state is not None, "Not supported for this exception"

        candidate = None
        for label, example in examples.items():
            assert not isinstance(example, STRING_TYPE)

            for malformed in example:
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        try:
                            if ut.token == self.token:  # Try exact match first
                                return label
                        except AttributeError:
                            pass
                        if not candidate:
                            candidate = label

        return candidate


class UnexpectedCharacters(LexError, UnexpectedInput):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None):
        message = "No terminal defined for '%s' at line %d col %d" % (seq[lex_pos], line, column)

        self.line = line
        self.column = column
        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.pos_in_stream = lex_pos
        self.state = state

        message += '\n\n' + self.get_context(seq)
        if allowed:
            message += '\nExpecting: %s\n' % allowed
        if token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in token_history)

        super(UnexpectedCharacters, self).__init__(message)



class UnexpectedToken(ParseError, UnexpectedInput):
    def __init__(self, token, expected, considered_rules=None, state=None):
        self.token = token
        self.expected = expected     # XXX str shouldn't necessary
        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.considered_rules = considered_rules
        self.state = state
        self.pos_in_stream = getattr(token, 'pos_in_stream', None)

        message = ("Unexpected token %r at line %s, column %s.\n"
                   "Expected one of: \n\t* %s\n"
                   % (token, self.line, self.column, '\n\t* '.join(self.expected)))

        super(UnexpectedToken, self).__init__(message)

class VisitError(LarkError):
    def __init__(self, rule, obj, orig_exc):
        self.obj = obj
        self.orig_exc = orig_exc

        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

def classify(seq, key=None, value=None):
    d = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data, namespace, memo):
    if isinstance(data, dict):
        if '__type__' in data: # Object
            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


class Serialize(object):
    def memo_serialize(self, types_to_memoize):
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None):
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        postprocess = getattr(self, '_serialize', None)
        if postprocess:
            postprocess(res, memo)
        return res

    @classmethod
    def deserialize(cls, data, memo):
        namespace = getattr(cls, '__serialize_namespace__', {})
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)
        postprocess = getattr(inst, '_deserialize', None)
        if postprocess:
            postprocess()
        return inst


class SerializeMemoizer(Serialize):
    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize):
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value):
        return isinstance(value, self.types_to_memoize)

    def serialize(self):
        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data, namespace, memo):
        return _deserialize(data, namespace, memo)



try:
    STRING_TYPE = basestring
except NameError:   # Python 3
    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')
try:
    classtype = types.ClassType # Python2
except AttributeError:
    classtype = type    # Python3

def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (classtype, type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        return wraps(f.func)(create_decorator(lambda *args, **kw: f(*args[1:], **kw), True))

    else:
        return create_decorator(f.__func__.__call__, True)

import sys, re
Py36 = (sys.version_info[:2] >= (3, 6))

import sre_parse
import sre_constants
def get_regexp_width(regexp):
    try:
        return [int(x) for x in sre_parse.parse(regexp).getwidth()]
    except sre_constants.error:
        raise ValueError(regexp)


class Meta:
    def __init__(self):
        self.empty = True

class Tree(object):
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self):
        # TODO: Re-write as a more efficient version

        visited = set()
        q = [self]

        l = []
        while q:
            subtree = q.pop()
            l.append( subtree )
            if id(subtree) in visited:
                continue    # already been here from another branch
            visited.add(id(subtree))
            q += [c for c in subtree.children if isinstance(c, Tree)]

        seen = set()
        for x in reversed(l):
            if id(x) not in seen:
                yield x
                seen.add(id(x))

    def find_pred(self, pred):
        "Find all nodes where pred(tree) == True"
        return filter(pred, self.iter_subtrees())

    def find_data(self, data):
        "Find all nodes where tree.data == data"
        return self.find_pred(lambda t: t.data == data)


from inspect import getmembers, getmro

class Discard(Exception):
    pass

# Transformers

class Transformer:
    """Visits the tree recursively, starting with the leaves and finally the root (bottom-up)

    Calls its methods (provided by user via inheritance) according to tree.data
    The returned value replaces the old one in the structure.

    Can be used to implement map or reduce.
    """

    __visit_tokens__ = True   # For backwards compatibility
    def __init__(self,  visit_tokens=True):
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)


    def _transform_children(self, children):
        for c in children:
            try:
                if isinstance(c, Tree):
                    yield self._transform_tree(c)
                elif self.__visit_tokens__ and isinstance(c, Token):
                    yield self._call_userfunc_token(c)
                else:
                    yield c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        return self._transform_tree(tree)

    def __mul__(self, other):
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        "Default operation on tree (for override)"
        return Tree(data, children, meta)

    def __default_token__(self, token):
        "Default operation on token (for override)"
        return token


    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            # Make sure the function isn't inherited (unless it's overwritten)
            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(cls.__dict__[name]):
                continue

            # Skip if v_args already applied (at the function level)
            if hasattr(cls.__dict__[name], 'vargs_applied'):
                continue

            static = isinstance(cls.__dict__[name], (staticmethod, classmethod))
            setattr(cls, name, decorator(value, static=static, **kwargs))
        return cls


class InlineTransformer(Transformer):   # XXX Deprecated
    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    "Non-recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):           # Cancel recursion
        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_InPlaceRecursive(Transformer):
    "Recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)



# Visitors

class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        "Default operation on tree (for override)"
        return tree


class Visitor(VisitorBase):
    """Bottom-up visitor, non-recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """


    def visit(self, tree):
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self,tree):
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree

class Visitor_Recursive(VisitorBase):
    """Bottom-up visitor, recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree):
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree



def visit_children_decor(func):
    "See Interpreter"
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter:
    """Top-down visitor, recursive

    Visits the tree, starting with the root and finally the leaves (top-down)
    Calls its methods (provided by user via inheritance) according to tree.data

    Unlike Transformer and Visitor, the Interpreter doesn't automatically visit its sub-branches.
    The user has to explicitly call visit_children, or use the @visit_children_decor
    """
    def visit(self, tree):
        return getattr(self, tree.data)(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)




# Decorators

def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)



def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   # XXX Deprecated
    return _apply_decorator(obj, _inline_args__func)



def _visitor_args_func_dec(func, visit_wrapper=None, static=False):
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    if static:
        f = wraps(func)(create_decorator(func, False))
    else:
        f = smart_decorator(func, create_decorator)
    f.vargs_applied = True
    f.visit_wrapper = visit_wrapper
    return f


def _vargs_inline(f, data, children, meta):
    return f(*children)
def _vargs_meta_inline(f, data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, data, children, meta):
    return f(children, meta)   # TODO swap these for consistency? Backwards incompatible!
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))

def v_args(inline=False, meta=False, tree=False, wrapper=None):
    "A convenience decorator factory, for modifying the behavior of user-supplied visitor methods"
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, visit_wrapper=func)
    return _visitor_args_dec



class Indenter:
    def __init__(self):
        self.paren_level = None
        self.indent_level = None
        assert self.tab_len > 0

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)



class Symbol(Serialize):
    __slots__ = ('name',)

    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)



class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term = False



class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'empty_indices'

    def __init__(self, keep_all_tokens=False, expand1=False, priority=None, empty_indices=()):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
        )


class Rule(Serialize):
    """
        origin : a symbol
        expansion : a list of symbols
        order : index of this expansion amongst all rules of the same name
    """
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion





class Pattern(Serialize):

    def __init__(self, value, flags=()):
        self.value = value
        self.flags = frozenset(flags)

    def __repr__(self):
        return repr(self.to_regexp())

    # Pattern Hashing assumes all subclasses have a different priority!
    def __hash__(self):
        return hash((type(self), self.value, self.flags))
    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    def to_regexp(self):
        raise NotImplementedError()

    if Py36:
        # Python 3.6 changed syntax for flags in regular expression
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s:%s)' % (f, value))
            return value

    else:
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s)' % f) + value
            return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type = "str"

    def to_regexp(self):
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self):
        return len(self.value)
    max_width = min_width

class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type = "re"

    def to_regexp(self):
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self):
        return self._get_width()[0]
    @property
    def max_width(self):
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    def __init__(self, name, pattern, priority=1):
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)



class Token(Str):
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        try:
            self = super(Token, cls).__new__(cls, value)
        except UnicodeDecodeError:
            value = value.decode('latin1')
            self = super(Token, cls).__new__(cls, value)

        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        self.end_line = end_line
        self.end_column = end_column
        self.end_pos = end_pos
        return self

    def update(self, type_=None, value=None):
        return Token.new_borrow_pos(
            type_ if type_ is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer, state=None):
        self.lexer = lexer
        self.state = state

    def lex(self, stream, newline_types, ignore_types):
        newline_types = frozenset(newline_types)
        ignore_types = frozenset(ignore_types)
        line_ctr = LineCounter()
        last_token = None

        while line_ctr.char_pos < len(stream):
            lexer = self.lexer
            res = lexer.match(stream, line_ctr.char_pos)
            if not res:
                allowed = {v for m, tfi in lexer.mres for v in tfi.values()} - ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column, allowed=allowed, state=self.state, token_history=last_token and [last_token])

            value, type_ = res

            if type_ not in ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                line_ctr.feed(value, type_ in newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in lexer.callback:
                    t = lexer.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise ValueError("Callbacks must return a token (returned %r)" % t)
                yield t
                last_token = t
            else:
                if type_ in lexer.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    lexer.callback[type_](t2)
                line_ctr.feed(value, type_ in newline_types)




class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t

class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2





def _create_unless(terminals):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = [] # {}
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority > retok.priority:
                continue
            s = strtok.pattern.value
            m = re.match(retok.pattern.to_regexp(), s)
            if m and m.group(0) == s:
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(build_mres(unless, match_whole=True))

    terminals = [t for t in terminals if t not in embedded_strs]
    return terminals, callback


def _build_mres(terminals, max_size, match_whole):
    # Python sets an unreasonable group limit (currently 100) in its re module
    # Worse, the only way to know we reached it is by catching an AssertionError!
    # This function recursively tries less and less groups until it's successful.
    postfix = '$' if match_whole else ''
    mres = []
    while terminals:
        try:
            mre = re.compile(u'|'.join(u'(?P<%s>%s)'%(t.name, t.pattern.to_regexp()+postfix) for t in terminals[:max_size]))
        except AssertionError:  # Yes, this is what Python provides us.. :/
            return _build_mres(terminals, max_size//2, match_whole)

        # terms_from_name = {t.name: t for t in terminals[:max_size]}
        mres.append((mre, {i:n for n,i in mre.groupindex.items()} ))
        terminals = terminals[max_size:]
    return mres

def build_mres(terminals, match_whole=False):
    return _build_mres(terminals, len(terminals), match_whole)

def _regexp_has_newline(r):
    r"""Expressions that may indicate newlines in a regexp:
        - newlines (\n)
        - escaped newline (\\n)
        - anything but ([^...])
        - any-char (.) when the flag (?s) exists
        - spaces (\s)
    """
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)

class Lexer(object):
    """Lexer interface

    Method Signatures:
        lex(self, stream) -> Iterator[Token]
    """
    lex = NotImplemented


class TraditionalLexer(Lexer):

    def __init__(self, terminals, ignore=(), user_callbacks={}):
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        terminals = list(terminals)

        # Sanitization
        for t in terminals:
            try:
                re.compile(t.pattern.to_regexp())
            except re.error:
                raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

            if t.pattern.min_width == 0:
                raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

        assert set(ignore) <= {t.name for t in terminals}

        # Init
        self.newline_types = [t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp())]
        self.ignore_types = list(ignore)

        terminals.sort(key=lambda x:(-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = user_callbacks
        self.build()

    def build(self):
        terminals, self.callback = _create_unless(self.terminals)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                # Already a callback there, probably UnlessCallback
                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self.mres = build_mres(terminals)

    def match(self, stream, pos):
        for mre, type_from_index in self.mres:
            m = mre.match(stream, pos)
            if m:
                return m.group(0), type_from_index[m.lastindex]

    def lex(self, stream):
        return _Lex(self).lex(stream, self.newline_types, self.ignore_types)




class ContextualLexer(Lexer):

    def __init__(self, terminals, states, ignore=(), always_accept=(), user_callbacks={}):
        tokens_by_name = {}
        for t in terminals:
            assert t.name not in tokens_by_name, t
            tokens_by_name[t.name] = t

        lexer_by_tokens = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(ignore) | set(always_accept)
                state_tokens = [tokens_by_name[n] for n in accepts if n and n in tokens_by_name]
                lexer = TraditionalLexer(state_tokens, ignore=ignore, user_callbacks=user_callbacks)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        self.root_lexer = TraditionalLexer(terminals, ignore=ignore, user_callbacks=user_callbacks)

    def lex(self, stream, get_parser_state):
        parser_state = get_parser_state()
        l = _Lex(self.lexers[parser_state], parser_state)
        try:
            for x in l.lex(stream, self.root_lexer.newline_types, self.root_lexer.ignore_types):
                yield x
                parser_state = get_parser_state()
                l.lexer = self.lexers[parser_state]
                l.state = parser_state # For debug only, no need to worry about multithreading
        except UnexpectedCharacters as e:
            # In the contextual lexer, UnexpectedCharacters can mean that the terminal is defined,
            # but not in the current context.
            # This tests the input against the global context, to provide a nicer error.
            root_match = self.root_lexer.match(stream, e.pos_in_stream)
            if not root_match:
                raise

            value, type_ = root_match
            t = Token(type_, value, e.pos_in_stream, e.line, e.column)
            raise UnexpectedToken(t, e.allowed, state=e.state)



class LexerConf(Serialize):
    __serialize_fields__ = 'tokens', 'ignore'
    __serialize_namespace__ = TerminalDef,

    def __init__(self, tokens, ignore=(), postlex=None, callbacks=None):
        self.tokens = tokens
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}

    def _deserialize(self):
        self.callbacks = {} # TODO


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)

class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            for c in children:
                if isinstance(c, Tree) and not c.meta.empty:
                    res.meta.line = c.meta.line
                    res.meta.column = c.meta.column
                    res.meta.start_pos = c.meta.start_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.line = c.line
                    res.meta.column = c.column
                    res.meta.start_pos = c.pos_in_stream
                    res.meta.empty = False
                    break

            for c in reversed(children):
                if isinstance(c, Tree) and not c.meta.empty:
                    res.meta.end_line = c.meta.end_line
                    res.meta.end_column = c.meta.end_column
                    res.meta.end_pos = c.meta.end_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.end_line = c.end_line
                    res.meta.end_column = c.end_column
                    res.meta.end_pos = c.end_pos
                    res.meta.empty = False
                    break

        return res


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR_NoPlaceholders(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)

def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')

def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices):
    # Prepare empty_indices as: How many Nones to insert at each index?
    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            # LALR without placeholders
            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])

class AmbiguousExpander:
    """Deal with the case where we're expanding children ('_rule') into a parent but the children
       are ambiguous. i.e. (parent->_ambig->_expand_this_rule). In this case, make the parent itself
       ambiguous with as many copies as their are ambiguous children, and then copy the ambiguous children
       into the right parents in the right places, essentially shifting the ambiguiuty up the tree."""
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(child):
            return hasattr(child, 'data') and child.data == '_ambig'

        #### When we're repeatedly expanding ambiguities we can end up with nested ambiguities.
        #    All children of an _ambig node should be a derivation of that ambig node, hence
        #    it is safe to assume that if we see an _ambig node nested within an ambig node
        #    it is safe to simply expand it into the parent _ambig node as an alternative derivation.
        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                to_expand = [j for j, grandchild in enumerate(child.children) if _is_ambig_tree(grandchild)]
                child.expand_kids_by_index(*to_expand)

        if not ambiguous:
            return self.node_builder(children)

        expand = [ iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children) ]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])

def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)

def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f

def inplace_transformer(func):
    @wraps(func)
    def f(children):
        # function name in a Transformer is a rule name.
        tree = Tree(func.__name__, children)
        return func(tree)
    return f

def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")
    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, keep_all_tokens=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                self.propagate_positions and PropagatePositions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
            ]))

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callbacks = {}

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                # XXX InlineTransformer is deprecated!
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                else:
                    if isinstance(transformer, InlineTransformer):
                        f = ptb_inline_args(f)
                    elif isinstance(transformer, Transformer_InPlace):
                        f = inplace_transformer(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks


class LALR_Parser(object):
    def __init__(self, parser_conf, debug=False):
        assert all(r.options.priority is None for r in parser_conf.rules), "LALR doesn't yet support prioritization"
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks)

    @classmethod
    def deserialize(cls, data, memo, callbacks):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks)
        return inst

    def serialize(self, memo):
        return self._parse_table.serialize(memo)

    def parse(self, *args):
        return self.parser.parse(*args)


class _Parser:
    def __init__(self, parse_table, callbacks):
        self.states = parse_table.states
        self.start_states = parse_table.start_states
        self.end_states = parse_table.end_states
        self.callbacks = callbacks

    def parse(self, seq, start, set_state=None):
        token = None
        stream = iter(seq)
        states = self.states

        start_state = self.start_states[start]
        end_state = self.end_states[start]

        state_stack = [start_state]
        value_stack = []

        if set_state: set_state(start_state)

        def get_action(token):
            state = state_stack[-1]
            try:
                return states[state][token.type]
            except KeyError:
                expected = [s for s in states[state].keys() if s.isupper()]
                raise UnexpectedToken(token, expected, state=state)

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = states[state_stack[-1]][rule.origin.name]
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        for token in stream:
            while True:
                action, arg = get_action(token)
                assert arg != end_state

                if action is Shift:
                    state_stack.append(arg)
                    value_stack.append(token)
                    if set_state: set_state(arg)
                    break # next token
                else:
                    reduce(arg)

        token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
        while True:
            _action, arg = get_action(token)
            assert(_action is Reduce)
            reduce(arg)
            if state_stack[-1] == end_state:
                return value_stack[-1]



class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()
        rules = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def get_frontend(parser, lexer):
    if parser=='lalr':
        if lexer is None:
            raise ValueError('The LALR parser requires use of a lexer')
        elif lexer == 'standard':
            return LALR_TraditionalLexer
        elif lexer == 'contextual':
            return LALR_ContextualLexer
        elif issubclass(lexer, Lexer):
            return partial(LALR_CustomLexer, lexer)
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser=='earley':
        if lexer=='standard':
            return Earley
        elif lexer=='dynamic':
            return XEarley
        elif lexer=='dynamic_complete':
            return XEarley_CompleteLex
        elif lexer=='contextual':
            raise ValueError('The Earley parser does not support the contextual parser')
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser == 'cyk':
        if lexer == 'standard':
            return CYK
        else:
            raise ValueError('CYK parser requires using standard parser.')
    else:
        raise ValueError('Unknown parser: %s' % parser)


class _ParserFrontend(Serialize):
    def _parse(self, input, start, *args):
        if start is None:
            start = self.start
            if len(start) > 1:
                raise ValueError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start)
            start ,= start
        return self.parser.parse(input, start, *args)


class WithLexer(_ParserFrontend):
    lexer = None
    parser = None
    lexer_conf = None
    start = None

    __serialize_fields__ = 'parser', 'lexer_conf', 'start'
    __serialize_namespace__ = LexerConf,

    def __init__(self, lexer_conf, parser_conf, options=None):
        self.lexer_conf = lexer_conf
        self.start = parser_conf.start
        self.postlex = lexer_conf.postlex

    @classmethod
    def deserialize(cls, data, memo, callbacks, postlex):
        inst = super(WithLexer, cls).deserialize(data, memo)
        inst.postlex = postlex
        inst.parser = LALR_Parser.deserialize(inst.parser, memo, callbacks)
        inst.init_lexer()
        return inst

    def _serialize(self, data, memo):
        data['parser'] = data['parser'].serialize(memo)

    def lex(self, *args):
        stream = self.lexer.lex(*args)
        return self.postlex.process(stream) if self.postlex else stream

    def parse(self, text, start=None):
        token_stream = self.lex(text)
        return self._parse(token_stream, start)

    def init_traditional_lexer(self):
        self.lexer = TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks)

class LALR_WithLexer(WithLexer):
    def __init__(self, lexer_conf, parser_conf, options=None):
        debug = options.debug if options else False
        self.parser = LALR_Parser(parser_conf, debug=debug)
        WithLexer.__init__(self, lexer_conf, parser_conf, options)

        self.init_lexer()

    def init_lexer(self):
        raise NotImplementedError()

class LALR_TraditionalLexer(LALR_WithLexer):
    def init_lexer(self):
        self.init_traditional_lexer()

class LALR_ContextualLexer(LALR_WithLexer):
    def init_lexer(self):
        states = {idx:list(t.keys()) for idx, t in self.parser._parse_table.states.items()}
        always_accept = self.postlex.always_accept if self.postlex else ()
        self.lexer = ContextualLexer(self.lexer_conf.tokens, states,
                                     ignore=self.lexer_conf.ignore,
                                     always_accept=always_accept,
                                     user_callbacks=self.lexer_conf.callbacks)


    def parse(self, text, start=None):
        parser_state = [None]
        def set_parser_state(s):
            parser_state[0] = s

        token_stream = self.lex(text, lambda: parser_state[0])
        return self._parse(token_stream, start, set_parser_state)


class LarkOptions(Serialize):
    """Specifies the options for Lark

    """
    OPTIONS_DOC = """
        parser - Decides which parser engine to use, "earley" or "lalr". (Default: "earley")
                 Note: "lalr" requires a lexer

        lexer - Decides whether or not to use a lexer stage
            "standard": Use a standard lexer
            "contextual": Stronger lexer (only works with parser="lalr")
            "dynamic": Flexible and powerful (only with parser="earley")
            "dynamic_complete": Same as dynamic, but tries *every* variation
                                of tokenizing possible. (only with parser="earley")
            "auto" (default): Choose for me based on grammar and parser

        ambiguity - Decides how to handle ambiguity in the parse. Only relevant if parser="earley"
            "resolve": The parser will automatically choose the simplest derivation
                       (it chooses consistently: greedy for tokens, non-greedy for rules)
            "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).

        transformer - Applies the transformer to every parse tree
        debug - Affects verbosity (default: False)
        keep_all_tokens - Don't automagically remove "punctuation" tokens (default: False)
        cache_grammar - Cache the Lark grammar (Default: False)
        postlex - Lexer post-processing (Default: None) Only works with the standard and contextual lexers.
        start - The start symbol, either a string, or a list of strings for multiple possible starts (Default: "start")
        priority - How priorities should be evaluated - auto, none, normal, invert (Default: auto)
        propagate_positions - Propagates [line, column, end_line, end_column] attributes into all tree branches.
        lexer_callbacks - Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
        maybe_placeholders - Experimental feature. Instead of omitting optional rules (i.e. rule?), replace them with None
    """
    if __doc__:
        __doc__ += OPTIONS_DOC

    _defaults = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache_grammar': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': False,
        'edit_terminals': None,
    }

    def __init__(self, options_dict):
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], STRING_TYPE):
            options['start'] = [options['start']]

        self.__dict__['options'] = options

        assert self.parser in ('earley', 'lalr', 'cyk', None)

        if self.parser == 'earley' and self.transformer:
            raise ValueError('Cannot specify an embedded transformer when using the Earley algorithm.'
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ValueError("Unknown options: %s" % o.keys())

    def __getattr__(self, name):
        try:
            return self.options[name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name, value):
        assert name in self.options
        self.options[name] = value

    def serialize(self, memo):
        return self.options

    @classmethod
    def deserialize(cls, data, memo):
        return cls(data)


class Lark(Serialize):
    def __init__(self, grammar, **options):
        """
            grammar : a string or file-object containing the grammar spec (using Lark's ebnf syntax)
            options : a dictionary controlling various aspects of Lark.
        """
        self.options = LarkOptions(options)

        # Some, but not all file-like objects have a 'name' attribute
        try:
            self.source = grammar.name
        except AttributeError:
            self.source = '<string>'

        # Drain file-like objects to get their contents
        try:
            read = grammar.read
        except AttributeError:
            pass
        else:
            grammar = read()

        assert isinstance(grammar, STRING_TYPE)

        if self.options.cache_grammar:
            raise NotImplementedError("Not available yet")

        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'standard'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        assert lexer in ('standard', 'contextual', 'dynamic', 'dynamic_complete') or issubclass(lexer, Lexer)

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            disambig_parsers = ['earley', 'cyk']
            assert self.options.parser in disambig_parsers, (
                'Only %s supports disambiguation right now') % ', '.join(disambig_parsers)

        if self.options.priority == 'auto':
            if self.options.parser in ('earley', 'cyk', ):
                self.options.priority = 'normal'
            elif self.options.parser in ('lalr', ):
                self.options.priority = None
        elif self.options.priority in ('invert', 'normal'):
            assert self.options.parser in ('earley', 'cyk'), "priorities are not supported for LALR at this time"

        assert self.options.priority in ('auto', None, 'normal', 'invert'), 'invalid priority option specified: {}. options are auto, none, normal, invert.'.format(self.options.priority)
        assert self.options.ambiguity not in ('resolve__antiscore_sum', ), 'resolve__antiscore_sum has been replaced with the option priority="invert"'
        assert self.options.ambiguity in ('resolve', 'explicit', 'auto', )

        # Parse the grammar file and compose the grammars (TODO)
        self.grammar = load_grammar(grammar, self.source)

        # Compile the EBNF grammar into BNF
        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name:t for t in self.terminals}

        # If the user asked to invert the priorities, negate them all here.
        # This replaces the old 'resolve__antiscore_sum' option.
        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
        # Else, if the user asked to disable priorities, strip them from the
        # rules. This allows the Earley parsers to skip an extra forest walk
        # for improved performance, if you don't need them (or didn't specify any).
        elif self.options.priority == None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None

        # TODO Deprecate lexer_callbacks?
        lexer_callbacks = dict(self.options.lexer_callbacks)
        if self.options.transformer:
            t = self.options.transformer
            for term in self.terminals:
                if hasattr(t, term.name):
                    lexer_callbacks[term.name] = getattr(t, term.name)

        self.lexer_conf = LexerConf(self.terminals, self.ignore_tokens, self.options.postlex, lexer_callbacks)

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

    if __init__.__doc__:
        __init__.__doc__ += "\nOPTIONS:" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self):
        return TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks)

    def _prepare_callbacks(self):
        self.parser_class = get_frontend(self.options.parser, self.options.lexer)
        self._parse_tree_builder = ParseTreeBuilder(self.rules, self.options.tree_class or Tree, self.options.propagate_positions, self.options.keep_all_tokens, self.options.parser!='lalr' and self.options.ambiguity=='explicit', self.options.maybe_placeholders)
        self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)

    def _build_parser(self):
        self._prepare_callbacks()
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return self.parser_class(self.lexer_conf, parser_conf, options=self.options)

    @classmethod
    def deserialize(cls, data, namespace, memo, transformer=None, postlex=None):
        if memo:
            memo = SerializeMemoizer.deserialize(memo, namespace, {})
        inst = cls.__new__(cls)
        options = dict(data['options'])
        options['transformer'] = transformer
        options['postlex'] = postlex
        inst.options = LarkOptions.deserialize(options, memo)
        inst.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        inst.source = '<deserialized>'
        inst._prepare_callbacks()
        inst.parser = inst.parser_class.deserialize(data['parser'], memo, inst._callbacks, inst.options.postlex)
        return inst


    @classmethod
    def open(cls, grammar_filename, rel_to=None, **options):
        """Create an instance of Lark with the grammar given by its filename

        If rel_to is provided, the function will find the grammar filename in relation to it.

        Example:

            >>> Lark.open("grammar_file.lark", rel_to=__file__, parser="lalr")
            Lark(...)

        """
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source, self.options.parser, self.options.lexer)


    def lex(self, text):
        "Only lex (and postlex) the text, without parsing it. Only relevant when lexer='standard'"
        if not hasattr(self, 'lexer'):
            self.lexer = self._build_lexer()
        stream = self.lexer.lex(text)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name):
        "Get information about a terminal"
        return self._terminals_dict[name]

    def parse(self, text, start=None):
        """Parse the given text, according to the options provided.

        The 'start' parameter is required if Lark was given multiple possible start symbols (using the start option).

        Returns a tree, unless specified otherwise.
        """
        return self.parser.parse(text, start=start)


DATA = (
{'parser': {'parser': {'tokens': {0: 'var', 1: 'VAR', 2: 'LSQB', 3: 'app', 4: 'praline_tuple', 5: 'LPAR', 6: 'TRUE', 7: 'INT', 8: 'int', 9: 'LBRACE', 10: 'praline_exponent', 11: 'string', 12: 'pecan_term', 13: 'ESCAPED_STRING', 14: 'praline_list', 15: 'praline_atom', 16: 'FALSE', 17: 'praline_div', 18: 'bool', 19: 'atom', 20: 'IF', 21: 'comparison', 22: 'expr', 23: 'mul_expr', 24: 'MINUS', 25: 'FORALL', 26: 'pred', 27: '__ANON_15', 28: 'EXISTS', 29: 'add_expr', 30: 'sub_expr', 31: '__ANON_16', 32: 'exists_sym', 33: 'COMP', 34: 'arith', 35: 'div_expr', 36: 'forall_sym', 37: 'call', 38: 'CONJ', 39: 'EQ', 40: 'LT', 41: 'COLON', 42: 'DISJ', 43: 'GT', 44: '__ANON_11', 45: 'PERCENT', 46: 'ELSE', 47: 'IN', 48: 'COMMA', 49: 'SEMICOLON', 50: 'DOT', 51: 'RSQB', 52: 'THEN', 53: 'RPAR', 54: 'WITH', 55: 'CASE', 56: 'END', 57: '_IFF', 58: '__ANON_3', 59: '__ANON_2', 60: '__ANON_4', 61: '__ANON_9', 62: '__ANON_0', 63: '$END', 64: '_IMPLIES', 65: 'STAR', 66: '__ANON_5', 67: '__ANON_13', 68: 'PLUS', 69: '__ANON_8', 70: 'DISPLAY', 71: '__ANON_7', 72: '__ANON_14', 73: 'SLASH', 74: 'RBRACE', 75: '__ANON_1', 76: '__ANON_10', 77: '_IS', 78: 'EXECUTE', 79: '__ANON_6', 80: 'RESTRICT', 81: 'DEFINE', 82: '__ANON_12', 83: 'CIRCUMFLEX', 84: '_DEFEQ', 85: 'BACKSLASH', 86: 'praline_mul', 87: 'MATCH', 88: '__operator_sym_plus_5', 89: 'praline_sub', 90: 'operator_sym_char', 91: 'DO', 92: 'praline_operator', 93: 'operator_sym', 94: 'praline_arith', 95: 'praline_add', 96: 'LET', 97: 'term', 98: 'BE', 99: '__term_plus_1', 100: 'match_arm', 101: 'arg', 102: 'args', 103: '__praline_sub_star_6', 104: 'def', 105: '__start_star_0', 106: 'start', 107: 'pred_definition', 108: 'praline', 109: 'match_expr', 110: 'varlist', 111: '__praline_mul_star_8', 112: 'kv_pair', 113: '__praline_tuple_plus_12', 114: '__varlist_star_14', 115: '__praline_div_star_9', 116: '__praline_exponent_star_10', 117: '__praline_add_star_7', 118: 'formal', 119: 'restriction', 120: 'PROP_VAL', 121: 'prop_val', 122: '__match_expr_plus_4', 123: '__args_star_19', 124: '__mul_expr_star_17', 125: '__praline_list_star_11', 126: '__sub_expr_star_15', 127: '__term_star_2', 128: '__add_expr_star_16', 129: '__match_expr_star_3', 130: 'le', 131: '_ne', 132: 'ge', 133: 'val_dict', 134: '__div_expr_star_18', 135: '__val_dict_star_13'}, 'states': {0: {0: (0, 12), 1: (0, 176)}, 1: {2: (0, 156), 3: (0, 166), 4: (0, 45), 5: (0, 139), 6: (0, 11), 7: (0, 154), 8: (0, 19), 1: (0, 176), 9: (0, 142), 10: (0, 161), 11: (0, 140), 0: (0, 144), 12: (0, 32), 13: (0, 66), 14: (0, 399), 15: (0, 136), 16: (0, 147), 17: (0, 342)}, 2: {18: (0, 353), 19: (0, 394), 7: (0, 154), 20: (0, 315), 11: (0, 293), 21: (0, 317), 22: (0, 347), 23: (0, 337), 24: (0, 313), 25: (0, 290), 0: (0, 4), 26: (0, 106), 27: (0, 392), 6: (0, 309), 8: (0, 369), 28: (0, 319), 29: (0, 303), 30: (0, 281), 31: (0, 299), 32: (0, 297), 1: (0, 176), 16: (0, 308), 13: (0, 66), 33: (0, 292), 34: (0, 316), 35: (0, 282), 5: (0, 285), 36: (0, 314), 37: (0, 301)}, 3: {38: (1, {'@': 69}), 39: (1, {'@': 69}), 9: (1, {'@': 69}), 33: (1, {'@': 69}), 40: (1, {'@': 69}), 6: (1, {'@': 69}), 13: (1, {'@': 69}), 41: (1, {'@': 69}), 42: (1, {'@': 69}), 7: (1, {'@': 69}), 1: (1, {'@': 69}), 43: (1, {'@': 69}), 44: (1, {'@': 69}), 16: (1, {'@': 69}), 5: (1, {'@': 69}), 2: (1, {'@': 69}), 45: (1, {'@': 69}), 24: (1, {'@': 69}), 46: (1, {'@': 69}), 47: (1, {'@': 69}), 48: (1, {'@': 69}), 49: (1, {'@': 69}), 50: (1, {'@': 69}), 51: (1, {'@': 69}), 52: (1, {'@': 69}), 53: (1, {'@': 69}), 54: (1, {'@': 69}), 55: (1, {'@': 69}), 56: (1, {'@': 69})}, 4: {2: (0, 72), 5: (0, 199), 57: (1, {'@': 70}), 58: (1, {'@': 70}), 33: (1, {'@': 70}), 40: (1, {'@': 70}), 59: (1, {'@': 70}), 60: (1, {'@': 70}), 46: (1, {'@': 70}), 61: (1, {'@': 70}), 62: (1, {'@': 70}), 63: (1, {'@': 70}), 64: (1, {'@': 70}), 42: (1, {'@': 70}), 65: (1, {'@': 70}), 66: (1, {'@': 70}), 67: (1, {'@': 70}), 68: (1, {'@': 70}), 69: (1, {'@': 70}), 70: (1, {'@': 70}), 71: (1, {'@': 70}), 72: (1, {'@': 70}), 73: (1, {'@': 70}), 38: (1, {'@': 70}), 39: (1, {'@': 70}), 74: (1, {'@': 70}), 75: (1, {'@': 70}), 52: (1, {'@': 70}), 76: (1, {'@': 70}), 53: (1, {'@': 70}), 77: (1, {'@': 70}), 78: (1, {'@': 70}), 1: (1, {'@': 70}), 43: (1, {'@': 70}), 79: (1, {'@': 70}), 80: (1, {'@': 70}), 81: (1, {'@': 70}), 24: (1, {'@': 70}), 82: (1, {'@': 70}), 48: (1, {'@': 70})}, 5: {18: (0, 353), 19: (0, 394), 7: (0, 154), 20: (0, 315), 11: (0, 293), 21: (0, 317), 22: (0, 347), 23: (0, 337), 24: (0, 313), 25: (0, 290), 0: (0, 4), 27: (0, 392), 6: (0, 309), 26: (0, 124), 8: (0, 369), 28: (0, 319), 29: (0, 303), 30: (0, 281), 31: (0, 299), 32: (0, 297), 1: (0, 176), 16: (0, 308), 13: (0, 66), 33: (0, 292), 34: (0, 316), 35: (0, 282), 5: (0, 285), 36: (0, 314), 37: (0, 301)}, 6: {64: (0, 304), 58: (1, {'@': 71}), 59: (1, {'@': 71}), 60: (1, {'@': 71}), 46: (1, {'@': 71}), 61: (1, {'@': 71}), 62: (1, {'@': 71}), 63: (1, {'@': 71}), 66: (1, {'@': 71}), 69: (1, {'@': 71}), 70: (1, {'@': 71}), 71: (1, {'@': 71}), 74: (1, {'@': 71}), 75: (1, {'@': 71}), 52: (1, {'@': 71}), 76: (1, {'@': 71}), 53: (1, {'@': 71}), 78: (1, {'@': 71}), 1: (1, {'@': 71}), 79: (1, {'@': 71}), 80: (1, {'@': 71}), 81: (1, {'@': 71})}, 7: {2: (0, 156), 4: (0, 45), 5: (0, 139), 6: (0, 11), 7: (0, 154), 8: (0, 19), 1: (0, 176), 9: (0, 142), 11: (0, 140), 12: (0, 32), 0: (0, 144), 13: (0, 66), 15: (0, 259), 14: (0, 399), 16: (0, 147), 33: (1, {'@': 72}), 83: (1, {'@': 72}), 40: (1, {'@': 72}), 46: (1, {'@': 72}), 84: (1, {'@': 72}), 47: (1, {'@': 72}), 41: (1, {'@': 72}), 42: (1, {'@': 72}), 65: (1, {'@': 72}), 48: (1, {'@': 72}), 49: (1, {'@': 72}), 68: (1, {'@': 72}), 44: (1, {'@': 72}), 50: (1, {'@': 72}), 45: (1, {'@': 72}), 51: (1, {'@': 72}), 73: (1, {'@': 72}), 38: (1, {'@': 72}), 39: (1, {'@': 72}), 52: (1, {'@': 72}), 53: (1, {'@': 72}), 54: (1, {'@': 72}), 55: (1, {'@': 72}), 43: (1, {'@': 72}), 56: (1, {'@': 72}), 24: (1, {'@': 72})}, 8: {85: (0, 162), 86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 87: (0, 146), 7: (0, 154), 88: (0, 152), 10: (0, 161), 11: (0, 140), 9: (0, 142), 0: (0, 144), 89: (0, 153), 90: (0, 155), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 45: (0, 411), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 38: (0, 73), 4: (0, 45), 43: (0, 22), 41: (0, 28), 8: (0, 19), 95: (0, 61), 6: (0, 11), 1: (0, 176), 12: (0, 32), 96: (0, 0), 42: (0, 3), 20: (0, 59), 97: (0, 348), 13: (0, 66), 24: (0, 145), 40: (0, 141), 16: (0, 147), 47: (1, {'@': 73}), 53: (1, {'@': 73}), 54: (1, {'@': 73}), 48: (1, {'@': 73}), 55: (1, {'@': 73}), 49: (1, {'@': 73}), 46: (1, {'@': 73}), 56: (1, {'@': 73}), 50: (1, {'@': 73}), 52: (1, {'@': 73}), 51: (1, {'@': 73})}, 9: {0: (0, 133), 1: (0, 176)}, 10: {64: (1, {'@': 74}), 41: (1, {'@': 74}), 51: (1, {'@': 74}), 48: (1, {'@': 74}), 53: (1, {'@': 74})}, 11: {9: (1, {'@': 75}), 33: (1, {'@': 75}), 83: (1, {'@': 75}), 40: (1, {'@': 75}), 46: (1, {'@': 75}), 6: (1, {'@': 75}), 13: (1, {'@': 75}), 84: (1, {'@': 75}), 47: (1, {'@': 75}), 41: (1, {'@': 75}), 42: (1, {'@': 75}), 65: (1, {'@': 75}), 48: (1, {'@': 75}), 49: (1, {'@': 75}), 68: (1, {'@': 75}), 44: (1, {'@': 75}), 5: (1, {'@': 75}), 50: (1, {'@': 75}), 2: (1, {'@': 75}), 45: (1, {'@': 75}), 51: (1, {'@': 75}), 73: (1, {'@': 75}), 38: (1, {'@': 75}), 39: (1, {'@': 75}), 52: (1, {'@': 75}), 53: (1, {'@': 75}), 54: (1, {'@': 75}), 7: (1, {'@': 75}), 55: (1, {'@': 75}), 1: (1, {'@': 75}), 43: (1, {'@': 75}), 16: (1, {'@': 75}), 56: (1, {'@': 75}), 24: (1, {'@': 75}), 64: (1, {'@': 75})}, 12: {84: (0, 389), 98: (0, 372)}, 13: {57: (1, {'@': 76}), 58: (1, {'@': 76}), 33: (1, {'@': 76}), 59: (1, {'@': 76}), 60: (1, {'@': 76}), 40: (1, {'@': 76}), 46: (1, {'@': 76}), 61: (1, {'@': 76}), 62: (1, {'@': 76}), 63: (1, {'@': 76}), 64: (1, {'@': 76}), 42: (1, {'@': 76}), 65: (1, {'@': 76}), 48: (1, {'@': 76}), 66: (1, {'@': 76}), 67: (1, {'@': 76}), 68: (1, {'@': 76}), 69: (1, {'@': 76}), 70: (1, {'@': 76}), 50: (1, {'@': 76}), 51: (1, {'@': 76}), 71: (1, {'@': 76}), 72: (1, {'@': 76}), 73: (1, {'@': 76}), 38: (1, {'@': 76}), 39: (1, {'@': 76}), 74: (1, {'@': 76}), 75: (1, {'@': 76}), 52: (1, {'@': 76}), 76: (1, {'@': 76}), 53: (1, {'@': 76}), 78: (1, {'@': 76}), 1: (1, {'@': 76}), 43: (1, {'@': 76}), 79: (1, {'@': 76}), 80: (1, {'@': 76}), 81: (1, {'@': 76}), 24: (1, {'@': 76}), 82: (1, {'@': 76})}, 14: {18: (0, 353), 19: (0, 394), 7: (0, 154), 20: (0, 315), 11: (0, 293), 21: (0, 317), 22: (0, 347), 23: (0, 337), 24: (0, 313), 25: (0, 290), 0: (0, 4), 27: (0, 392), 6: (0, 309), 8: (0, 369), 28: (0, 319), 29: (0, 303), 30: (0, 281), 26: (0, 96), 31: (0, 299), 32: (0, 297), 1: (0, 176), 16: (0, 308), 13: (0, 66), 33: (0, 292), 34: (0, 316), 35: (0, 282), 5: (0, 285), 36: (0, 314), 37: (0, 301)}, 15: {0: (0, 307), 19: (0, 394), 35: (0, 383), 7: (0, 154), 1: (0, 176), 5: (0, 194), 37: (0, 301), 8: (0, 369), 24: (0, 313)}, 16: {46: (0, 362), 64: (0, 304), 58: (1, {'@': 77}), 59: (1, {'@': 77}), 60: (1, {'@': 77}), 61: (1, {'@': 77}), 62: (1, {'@': 77}), 63: (1, {'@': 77}), 66: (1, {'@': 77}), 69: (1, {'@': 77}), 70: (1, {'@': 77}), 71: (1, {'@': 77}), 74: (1, {'@': 77}), 75: (1, {'@': 77}), 52: (1, {'@': 77}), 76: (1, {'@': 77}), 53: (1, {'@': 77}), 78: (1, {'@': 77}), 1: (1, {'@': 77}), 79: (1, {'@': 77}), 80: (1, {'@': 77}), 81: (1, {'@': 77})}, 17: {52: (0, 260)}, 18: {41: (0, 344), 64: (0, 375)}, 19: {9: (1, {'@': 78}), 33: (1, {'@': 78}), 83: (1, {'@': 78}), 40: (1, {'@': 78}), 46: (1, {'@': 78}), 6: (1, {'@': 78}), 13: (1, {'@': 78}), 84: (1, {'@': 78}), 47: (1, {'@': 78}), 41: (1, {'@': 78}), 42: (1, {'@': 78}), 65: (1, {'@': 78}), 48: (1, {'@': 78}), 49: (1, {'@': 78}), 68: (1, {'@': 78}), 44: (1, {'@': 78}), 5: (1, {'@': 78}), 50: (1, {'@': 78}), 2: (1, {'@': 78}), 45: (1, {'@': 78}), 51: (1, {'@': 78}), 73: (1, {'@': 78}), 38: (1, {'@': 78}), 39: (1, {'@': 78}), 52: (1, {'@': 78}), 53: (1, {'@': 78}), 54: (1, {'@': 78}), 7: (1, {'@': 78}), 55: (1, {'@': 78}), 1: (1, {'@': 78}), 43: (1, {'@': 78}), 16: (1, {'@': 78}), 56: (1, {'@': 78}), 24: (1, {'@': 78}), 64: (1, {'@': 78})}, 20: {0: (0, 307), 19: (0, 81), 7: (0, 154), 1: (0, 176), 5: (0, 194), 37: (0, 301), 8: (0, 369), 24: (0, 313)}, 21: {48: (0, 357), 51: (0, 336)}, 22: {38: (1, {'@': 79}), 39: (1, {'@': 79}), 9: (1, {'@': 79}), 33: (1, {'@': 79}), 40: (1, {'@': 79}), 6: (1, {'@': 79}), 13: (1, {'@': 79}), 41: (1, {'@': 79}), 42: (1, {'@': 79}), 7: (1, {'@': 79}), 1: (1, {'@': 79}), 43: (1, {'@': 79}), 44: (1, {'@': 79}), 16: (1, {'@': 79}), 5: (1, {'@': 79}), 2: (1, {'@': 79}), 45: (1, {'@': 79}), 24: (1, {'@': 79}), 46: (1, {'@': 79}), 47: (1, {'@': 79}), 48: (1, {'@': 79}), 49: (1, {'@': 79}), 50: (1, {'@': 79}), 51: (1, {'@': 79}), 52: (1, {'@': 79}), 53: (1, {'@': 79}), 54: (1, {'@': 79}), 55: (1, {'@': 79}), 56: (1, {'@': 79})}, 23: {84: (0, 97), 57: (1, {'@': 80}), 38: (1, {'@': 80}), 39: (1, {'@': 80}), 33: (1, {'@': 80}), 74: (1, {'@': 80}), 40: (1, {'@': 80}), 64: (1, {'@': 80}), 42: (1, {'@': 80}), 77: (1, {'@': 80}), 65: (1, {'@': 80}), 67: (1, {'@': 80}), 68: (1, {'@': 80}), 43: (1, {'@': 80}), 82: (1, {'@': 80}), 24: (1, {'@': 80}), 72: (1, {'@': 80}), 73: (1, {'@': 80})}, 24: {38: (1, {'@': 81}), 47: (1, {'@': 81}), 53: (1, {'@': 81}), 41: (1, {'@': 81}), 42: (1, {'@': 81}), 39: (1, {'@': 81}), 54: (1, {'@': 81}), 48: (1, {'@': 81}), 33: (1, {'@': 81}), 55: (1, {'@': 81}), 40: (1, {'@': 81}), 49: (1, {'@': 81}), 46: (1, {'@': 81}), 43: (1, {'@': 81}), 44: (1, {'@': 81}), 56: (1, {'@': 81}), 50: (1, {'@': 81}), 52: (1, {'@': 81}), 45: (1, {'@': 81}), 51: (1, {'@': 81}), 84: (1, {'@': 81})}, 25: {77: (0, 9), 57: (1, {'@': 82}), 58: (1, {'@': 82}), 33: (1, {'@': 82}), 40: (1, {'@': 82}), 59: (1, {'@': 82}), 60: (1, {'@': 82}), 46: (1, {'@': 82}), 61: (1, {'@': 82}), 62: (1, {'@': 82}), 63: (1, {'@': 82}), 64: (1, {'@': 82}), 42: (1, {'@': 82}), 65: (1, {'@': 82}), 66: (1, {'@': 82}), 67: (1, {'@': 82}), 68: (1, {'@': 82}), 69: (1, {'@': 82}), 70: (1, {'@': 82}), 71: (1, {'@': 82}), 72: (1, {'@': 82}), 73: (1, {'@': 82}), 38: (1, {'@': 82}), 39: (1, {'@': 82}), 74: (1, {'@': 82}), 75: (1, {'@': 82}), 52: (1, {'@': 82}), 76: (1, {'@': 82}), 53: (1, {'@': 82}), 78: (1, {'@': 82}), 1: (1, {'@': 82}), 43: (1, {'@': 82}), 79: (1, {'@': 82}), 80: (1, {'@': 82}), 81: (1, {'@': 82}), 24: (1, {'@': 82}), 82: (1, {'@': 82}), 48: (1, {'@': 82}), 50: (1, {'@': 82}), 51: (1, {'@': 82})}, 26: {24: (0, 365), 38: (1, {'@': 83}), 39: (1, {'@': 83}), 33: (1, {'@': 83}), 40: (1, {'@': 83}), 46: (1, {'@': 83}), 52: (1, {'@': 83}), 51: (1, {'@': 83}), 47: (1, {'@': 83}), 53: (1, {'@': 83}), 41: (1, {'@': 83}), 42: (1, {'@': 83}), 54: (1, {'@': 83}), 48: (1, {'@': 83}), 55: (1, {'@': 83}), 49: (1, {'@': 83}), 43: (1, {'@': 83}), 44: (1, {'@': 83}), 56: (1, {'@': 83}), 50: (1, {'@': 83}), 45: (1, {'@': 83}), 84: (1, {'@': 83})}, 27: {64: (0, 304), 58: (1, {'@': 84}), 59: (1, {'@': 84}), 60: (1, {'@': 84}), 46: (1, {'@': 84}), 61: (1, {'@': 84}), 62: (1, {'@': 84}), 63: (1, {'@': 84}), 66: (1, {'@': 84}), 69: (1, {'@': 84}), 70: (1, {'@': 84}), 71: (1, {'@': 84}), 74: (1, {'@': 84}), 75: (1, {'@': 84}), 52: (1, {'@': 84}), 76: (1, {'@': 84}), 53: (1, {'@': 84}), 78: (1, {'@': 84}), 1: (1, {'@': 84}), 79: (1, {'@': 84}), 80: (1, {'@': 84}), 81: (1, {'@': 84})}, 28: {38: (1, {'@': 85}), 39: (1, {'@': 85}), 9: (1, {'@': 85}), 33: (1, {'@': 85}), 40: (1, {'@': 85}), 6: (1, {'@': 85}), 13: (1, {'@': 85}), 41: (1, {'@': 85}), 42: (1, {'@': 85}), 7: (1, {'@': 85}), 1: (1, {'@': 85}), 43: (1, {'@': 85}), 44: (1, {'@': 85}), 16: (1, {'@': 85}), 5: (1, {'@': 85}), 2: (1, {'@': 85}), 45: (1, {'@': 85}), 24: (1, {'@': 85}), 46: (1, {'@': 85}), 47: (1, {'@': 85}), 48: (1, {'@': 85}), 49: (1, {'@': 85}), 50: (1, {'@': 85}), 51: (1, {'@': 85}), 52: (1, {'@': 85}), 53: (1, {'@': 85}), 54: (1, {'@': 85}), 55: (1, {'@': 85}), 56: (1, {'@': 85})}, 29: {86: (0, 168), 3: (0, 166), 5: (0, 139), 7: (0, 154), 9: (0, 142), 10: (0, 161), 11: (0, 140), 0: (0, 144), 89: (0, 153), 2: (0, 156), 92: (0, 367), 14: (0, 399), 17: (0, 125), 15: (0, 136), 94: (0, 24), 4: (0, 45), 6: (0, 11), 8: (0, 19), 95: (0, 61), 1: (0, 176), 12: (0, 32), 13: (0, 66), 24: (0, 145), 16: (0, 147)}, 30: {9: (1, {'@': 86}), 33: (1, {'@': 86}), 83: (1, {'@': 86}), 40: (1, {'@': 86}), 46: (1, {'@': 86}), 6: (1, {'@': 86}), 13: (1, {'@': 86}), 84: (1, {'@': 86}), 47: (1, {'@': 86}), 41: (1, {'@': 86}), 42: (1, {'@': 86}), 65: (1, {'@': 86}), 48: (1, {'@': 86}), 49: (1, {'@': 86}), 68: (1, {'@': 86}), 44: (1, {'@': 86}), 5: (1, {'@': 86}), 50: (1, {'@': 86}), 2: (1, {'@': 86}), 45: (1, {'@': 86}), 51: (1, {'@': 86}), 73: (1, {'@': 86}), 38: (1, {'@': 86}), 39: (1, {'@': 86}), 52: (1, {'@': 86}), 53: (1, {'@': 86}), 54: (1, {'@': 86}), 7: (1, {'@': 86}), 55: (1, {'@': 86}), 1: (1, {'@': 86}), 43: (1, {'@': 86}), 16: (1, {'@': 86}), 56: (1, {'@': 86}), 24: (1, {'@': 86}), 64: (1, {'@': 86})}, 31: {77: (0, 9), 57: (1, {'@': 87}), 58: (1, {'@': 87}), 33: (1, {'@': 87}), 40: (1, {'@': 87}), 59: (1, {'@': 87}), 60: (1, {'@': 87}), 46: (1, {'@': 87}), 61: (1, {'@': 87}), 62: (1, {'@': 87}), 63: (1, {'@': 87}), 64: (1, {'@': 87}), 42: (1, {'@': 87}), 65: (1, {'@': 87}), 48: (1, {'@': 87}), 66: (1, {'@': 87}), 67: (1, {'@': 87}), 68: (1, {'@': 87}), 69: (1, {'@': 87}), 70: (1, {'@': 87}), 50: (1, {'@': 87}), 51: (1, {'@': 87}), 71: (1, {'@': 87}), 72: (1, {'@': 87}), 73: (1, {'@': 87}), 38: (1, {'@': 87}), 39: (1, {'@': 87}), 74: (1, {'@': 87}), 75: (1, {'@': 87}), 52: (1, {'@': 87}), 76: (1, {'@': 87}), 53: (1, {'@': 87}), 78: (1, {'@': 87}), 1: (1, {'@': 87}), 43: (1, {'@': 87}), 79: (1, {'@': 87}), 80: (1, {'@': 87}), 81: (1, {'@': 87}), 24: (1, {'@': 87}), 82: (1, {'@': 87})}, 32: {9: (1, {'@': 88}), 33: (1, {'@': 88}), 83: (1, {'@': 88}), 40: (1, {'@': 88}), 46: (1, {'@': 88}), 6: (1, {'@': 88}), 13: (1, {'@': 88}), 84: (1, {'@': 88}), 47: (1, {'@': 88}), 41: (1, {'@': 88}), 42: (1, {'@': 88}), 65: (1, {'@': 88}), 48: (1, {'@': 88}), 49: (1, {'@': 88}), 68: (1, {'@': 88}), 44: (1, {'@': 88}), 5: (1, {'@': 88}), 50: (1, {'@': 88}), 2: (1, {'@': 88}), 45: (1, {'@': 88}), 51: (1, {'@': 88}), 73: (1, {'@': 88}), 38: (1, {'@': 88}), 39: (1, {'@': 88}), 52: (1, {'@': 88}), 53: (1, {'@': 88}), 54: (1, {'@': 88}), 7: (1, {'@': 88}), 55: (1, {'@': 88}), 1: (1, {'@': 88}), 43: (1, {'@': 88}), 16: (1, {'@': 88}), 56: (1, {'@': 88}), 24: (1, {'@': 88}), 64: (1, {'@': 88})}, 33: {38: (1, {'@': 89}), 39: (1, {'@': 89}), 33: (1, {'@': 89}), 40: (1, {'@': 89}), 46: (1, {'@': 89}), 52: (1, {'@': 89}), 51: (1, {'@': 89}), 47: (1, {'@': 89}), 53: (1, {'@': 89}), 41: (1, {'@': 89}), 42: (1, {'@': 89}), 54: (1, {'@': 89}), 48: (1, {'@': 89}), 55: (1, {'@': 89}), 49: (1, {'@': 89}), 43: (1, {'@': 89}), 44: (1, {'@': 89}), 56: (1, {'@': 89}), 50: (1, {'@': 89}), 45: (1, {'@': 89}), 84: (1, {'@': 89})}, 34: {50: (0, 325)}, 35: {64: (1, {'@': 90}), 41: (1, {'@': 90}), 51: (1, {'@': 90}), 48: (1, {'@': 90}), 53: (1, {'@': 90})}, 36: {64: (0, 304), 52: (0, 370)}, 37: {64: (0, 304), 58: (1, {'@': 91}), 59: (1, {'@': 91}), 60: (1, {'@': 91}), 46: (1, {'@': 91}), 61: (1, {'@': 91}), 62: (1, {'@': 91}), 63: (1, {'@': 91}), 66: (1, {'@': 91}), 69: (1, {'@': 91}), 70: (1, {'@': 91}), 71: (1, {'@': 91}), 74: (1, {'@': 91}), 75: (1, {'@': 91}), 52: (1, {'@': 91}), 76: (1, {'@': 91}), 53: (1, {'@': 91}), 78: (1, {'@': 91}), 1: (1, {'@': 91}), 79: (1, {'@': 91}), 80: (1, {'@': 91}), 81: (1, {'@': 91})}, 38: {85: (0, 162), 86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 87: (0, 146), 7: (0, 154), 88: (0, 152), 10: (0, 161), 11: (0, 140), 9: (0, 142), 0: (0, 144), 89: (0, 153), 90: (0, 155), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 45: (0, 411), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 38: (0, 73), 4: (0, 45), 43: (0, 22), 41: (0, 28), 8: (0, 19), 95: (0, 61), 6: (0, 11), 1: (0, 176), 12: (0, 32), 96: (0, 0), 42: (0, 3), 20: (0, 59), 13: (0, 66), 24: (0, 145), 40: (0, 141), 97: (0, 233), 16: (0, 147)}, 39: {9: (1, {'@': 92}), 33: (1, {'@': 92}), 83: (1, {'@': 92}), 40: (1, {'@': 92}), 46: (1, {'@': 92}), 6: (1, {'@': 92}), 13: (1, {'@': 92}), 84: (1, {'@': 92}), 47: (1, {'@': 92}), 41: (1, {'@': 92}), 42: (1, {'@': 92}), 65: (1, {'@': 92}), 48: (1, {'@': 92}), 49: (1, {'@': 92}), 68: (1, {'@': 92}), 44: (1, {'@': 92}), 5: (1, {'@': 92}), 50: (1, {'@': 92}), 2: (1, {'@': 92}), 45: (1, {'@': 92}), 51: (1, {'@': 92}), 73: (1, {'@': 92}), 38: (1, {'@': 92}), 39: (1, {'@': 92}), 52: (1, {'@': 92}), 53: (1, {'@': 92}), 54: (1, {'@': 92}), 7: (1, {'@': 92}), 55: (1, {'@': 92}), 1: (1, {'@': 92}), 43: (1, {'@': 92}), 16: (1, {'@': 92}), 56: (1, {'@': 92}), 24: (1, {'@': 92}), 64: (1, {'@': 92})}, 40: {86: (0, 168), 3: (0, 166), 5: (0, 139), 7: (0, 154), 9: (0, 142), 10: (0, 161), 11: (0, 140), 0: (0, 144), 2: (0, 156), 14: (0, 399), 17: (0, 125), 15: (0, 136), 4: (0, 45), 6: (0, 11), 95: (0, 378), 8: (0, 19), 1: (0, 176), 12: (0, 32), 13: (0, 66), 16: (0, 147)}, 41: {68: (0, 102), 57: (1, {'@': 93}), 58: (1, {'@': 93}), 33: (1, {'@': 93}), 40: (1, {'@': 93}), 59: (1, {'@': 93}), 60: (1, {'@': 93}), 46: (1, {'@': 93}), 61: (1, {'@': 93}), 62: (1, {'@': 93}), 63: (1, {'@': 93}), 64: (1, {'@': 93}), 42: (1, {'@': 93}), 66: (1, {'@': 93}), 67: (1, {'@': 93}), 69: (1, {'@': 93}), 70: (1, {'@': 93}), 71: (1, {'@': 93}), 72: (1, {'@': 93}), 73: (1, {'@': 93}), 38: (1, {'@': 93}), 39: (1, {'@': 93}), 74: (1, {'@': 93}), 75: (1, {'@': 93}), 52: (1, {'@': 93}), 76: (1, {'@': 93}), 53: (1, {'@': 93}), 78: (1, {'@': 93}), 1: (1, {'@': 93}), 43: (1, {'@': 93}), 79: (1, {'@': 93}), 80: (1, {'@': 93}), 81: (1, {'@': 93}), 24: (1, {'@': 93}), 82: (1, {'@': 93}), 48: (1, {'@': 93}), 51: (1, {'@': 93}), 50: (1, {'@': 93})}, 42: {57: (1, {'@': 94}), 58: (1, {'@': 94}), 33: (1, {'@': 94}), 40: (1, {'@': 94}), 59: (1, {'@': 94}), 60: (1, {'@': 94}), 46: (1, {'@': 94}), 61: (1, {'@': 94}), 62: (1, {'@': 94}), 63: (1, {'@': 94}), 64: (1, {'@': 94}), 42: (1, {'@': 94}), 48: (1, {'@': 94}), 66: (1, {'@': 94}), 67: (1, {'@': 94}), 69: (1, {'@': 94}), 70: (1, {'@': 94}), 50: (1, {'@': 94}), 51: (1, {'@': 94}), 71: (1, {'@': 94}), 72: (1, {'@': 94}), 73: (1, {'@': 94}), 38: (1, {'@': 94}), 39: (1, {'@': 94}), 74: (1, {'@': 94}), 75: (1, {'@': 94}), 52: (1, {'@': 94}), 76: (1, {'@': 94}), 53: (1, {'@': 94}), 78: (1, {'@': 94}), 1: (1, {'@': 94}), 43: (1, {'@': 94}), 79: (1, {'@': 94}), 80: (1, {'@': 94}), 81: (1, {'@': 94}), 24: (1, {'@': 94}), 82: (1, {'@': 94})}, 43: {99: (0, 84), 55: (0, 85), 100: (0, 126)}, 44: {0: (0, 4), 19: (0, 394), 30: (0, 281), 29: (0, 303), 22: (0, 60), 7: (0, 154), 1: (0, 176), 23: (0, 337), 101: (0, 277), 24: (0, 313), 34: (0, 316), 35: (0, 282), 5: (0, 194), 37: (0, 301), 8: (0, 369), 102: (0, 349), 53: (1, {'@': 95})}, 45: {9: (1, {'@': 96}), 33: (1, {'@': 96}), 83: (1, {'@': 96}), 40: (1, {'@': 96}), 46: (1, {'@': 96}), 6: (1, {'@': 96}), 13: (1, {'@': 96}), 84: (1, {'@': 96}), 47: (1, {'@': 96}), 41: (1, {'@': 96}), 42: (1, {'@': 96}), 65: (1, {'@': 96}), 48: (1, {'@': 96}), 49: (1, {'@': 96}), 68: (1, {'@': 96}), 44: (1, {'@': 96}), 5: (1, {'@': 96}), 50: (1, {'@': 96}), 2: (1, {'@': 96}), 45: (1, {'@': 96}), 51: (1, {'@': 96}), 73: (1, {'@': 96}), 38: (1, {'@': 96}), 39: (1, {'@': 96}), 52: (1, {'@': 96}), 53: (1, {'@': 96}), 54: (1, {'@': 96}), 7: (1, {'@': 96}), 55: (1, {'@': 96}), 1: (1, {'@': 96}), 43: (1, {'@': 96}), 16: (1, {'@': 96}), 56: (1, {'@': 96}), 24: (1, {'@': 96}), 64: (1, {'@': 96})}, 46: {0: (0, 4), 19: (0, 394), 30: (0, 281), 29: (0, 303), 22: (0, 60), 7: (0, 154), 1: (0, 176), 23: (0, 337), 101: (0, 277), 24: (0, 313), 34: (0, 316), 102: (0, 77), 35: (0, 282), 5: (0, 194), 37: (0, 301), 8: (0, 369), 53: (1, {'@': 95})}, 47: {85: (0, 162), 86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 87: (0, 146), 7: (0, 154), 88: (0, 152), 10: (0, 161), 11: (0, 140), 9: (0, 142), 0: (0, 144), 89: (0, 153), 90: (0, 155), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 45: (0, 411), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 38: (0, 73), 4: (0, 45), 43: (0, 22), 41: (0, 28), 8: (0, 19), 95: (0, 61), 6: (0, 11), 1: (0, 176), 12: (0, 32), 96: (0, 0), 42: (0, 3), 20: (0, 59), 13: (0, 66), 24: (0, 145), 40: (0, 141), 97: (0, 346), 16: (0, 147)}, 48: {65: (0, 380), 57: (1, {'@': 97}), 58: (1, {'@': 97}), 33: (1, {'@': 97}), 40: (1, {'@': 97}), 59: (1, {'@': 97}), 60: (1, {'@': 97}), 46: (1, {'@': 97}), 61: (1, {'@': 97}), 62: (1, {'@': 97}), 63: (1, {'@': 97}), 64: (1, {'@': 97}), 42: (1, {'@': 97}), 66: (1, {'@': 97}), 67: (1, {'@': 97}), 68: (1, {'@': 97}), 69: (1, {'@': 97}), 70: (1, {'@': 97}), 71: (1, {'@': 97}), 72: (1, {'@': 97}), 73: (1, {'@': 97}), 38: (1, {'@': 97}), 39: (1, {'@': 97}), 74: (1, {'@': 97}), 75: (1, {'@': 97}), 52: (1, {'@': 97}), 76: (1, {'@': 97}), 53: (1, {'@': 97}), 78: (1, {'@': 97}), 1: (1, {'@': 97}), 43: (1, {'@': 97}), 79: (1, {'@': 97}), 80: (1, {'@': 97}), 81: (1, {'@': 97}), 24: (1, {'@': 97}), 82: (1, {'@': 97}), 48: (1, {'@': 97}), 51: (1, {'@': 97}), 50: (1, {'@': 97})}, 49: {2: (0, 156), 3: (0, 166), 4: (0, 45), 5: (0, 139), 6: (0, 11), 7: (0, 154), 8: (0, 19), 1: (0, 176), 9: (0, 142), 11: (0, 140), 12: (0, 32), 0: (0, 144), 13: (0, 66), 14: (0, 399), 15: (0, 136), 10: (0, 89), 16: (0, 147)}, 50: {57: (1, {'@': 98}), 58: (1, {'@': 98}), 33: (1, {'@': 98}), 40: (1, {'@': 98}), 59: (1, {'@': 98}), 60: (1, {'@': 98}), 46: (1, {'@': 98}), 61: (1, {'@': 98}), 62: (1, {'@': 98}), 63: (1, {'@': 98}), 64: (1, {'@': 98}), 42: (1, {'@': 98}), 66: (1, {'@': 98}), 67: (1, {'@': 98}), 69: (1, {'@': 98}), 70: (1, {'@': 98}), 71: (1, {'@': 98}), 72: (1, {'@': 98}), 73: (1, {'@': 98}), 38: (1, {'@': 98}), 39: (1, {'@': 98}), 74: (1, {'@': 98}), 75: (1, {'@': 98}), 52: (1, {'@': 98}), 76: (1, {'@': 98}), 53: (1, {'@': 98}), 78: (1, {'@': 98}), 1: (1, {'@': 98}), 43: (1, {'@': 98}), 79: (1, {'@': 98}), 80: (1, {'@': 98}), 81: (1, {'@': 98}), 82: (1, {'@': 98}), 48: (1, {'@': 98})}, 51: {50: (0, 396)}, 52: {47: (1, {'@': 99}), 53: (1, {'@': 99}), 54: (1, {'@': 99}), 48: (1, {'@': 99}), 55: (1, {'@': 99}), 49: (1, {'@': 99}), 46: (1, {'@': 99}), 56: (1, {'@': 99}), 50: (1, {'@': 99}), 52: (1, {'@': 99}), 51: (1, {'@': 99})}, 53: {9: (1, {'@': 100}), 33: (1, {'@': 100}), 83: (1, {'@': 100}), 40: (1, {'@': 100}), 46: (1, {'@': 100}), 6: (1, {'@': 100}), 13: (1, {'@': 100}), 84: (1, {'@': 100}), 47: (1, {'@': 100}), 41: (1, {'@': 100}), 42: (1, {'@': 100}), 65: (1, {'@': 100}), 48: (1, {'@': 100}), 49: (1, {'@': 100}), 68: (1, {'@': 100}), 44: (1, {'@': 100}), 5: (1, {'@': 100}), 50: (1, {'@': 100}), 2: (1, {'@': 100}), 45: (1, {'@': 100}), 51: (1, {'@': 100}), 73: (1, {'@': 100}), 38: (1, {'@': 100}), 39: (1, {'@': 100}), 52: (1, {'@': 100}), 53: (1, {'@': 100}), 54: (1, {'@': 100}), 7: (1, {'@': 100}), 55: (1, {'@': 100}), 1: (1, {'@': 100}), 43: (1, {'@': 100}), 16: (1, {'@': 100}), 56: (1, {'@': 100}), 24: (1, {'@': 100}), 64: (1, {'@': 100})}, 54: {85: (0, 162), 86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 87: (0, 146), 7: (0, 154), 88: (0, 152), 10: (0, 161), 11: (0, 140), 9: (0, 142), 0: (0, 144), 89: (0, 153), 90: (0, 155), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 45: (0, 411), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 97: (0, 374), 38: (0, 73), 4: (0, 45), 43: (0, 22), 41: (0, 28), 8: (0, 19), 95: (0, 61), 6: (0, 11), 1: (0, 176), 12: (0, 32), 96: (0, 0), 42: (0, 3), 20: (0, 59), 13: (0, 66), 24: (0, 145), 40: (0, 141), 16: (0, 147)}, 55: {53: (0, 393), 48: (0, 103)}, 56: {57: (1, {'@': 101}), 58: (1, {'@': 101}), 33: (1, {'@': 101}), 40: (1, {'@': 101}), 59: (1, {'@': 101}), 60: (1, {'@': 101}), 46: (1, {'@': 101}), 61: (1, {'@': 101}), 62: (1, {'@': 101}), 63: (1, {'@': 101}), 64: (1, {'@': 101}), 42: (1, {'@': 101}), 48: (1, {'@': 101}), 66: (1, {'@': 101}), 67: (1, {'@': 101}), 68: (1, {'@': 101}), 69: (1, {'@': 101}), 70: (1, {'@': 101}), 50: (1, {'@': 101}), 51: (1, {'@': 101}), 71: (1, {'@': 101}), 72: (1, {'@': 101}), 73: (1, {'@': 101}), 38: (1, {'@': 101}), 39: (1, {'@': 101}), 74: (1, {'@': 101}), 75: (1, {'@': 101}), 52: (1, {'@': 101}), 76: (1, {'@': 101}), 53: (1, {'@': 101}), 78: (1, {'@': 101}), 1: (1, {'@': 101}), 43: (1, {'@': 101}), 79: (1, {'@': 101}), 80: (1, {'@': 101}), 81: (1, {'@': 101}), 24: (1, {'@': 101}), 82: (1, {'@': 101})}, 57: {33: (1, {'@': 102}), 40: (1, {'@': 102}), 46: (1, {'@': 102}), 84: (1, {'@': 102}), 47: (1, {'@': 102}), 41: (1, {'@': 102}), 42: (1, {'@': 102}), 65: (1, {'@': 102}), 48: (1, {'@': 102}), 49: (1, {'@': 102}), 68: (1, {'@': 102}), 44: (1, {'@': 102}), 50: (1, {'@': 102}), 45: (1, {'@': 102}), 51: (1, {'@': 102}), 73: (1, {'@': 102}), 38: (1, {'@': 102}), 39: (1, {'@': 102}), 52: (1, {'@': 102}), 53: (1, {'@': 102}), 54: (1, {'@': 102}), 55: (1, {'@': 102}), 43: (1, {'@': 102}), 56: (1, {'@': 102}), 24: (1, {'@': 102})}, 58: {51: (1, {'@': 103}), 48: (1, {'@': 103})}, 59: {85: (0, 162), 86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 87: (0, 146), 7: (0, 154), 88: (0, 152), 10: (0, 161), 11: (0, 140), 9: (0, 142), 0: (0, 144), 89: (0, 153), 90: (0, 155), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 45: (0, 411), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 38: (0, 73), 97: (0, 17), 4: (0, 45), 43: (0, 22), 41: (0, 28), 8: (0, 19), 95: (0, 61), 6: (0, 11), 1: (0, 176), 12: (0, 32), 96: (0, 0), 42: (0, 3), 20: (0, 59), 13: (0, 66), 24: (0, 145), 40: (0, 141), 16: (0, 147)}, 60: {53: (1, {'@': 104}), 48: (1, {'@': 104})}, 61: {103: (0, 26), 24: (0, 40), 38: (1, {'@': 105}), 39: (1, {'@': 105}), 33: (1, {'@': 105}), 40: (1, {'@': 105}), 46: (1, {'@': 105}), 52: (1, {'@': 105}), 51: (1, {'@': 105}), 47: (1, {'@': 105}), 53: (1, {'@': 105}), 41: (1, {'@': 105}), 42: (1, {'@': 105}), 54: (1, {'@': 105}), 48: (1, {'@': 105}), 55: (1, {'@': 105}), 49: (1, {'@': 105}), 43: (1, {'@': 105}), 44: (1, {'@': 105}), 56: (1, {'@': 105}), 50: (1, {'@': 105}), 45: (1, {'@': 105}), 84: (1, {'@': 105})}, 62: {40: (0, 141), 43: (0, 22), 93: (0, 29), 44: (0, 164), 41: (0, 28), 88: (0, 152), 33: (0, 415), 45: (0, 411), 39: (0, 123), 42: (0, 3), 38: (0, 73), 90: (0, 155), 47: (1, {'@': 106}), 53: (1, {'@': 106}), 54: (1, {'@': 106}), 48: (1, {'@': 106}), 55: (1, {'@': 106}), 49: (1, {'@': 106}), 46: (1, {'@': 106}), 56: (1, {'@': 106}), 50: (1, {'@': 106}), 52: (1, {'@': 106}), 51: (1, {'@': 106})}, 63: {50: (0, 334)}, 64: {60: (0, 175), 61: (0, 171), 1: (0, 176), 58: (0, 169), 104: (0, 209), 78: (0, 193), 81: (0, 184), 0: (0, 196), 105: (0, 192), 70: (0, 190), 71: (0, 212), 80: (0, 200), 75: (0, 237), 79: (0, 218), 106: (0, 198), 59: (0, 223), 66: (0, 217), 69: (0, 241), 107: (0, 234), 76: (0, 230), 108: (0, 269), 62: (0, 253), 63: (1, {'@': 107})}, 65: {64: (1, {'@': 108}), 41: (1, {'@': 108}), 51: (1, {'@': 108}), 48: (1, {'@': 108}), 53: (1, {'@': 108})}, 66: {9: (1, {'@': 109}), 33: (1, {'@': 109}), 83: (1, {'@': 109}), 40: (1, {'@': 109}), 46: (1, {'@': 109}), 6: (1, {'@': 109}), 13: (1, {'@': 109}), 84: (1, {'@': 109}), 47: (1, {'@': 109}), 41: (1, {'@': 109}), 42: (1, {'@': 109}), 65: (1, {'@': 109}), 48: (1, {'@': 109}), 49: (1, {'@': 109}), 68: (1, {'@': 109}), 44: (1, {'@': 109}), 5: (1, {'@': 109}), 50: (1, {'@': 109}), 2: (1, {'@': 109}), 45: (1, {'@': 109}), 51: (1, {'@': 109}), 73: (1, {'@': 109}), 38: (1, {'@': 109}), 39: (1, {'@': 109}), 52: (1, {'@': 109}), 53: (1, {'@': 109}), 54: (1, {'@': 109}), 7: (1, {'@': 109}), 55: (1, {'@': 109}), 1: (1, {'@': 109}), 43: (1, {'@': 109}), 16: (1, {'@': 109}), 56: (1, {'@': 109}), 24: (1, {'@': 109}), 57: (1, {'@': 109}), 58: (1, {'@': 109}), 74: (1, {'@': 109}), 59: (1, {'@': 109}), 60: (1, {'@': 109}), 61: (1, {'@': 109}), 75: (1, {'@': 109}), 76: (1, {'@': 109}), 62: (1, {'@': 109}), 63: (1, {'@': 109}), 64: (1, {'@': 109}), 66: (1, {'@': 109}), 78: (1, {'@': 109}), 69: (1, {'@': 109}), 70: (1, {'@': 109}), 79: (1, {'@': 109}), 80: (1, {'@': 109}), 81: (1, {'@': 109}), 71: (1, {'@': 109})}, 67: {73: (0, 98), 57: (1, {'@': 110}), 58: (1, {'@': 110}), 33: (1, {'@': 110}), 40: (1, {'@': 110}), 59: (1, {'@': 110}), 60: (1, {'@': 110}), 46: (1, {'@': 110}), 61: (1, {'@': 110}), 62: (1, {'@': 110}), 63: (1, {'@': 110}), 64: (1, {'@': 110}), 42: (1, {'@': 110}), 65: (1, {'@': 110}), 66: (1, {'@': 110}), 67: (1, {'@': 110}), 68: (1, {'@': 110}), 69: (1, {'@': 110}), 70: (1, {'@': 110}), 71: (1, {'@': 110}), 72: (1, {'@': 110}), 38: (1, {'@': 110}), 39: (1, {'@': 110}), 74: (1, {'@': 110}), 75: (1, {'@': 110}), 52: (1, {'@': 110}), 76: (1, {'@': 110}), 53: (1, {'@': 110}), 78: (1, {'@': 110}), 1: (1, {'@': 110}), 43: (1, {'@': 110}), 79: (1, {'@': 110}), 80: (1, {'@': 110}), 81: (1, {'@': 110}), 24: (1, {'@': 110}), 82: (1, {'@': 110}), 48: (1, {'@': 110}), 50: (1, {'@': 110}), 51: (1, {'@': 110})}, 68: {49: (0, 352), 47: (1, {'@': 111}), 53: (1, {'@': 111}), 54: (1, {'@': 111}), 48: (1, {'@': 111}), 55: (1, {'@': 111}), 46: (1, {'@': 111}), 56: (1, {'@': 111}), 50: (1, {'@': 111}), 52: (1, {'@': 111}), 51: (1, {'@': 111})}, 69: {50: (0, 360)}, 70: {9: (1, {'@': 112}), 33: (1, {'@': 112}), 20: (1, {'@': 112}), 40: (1, {'@': 112}), 6: (1, {'@': 112}), 13: (1, {'@': 112}), 85: (1, {'@': 112}), 96: (1, {'@': 112}), 41: (1, {'@': 112}), 42: (1, {'@': 112}), 44: (1, {'@': 112}), 5: (1, {'@': 112}), 91: (1, {'@': 112}), 2: (1, {'@': 112}), 45: (1, {'@': 112}), 38: (1, {'@': 112}), 39: (1, {'@': 112}), 53: (1, {'@': 112}), 7: (1, {'@': 112}), 1: (1, {'@': 112}), 43: (1, {'@': 112}), 16: (1, {'@': 112}), 87: (1, {'@': 112}), 24: (1, {'@': 112})}, 71: {9: (1, {'@': 113}), 33: (1, {'@': 113}), 83: (1, {'@': 113}), 40: (1, {'@': 113}), 46: (1, {'@': 113}), 6: (1, {'@': 113}), 13: (1, {'@': 113}), 84: (1, {'@': 113}), 47: (1, {'@': 113}), 41: (1, {'@': 113}), 42: (1, {'@': 113}), 65: (1, {'@': 113}), 48: (1, {'@': 113}), 49: (1, {'@': 113}), 68: (1, {'@': 113}), 44: (1, {'@': 113}), 5: (1, {'@': 113}), 50: (1, {'@': 113}), 2: (1, {'@': 113}), 45: (1, {'@': 113}), 51: (1, {'@': 113}), 73: (1, {'@': 113}), 38: (1, {'@': 113}), 39: (1, {'@': 113}), 52: (1, {'@': 113}), 53: (1, {'@': 113}), 54: (1, {'@': 113}), 7: (1, {'@': 113}), 55: (1, {'@': 113}), 1: (1, {'@': 113}), 43: (1, {'@': 113}), 16: (1, {'@': 113}), 56: (1, {'@': 113}), 24: (1, {'@': 113}), 64: (1, {'@': 113})}, 72: {0: (0, 307), 29: (0, 303), 30: (0, 281), 34: (0, 95), 19: (0, 394), 7: (0, 154), 1: (0, 176), 23: (0, 337), 24: (0, 313), 35: (0, 282), 5: (0, 194), 37: (0, 301), 8: (0, 369)}, 73: {38: (1, {'@': 114}), 39: (1, {'@': 114}), 9: (1, {'@': 114}), 33: (1, {'@': 114}), 40: (1, {'@': 114}), 6: (1, {'@': 114}), 13: (1, {'@': 114}), 41: (1, {'@': 114}), 42: (1, {'@': 114}), 7: (1, {'@': 114}), 1: (1, {'@': 114}), 43: (1, {'@': 114}), 44: (1, {'@': 114}), 16: (1, {'@': 114}), 5: (1, {'@': 114}), 2: (1, {'@': 114}), 45: (1, {'@': 114}), 24: (1, {'@': 114}), 46: (1, {'@': 114}), 47: (1, {'@': 114}), 48: (1, {'@': 114}), 49: (1, {'@': 114}), 50: (1, {'@': 114}), 51: (1, {'@': 114}), 52: (1, {'@': 114}), 53: (1, {'@': 114}), 54: (1, {'@': 114}), 55: (1, {'@': 114}), 56: (1, {'@': 114})}, 74: {65: (0, 339), 38: (1, {'@': 115}), 39: (1, {'@': 115}), 33: (1, {'@': 115}), 40: (1, {'@': 115}), 46: (1, {'@': 115}), 52: (1, {'@': 115}), 51: (1, {'@': 115}), 47: (1, {'@': 115}), 53: (1, {'@': 115}), 41: (1, {'@': 115}), 42: (1, {'@': 115}), 54: (1, {'@': 115}), 48: (1, {'@': 115}), 55: (1, {'@': 115}), 49: (1, {'@': 115}), 68: (1, {'@': 115}), 43: (1, {'@': 115}), 44: (1, {'@': 115}), 56: (1, {'@': 115}), 50: (1, {'@': 115}), 45: (1, {'@': 115}), 24: (1, {'@': 115}), 84: (1, {'@': 115})}, 75: {58: (1, {'@': 116}), 59: (1, {'@': 116}), 60: (1, {'@': 116}), 61: (1, {'@': 116}), 75: (1, {'@': 116}), 76: (1, {'@': 116}), 62: (1, {'@': 116}), 63: (1, {'@': 116}), 66: (1, {'@': 116}), 78: (1, {'@': 116}), 1: (1, {'@': 116}), 79: (1, {'@': 116}), 70: (1, {'@': 116}), 80: (1, {'@': 116}), 69: (1, {'@': 116}), 81: (1, {'@': 116}), 71: (1, {'@': 116}), 74: (1, {'@': 116})}, 76: {64: (0, 304), 58: (1, {'@': 117}), 59: (1, {'@': 117}), 60: (1, {'@': 117}), 61: (1, {'@': 117}), 75: (1, {'@': 117}), 76: (1, {'@': 117}), 62: (1, {'@': 117}), 63: (1, {'@': 117}), 66: (1, {'@': 117}), 78: (1, {'@': 117}), 1: (1, {'@': 117}), 79: (1, {'@': 117}), 70: (1, {'@': 117}), 80: (1, {'@': 117}), 69: (1, {'@': 117}), 81: (1, {'@': 117}), 71: (1, {'@': 117}), 74: (1, {'@': 117})}, 77: {53: (0, 23)}, 78: {58: (1, {'@': 118}), 59: (1, {'@': 118}), 60: (1, {'@': 118}), 61: (1, {'@': 118}), 75: (1, {'@': 118}), 76: (1, {'@': 118}), 62: (1, {'@': 118}), 63: (1, {'@': 118}), 66: (1, {'@': 118}), 78: (1, {'@': 118}), 1: (1, {'@': 118}), 79: (1, {'@': 118}), 70: (1, {'@': 118}), 80: (1, {'@': 118}), 69: (1, {'@': 118}), 81: (1, {'@': 118}), 71: (1, {'@': 118}), 74: (1, {'@': 118})}, 79: {50: (1, {'@': 119})}, 80: {5: (0, 410)}, 81: {77: (0, 9), 57: (1, {'@': 120}), 58: (1, {'@': 120}), 33: (1, {'@': 120}), 40: (1, {'@': 120}), 59: (1, {'@': 120}), 60: (1, {'@': 120}), 46: (1, {'@': 120}), 61: (1, {'@': 120}), 62: (1, {'@': 120}), 63: (1, {'@': 120}), 64: (1, {'@': 120}), 42: (1, {'@': 120}), 65: (1, {'@': 120}), 48: (1, {'@': 120}), 66: (1, {'@': 120}), 67: (1, {'@': 120}), 68: (1, {'@': 120}), 69: (1, {'@': 120}), 70: (1, {'@': 120}), 50: (1, {'@': 120}), 51: (1, {'@': 120}), 71: (1, {'@': 120}), 72: (1, {'@': 120}), 73: (1, {'@': 120}), 38: (1, {'@': 120}), 39: (1, {'@': 120}), 74: (1, {'@': 120}), 75: (1, {'@': 120}), 52: (1, {'@': 120}), 76: (1, {'@': 120}), 53: (1, {'@': 120}), 78: (1, {'@': 120}), 1: (1, {'@': 120}), 43: (1, {'@': 120}), 79: (1, {'@': 120}), 80: (1, {'@': 120}), 81: (1, {'@': 120}), 24: (1, {'@': 120}), 82: (1, {'@': 120})}, 82: {33: (1, {'@': 121}), 40: (1, {'@': 121}), 46: (1, {'@': 121}), 84: (1, {'@': 121}), 47: (1, {'@': 121}), 41: (1, {'@': 121}), 42: (1, {'@': 121}), 48: (1, {'@': 121}), 49: (1, {'@': 121}), 44: (1, {'@': 121}), 50: (1, {'@': 121}), 51: (1, {'@': 121}), 45: (1, {'@': 121}), 38: (1, {'@': 121}), 39: (1, {'@': 121}), 52: (1, {'@': 121}), 53: (1, {'@': 121}), 54: (1, {'@': 121}), 55: (1, {'@': 121}), 43: (1, {'@': 121}), 56: (1, {'@': 121}), 24: (1, {'@': 121})}, 83: {84: (0, 112)}, 84: {100: (0, 180), 56: (0, 203), 55: (0, 85)}, 85: {2: (0, 262), 5: (0, 244), 7: (0, 154), 1: (0, 176), 109: (0, 18), 11: (0, 10), 0: (0, 35), 13: (0, 66), 8: (0, 65)}, 86: {47: (0, 116)}, 87: {58: (1, {'@': 122}), 59: (1, {'@': 122}), 60: (1, {'@': 122}), 61: (1, {'@': 122}), 75: (1, {'@': 122}), 76: (1, {'@': 122}), 62: (1, {'@': 122}), 63: (1, {'@': 122}), 66: (1, {'@': 122}), 78: (1, {'@': 122}), 1: (1, {'@': 122}), 79: (1, {'@': 122}), 70: (1, {'@': 122}), 80: (1, {'@': 122}), 69: (1, {'@': 122}), 81: (1, {'@': 122}), 71: (1, {'@': 122}), 74: (1, {'@': 122})}, 88: {53: (0, 78)}, 89: {33: (1, {'@': 123}), 40: (1, {'@': 123}), 46: (1, {'@': 123}), 84: (1, {'@': 123}), 47: (1, {'@': 123}), 41: (1, {'@': 123}), 42: (1, {'@': 123}), 65: (1, {'@': 123}), 48: (1, {'@': 123}), 49: (1, {'@': 123}), 68: (1, {'@': 123}), 44: (1, {'@': 123}), 50: (1, {'@': 123}), 45: (1, {'@': 123}), 51: (1, {'@': 123}), 73: (1, {'@': 123}), 38: (1, {'@': 123}), 39: (1, {'@': 123}), 52: (1, {'@': 123}), 53: (1, {'@': 123}), 54: (1, {'@': 123}), 55: (1, {'@': 123}), 43: (1, {'@': 123}), 56: (1, {'@': 123}), 24: (1, {'@': 123})}, 90: {0: (0, 148), 110: (0, 414), 1: (0, 176)}, 91: {58: (1, {'@': 124}), 59: (1, {'@': 124}), 60: (1, {'@': 124}), 61: (1, {'@': 124}), 75: (1, {'@': 124}), 76: (1, {'@': 124}), 62: (1, {'@': 124}), 63: (1, {'@': 124}), 66: (1, {'@': 124}), 78: (1, {'@': 124}), 1: (1, {'@': 124}), 79: (1, {'@': 124}), 70: (1, {'@': 124}), 80: (1, {'@': 124}), 69: (1, {'@': 124}), 81: (1, {'@': 124}), 71: (1, {'@': 124}), 74: (1, {'@': 124})}, 92: {53: (1, {'@': 125}), 48: (1, {'@': 125})}, 93: {85: (0, 162), 86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 87: (0, 146), 7: (0, 154), 88: (0, 152), 10: (0, 161), 11: (0, 140), 9: (0, 142), 0: (0, 144), 89: (0, 153), 90: (0, 155), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 97: (0, 137), 33: (0, 415), 93: (0, 402), 45: (0, 411), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 38: (0, 73), 4: (0, 45), 43: (0, 22), 41: (0, 28), 8: (0, 19), 95: (0, 61), 6: (0, 11), 1: (0, 176), 12: (0, 32), 96: (0, 0), 42: (0, 3), 20: (0, 59), 13: (0, 66), 24: (0, 145), 40: (0, 141), 16: (0, 147)}, 94: {53: (1, {'@': 126}), 48: (1, {'@': 126}), 50: (1, {'@': 126})}, 95: {50: (0, 69), 51: (0, 50)}, 96: {64: (0, 304), 58: (1, {'@': 127}), 59: (1, {'@': 127}), 60: (1, {'@': 127}), 46: (1, {'@': 127}), 61: (1, {'@': 127}), 62: (1, {'@': 127}), 63: (1, {'@': 127}), 66: (1, {'@': 127}), 69: (1, {'@': 127}), 70: (1, {'@': 127}), 71: (1, {'@': 127}), 74: (1, {'@': 127}), 75: (1, {'@': 127}), 52: (1, {'@': 127}), 76: (1, {'@': 127}), 53: (1, {'@': 127}), 78: (1, {'@': 127}), 1: (1, {'@': 127}), 79: (1, {'@': 127}), 80: (1, {'@': 127}), 81: (1, {'@': 127})}, 97: {18: (0, 353), 19: (0, 394), 7: (0, 154), 26: (0, 131), 20: (0, 315), 11: (0, 293), 21: (0, 317), 22: (0, 347), 23: (0, 337), 24: (0, 313), 25: (0, 290), 0: (0, 4), 27: (0, 392), 6: (0, 309), 8: (0, 369), 28: (0, 319), 29: (0, 303), 30: (0, 281), 31: (0, 299), 32: (0, 297), 1: (0, 176), 16: (0, 308), 13: (0, 66), 33: (0, 292), 34: (0, 316), 35: (0, 282), 5: (0, 285), 36: (0, 314), 37: (0, 301)}, 98: {0: (0, 307), 19: (0, 31), 7: (0, 154), 1: (0, 176), 5: (0, 194), 37: (0, 301), 8: (0, 369), 24: (0, 313)}, 99: {53: (0, 83)}, 100: {48: (0, 135), 51: (0, 118)}, 101: {53: (1, {'@': 128}), 7: (1, {'@': 128}), 1: (1, {'@': 128}), 5: (1, {'@': 128}), 13: (1, {'@': 128}), 2: (1, {'@': 128})}, 102: {35: (0, 282), 0: (0, 307), 19: (0, 394), 23: (0, 56), 7: (0, 154), 1: (0, 176), 5: (0, 194), 37: (0, 301), 8: (0, 369), 24: (0, 313)}, 103: {9: (1, {'@': 129}), 33: (1, {'@': 129}), 20: (1, {'@': 129}), 40: (1, {'@': 129}), 6: (1, {'@': 129}), 13: (1, {'@': 129}), 85: (1, {'@': 129}), 96: (1, {'@': 129}), 41: (1, {'@': 129}), 42: (1, {'@': 129}), 44: (1, {'@': 129}), 5: (1, {'@': 129}), 91: (1, {'@': 129}), 2: (1, {'@': 129}), 45: (1, {'@': 129}), 38: (1, {'@': 129}), 39: (1, {'@': 129}), 53: (1, {'@': 129}), 7: (1, {'@': 129}), 1: (1, {'@': 129}), 43: (1, {'@': 129}), 16: (1, {'@': 129}), 87: (1, {'@': 129}), 24: (1, {'@': 129})}, 104: {1: (0, 176), 0: (0, 80)}, 105: {47: (0, 109)}, 106: {64: (0, 304), 58: (1, {'@': 130}), 59: (1, {'@': 130}), 60: (1, {'@': 130}), 46: (1, {'@': 130}), 61: (1, {'@': 130}), 62: (1, {'@': 130}), 63: (1, {'@': 130}), 66: (1, {'@': 130}), 69: (1, {'@': 130}), 70: (1, {'@': 130}), 71: (1, {'@': 130}), 74: (1, {'@': 130}), 75: (1, {'@': 130}), 52: (1, {'@': 130}), 76: (1, {'@': 130}), 53: (1, {'@': 130}), 78: (1, {'@': 130}), 1: (1, {'@': 130}), 79: (1, {'@': 130}), 80: (1, {'@': 130}), 81: (1, {'@': 130})}, 107: {64: (1, {'@': 131}), 41: (1, {'@': 131}), 51: (1, {'@': 131}), 48: (1, {'@': 131}), 53: (1, {'@': 131})}, 108: {41: (0, 344), 64: (1, {'@': 132}), 51: (1, {'@': 132}), 48: (1, {'@': 132}), 53: (1, {'@': 132})}, 109: {85: (0, 162), 86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 87: (0, 146), 7: (0, 154), 88: (0, 152), 10: (0, 161), 11: (0, 140), 9: (0, 142), 0: (0, 144), 89: (0, 153), 90: (0, 155), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 45: (0, 411), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 38: (0, 73), 4: (0, 45), 43: (0, 22), 41: (0, 28), 8: (0, 19), 95: (0, 61), 6: (0, 11), 1: (0, 176), 12: (0, 32), 96: (0, 0), 42: (0, 3), 20: (0, 59), 13: (0, 66), 24: (0, 145), 40: (0, 141), 97: (0, 127), 16: (0, 147)}, 110: {64: (1, {'@': 133}), 41: (1, {'@': 133}), 51: (1, {'@': 133}), 48: (1, {'@': 133}), 53: (1, {'@': 133})}, 111: {58: (1, {'@': 134}), 59: (1, {'@': 134}), 60: (1, {'@': 134}), 61: (1, {'@': 134}), 75: (1, {'@': 134}), 76: (1, {'@': 134}), 62: (1, {'@': 134}), 63: (1, {'@': 134}), 66: (1, {'@': 134}), 78: (1, {'@': 134}), 1: (1, {'@': 134}), 79: (1, {'@': 134}), 70: (1, {'@': 134}), 80: (1, {'@': 134}), 69: (1, {'@': 134}), 81: (1, {'@': 134}), 71: (1, {'@': 134}), 74: (1, {'@': 134})}, 112: {18: (0, 353), 19: (0, 394), 7: (0, 154), 20: (0, 315), 11: (0, 293), 21: (0, 317), 22: (0, 347), 23: (0, 337), 24: (0, 313), 25: (0, 290), 0: (0, 4), 27: (0, 392), 6: (0, 309), 8: (0, 369), 26: (0, 208), 28: (0, 319), 29: (0, 303), 30: (0, 281), 31: (0, 299), 32: (0, 297), 1: (0, 176), 16: (0, 308), 13: (0, 66), 33: (0, 292), 34: (0, 316), 35: (0, 282), 5: (0, 285), 36: (0, 314), 37: (0, 301)}, 113: {41: (0, 344), 51: (1, {'@': 135}), 48: (1, {'@': 135})}, 114: {0: (0, 4), 19: (0, 394), 29: (0, 303), 30: (0, 281), 22: (0, 60), 7: (0, 154), 1: (0, 176), 23: (0, 337), 24: (0, 313), 34: (0, 316), 35: (0, 282), 101: (0, 129), 5: (0, 194), 37: (0, 301), 8: (0, 369)}, 115: {57: (1, {'@': 80}), 58: (1, {'@': 80}), 33: (1, {'@': 80}), 40: (1, {'@': 80}), 59: (1, {'@': 80}), 60: (1, {'@': 80}), 46: (1, {'@': 80}), 61: (1, {'@': 80}), 62: (1, {'@': 80}), 63: (1, {'@': 80}), 64: (1, {'@': 80}), 42: (1, {'@': 80}), 65: (1, {'@': 80}), 66: (1, {'@': 80}), 67: (1, {'@': 80}), 68: (1, {'@': 80}), 69: (1, {'@': 80}), 70: (1, {'@': 80}), 71: (1, {'@': 80}), 72: (1, {'@': 80}), 73: (1, {'@': 80}), 38: (1, {'@': 80}), 39: (1, {'@': 80}), 74: (1, {'@': 80}), 75: (1, {'@': 80}), 52: (1, {'@': 80}), 76: (1, {'@': 80}), 53: (1, {'@': 80}), 77: (1, {'@': 80}), 78: (1, {'@': 80}), 1: (1, {'@': 80}), 43: (1, {'@': 80}), 79: (1, {'@': 80}), 80: (1, {'@': 80}), 81: (1, {'@': 80}), 24: (1, {'@': 80}), 82: (1, {'@': 80}), 48: (1, {'@': 80}), 50: (1, {'@': 80}), 51: (1, {'@': 80})}, 116: {85: (0, 162), 86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 87: (0, 146), 7: (0, 154), 88: (0, 152), 10: (0, 161), 11: (0, 140), 9: (0, 142), 0: (0, 144), 89: (0, 153), 90: (0, 155), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 45: (0, 411), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 38: (0, 73), 97: (0, 120), 4: (0, 45), 43: (0, 22), 41: (0, 28), 8: (0, 19), 95: (0, 61), 6: (0, 11), 1: (0, 176), 12: (0, 32), 96: (0, 0), 42: (0, 3), 20: (0, 59), 13: (0, 66), 24: (0, 145), 40: (0, 141), 16: (0, 147)}, 117: {48: (0, 174), 74: (0, 229)}, 118: {64: (1, {'@': 136}), 41: (1, {'@': 136}), 51: (1, {'@': 136}), 48: (1, {'@': 136}), 53: (1, {'@': 136})}, 119: {53: (0, 115)}, 120: {47: (1, {'@': 137}), 53: (1, {'@': 137}), 54: (1, {'@': 137}), 48: (1, {'@': 137}), 55: (1, {'@': 137}), 49: (1, {'@': 137}), 46: (1, {'@': 137}), 56: (1, {'@': 137}), 50: (1, {'@': 137}), 52: (1, {'@': 137}), 51: (1, {'@': 137})}, 121: {74: (1, {'@': 138}), 48: (1, {'@': 138})}, 122: {57: (1, {'@': 139}), 58: (1, {'@': 139}), 33: (1, {'@': 139}), 40: (1, {'@': 139}), 59: (1, {'@': 139}), 60: (1, {'@': 139}), 46: (1, {'@': 139}), 61: (1, {'@': 139}), 62: (1, {'@': 139}), 63: (1, {'@': 139}), 64: (1, {'@': 139}), 42: (1, {'@': 139}), 66: (1, {'@': 139}), 67: (1, {'@': 139}), 69: (1, {'@': 139}), 70: (1, {'@': 139}), 71: (1, {'@': 139}), 72: (1, {'@': 139}), 73: (1, {'@': 139}), 38: (1, {'@': 139}), 39: (1, {'@': 139}), 74: (1, {'@': 139}), 75: (1, {'@': 139}), 52: (1, {'@': 139}), 76: (1, {'@': 139}), 53: (1, {'@': 139}), 78: (1, {'@': 139}), 1: (1, {'@': 139}), 43: (1, {'@': 139}), 79: (1, {'@': 139}), 80: (1, {'@': 139}), 81: (1, {'@': 139}), 82: (1, {'@': 139}), 48: (1, {'@': 139})}, 123: {38: (1, {'@': 140}), 39: (1, {'@': 140}), 9: (1, {'@': 140}), 33: (1, {'@': 140}), 40: (1, {'@': 140}), 6: (1, {'@': 140}), 13: (1, {'@': 140}), 41: (1, {'@': 140}), 42: (1, {'@': 140}), 7: (1, {'@': 140}), 1: (1, {'@': 140}), 43: (1, {'@': 140}), 44: (1, {'@': 140}), 16: (1, {'@': 140}), 5: (1, {'@': 140}), 2: (1, {'@': 140}), 45: (1, {'@': 140}), 24: (1, {'@': 140}), 46: (1, {'@': 140}), 47: (1, {'@': 140}), 48: (1, {'@': 140}), 49: (1, {'@': 140}), 50: (1, {'@': 140}), 51: (1, {'@': 140}), 52: (1, {'@': 140}), 53: (1, {'@': 140}), 54: (1, {'@': 140}), 55: (1, {'@': 140}), 56: (1, {'@': 140})}, 124: {64: (0, 304), 58: (1, {'@': 141}), 59: (1, {'@': 141}), 60: (1, {'@': 141}), 46: (1, {'@': 141}), 61: (1, {'@': 141}), 62: (1, {'@': 141}), 63: (1, {'@': 141}), 66: (1, {'@': 141}), 69: (1, {'@': 141}), 70: (1, {'@': 141}), 71: (1, {'@': 141}), 74: (1, {'@': 141}), 75: (1, {'@': 141}), 52: (1, {'@': 141}), 76: (1, {'@': 141}), 53: (1, {'@': 141}), 78: (1, {'@': 141}), 1: (1, {'@': 141}), 79: (1, {'@': 141}), 80: (1, {'@': 141}), 81: (1, {'@': 141})}, 125: {111: (0, 74), 65: (0, 1), 38: (1, {'@': 142}), 39: (1, {'@': 142}), 33: (1, {'@': 142}), 40: (1, {'@': 142}), 46: (1, {'@': 142}), 52: (1, {'@': 142}), 51: (1, {'@': 142}), 47: (1, {'@': 142}), 53: (1, {'@': 142}), 41: (1, {'@': 142}), 42: (1, {'@': 142}), 54: (1, {'@': 142}), 48: (1, {'@': 142}), 55: (1, {'@': 142}), 49: (1, {'@': 142}), 68: (1, {'@': 142}), 43: (1, {'@': 142}), 44: (1, {'@': 142}), 56: (1, {'@': 142}), 50: (1, {'@': 142}), 45: (1, {'@': 142}), 24: (1, {'@': 142}), 84: (1, {'@': 142})}, 126: {55: (1, {'@': 143}), 56: (1, {'@': 143})}, 127: {47: (1, {'@': 144}), 53: (1, {'@': 144}), 54: (1, {'@': 144}), 48: (1, {'@': 144}), 55: (1, {'@': 144}), 49: (1, {'@': 144}), 46: (1, {'@': 144}), 56: (1, {'@': 144}), 50: (1, {'@': 144}), 52: (1, {'@': 144}), 51: (1, {'@': 144})}, 128: {53: (1, {'@': 145}), 77: (1, {'@': 145}), 48: (1, {'@': 145})}, 129: {53: (1, {'@': 146}), 48: (1, {'@': 146})}, 130: {46: (0, 93)}, 131: {64: (0, 304), 58: (1, {'@': 147}), 59: (1, {'@': 147}), 60: (1, {'@': 147}), 61: (1, {'@': 147}), 75: (1, {'@': 147}), 76: (1, {'@': 147}), 62: (1, {'@': 147}), 63: (1, {'@': 147}), 66: (1, {'@': 147}), 78: (1, {'@': 147}), 1: (1, {'@': 147}), 79: (1, {'@': 147}), 70: (1, {'@': 147}), 80: (1, {'@': 147}), 69: (1, {'@': 147}), 81: (1, {'@': 147}), 71: (1, {'@': 147}), 74: (1, {'@': 147})}, 132: {112: (0, 121), 11: (0, 416), 13: (0, 66)}, 133: {5: (0, 44), 57: (1, {'@': 148}), 58: (1, {'@': 148}), 33: (1, {'@': 148}), 40: (1, {'@': 148}), 59: (1, {'@': 148}), 60: (1, {'@': 148}), 46: (1, {'@': 148}), 61: (1, {'@': 148}), 62: (1, {'@': 148}), 63: (1, {'@': 148}), 64: (1, {'@': 148}), 42: (1, {'@': 148}), 65: (1, {'@': 148}), 66: (1, {'@': 148}), 67: (1, {'@': 148}), 68: (1, {'@': 148}), 69: (1, {'@': 148}), 70: (1, {'@': 148}), 71: (1, {'@': 148}), 72: (1, {'@': 148}), 73: (1, {'@': 148}), 38: (1, {'@': 148}), 39: (1, {'@': 148}), 74: (1, {'@': 148}), 75: (1, {'@': 148}), 52: (1, {'@': 148}), 76: (1, {'@': 148}), 53: (1, {'@': 148}), 77: (1, {'@': 148}), 78: (1, {'@': 148}), 1: (1, {'@': 148}), 43: (1, {'@': 148}), 79: (1, {'@': 148}), 80: (1, {'@': 148}), 81: (1, {'@': 148}), 24: (1, {'@': 148}), 82: (1, {'@': 148}), 48: (1, {'@': 148}), 50: (1, {'@': 148}), 51: (1, {'@': 148})}, 134: {51: (0, 364)}, 135: {109: (0, 408), 2: (0, 262), 5: (0, 244), 7: (0, 154), 1: (0, 176), 11: (0, 10), 0: (0, 35), 13: (0, 66), 8: (0, 65)}, 136: {9: (1, {'@': 149}), 33: (1, {'@': 149}), 83: (1, {'@': 149}), 40: (1, {'@': 149}), 46: (1, {'@': 149}), 6: (1, {'@': 149}), 13: (1, {'@': 149}), 84: (1, {'@': 149}), 47: (1, {'@': 149}), 41: (1, {'@': 149}), 42: (1, {'@': 149}), 65: (1, {'@': 149}), 48: (1, {'@': 149}), 49: (1, {'@': 149}), 68: (1, {'@': 149}), 44: (1, {'@': 149}), 5: (1, {'@': 149}), 50: (1, {'@': 149}), 2: (1, {'@': 149}), 45: (1, {'@': 149}), 51: (1, {'@': 149}), 73: (1, {'@': 149}), 38: (1, {'@': 149}), 39: (1, {'@': 149}), 52: (1, {'@': 149}), 53: (1, {'@': 149}), 54: (1, {'@': 149}), 7: (1, {'@': 149}), 55: (1, {'@': 149}), 1: (1, {'@': 149}), 43: (1, {'@': 149}), 16: (1, {'@': 149}), 56: (1, {'@': 149}), 24: (1, {'@': 149}), 64: (1, {'@': 149})}, 137: {47: (1, {'@': 150}), 53: (1, {'@': 150}), 54: (1, {'@': 150}), 48: (1, {'@': 150}), 55: (1, {'@': 150}), 49: (1, {'@': 150}), 46: (1, {'@': 150}), 56: (1, {'@': 150}), 50: (1, {'@': 150}), 52: (1, {'@': 150}), 51: (1, {'@': 150})}, 138: {53: (1, {'@': 151})}, 139: {97: (0, 181), 86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 7: (0, 154), 11: (0, 140), 0: (0, 144), 89: (0, 153), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 4: (0, 45), 8: (0, 19), 95: (0, 61), 12: (0, 32), 96: (0, 0), 42: (0, 3), 13: (0, 66), 113: (0, 368), 88: (0, 152), 85: (0, 162), 87: (0, 146), 10: (0, 161), 9: (0, 142), 90: (0, 155), 45: (0, 411), 38: (0, 73), 43: (0, 22), 41: (0, 28), 6: (0, 11), 1: (0, 176), 20: (0, 59), 24: (0, 145), 40: (0, 141), 16: (0, 147)}, 140: {9: (1, {'@': 152}), 33: (1, {'@': 152}), 83: (1, {'@': 152}), 40: (1, {'@': 152}), 46: (1, {'@': 152}), 6: (1, {'@': 152}), 13: (1, {'@': 152}), 84: (1, {'@': 152}), 47: (1, {'@': 152}), 41: (1, {'@': 152}), 42: (1, {'@': 152}), 65: (1, {'@': 152}), 48: (1, {'@': 152}), 49: (1, {'@': 152}), 68: (1, {'@': 152}), 44: (1, {'@': 152}), 5: (1, {'@': 152}), 50: (1, {'@': 152}), 2: (1, {'@': 152}), 45: (1, {'@': 152}), 51: (1, {'@': 152}), 73: (1, {'@': 152}), 38: (1, {'@': 152}), 39: (1, {'@': 152}), 52: (1, {'@': 152}), 53: (1, {'@': 152}), 54: (1, {'@': 152}), 7: (1, {'@': 152}), 55: (1, {'@': 152}), 1: (1, {'@': 152}), 43: (1, {'@': 152}), 16: (1, {'@': 152}), 56: (1, {'@': 152}), 24: (1, {'@': 152}), 64: (1, {'@': 152})}, 141: {38: (1, {'@': 153}), 39: (1, {'@': 153}), 9: (1, {'@': 153}), 33: (1, {'@': 153}), 40: (1, {'@': 153}), 6: (1, {'@': 153}), 13: (1, {'@': 153}), 41: (1, {'@': 153}), 42: (1, {'@': 153}), 7: (1, {'@': 153}), 1: (1, {'@': 153}), 43: (1, {'@': 153}), 44: (1, {'@': 153}), 16: (1, {'@': 153}), 5: (1, {'@': 153}), 2: (1, {'@': 153}), 45: (1, {'@': 153}), 24: (1, {'@': 153}), 46: (1, {'@': 153}), 47: (1, {'@': 153}), 48: (1, {'@': 153}), 49: (1, {'@': 153}), 50: (1, {'@': 153}), 51: (1, {'@': 153}), 52: (1, {'@': 153}), 53: (1, {'@': 153}), 54: (1, {'@': 153}), 55: (1, {'@': 153}), 56: (1, {'@': 153})}, 142: {18: (0, 353), 19: (0, 394), 7: (0, 154), 58: (0, 169), 78: (0, 193), 0: (0, 371), 23: (0, 337), 71: (0, 212), 27: (0, 392), 75: (0, 237), 59: (0, 223), 22: (0, 347), 8: (0, 369), 76: (0, 230), 29: (0, 303), 30: (0, 281), 26: (0, 305), 81: (0, 184), 13: (0, 66), 5: (0, 285), 66: (0, 217), 107: (0, 234), 62: (0, 253), 20: (0, 315), 11: (0, 293), 21: (0, 317), 24: (0, 313), 25: (0, 290), 70: (0, 190), 79: (0, 218), 6: (0, 309), 69: (0, 241), 61: (0, 171), 108: (0, 269), 28: (0, 319), 60: (0, 175), 31: (0, 299), 32: (0, 297), 1: (0, 176), 16: (0, 308), 33: (0, 292), 34: (0, 316), 35: (0, 282), 36: (0, 314), 80: (0, 200), 104: (0, 296), 37: (0, 301)}, 143: {77: (0, 238)}, 144: {9: (1, {'@': 154}), 33: (1, {'@': 154}), 83: (1, {'@': 154}), 40: (1, {'@': 154}), 46: (1, {'@': 154}), 6: (1, {'@': 154}), 13: (1, {'@': 154}), 84: (1, {'@': 154}), 47: (1, {'@': 154}), 41: (1, {'@': 154}), 42: (1, {'@': 154}), 65: (1, {'@': 154}), 48: (1, {'@': 154}), 49: (1, {'@': 154}), 68: (1, {'@': 154}), 44: (1, {'@': 154}), 5: (1, {'@': 154}), 50: (1, {'@': 154}), 2: (1, {'@': 154}), 45: (1, {'@': 154}), 51: (1, {'@': 154}), 73: (1, {'@': 154}), 38: (1, {'@': 154}), 39: (1, {'@': 154}), 52: (1, {'@': 154}), 53: (1, {'@': 154}), 54: (1, {'@': 154}), 7: (1, {'@': 154}), 55: (1, {'@': 154}), 1: (1, {'@': 154}), 43: (1, {'@': 154}), 16: (1, {'@': 154}), 56: (1, {'@': 154}), 24: (1, {'@': 154}), 64: (1, {'@': 154})}, 145: {86: (0, 168), 3: (0, 166), 5: (0, 139), 7: (0, 154), 9: (0, 142), 10: (0, 161), 11: (0, 140), 0: (0, 144), 2: (0, 156), 14: (0, 399), 17: (0, 125), 15: (0, 136), 89: (0, 33), 4: (0, 45), 6: (0, 11), 8: (0, 19), 95: (0, 61), 1: (0, 176), 12: (0, 32), 13: (0, 66), 16: (0, 147)}, 146: {85: (0, 162), 86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 87: (0, 146), 7: (0, 154), 88: (0, 152), 10: (0, 161), 11: (0, 140), 9: (0, 142), 0: (0, 144), 89: (0, 153), 90: (0, 155), 91: (0, 159), 97: (0, 358), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 45: (0, 411), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 38: (0, 73), 4: (0, 45), 43: (0, 22), 41: (0, 28), 8: (0, 19), 95: (0, 61), 6: (0, 11), 1: (0, 176), 12: (0, 32), 96: (0, 0), 42: (0, 3), 20: (0, 59), 13: (0, 66), 24: (0, 145), 40: (0, 141), 16: (0, 147)}, 147: {9: (1, {'@': 155}), 33: (1, {'@': 155}), 83: (1, {'@': 155}), 40: (1, {'@': 155}), 46: (1, {'@': 155}), 6: (1, {'@': 155}), 13: (1, {'@': 155}), 84: (1, {'@': 155}), 47: (1, {'@': 155}), 41: (1, {'@': 155}), 42: (1, {'@': 155}), 65: (1, {'@': 155}), 48: (1, {'@': 155}), 49: (1, {'@': 155}), 68: (1, {'@': 155}), 44: (1, {'@': 155}), 5: (1, {'@': 155}), 50: (1, {'@': 155}), 2: (1, {'@': 155}), 45: (1, {'@': 155}), 51: (1, {'@': 155}), 73: (1, {'@': 155}), 38: (1, {'@': 155}), 39: (1, {'@': 155}), 52: (1, {'@': 155}), 53: (1, {'@': 155}), 54: (1, {'@': 155}), 7: (1, {'@': 155}), 55: (1, {'@': 155}), 1: (1, {'@': 155}), 43: (1, {'@': 155}), 16: (1, {'@': 155}), 56: (1, {'@': 155}), 24: (1, {'@': 155}), 64: (1, {'@': 155})}, 148: {114: (0, 249), 48: (0, 191), 53: (1, {'@': 156}), 77: (1, {'@': 156})}, 149: {40: (0, 141), 43: (0, 22), 93: (0, 29), 44: (0, 164), 41: (0, 28), 88: (0, 152), 33: (0, 415), 84: (0, 38), 45: (0, 411), 39: (0, 123), 42: (0, 3), 38: (0, 73), 90: (0, 155)}, 150: {0: (0, 214), 1: (0, 176)}, 151: {58: (1, {'@': 157}), 66: (1, {'@': 157}), 78: (1, {'@': 157}), 59: (1, {'@': 157}), 60: (1, {'@': 157}), 62: (1, {'@': 157}), 1: (1, {'@': 157}), 61: (1, {'@': 157}), 75: (1, {'@': 157}), 79: (1, {'@': 157}), 70: (1, {'@': 157}), 80: (1, {'@': 157}), 69: (1, {'@': 157}), 81: (1, {'@': 157}), 63: (1, {'@': 157}), 76: (1, {'@': 157}), 71: (1, {'@': 157})}, 152: {40: (0, 141), 43: (0, 22), 44: (0, 164), 41: (0, 28), 33: (0, 415), 45: (0, 411), 90: (0, 381), 39: (0, 123), 42: (0, 3), 38: (0, 73), 9: (1, {'@': 158}), 7: (1, {'@': 158}), 1: (1, {'@': 158}), 6: (1, {'@': 158}), 16: (1, {'@': 158}), 5: (1, {'@': 158}), 13: (1, {'@': 158}), 2: (1, {'@': 158}), 24: (1, {'@': 158}), 46: (1, {'@': 158}), 52: (1, {'@': 158}), 47: (1, {'@': 158}), 53: (1, {'@': 158}), 54: (1, {'@': 158}), 48: (1, {'@': 158}), 55: (1, {'@': 158}), 49: (1, {'@': 158}), 56: (1, {'@': 158}), 50: (1, {'@': 158}), 51: (1, {'@': 158})}, 153: {38: (1, {'@': 159}), 39: (1, {'@': 159}), 33: (1, {'@': 159}), 40: (1, {'@': 159}), 46: (1, {'@': 159}), 52: (1, {'@': 159}), 51: (1, {'@': 159}), 47: (1, {'@': 159}), 53: (1, {'@': 159}), 41: (1, {'@': 159}), 42: (1, {'@': 159}), 54: (1, {'@': 159}), 48: (1, {'@': 159}), 55: (1, {'@': 159}), 49: (1, {'@': 159}), 43: (1, {'@': 159}), 44: (1, {'@': 159}), 56: (1, {'@': 159}), 50: (1, {'@': 159}), 45: (1, {'@': 159}), 84: (1, {'@': 159})}, 154: {9: (1, {'@': 160}), 33: (1, {'@': 160}), 83: (1, {'@': 160}), 40: (1, {'@': 160}), 46: (1, {'@': 160}), 6: (1, {'@': 160}), 13: (1, {'@': 160}), 84: (1, {'@': 160}), 47: (1, {'@': 160}), 41: (1, {'@': 160}), 42: (1, {'@': 160}), 65: (1, {'@': 160}), 48: (1, {'@': 160}), 49: (1, {'@': 160}), 68: (1, {'@': 160}), 44: (1, {'@': 160}), 5: (1, {'@': 160}), 50: (1, {'@': 160}), 2: (1, {'@': 160}), 45: (1, {'@': 160}), 51: (1, {'@': 160}), 73: (1, {'@': 160}), 38: (1, {'@': 160}), 39: (1, {'@': 160}), 52: (1, {'@': 160}), 53: (1, {'@': 160}), 54: (1, {'@': 160}), 7: (1, {'@': 160}), 55: (1, {'@': 160}), 1: (1, {'@': 160}), 43: (1, {'@': 160}), 16: (1, {'@': 160}), 56: (1, {'@': 160}), 24: (1, {'@': 160}), 57: (1, {'@': 160}), 58: (1, {'@': 160}), 59: (1, {'@': 160}), 60: (1, {'@': 160}), 61: (1, {'@': 160}), 62: (1, {'@': 160}), 63: (1, {'@': 160}), 64: (1, {'@': 160}), 66: (1, {'@': 160}), 67: (1, {'@': 160}), 69: (1, {'@': 160}), 70: (1, {'@': 160}), 71: (1, {'@': 160}), 72: (1, {'@': 160}), 74: (1, {'@': 160}), 75: (1, {'@': 160}), 76: (1, {'@': 160}), 77: (1, {'@': 160}), 78: (1, {'@': 160}), 79: (1, {'@': 160}), 80: (1, {'@': 160}), 81: (1, {'@': 160}), 82: (1, {'@': 160})}, 155: {38: (1, {'@': 161}), 41: (1, {'@': 161}), 39: (1, {'@': 161}), 42: (1, {'@': 161}), 9: (1, {'@': 161}), 7: (1, {'@': 161}), 33: (1, {'@': 161}), 40: (1, {'@': 161}), 1: (1, {'@': 161}), 43: (1, {'@': 161}), 44: (1, {'@': 161}), 6: (1, {'@': 161}), 16: (1, {'@': 161}), 5: (1, {'@': 161}), 13: (1, {'@': 161}), 2: (1, {'@': 161}), 45: (1, {'@': 161}), 24: (1, {'@': 161}), 46: (1, {'@': 161}), 52: (1, {'@': 161}), 51: (1, {'@': 161}), 47: (1, {'@': 161}), 53: (1, {'@': 161}), 54: (1, {'@': 161}), 48: (1, {'@': 161}), 55: (1, {'@': 161}), 49: (1, {'@': 161}), 56: (1, {'@': 161}), 50: (1, {'@': 161})}, 156: {86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 7: (0, 154), 11: (0, 140), 0: (0, 144), 89: (0, 153), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 4: (0, 45), 8: (0, 19), 95: (0, 61), 12: (0, 32), 96: (0, 0), 42: (0, 3), 13: (0, 66), 88: (0, 152), 85: (0, 162), 87: (0, 146), 10: (0, 161), 9: (0, 142), 51: (0, 284), 90: (0, 155), 97: (0, 287), 45: (0, 411), 38: (0, 73), 43: (0, 22), 41: (0, 28), 6: (0, 11), 1: (0, 176), 20: (0, 59), 24: (0, 145), 40: (0, 141), 16: (0, 147)}, 157: {0: (0, 4), 19: (0, 394), 30: (0, 281), 29: (0, 303), 22: (0, 60), 7: (0, 154), 1: (0, 176), 23: (0, 337), 101: (0, 277), 24: (0, 313), 34: (0, 316), 102: (0, 254), 35: (0, 282), 5: (0, 194), 37: (0, 301), 8: (0, 369), 53: (1, {'@': 95})}, 158: {40: (0, 141), 43: (0, 22), 93: (0, 322), 44: (0, 164), 41: (0, 28), 88: (0, 152), 33: (0, 415), 45: (0, 411), 42: (0, 3), 39: (0, 123), 38: (0, 73), 90: (0, 155), 47: (1, {'@': 162}), 53: (1, {'@': 162}), 54: (1, {'@': 162}), 48: (1, {'@': 162}), 55: (1, {'@': 162}), 49: (1, {'@': 162}), 46: (1, {'@': 162}), 56: (1, {'@': 162}), 50: (1, {'@': 162}), 52: (1, {'@': 162}), 51: (1, {'@': 162})}, 159: {86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 7: (0, 154), 11: (0, 140), 0: (0, 144), 89: (0, 153), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 4: (0, 45), 8: (0, 19), 95: (0, 61), 97: (0, 326), 12: (0, 32), 96: (0, 0), 42: (0, 3), 13: (0, 66), 88: (0, 152), 85: (0, 162), 87: (0, 146), 10: (0, 161), 9: (0, 142), 90: (0, 155), 45: (0, 411), 38: (0, 73), 43: (0, 22), 41: (0, 28), 6: (0, 11), 1: (0, 176), 20: (0, 59), 24: (0, 145), 40: (0, 141), 16: (0, 147)}, 160: {50: (0, 232)}, 161: {73: (0, 338), 115: (0, 330), 38: (1, {'@': 163}), 39: (1, {'@': 163}), 33: (1, {'@': 163}), 40: (1, {'@': 163}), 46: (1, {'@': 163}), 52: (1, {'@': 163}), 51: (1, {'@': 163}), 84: (1, {'@': 163}), 47: (1, {'@': 163}), 53: (1, {'@': 163}), 41: (1, {'@': 163}), 42: (1, {'@': 163}), 65: (1, {'@': 163}), 54: (1, {'@': 163}), 48: (1, {'@': 163}), 55: (1, {'@': 163}), 49: (1, {'@': 163}), 68: (1, {'@': 163}), 44: (1, {'@': 163}), 43: (1, {'@': 163}), 56: (1, {'@': 163}), 50: (1, {'@': 163}), 45: (1, {'@': 163}), 24: (1, {'@': 163})}, 162: {2: (0, 156), 3: (0, 213), 4: (0, 45), 5: (0, 139), 6: (0, 11), 7: (0, 154), 8: (0, 19), 1: (0, 176), 9: (0, 142), 11: (0, 140), 12: (0, 32), 0: (0, 144), 13: (0, 66), 14: (0, 399), 15: (0, 136), 16: (0, 147)}, 163: {0: (0, 219), 1: (0, 176)}, 164: {38: (1, {'@': 164}), 39: (1, {'@': 164}), 9: (1, {'@': 164}), 33: (1, {'@': 164}), 40: (1, {'@': 164}), 6: (1, {'@': 164}), 13: (1, {'@': 164}), 41: (1, {'@': 164}), 42: (1, {'@': 164}), 7: (1, {'@': 164}), 1: (1, {'@': 164}), 43: (1, {'@': 164}), 44: (1, {'@': 164}), 16: (1, {'@': 164}), 5: (1, {'@': 164}), 2: (1, {'@': 164}), 45: (1, {'@': 164}), 24: (1, {'@': 164}), 46: (1, {'@': 164}), 47: (1, {'@': 164}), 48: (1, {'@': 164}), 49: (1, {'@': 164}), 50: (1, {'@': 164}), 51: (1, {'@': 164}), 52: (1, {'@': 164}), 53: (1, {'@': 164}), 54: (1, {'@': 164}), 55: (1, {'@': 164}), 56: (1, {'@': 164})}, 165: {50: (0, 172)}, 166: {2: (0, 156), 4: (0, 45), 5: (0, 139), 6: (0, 11), 7: (0, 154), 8: (0, 19), 1: (0, 176), 9: (0, 142), 11: (0, 140), 12: (0, 32), 0: (0, 144), 13: (0, 66), 116: (0, 231), 15: (0, 259), 14: (0, 399), 16: (0, 147), 83: (0, 242), 38: (1, {'@': 165}), 45: (1, {'@': 165}), 39: (1, {'@': 165}), 33: (1, {'@': 165}), 40: (1, {'@': 165}), 46: (1, {'@': 165}), 52: (1, {'@': 165}), 84: (1, {'@': 165}), 47: (1, {'@': 165}), 53: (1, {'@': 165}), 41: (1, {'@': 165}), 42: (1, {'@': 165}), 65: (1, {'@': 165}), 54: (1, {'@': 165}), 48: (1, {'@': 165}), 55: (1, {'@': 165}), 49: (1, {'@': 165}), 68: (1, {'@': 165}), 44: (1, {'@': 165}), 43: (1, {'@': 165}), 56: (1, {'@': 165}), 50: (1, {'@': 165}), 51: (1, {'@': 165}), 24: (1, {'@': 165}), 73: (1, {'@': 165})}, 167: {11: (0, 255), 13: (0, 66)}, 168: {68: (0, 224), 117: (0, 170), 38: (1, {'@': 166}), 45: (1, {'@': 166}), 39: (1, {'@': 166}), 33: (1, {'@': 166}), 40: (1, {'@': 166}), 46: (1, {'@': 166}), 52: (1, {'@': 166}), 47: (1, {'@': 166}), 53: (1, {'@': 166}), 41: (1, {'@': 166}), 42: (1, {'@': 166}), 54: (1, {'@': 166}), 48: (1, {'@': 166}), 55: (1, {'@': 166}), 49: (1, {'@': 166}), 43: (1, {'@': 166}), 44: (1, {'@': 166}), 56: (1, {'@': 166}), 50: (1, {'@': 166}), 51: (1, {'@': 166}), 24: (1, {'@': 166}), 84: (1, {'@': 166})}, 169: {5: (0, 275)}, 170: {68: (0, 350), 38: (1, {'@': 167}), 45: (1, {'@': 167}), 39: (1, {'@': 167}), 33: (1, {'@': 167}), 40: (1, {'@': 167}), 46: (1, {'@': 167}), 52: (1, {'@': 167}), 47: (1, {'@': 167}), 53: (1, {'@': 167}), 41: (1, {'@': 167}), 42: (1, {'@': 167}), 54: (1, {'@': 167}), 48: (1, {'@': 167}), 55: (1, {'@': 167}), 49: (1, {'@': 167}), 43: (1, {'@': 167}), 44: (1, {'@': 167}), 56: (1, {'@': 167}), 50: (1, {'@': 167}), 51: (1, {'@': 167}), 24: (1, {'@': 167}), 84: (1, {'@': 167})}, 171: {5: (0, 248)}, 172: {58: (1, {'@': 168}), 59: (1, {'@': 168}), 60: (1, {'@': 168}), 61: (1, {'@': 168}), 75: (1, {'@': 168}), 76: (1, {'@': 168}), 62: (1, {'@': 168}), 63: (1, {'@': 168}), 66: (1, {'@': 168}), 78: (1, {'@': 168}), 1: (1, {'@': 168}), 79: (1, {'@': 168}), 70: (1, {'@': 168}), 80: (1, {'@': 168}), 69: (1, {'@': 168}), 81: (1, {'@': 168}), 71: (1, {'@': 168}), 74: (1, {'@': 168})}, 173: {0: (0, 4), 19: (0, 394), 30: (0, 281), 29: (0, 303), 22: (0, 60), 7: (0, 154), 1: (0, 176), 102: (0, 99), 23: (0, 337), 101: (0, 277), 24: (0, 313), 34: (0, 316), 35: (0, 282), 5: (0, 194), 37: (0, 301), 8: (0, 369), 53: (1, {'@': 95})}, 174: {11: (0, 416), 13: (0, 66), 112: (0, 418)}, 175: {5: (0, 258)}, 176: {98: (1, {'@': 169}), 84: (1, {'@': 169}), 9: (1, {'@': 169}), 33: (1, {'@': 169}), 83: (1, {'@': 169}), 40: (1, {'@': 169}), 46: (1, {'@': 169}), 6: (1, {'@': 169}), 13: (1, {'@': 169}), 47: (1, {'@': 169}), 41: (1, {'@': 169}), 42: (1, {'@': 169}), 65: (1, {'@': 169}), 48: (1, {'@': 169}), 49: (1, {'@': 169}), 68: (1, {'@': 169}), 44: (1, {'@': 169}), 5: (1, {'@': 169}), 50: (1, {'@': 169}), 2: (1, {'@': 169}), 45: (1, {'@': 169}), 51: (1, {'@': 169}), 73: (1, {'@': 169}), 38: (1, {'@': 169}), 39: (1, {'@': 169}), 52: (1, {'@': 169}), 53: (1, {'@': 169}), 54: (1, {'@': 169}), 7: (1, {'@': 169}), 55: (1, {'@': 169}), 1: (1, {'@': 169}), 43: (1, {'@': 169}), 16: (1, {'@': 169}), 56: (1, {'@': 169}), 24: (1, {'@': 169}), 57: (1, {'@': 169}), 58: (1, {'@': 169}), 59: (1, {'@': 169}), 60: (1, {'@': 169}), 61: (1, {'@': 169}), 62: (1, {'@': 169}), 63: (1, {'@': 169}), 64: (1, {'@': 169}), 66: (1, {'@': 169}), 67: (1, {'@': 169}), 69: (1, {'@': 169}), 70: (1, {'@': 169}), 71: (1, {'@': 169}), 72: (1, {'@': 169}), 74: (1, {'@': 169}), 75: (1, {'@': 169}), 76: (1, {'@': 169}), 77: (1, {'@': 169}), 78: (1, {'@': 169}), 79: (1, {'@': 169}), 80: (1, {'@': 169}), 81: (1, {'@': 169}), 82: (1, {'@': 169})}, 177: {48: (0, 340)}, 178: {48: (0, 114), 53: (1, {'@': 170})}, 179: {74: (0, 397), 112: (0, 417), 11: (0, 416), 13: (0, 66)}, 180: {55: (1, {'@': 171}), 56: (1, {'@': 171})}, 181: {53: (0, 30), 48: (0, 70)}, 182: {0: (0, 4), 19: (0, 394), 29: (0, 303), 30: (0, 281), 22: (0, 60), 7: (0, 154), 1: (0, 176), 23: (0, 337), 24: (0, 313), 34: (0, 316), 35: (0, 282), 101: (0, 92), 5: (0, 194), 37: (0, 301), 8: (0, 369)}, 183: {24: (1, {'@': 172}), 5: (1, {'@': 172}), 7: (1, {'@': 172}), 1: (1, {'@': 172})}, 184: {86: (0, 168), 3: (0, 166), 5: (0, 139), 7: (0, 154), 9: (0, 142), 10: (0, 161), 11: (0, 140), 0: (0, 144), 89: (0, 153), 2: (0, 156), 92: (0, 149), 14: (0, 399), 17: (0, 125), 15: (0, 136), 94: (0, 24), 4: (0, 45), 6: (0, 11), 8: (0, 19), 95: (0, 61), 1: (0, 176), 12: (0, 32), 13: (0, 66), 24: (0, 145), 16: (0, 147)}, 185: {11: (0, 271), 13: (0, 66)}, 186: {58: (1, {'@': 173}), 59: (1, {'@': 173}), 60: (1, {'@': 173}), 61: (1, {'@': 173}), 75: (1, {'@': 173}), 76: (1, {'@': 173}), 62: (1, {'@': 173}), 63: (1, {'@': 173}), 66: (1, {'@': 173}), 78: (1, {'@': 173}), 1: (1, {'@': 173}), 79: (1, {'@': 173}), 70: (1, {'@': 173}), 80: (1, {'@': 173}), 69: (1, {'@': 173}), 81: (1, {'@': 173}), 71: (1, {'@': 173}), 74: (1, {'@': 173})}, 187: {0: (0, 265), 118: (0, 324), 1: (0, 176)}, 188: {24: (1, {'@': 174}), 5: (1, {'@': 174}), 7: (1, {'@': 174}), 1: (1, {'@': 174})}, 189: {48: (0, 419)}, 190: {85: (0, 162), 86: (0, 168), 3: (0, 166), 44: (0, 164), 97: (0, 165), 5: (0, 139), 87: (0, 146), 7: (0, 154), 88: (0, 152), 10: (0, 161), 11: (0, 140), 9: (0, 142), 0: (0, 144), 89: (0, 153), 90: (0, 155), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 45: (0, 411), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 38: (0, 73), 4: (0, 45), 43: (0, 22), 41: (0, 28), 8: (0, 19), 95: (0, 61), 6: (0, 11), 1: (0, 176), 12: (0, 32), 96: (0, 0), 42: (0, 3), 20: (0, 59), 13: (0, 66), 24: (0, 145), 40: (0, 141), 16: (0, 147)}, 191: {0: (0, 250), 1: (0, 176)}, 192: {60: (0, 175), 61: (0, 171), 104: (0, 151), 1: (0, 176), 58: (0, 169), 78: (0, 193), 81: (0, 184), 0: (0, 196), 70: (0, 190), 71: (0, 212), 80: (0, 200), 75: (0, 237), 79: (0, 218), 66: (0, 217), 59: (0, 223), 69: (0, 241), 107: (0, 234), 76: (0, 230), 108: (0, 269), 62: (0, 253), 63: (1, {'@': 175})}, 193: {85: (0, 162), 86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 87: (0, 146), 7: (0, 154), 88: (0, 152), 10: (0, 161), 11: (0, 140), 9: (0, 142), 0: (0, 144), 89: (0, 153), 90: (0, 155), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 45: (0, 411), 97: (0, 420), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 38: (0, 73), 4: (0, 45), 43: (0, 22), 41: (0, 28), 8: (0, 19), 95: (0, 61), 6: (0, 11), 1: (0, 176), 12: (0, 32), 96: (0, 0), 42: (0, 3), 20: (0, 59), 13: (0, 66), 24: (0, 145), 40: (0, 141), 16: (0, 147)}, 194: {0: (0, 307), 29: (0, 303), 30: (0, 281), 19: (0, 394), 7: (0, 154), 1: (0, 176), 34: (0, 239), 23: (0, 337), 24: (0, 313), 35: (0, 282), 5: (0, 194), 37: (0, 301), 8: (0, 369)}, 195: {53: (0, 404)}, 196: {5: (0, 157), 77: (0, 163)}, 197: {0: (0, 307), 19: (0, 394), 7: (0, 154), 1: (0, 176), 23: (0, 337), 24: (0, 313), 35: (0, 282), 5: (0, 194), 37: (0, 301), 29: (0, 42), 8: (0, 369)}, 198: {}, 199: {0: (0, 4), 19: (0, 394), 30: (0, 281), 29: (0, 303), 22: (0, 60), 7: (0, 154), 1: (0, 176), 23: (0, 337), 101: (0, 277), 24: (0, 313), 34: (0, 316), 35: (0, 282), 5: (0, 194), 37: (0, 301), 102: (0, 119), 8: (0, 369), 53: (1, {'@': 95})}, 200: {0: (0, 148), 110: (0, 143), 119: (0, 160), 1: (0, 176)}, 201: {13: (0, 66), 11: (0, 177)}, 202: {24: (1, {'@': 176}), 5: (1, {'@': 176}), 7: (1, {'@': 176}), 1: (1, {'@': 176})}, 203: {47: (1, {'@': 177}), 53: (1, {'@': 177}), 54: (1, {'@': 177}), 48: (1, {'@': 177}), 55: (1, {'@': 177}), 49: (1, {'@': 177}), 46: (1, {'@': 177}), 56: (1, {'@': 177}), 50: (1, {'@': 177}), 52: (1, {'@': 177}), 51: (1, {'@': 177})}, 204: {0: (0, 307), 29: (0, 303), 34: (0, 413), 30: (0, 281), 19: (0, 394), 7: (0, 154), 1: (0, 176), 23: (0, 337), 24: (0, 313), 35: (0, 282), 5: (0, 194), 37: (0, 301), 8: (0, 369)}, 205: {53: (0, 331)}, 206: {18: (0, 353), 19: (0, 394), 7: (0, 154), 20: (0, 315), 11: (0, 293), 21: (0, 317), 22: (0, 347), 23: (0, 337), 24: (0, 313), 25: (0, 290), 0: (0, 4), 27: (0, 392), 6: (0, 309), 8: (0, 369), 28: (0, 319), 29: (0, 303), 30: (0, 281), 26: (0, 76), 31: (0, 299), 32: (0, 297), 1: (0, 176), 16: (0, 308), 13: (0, 66), 33: (0, 292), 34: (0, 316), 35: (0, 282), 5: (0, 285), 36: (0, 314), 37: (0, 301)}, 207: {53: (0, 400)}, 208: {64: (0, 304), 58: (1, {'@': 178}), 59: (1, {'@': 178}), 60: (1, {'@': 178}), 61: (1, {'@': 178}), 75: (1, {'@': 178}), 76: (1, {'@': 178}), 62: (1, {'@': 178}), 63: (1, {'@': 178}), 66: (1, {'@': 178}), 78: (1, {'@': 178}), 1: (1, {'@': 178}), 79: (1, {'@': 178}), 70: (1, {'@': 178}), 80: (1, {'@': 178}), 69: (1, {'@': 178}), 81: (1, {'@': 178}), 71: (1, {'@': 178}), 74: (1, {'@': 178})}, 209: {58: (1, {'@': 179}), 66: (1, {'@': 179}), 78: (1, {'@': 179}), 59: (1, {'@': 179}), 60: (1, {'@': 179}), 62: (1, {'@': 179}), 1: (1, {'@': 179}), 61: (1, {'@': 179}), 75: (1, {'@': 179}), 79: (1, {'@': 179}), 70: (1, {'@': 179}), 80: (1, {'@': 179}), 69: (1, {'@': 179}), 81: (1, {'@': 179}), 63: (1, {'@': 179}), 76: (1, {'@': 179}), 71: (1, {'@': 179})}, 210: {0: (0, 148), 1: (0, 176), 110: (0, 412)}, 211: {41: (0, 344), 53: (0, 110), 48: (0, 101)}, 212: {5: (0, 150)}, 213: {2: (0, 156), 4: (0, 45), 64: (0, 345), 5: (0, 139), 6: (0, 11), 7: (0, 154), 8: (0, 19), 1: (0, 176), 9: (0, 142), 11: (0, 140), 12: (0, 32), 0: (0, 144), 13: (0, 66), 15: (0, 259), 14: (0, 399), 16: (0, 147)}, 214: {53: (0, 186)}, 215: {2: (0, 262), 109: (0, 108), 5: (0, 244), 7: (0, 154), 1: (0, 176), 11: (0, 10), 0: (0, 35), 13: (0, 66), 8: (0, 65)}, 216: {120: (0, 280), 121: (0, 388)}, 217: {5: (0, 216)}, 218: {5: (0, 185)}, 219: {84: (0, 206), 5: (0, 173)}, 220: {0: (0, 128), 1: (0, 176)}, 221: {24: (1, {'@': 180}), 5: (1, {'@': 180}), 7: (1, {'@': 180}), 1: (1, {'@': 180})}, 222: {48: (0, 384)}, 223: {5: (0, 201)}, 224: {2: (0, 156), 3: (0, 166), 4: (0, 45), 5: (0, 139), 6: (0, 11), 7: (0, 154), 8: (0, 19), 1: (0, 176), 9: (0, 142), 10: (0, 161), 11: (0, 140), 0: (0, 144), 12: (0, 32), 17: (0, 125), 13: (0, 66), 86: (0, 327), 14: (0, 399), 15: (0, 136), 16: (0, 147)}, 225: {0: (0, 267), 1: (0, 176)}, 226: {57: (1, {'@': 181}), 58: (1, {'@': 181}), 33: (1, {'@': 181}), 40: (1, {'@': 181}), 59: (1, {'@': 181}), 60: (1, {'@': 181}), 46: (1, {'@': 181}), 61: (1, {'@': 181}), 62: (1, {'@': 181}), 63: (1, {'@': 181}), 64: (1, {'@': 181}), 42: (1, {'@': 181}), 48: (1, {'@': 181}), 66: (1, {'@': 181}), 67: (1, {'@': 181}), 68: (1, {'@': 181}), 69: (1, {'@': 181}), 70: (1, {'@': 181}), 50: (1, {'@': 181}), 51: (1, {'@': 181}), 71: (1, {'@': 181}), 72: (1, {'@': 181}), 73: (1, {'@': 181}), 38: (1, {'@': 181}), 39: (1, {'@': 181}), 74: (1, {'@': 181}), 75: (1, {'@': 181}), 52: (1, {'@': 181}), 76: (1, {'@': 181}), 53: (1, {'@': 181}), 78: (1, {'@': 181}), 1: (1, {'@': 181}), 43: (1, {'@': 181}), 79: (1, {'@': 181}), 80: (1, {'@': 181}), 81: (1, {'@': 181}), 24: (1, {'@': 181}), 82: (1, {'@': 181})}, 227: {53: (0, 407)}, 228: {84: (0, 97)}, 229: {53: (1, {'@': 182})}, 230: {5: (0, 276)}, 231: {83: (0, 354), 38: (1, {'@': 183}), 45: (1, {'@': 183}), 39: (1, {'@': 183}), 33: (1, {'@': 183}), 40: (1, {'@': 183}), 46: (1, {'@': 183}), 52: (1, {'@': 183}), 84: (1, {'@': 183}), 47: (1, {'@': 183}), 53: (1, {'@': 183}), 41: (1, {'@': 183}), 42: (1, {'@': 183}), 65: (1, {'@': 183}), 54: (1, {'@': 183}), 48: (1, {'@': 183}), 55: (1, {'@': 183}), 49: (1, {'@': 183}), 68: (1, {'@': 183}), 44: (1, {'@': 183}), 43: (1, {'@': 183}), 56: (1, {'@': 183}), 50: (1, {'@': 183}), 51: (1, {'@': 183}), 24: (1, {'@': 183}), 73: (1, {'@': 183})}, 232: {58: (1, {'@': 184}), 59: (1, {'@': 184}), 60: (1, {'@': 184}), 61: (1, {'@': 184}), 75: (1, {'@': 184}), 76: (1, {'@': 184}), 62: (1, {'@': 184}), 63: (1, {'@': 184}), 66: (1, {'@': 184}), 78: (1, {'@': 184}), 1: (1, {'@': 184}), 79: (1, {'@': 184}), 70: (1, {'@': 184}), 80: (1, {'@': 184}), 69: (1, {'@': 184}), 81: (1, {'@': 184}), 71: (1, {'@': 184}), 74: (1, {'@': 184})}, 233: {50: (0, 111)}, 234: {58: (1, {'@': 185}), 59: (1, {'@': 185}), 60: (1, {'@': 185}), 61: (1, {'@': 185}), 75: (1, {'@': 185}), 76: (1, {'@': 185}), 62: (1, {'@': 185}), 63: (1, {'@': 185}), 66: (1, {'@': 185}), 78: (1, {'@': 185}), 1: (1, {'@': 185}), 79: (1, {'@': 185}), 70: (1, {'@': 185}), 80: (1, {'@': 185}), 69: (1, {'@': 185}), 81: (1, {'@': 185}), 71: (1, {'@': 185}), 74: (1, {'@': 185})}, 235: {53: (1, {'@': 186}), 48: (1, {'@': 186}), 50: (1, {'@': 186})}, 236: {58: (1, {'@': 187}), 59: (1, {'@': 187}), 60: (1, {'@': 187}), 61: (1, {'@': 187}), 75: (1, {'@': 187}), 76: (1, {'@': 187}), 62: (1, {'@': 187}), 63: (1, {'@': 187}), 66: (1, {'@': 187}), 78: (1, {'@': 187}), 1: (1, {'@': 187}), 79: (1, {'@': 187}), 70: (1, {'@': 187}), 80: (1, {'@': 187}), 69: (1, {'@': 187}), 81: (1, {'@': 187}), 71: (1, {'@': 187}), 74: (1, {'@': 187})}, 237: {5: (0, 167)}, 238: {0: (0, 266), 1: (0, 176)}, 239: {53: (0, 356)}, 240: {0: (0, 265), 118: (0, 406), 1: (0, 176)}, 241: {5: (0, 246)}, 242: {2: (0, 156), 3: (0, 7), 4: (0, 45), 5: (0, 139), 6: (0, 11), 7: (0, 154), 8: (0, 19), 1: (0, 176), 9: (0, 142), 11: (0, 140), 12: (0, 32), 0: (0, 144), 13: (0, 66), 14: (0, 399), 15: (0, 136), 16: (0, 147)}, 243: {57: (1, {'@': 188}), 38: (1, {'@': 188}), 58: (1, {'@': 188}), 74: (1, {'@': 188}), 59: (1, {'@': 188}), 60: (1, {'@': 188}), 46: (1, {'@': 188}), 61: (1, {'@': 188}), 75: (1, {'@': 188}), 52: (1, {'@': 188}), 76: (1, {'@': 188}), 62: (1, {'@': 188}), 63: (1, {'@': 188}), 53: (1, {'@': 188}), 64: (1, {'@': 188}), 42: (1, {'@': 188}), 66: (1, {'@': 188}), 78: (1, {'@': 188}), 1: (1, {'@': 188}), 69: (1, {'@': 188}), 70: (1, {'@': 188}), 79: (1, {'@': 188}), 80: (1, {'@': 188}), 81: (1, {'@': 188}), 71: (1, {'@': 188})}, 244: {122: (0, 333), 2: (0, 262), 7: (0, 154), 1: (0, 176), 109: (0, 391), 11: (0, 10), 13: (0, 66), 5: (0, 244), 0: (0, 35), 8: (0, 65)}, 245: {55: (1, {'@': 189}), 56: (1, {'@': 189})}, 246: {0: (0, 265), 118: (0, 355), 1: (0, 176)}, 247: {57: (1, {'@': 190}), 38: (1, {'@': 190}), 58: (1, {'@': 190}), 74: (1, {'@': 190}), 59: (1, {'@': 190}), 60: (1, {'@': 190}), 46: (1, {'@': 190}), 61: (1, {'@': 190}), 75: (1, {'@': 190}), 52: (1, {'@': 190}), 76: (1, {'@': 190}), 62: (1, {'@': 190}), 63: (1, {'@': 190}), 53: (1, {'@': 190}), 64: (1, {'@': 190}), 42: (1, {'@': 190}), 66: (1, {'@': 190}), 78: (1, {'@': 190}), 1: (1, {'@': 190}), 69: (1, {'@': 190}), 70: (1, {'@': 190}), 79: (1, {'@': 190}), 80: (1, {'@': 190}), 81: (1, {'@': 190}), 71: (1, {'@': 190})}, 248: {0: (0, 265), 118: (0, 222), 1: (0, 176)}, 249: {48: (0, 220), 53: (1, {'@': 191}), 77: (1, {'@': 191})}, 250: {53: (1, {'@': 192}), 77: (1, {'@': 192}), 48: (1, {'@': 192})}, 251: {53: (0, 403)}, 252: {53: (1, {'@': 193}), 7: (1, {'@': 193}), 1: (1, {'@': 193}), 5: (1, {'@': 193}), 13: (1, {'@': 193}), 2: (1, {'@': 193})}, 253: {5: (0, 273)}, 254: {53: (0, 228)}, 255: {48: (0, 225)}, 256: {51: (0, 122)}, 257: {48: (0, 377)}, 258: {11: (0, 257), 13: (0, 66)}, 259: {9: (1, {'@': 194}), 33: (1, {'@': 194}), 83: (1, {'@': 194}), 40: (1, {'@': 194}), 46: (1, {'@': 194}), 6: (1, {'@': 194}), 13: (1, {'@': 194}), 84: (1, {'@': 194}), 47: (1, {'@': 194}), 41: (1, {'@': 194}), 42: (1, {'@': 194}), 65: (1, {'@': 194}), 48: (1, {'@': 194}), 49: (1, {'@': 194}), 68: (1, {'@': 194}), 44: (1, {'@': 194}), 5: (1, {'@': 194}), 50: (1, {'@': 194}), 2: (1, {'@': 194}), 45: (1, {'@': 194}), 51: (1, {'@': 194}), 73: (1, {'@': 194}), 38: (1, {'@': 194}), 39: (1, {'@': 194}), 52: (1, {'@': 194}), 53: (1, {'@': 194}), 54: (1, {'@': 194}), 7: (1, {'@': 194}), 55: (1, {'@': 194}), 1: (1, {'@': 194}), 43: (1, {'@': 194}), 16: (1, {'@': 194}), 56: (1, {'@': 194}), 24: (1, {'@': 194}), 64: (1, {'@': 194})}, 260: {85: (0, 162), 97: (0, 130), 86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 87: (0, 146), 7: (0, 154), 88: (0, 152), 10: (0, 161), 11: (0, 140), 9: (0, 142), 0: (0, 144), 89: (0, 153), 90: (0, 155), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 45: (0, 411), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 38: (0, 73), 4: (0, 45), 43: (0, 22), 41: (0, 28), 8: (0, 19), 95: (0, 61), 6: (0, 11), 1: (0, 176), 12: (0, 32), 96: (0, 0), 42: (0, 3), 20: (0, 59), 13: (0, 66), 24: (0, 145), 40: (0, 141), 16: (0, 147)}, 261: {57: (1, {'@': 195}), 38: (1, {'@': 195}), 58: (1, {'@': 195}), 74: (1, {'@': 195}), 59: (1, {'@': 195}), 60: (1, {'@': 195}), 46: (1, {'@': 195}), 61: (1, {'@': 195}), 75: (1, {'@': 195}), 52: (1, {'@': 195}), 76: (1, {'@': 195}), 62: (1, {'@': 195}), 63: (1, {'@': 195}), 53: (1, {'@': 195}), 64: (1, {'@': 195}), 42: (1, {'@': 195}), 66: (1, {'@': 195}), 78: (1, {'@': 195}), 1: (1, {'@': 195}), 69: (1, {'@': 195}), 70: (1, {'@': 195}), 79: (1, {'@': 195}), 80: (1, {'@': 195}), 81: (1, {'@': 195}), 71: (1, {'@': 195})}, 262: {109: (0, 341), 2: (0, 262), 51: (0, 335), 7: (0, 154), 5: (0, 244), 1: (0, 176), 11: (0, 10), 0: (0, 35), 13: (0, 66), 8: (0, 65)}, 263: {9: (1, {'@': 196}), 33: (1, {'@': 196}), 83: (1, {'@': 196}), 40: (1, {'@': 196}), 46: (1, {'@': 196}), 6: (1, {'@': 196}), 13: (1, {'@': 196}), 84: (1, {'@': 196}), 47: (1, {'@': 196}), 41: (1, {'@': 196}), 42: (1, {'@': 196}), 65: (1, {'@': 196}), 48: (1, {'@': 196}), 49: (1, {'@': 196}), 68: (1, {'@': 196}), 44: (1, {'@': 196}), 5: (1, {'@': 196}), 50: (1, {'@': 196}), 2: (1, {'@': 196}), 45: (1, {'@': 196}), 51: (1, {'@': 196}), 73: (1, {'@': 196}), 38: (1, {'@': 196}), 39: (1, {'@': 196}), 52: (1, {'@': 196}), 53: (1, {'@': 196}), 54: (1, {'@': 196}), 7: (1, {'@': 196}), 55: (1, {'@': 196}), 1: (1, {'@': 196}), 43: (1, {'@': 196}), 16: (1, {'@': 196}), 56: (1, {'@': 196}), 24: (1, {'@': 196}), 64: (1, {'@': 196})}, 264: {57: (1, {'@': 197}), 38: (1, {'@': 197}), 58: (1, {'@': 197}), 74: (1, {'@': 197}), 59: (1, {'@': 197}), 60: (1, {'@': 197}), 46: (1, {'@': 197}), 61: (1, {'@': 197}), 75: (1, {'@': 197}), 52: (1, {'@': 197}), 76: (1, {'@': 197}), 62: (1, {'@': 197}), 63: (1, {'@': 197}), 53: (1, {'@': 197}), 64: (1, {'@': 197}), 42: (1, {'@': 197}), 66: (1, {'@': 197}), 78: (1, {'@': 197}), 1: (1, {'@': 197}), 69: (1, {'@': 197}), 70: (1, {'@': 197}), 79: (1, {'@': 197}), 80: (1, {'@': 197}), 81: (1, {'@': 197}), 71: (1, {'@': 197})}, 265: {77: (0, 363), 5: (0, 373), 53: (1, {'@': 198}), 48: (1, {'@': 198}), 50: (1, {'@': 198})}, 266: {5: (0, 90), 50: (1, {'@': 199})}, 267: {53: (0, 409)}, 268: {64: (1, {'@': 200}), 41: (1, {'@': 200}), 51: (1, {'@': 200}), 48: (1, {'@': 200}), 53: (1, {'@': 200})}, 269: {58: (1, {'@': 201}), 59: (1, {'@': 201}), 60: (1, {'@': 201}), 61: (1, {'@': 201}), 75: (1, {'@': 201}), 76: (1, {'@': 201}), 62: (1, {'@': 201}), 63: (1, {'@': 201}), 66: (1, {'@': 201}), 78: (1, {'@': 201}), 1: (1, {'@': 201}), 79: (1, {'@': 201}), 70: (1, {'@': 201}), 80: (1, {'@': 201}), 69: (1, {'@': 201}), 81: (1, {'@': 201}), 71: (1, {'@': 201}), 74: (1, {'@': 201})}, 270: {64: (0, 304), 58: (1, {'@': 202}), 59: (1, {'@': 202}), 60: (1, {'@': 202}), 46: (1, {'@': 202}), 61: (1, {'@': 202}), 62: (1, {'@': 202}), 63: (1, {'@': 202}), 66: (1, {'@': 202}), 69: (1, {'@': 202}), 70: (1, {'@': 202}), 71: (1, {'@': 202}), 74: (1, {'@': 202}), 75: (1, {'@': 202}), 52: (1, {'@': 202}), 76: (1, {'@': 202}), 53: (1, {'@': 202}), 78: (1, {'@': 202}), 1: (1, {'@': 202}), 79: (1, {'@': 202}), 80: (1, {'@': 202}), 81: (1, {'@': 202})}, 271: {53: (0, 236)}, 272: {57: (1, {'@': 203}), 58: (1, {'@': 203}), 33: (1, {'@': 203}), 40: (1, {'@': 203}), 59: (1, {'@': 203}), 60: (1, {'@': 203}), 46: (1, {'@': 203}), 61: (1, {'@': 203}), 62: (1, {'@': 203}), 63: (1, {'@': 203}), 64: (1, {'@': 203}), 42: (1, {'@': 203}), 65: (1, {'@': 203}), 66: (1, {'@': 203}), 67: (1, {'@': 203}), 68: (1, {'@': 203}), 69: (1, {'@': 203}), 70: (1, {'@': 203}), 71: (1, {'@': 203}), 72: (1, {'@': 203}), 73: (1, {'@': 203}), 38: (1, {'@': 203}), 39: (1, {'@': 203}), 74: (1, {'@': 203}), 75: (1, {'@': 203}), 52: (1, {'@': 203}), 76: (1, {'@': 203}), 53: (1, {'@': 203}), 77: (1, {'@': 203}), 78: (1, {'@': 203}), 1: (1, {'@': 203}), 43: (1, {'@': 203}), 79: (1, {'@': 203}), 80: (1, {'@': 203}), 81: (1, {'@': 203}), 24: (1, {'@': 203}), 82: (1, {'@': 203}), 48: (1, {'@': 203}), 50: (1, {'@': 203}), 51: (1, {'@': 203})}, 273: {11: (0, 332), 13: (0, 66)}, 274: {57: (1, {'@': 204}), 38: (1, {'@': 204}), 58: (1, {'@': 204}), 74: (1, {'@': 204}), 59: (1, {'@': 204}), 60: (1, {'@': 204}), 46: (1, {'@': 204}), 61: (1, {'@': 204}), 75: (1, {'@': 204}), 52: (1, {'@': 204}), 76: (1, {'@': 204}), 62: (1, {'@': 204}), 63: (1, {'@': 204}), 53: (1, {'@': 204}), 64: (1, {'@': 204}), 42: (1, {'@': 204}), 66: (1, {'@': 204}), 78: (1, {'@': 204}), 1: (1, {'@': 204}), 69: (1, {'@': 204}), 70: (1, {'@': 204}), 79: (1, {'@': 204}), 80: (1, {'@': 204}), 81: (1, {'@': 204}), 71: (1, {'@': 204})}, 275: {13: (0, 66), 11: (0, 205)}, 276: {0: (0, 265), 118: (0, 382), 1: (0, 176)}, 277: {123: (0, 178), 48: (0, 182), 53: (1, {'@': 205})}, 278: {57: (1, {'@': 206}), 38: (1, {'@': 206}), 58: (1, {'@': 206}), 74: (1, {'@': 206}), 59: (1, {'@': 206}), 60: (1, {'@': 206}), 46: (1, {'@': 206}), 61: (1, {'@': 206}), 75: (1, {'@': 206}), 52: (1, {'@': 206}), 76: (1, {'@': 206}), 62: (1, {'@': 206}), 63: (1, {'@': 206}), 53: (1, {'@': 206}), 64: (1, {'@': 206}), 42: (1, {'@': 206}), 66: (1, {'@': 206}), 78: (1, {'@': 206}), 1: (1, {'@': 206}), 69: (1, {'@': 206}), 70: (1, {'@': 206}), 79: (1, {'@': 206}), 80: (1, {'@': 206}), 81: (1, {'@': 206}), 71: (1, {'@': 206})}, 279: {2: (0, 262), 5: (0, 244), 7: (0, 154), 1: (0, 176), 8: (0, 65), 109: (0, 113), 11: (0, 10), 0: (0, 35), 13: (0, 66)}, 280: {48: (1, {'@': 207})}, 281: {57: (1, {'@': 208}), 58: (1, {'@': 208}), 33: (1, {'@': 208}), 40: (1, {'@': 208}), 59: (1, {'@': 208}), 60: (1, {'@': 208}), 46: (1, {'@': 208}), 61: (1, {'@': 208}), 62: (1, {'@': 208}), 63: (1, {'@': 208}), 64: (1, {'@': 208}), 42: (1, {'@': 208}), 66: (1, {'@': 208}), 67: (1, {'@': 208}), 69: (1, {'@': 208}), 70: (1, {'@': 208}), 71: (1, {'@': 208}), 72: (1, {'@': 208}), 73: (1, {'@': 208}), 38: (1, {'@': 208}), 39: (1, {'@': 208}), 74: (1, {'@': 208}), 75: (1, {'@': 208}), 52: (1, {'@': 208}), 76: (1, {'@': 208}), 53: (1, {'@': 208}), 78: (1, {'@': 208}), 1: (1, {'@': 208}), 43: (1, {'@': 208}), 79: (1, {'@': 208}), 80: (1, {'@': 208}), 81: (1, {'@': 208}), 82: (1, {'@': 208}), 48: (1, {'@': 208}), 51: (1, {'@': 208}), 50: (1, {'@': 208})}, 282: {124: (0, 48), 65: (0, 15), 57: (1, {'@': 209}), 58: (1, {'@': 209}), 33: (1, {'@': 209}), 40: (1, {'@': 209}), 59: (1, {'@': 209}), 60: (1, {'@': 209}), 46: (1, {'@': 209}), 61: (1, {'@': 209}), 62: (1, {'@': 209}), 63: (1, {'@': 209}), 64: (1, {'@': 209}), 42: (1, {'@': 209}), 66: (1, {'@': 209}), 67: (1, {'@': 209}), 68: (1, {'@': 209}), 69: (1, {'@': 209}), 70: (1, {'@': 209}), 71: (1, {'@': 209}), 72: (1, {'@': 209}), 73: (1, {'@': 209}), 38: (1, {'@': 209}), 39: (1, {'@': 209}), 74: (1, {'@': 209}), 75: (1, {'@': 209}), 52: (1, {'@': 209}), 76: (1, {'@': 209}), 53: (1, {'@': 209}), 78: (1, {'@': 209}), 1: (1, {'@': 209}), 43: (1, {'@': 209}), 79: (1, {'@': 209}), 80: (1, {'@': 209}), 81: (1, {'@': 209}), 24: (1, {'@': 209}), 82: (1, {'@': 209}), 48: (1, {'@': 209}), 51: (1, {'@': 209}), 50: (1, {'@': 209})}, 283: {0: (0, 4), 19: (0, 394), 29: (0, 303), 30: (0, 281), 7: (0, 154), 1: (0, 176), 23: (0, 337), 24: (0, 313), 34: (0, 316), 39: (0, 221), 35: (0, 282), 22: (0, 247), 5: (0, 194), 37: (0, 301), 8: (0, 369)}, 284: {9: (1, {'@': 210}), 33: (1, {'@': 210}), 83: (1, {'@': 210}), 40: (1, {'@': 210}), 46: (1, {'@': 210}), 6: (1, {'@': 210}), 13: (1, {'@': 210}), 84: (1, {'@': 210}), 47: (1, {'@': 210}), 41: (1, {'@': 210}), 42: (1, {'@': 210}), 65: (1, {'@': 210}), 48: (1, {'@': 210}), 49: (1, {'@': 210}), 68: (1, {'@': 210}), 44: (1, {'@': 210}), 5: (1, {'@': 210}), 50: (1, {'@': 210}), 2: (1, {'@': 210}), 45: (1, {'@': 210}), 51: (1, {'@': 210}), 73: (1, {'@': 210}), 38: (1, {'@': 210}), 39: (1, {'@': 210}), 52: (1, {'@': 210}), 53: (1, {'@': 210}), 54: (1, {'@': 210}), 7: (1, {'@': 210}), 55: (1, {'@': 210}), 1: (1, {'@': 210}), 43: (1, {'@': 210}), 16: (1, {'@': 210}), 56: (1, {'@': 210}), 24: (1, {'@': 210}), 64: (1, {'@': 210})}, 285: {18: (0, 353), 19: (0, 394), 7: (0, 154), 34: (0, 310), 20: (0, 315), 11: (0, 293), 21: (0, 317), 22: (0, 347), 23: (0, 337), 24: (0, 313), 25: (0, 290), 0: (0, 4), 27: (0, 392), 6: (0, 309), 8: (0, 369), 28: (0, 319), 29: (0, 303), 26: (0, 291), 30: (0, 281), 31: (0, 299), 32: (0, 297), 1: (0, 176), 16: (0, 308), 13: (0, 66), 33: (0, 292), 35: (0, 282), 5: (0, 285), 36: (0, 314), 37: (0, 301)}, 286: {24: (1, {'@': 211}), 5: (1, {'@': 211}), 7: (1, {'@': 211}), 1: (1, {'@': 211})}, 287: {125: (0, 21), 50: (0, 34), 48: (0, 47), 51: (0, 39)}, 288: {0: (0, 4), 19: (0, 394), 29: (0, 303), 30: (0, 281), 7: (0, 154), 1: (0, 176), 22: (0, 243), 23: (0, 337), 24: (0, 313), 34: (0, 316), 35: (0, 282), 5: (0, 194), 37: (0, 301), 8: (0, 369)}, 289: {9: (1, {'@': 212}), 33: (1, {'@': 212}), 83: (1, {'@': 212}), 40: (1, {'@': 212}), 46: (1, {'@': 212}), 6: (1, {'@': 212}), 13: (1, {'@': 212}), 84: (1, {'@': 212}), 47: (1, {'@': 212}), 41: (1, {'@': 212}), 42: (1, {'@': 212}), 65: (1, {'@': 212}), 48: (1, {'@': 212}), 49: (1, {'@': 212}), 68: (1, {'@': 212}), 44: (1, {'@': 212}), 5: (1, {'@': 212}), 50: (1, {'@': 212}), 2: (1, {'@': 212}), 45: (1, {'@': 212}), 51: (1, {'@': 212}), 73: (1, {'@': 212}), 38: (1, {'@': 212}), 39: (1, {'@': 212}), 52: (1, {'@': 212}), 53: (1, {'@': 212}), 54: (1, {'@': 212}), 7: (1, {'@': 212}), 55: (1, {'@': 212}), 1: (1, {'@': 212}), 43: (1, {'@': 212}), 16: (1, {'@': 212}), 56: (1, {'@': 212}), 24: (1, {'@': 212}), 64: (1, {'@': 212})}, 290: {1: (1, {'@': 213})}, 291: {64: (0, 304), 53: (0, 390)}, 292: {18: (0, 353), 19: (0, 394), 7: (0, 154), 20: (0, 315), 11: (0, 293), 21: (0, 317), 22: (0, 347), 23: (0, 337), 24: (0, 313), 25: (0, 290), 0: (0, 4), 27: (0, 392), 6: (0, 309), 8: (0, 369), 26: (0, 6), 28: (0, 319), 29: (0, 303), 30: (0, 281), 31: (0, 299), 32: (0, 297), 1: (0, 176), 16: (0, 308), 13: (0, 66), 33: (0, 292), 34: (0, 316), 35: (0, 282), 5: (0, 285), 36: (0, 314), 37: (0, 301)}, 293: {57: (1, {'@': 214}), 38: (1, {'@': 214}), 58: (1, {'@': 214}), 74: (1, {'@': 214}), 59: (1, {'@': 214}), 60: (1, {'@': 214}), 46: (1, {'@': 214}), 61: (1, {'@': 214}), 75: (1, {'@': 214}), 52: (1, {'@': 214}), 76: (1, {'@': 214}), 62: (1, {'@': 214}), 63: (1, {'@': 214}), 53: (1, {'@': 214}), 64: (1, {'@': 214}), 42: (1, {'@': 214}), 66: (1, {'@': 214}), 78: (1, {'@': 214}), 1: (1, {'@': 214}), 69: (1, {'@': 214}), 70: (1, {'@': 214}), 79: (1, {'@': 214}), 80: (1, {'@': 214}), 81: (1, {'@': 214}), 71: (1, {'@': 214})}, 294: {35: (0, 282), 0: (0, 307), 19: (0, 394), 7: (0, 154), 23: (0, 226), 1: (0, 176), 5: (0, 194), 37: (0, 301), 8: (0, 369), 24: (0, 313)}, 295: {39: (0, 183)}, 296: {74: (0, 71)}, 297: {0: (0, 265), 118: (0, 51), 1: (0, 176)}, 298: {22: (0, 274), 0: (0, 4), 19: (0, 394), 29: (0, 303), 30: (0, 281), 7: (0, 154), 1: (0, 176), 23: (0, 337), 24: (0, 313), 34: (0, 316), 35: (0, 282), 5: (0, 194), 37: (0, 301), 8: (0, 369)}, 299: {1: (1, {'@': 215})}, 300: {0: (0, 4), 19: (0, 394), 29: (0, 303), 30: (0, 281), 7: (0, 154), 1: (0, 176), 23: (0, 337), 24: (0, 313), 34: (0, 316), 35: (0, 282), 22: (0, 261), 5: (0, 194), 37: (0, 301), 8: (0, 369), 39: (0, 202)}, 301: {57: (1, {'@': 216}), 58: (1, {'@': 216}), 33: (1, {'@': 216}), 40: (1, {'@': 216}), 59: (1, {'@': 216}), 60: (1, {'@': 216}), 46: (1, {'@': 216}), 61: (1, {'@': 216}), 62: (1, {'@': 216}), 63: (1, {'@': 216}), 64: (1, {'@': 216}), 42: (1, {'@': 216}), 65: (1, {'@': 216}), 66: (1, {'@': 216}), 67: (1, {'@': 216}), 68: (1, {'@': 216}), 69: (1, {'@': 216}), 70: (1, {'@': 216}), 71: (1, {'@': 216}), 72: (1, {'@': 216}), 73: (1, {'@': 216}), 38: (1, {'@': 216}), 39: (1, {'@': 216}), 74: (1, {'@': 216}), 75: (1, {'@': 216}), 52: (1, {'@': 216}), 76: (1, {'@': 216}), 53: (1, {'@': 216}), 77: (1, {'@': 216}), 78: (1, {'@': 216}), 1: (1, {'@': 216}), 43: (1, {'@': 216}), 79: (1, {'@': 216}), 80: (1, {'@': 216}), 81: (1, {'@': 216}), 24: (1, {'@': 216}), 82: (1, {'@': 216}), 48: (1, {'@': 216}), 50: (1, {'@': 216}), 51: (1, {'@': 216})}, 302: {0: (0, 307), 19: (0, 394), 7: (0, 154), 1: (0, 176), 23: (0, 337), 24: (0, 313), 35: (0, 282), 5: (0, 194), 29: (0, 323), 37: (0, 301), 8: (0, 369)}, 303: {126: (0, 320), 24: (0, 302), 57: (1, {'@': 217}), 58: (1, {'@': 217}), 33: (1, {'@': 217}), 40: (1, {'@': 217}), 59: (1, {'@': 217}), 60: (1, {'@': 217}), 46: (1, {'@': 217}), 61: (1, {'@': 217}), 62: (1, {'@': 217}), 63: (1, {'@': 217}), 64: (1, {'@': 217}), 42: (1, {'@': 217}), 66: (1, {'@': 217}), 67: (1, {'@': 217}), 69: (1, {'@': 217}), 70: (1, {'@': 217}), 71: (1, {'@': 217}), 72: (1, {'@': 217}), 73: (1, {'@': 217}), 38: (1, {'@': 217}), 39: (1, {'@': 217}), 74: (1, {'@': 217}), 75: (1, {'@': 217}), 52: (1, {'@': 217}), 76: (1, {'@': 217}), 53: (1, {'@': 217}), 78: (1, {'@': 217}), 1: (1, {'@': 217}), 43: (1, {'@': 217}), 79: (1, {'@': 217}), 80: (1, {'@': 217}), 81: (1, {'@': 217}), 82: (1, {'@': 217}), 48: (1, {'@': 217}), 51: (1, {'@': 217}), 50: (1, {'@': 217})}, 304: {26: (0, 376), 18: (0, 353), 19: (0, 394), 7: (0, 154), 20: (0, 315), 11: (0, 293), 21: (0, 317), 22: (0, 347), 23: (0, 337), 24: (0, 313), 25: (0, 290), 0: (0, 4), 27: (0, 392), 6: (0, 309), 8: (0, 369), 28: (0, 319), 29: (0, 303), 30: (0, 281), 31: (0, 299), 32: (0, 297), 1: (0, 176), 16: (0, 308), 13: (0, 66), 33: (0, 292), 34: (0, 316), 35: (0, 282), 5: (0, 285), 36: (0, 314), 37: (0, 301)}, 305: {64: (0, 304), 74: (0, 289)}, 306: {39: (0, 188)}, 307: {5: (0, 199), 57: (1, {'@': 70}), 58: (1, {'@': 70}), 33: (1, {'@': 70}), 59: (1, {'@': 70}), 60: (1, {'@': 70}), 40: (1, {'@': 70}), 46: (1, {'@': 70}), 61: (1, {'@': 70}), 62: (1, {'@': 70}), 63: (1, {'@': 70}), 64: (1, {'@': 70}), 42: (1, {'@': 70}), 65: (1, {'@': 70}), 48: (1, {'@': 70}), 66: (1, {'@': 70}), 67: (1, {'@': 70}), 68: (1, {'@': 70}), 69: (1, {'@': 70}), 70: (1, {'@': 70}), 50: (1, {'@': 70}), 51: (1, {'@': 70}), 71: (1, {'@': 70}), 72: (1, {'@': 70}), 73: (1, {'@': 70}), 38: (1, {'@': 70}), 39: (1, {'@': 70}), 74: (1, {'@': 70}), 75: (1, {'@': 70}), 52: (1, {'@': 70}), 76: (1, {'@': 70}), 53: (1, {'@': 70}), 77: (1, {'@': 70}), 78: (1, {'@': 70}), 1: (1, {'@': 70}), 43: (1, {'@': 70}), 79: (1, {'@': 70}), 80: (1, {'@': 70}), 81: (1, {'@': 70}), 24: (1, {'@': 70}), 82: (1, {'@': 70})}, 308: {57: (1, {'@': 218}), 38: (1, {'@': 218}), 58: (1, {'@': 218}), 74: (1, {'@': 218}), 59: (1, {'@': 218}), 60: (1, {'@': 218}), 46: (1, {'@': 218}), 61: (1, {'@': 218}), 75: (1, {'@': 218}), 52: (1, {'@': 218}), 76: (1, {'@': 218}), 62: (1, {'@': 218}), 63: (1, {'@': 218}), 53: (1, {'@': 218}), 64: (1, {'@': 218}), 42: (1, {'@': 218}), 66: (1, {'@': 218}), 78: (1, {'@': 218}), 1: (1, {'@': 218}), 69: (1, {'@': 218}), 70: (1, {'@': 218}), 79: (1, {'@': 218}), 80: (1, {'@': 218}), 81: (1, {'@': 218}), 71: (1, {'@': 218})}, 309: {57: (1, {'@': 219}), 38: (1, {'@': 219}), 58: (1, {'@': 219}), 74: (1, {'@': 219}), 59: (1, {'@': 219}), 60: (1, {'@': 219}), 46: (1, {'@': 219}), 61: (1, {'@': 219}), 75: (1, {'@': 219}), 52: (1, {'@': 219}), 76: (1, {'@': 219}), 62: (1, {'@': 219}), 63: (1, {'@': 219}), 53: (1, {'@': 219}), 64: (1, {'@': 219}), 42: (1, {'@': 219}), 66: (1, {'@': 219}), 78: (1, {'@': 219}), 1: (1, {'@': 219}), 69: (1, {'@': 219}), 70: (1, {'@': 219}), 79: (1, {'@': 219}), 80: (1, {'@': 219}), 81: (1, {'@': 219}), 71: (1, {'@': 219})}, 310: {53: (0, 356), 57: (1, {'@': 220}), 38: (1, {'@': 220}), 64: (1, {'@': 220}), 39: (1, {'@': 220}), 42: (1, {'@': 220}), 33: (1, {'@': 220}), 40: (1, {'@': 220}), 67: (1, {'@': 220}), 82: (1, {'@': 220}), 43: (1, {'@': 220}), 72: (1, {'@': 220}), 73: (1, {'@': 220})}, 311: {0: (0, 4), 19: (0, 394), 29: (0, 303), 30: (0, 281), 7: (0, 154), 1: (0, 176), 23: (0, 337), 24: (0, 313), 34: (0, 316), 35: (0, 282), 22: (0, 264), 5: (0, 194), 37: (0, 301), 8: (0, 369)}, 312: {24: (1, {'@': 221}), 5: (1, {'@': 221}), 7: (1, {'@': 221}), 1: (1, {'@': 221})}, 313: {0: (0, 307), 19: (0, 25), 7: (0, 154), 1: (0, 176), 5: (0, 194), 37: (0, 301), 8: (0, 369), 24: (0, 313)}, 314: {0: (0, 265), 118: (0, 63), 1: (0, 176)}, 315: {18: (0, 353), 19: (0, 394), 7: (0, 154), 26: (0, 36), 20: (0, 315), 11: (0, 293), 21: (0, 317), 22: (0, 347), 23: (0, 337), 24: (0, 313), 25: (0, 290), 0: (0, 4), 27: (0, 392), 6: (0, 309), 8: (0, 369), 28: (0, 319), 29: (0, 303), 30: (0, 281), 31: (0, 299), 32: (0, 297), 1: (0, 176), 16: (0, 308), 13: (0, 66), 33: (0, 292), 34: (0, 316), 35: (0, 282), 5: (0, 285), 36: (0, 314), 37: (0, 301)}, 316: {57: (1, {'@': 220}), 58: (1, {'@': 220}), 33: (1, {'@': 220}), 40: (1, {'@': 220}), 59: (1, {'@': 220}), 60: (1, {'@': 220}), 46: (1, {'@': 220}), 61: (1, {'@': 220}), 62: (1, {'@': 220}), 63: (1, {'@': 220}), 64: (1, {'@': 220}), 42: (1, {'@': 220}), 66: (1, {'@': 220}), 67: (1, {'@': 220}), 69: (1, {'@': 220}), 70: (1, {'@': 220}), 71: (1, {'@': 220}), 72: (1, {'@': 220}), 73: (1, {'@': 220}), 38: (1, {'@': 220}), 39: (1, {'@': 220}), 74: (1, {'@': 220}), 75: (1, {'@': 220}), 52: (1, {'@': 220}), 76: (1, {'@': 220}), 53: (1, {'@': 220}), 78: (1, {'@': 220}), 1: (1, {'@': 220}), 43: (1, {'@': 220}), 79: (1, {'@': 220}), 80: (1, {'@': 220}), 81: (1, {'@': 220}), 82: (1, {'@': 220}), 48: (1, {'@': 220})}, 317: {57: (1, {'@': 222}), 38: (1, {'@': 222}), 58: (1, {'@': 222}), 74: (1, {'@': 222}), 59: (1, {'@': 222}), 60: (1, {'@': 222}), 46: (1, {'@': 222}), 61: (1, {'@': 222}), 75: (1, {'@': 222}), 52: (1, {'@': 222}), 76: (1, {'@': 222}), 62: (1, {'@': 222}), 63: (1, {'@': 222}), 53: (1, {'@': 222}), 64: (1, {'@': 222}), 42: (1, {'@': 222}), 66: (1, {'@': 222}), 78: (1, {'@': 222}), 1: (1, {'@': 222}), 69: (1, {'@': 222}), 70: (1, {'@': 222}), 79: (1, {'@': 222}), 80: (1, {'@': 222}), 81: (1, {'@': 222}), 71: (1, {'@': 222})}, 318: {24: (1, {'@': 223}), 5: (1, {'@': 223}), 7: (1, {'@': 223}), 1: (1, {'@': 223})}, 319: {1: (1, {'@': 224})}, 320: {24: (0, 197), 57: (1, {'@': 225}), 58: (1, {'@': 225}), 33: (1, {'@': 225}), 40: (1, {'@': 225}), 59: (1, {'@': 225}), 60: (1, {'@': 225}), 46: (1, {'@': 225}), 61: (1, {'@': 225}), 62: (1, {'@': 225}), 63: (1, {'@': 225}), 64: (1, {'@': 225}), 42: (1, {'@': 225}), 66: (1, {'@': 225}), 67: (1, {'@': 225}), 69: (1, {'@': 225}), 70: (1, {'@': 225}), 71: (1, {'@': 225}), 72: (1, {'@': 225}), 73: (1, {'@': 225}), 38: (1, {'@': 225}), 39: (1, {'@': 225}), 74: (1, {'@': 225}), 75: (1, {'@': 225}), 52: (1, {'@': 225}), 76: (1, {'@': 225}), 53: (1, {'@': 225}), 78: (1, {'@': 225}), 1: (1, {'@': 225}), 43: (1, {'@': 225}), 79: (1, {'@': 225}), 80: (1, {'@': 225}), 81: (1, {'@': 225}), 82: (1, {'@': 225}), 48: (1, {'@': 225}), 51: (1, {'@': 225}), 50: (1, {'@': 225})}, 321: {0: (0, 4), 19: (0, 394), 29: (0, 303), 30: (0, 281), 7: (0, 154), 1: (0, 176), 23: (0, 337), 24: (0, 313), 34: (0, 316), 35: (0, 282), 22: (0, 278), 5: (0, 194), 37: (0, 301), 8: (0, 369)}, 322: {86: (0, 168), 3: (0, 166), 5: (0, 139), 7: (0, 154), 9: (0, 142), 10: (0, 161), 11: (0, 140), 0: (0, 144), 89: (0, 153), 2: (0, 156), 92: (0, 367), 14: (0, 399), 17: (0, 125), 15: (0, 136), 94: (0, 24), 4: (0, 45), 6: (0, 11), 8: (0, 19), 95: (0, 61), 1: (0, 176), 12: (0, 32), 13: (0, 66), 24: (0, 145), 16: (0, 147), 47: (1, {'@': 226}), 53: (1, {'@': 226}), 54: (1, {'@': 226}), 48: (1, {'@': 226}), 55: (1, {'@': 226}), 49: (1, {'@': 226}), 46: (1, {'@': 226}), 56: (1, {'@': 226}), 50: (1, {'@': 226}), 52: (1, {'@': 226}), 51: (1, {'@': 226})}, 323: {57: (1, {'@': 227}), 58: (1, {'@': 227}), 33: (1, {'@': 227}), 40: (1, {'@': 227}), 59: (1, {'@': 227}), 60: (1, {'@': 227}), 46: (1, {'@': 227}), 61: (1, {'@': 227}), 62: (1, {'@': 227}), 63: (1, {'@': 227}), 64: (1, {'@': 227}), 42: (1, {'@': 227}), 48: (1, {'@': 227}), 66: (1, {'@': 227}), 67: (1, {'@': 227}), 69: (1, {'@': 227}), 70: (1, {'@': 227}), 50: (1, {'@': 227}), 51: (1, {'@': 227}), 71: (1, {'@': 227}), 72: (1, {'@': 227}), 73: (1, {'@': 227}), 38: (1, {'@': 227}), 39: (1, {'@': 227}), 74: (1, {'@': 227}), 75: (1, {'@': 227}), 52: (1, {'@': 227}), 76: (1, {'@': 227}), 53: (1, {'@': 227}), 78: (1, {'@': 227}), 1: (1, {'@': 227}), 43: (1, {'@': 227}), 79: (1, {'@': 227}), 80: (1, {'@': 227}), 81: (1, {'@': 227}), 24: (1, {'@': 227}), 82: (1, {'@': 227})}, 324: {53: (0, 87)}, 325: {85: (0, 162), 86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 87: (0, 146), 7: (0, 154), 88: (0, 152), 10: (0, 161), 11: (0, 140), 9: (0, 142), 0: (0, 144), 89: (0, 153), 90: (0, 155), 50: (0, 54), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 45: (0, 411), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 38: (0, 73), 4: (0, 45), 43: (0, 22), 41: (0, 28), 8: (0, 19), 97: (0, 134), 95: (0, 61), 6: (0, 11), 1: (0, 176), 12: (0, 32), 96: (0, 0), 42: (0, 3), 20: (0, 59), 13: (0, 66), 24: (0, 145), 40: (0, 141), 16: (0, 147)}, 326: {127: (0, 68), 49: (0, 8), 47: (1, {'@': 228}), 53: (1, {'@': 228}), 54: (1, {'@': 228}), 48: (1, {'@': 228}), 55: (1, {'@': 228}), 46: (1, {'@': 228}), 56: (1, {'@': 228}), 50: (1, {'@': 228}), 52: (1, {'@': 228}), 51: (1, {'@': 228})}, 327: {33: (1, {'@': 229}), 40: (1, {'@': 229}), 46: (1, {'@': 229}), 84: (1, {'@': 229}), 47: (1, {'@': 229}), 41: (1, {'@': 229}), 42: (1, {'@': 229}), 48: (1, {'@': 229}), 49: (1, {'@': 229}), 68: (1, {'@': 229}), 44: (1, {'@': 229}), 50: (1, {'@': 229}), 51: (1, {'@': 229}), 45: (1, {'@': 229}), 38: (1, {'@': 229}), 39: (1, {'@': 229}), 52: (1, {'@': 229}), 53: (1, {'@': 229}), 54: (1, {'@': 229}), 55: (1, {'@': 229}), 43: (1, {'@': 229}), 56: (1, {'@': 229}), 24: (1, {'@': 229})}, 328: {33: (1, {'@': 230}), 40: (1, {'@': 230}), 46: (1, {'@': 230}), 84: (1, {'@': 230}), 47: (1, {'@': 230}), 41: (1, {'@': 230}), 42: (1, {'@': 230}), 48: (1, {'@': 230}), 49: (1, {'@': 230}), 68: (1, {'@': 230}), 44: (1, {'@': 230}), 50: (1, {'@': 230}), 51: (1, {'@': 230}), 45: (1, {'@': 230}), 38: (1, {'@': 230}), 39: (1, {'@': 230}), 52: (1, {'@': 230}), 53: (1, {'@': 230}), 54: (1, {'@': 230}), 55: (1, {'@': 230}), 43: (1, {'@': 230}), 56: (1, {'@': 230}), 24: (1, {'@': 230})}, 329: {48: (0, 240)}, 330: {73: (0, 49), 38: (1, {'@': 231}), 39: (1, {'@': 231}), 33: (1, {'@': 231}), 40: (1, {'@': 231}), 46: (1, {'@': 231}), 52: (1, {'@': 231}), 51: (1, {'@': 231}), 84: (1, {'@': 231}), 47: (1, {'@': 231}), 53: (1, {'@': 231}), 41: (1, {'@': 231}), 42: (1, {'@': 231}), 65: (1, {'@': 231}), 54: (1, {'@': 231}), 48: (1, {'@': 231}), 55: (1, {'@': 231}), 49: (1, {'@': 231}), 68: (1, {'@': 231}), 44: (1, {'@': 231}), 43: (1, {'@': 231}), 56: (1, {'@': 231}), 50: (1, {'@': 231}), 45: (1, {'@': 231}), 24: (1, {'@': 231})}, 331: {58: (1, {'@': 232}), 59: (1, {'@': 232}), 60: (1, {'@': 232}), 61: (1, {'@': 232}), 75: (1, {'@': 232}), 76: (1, {'@': 232}), 62: (1, {'@': 232}), 63: (1, {'@': 232}), 66: (1, {'@': 232}), 78: (1, {'@': 232}), 1: (1, {'@': 232}), 79: (1, {'@': 232}), 70: (1, {'@': 232}), 80: (1, {'@': 232}), 69: (1, {'@': 232}), 81: (1, {'@': 232}), 71: (1, {'@': 232}), 74: (1, {'@': 232})}, 332: {48: (0, 395)}, 333: {53: (0, 268), 109: (0, 211), 2: (0, 262), 5: (0, 244), 7: (0, 154), 1: (0, 176), 11: (0, 10), 0: (0, 35), 13: (0, 66), 8: (0, 65)}, 334: {18: (0, 353), 19: (0, 394), 7: (0, 154), 20: (0, 315), 11: (0, 293), 21: (0, 317), 22: (0, 347), 23: (0, 337), 24: (0, 313), 25: (0, 290), 0: (0, 4), 27: (0, 392), 6: (0, 309), 8: (0, 369), 28: (0, 319), 29: (0, 303), 30: (0, 281), 26: (0, 37), 31: (0, 299), 32: (0, 297), 1: (0, 176), 16: (0, 308), 13: (0, 66), 33: (0, 292), 34: (0, 316), 35: (0, 282), 5: (0, 285), 36: (0, 314), 37: (0, 301)}, 335: {64: (1, {'@': 233}), 41: (1, {'@': 233}), 51: (1, {'@': 233}), 48: (1, {'@': 233}), 53: (1, {'@': 233})}, 336: {9: (1, {'@': 234}), 33: (1, {'@': 234}), 83: (1, {'@': 234}), 40: (1, {'@': 234}), 46: (1, {'@': 234}), 6: (1, {'@': 234}), 13: (1, {'@': 234}), 84: (1, {'@': 234}), 47: (1, {'@': 234}), 41: (1, {'@': 234}), 42: (1, {'@': 234}), 65: (1, {'@': 234}), 48: (1, {'@': 234}), 49: (1, {'@': 234}), 68: (1, {'@': 234}), 44: (1, {'@': 234}), 5: (1, {'@': 234}), 50: (1, {'@': 234}), 2: (1, {'@': 234}), 45: (1, {'@': 234}), 51: (1, {'@': 234}), 73: (1, {'@': 234}), 38: (1, {'@': 234}), 39: (1, {'@': 234}), 52: (1, {'@': 234}), 53: (1, {'@': 234}), 54: (1, {'@': 234}), 7: (1, {'@': 234}), 55: (1, {'@': 234}), 1: (1, {'@': 234}), 43: (1, {'@': 234}), 16: (1, {'@': 234}), 56: (1, {'@': 234}), 24: (1, {'@': 234}), 64: (1, {'@': 234})}, 337: {128: (0, 41), 68: (0, 294), 57: (1, {'@': 235}), 58: (1, {'@': 235}), 33: (1, {'@': 235}), 40: (1, {'@': 235}), 59: (1, {'@': 235}), 60: (1, {'@': 235}), 46: (1, {'@': 235}), 61: (1, {'@': 235}), 62: (1, {'@': 235}), 63: (1, {'@': 235}), 64: (1, {'@': 235}), 42: (1, {'@': 235}), 66: (1, {'@': 235}), 67: (1, {'@': 235}), 69: (1, {'@': 235}), 70: (1, {'@': 235}), 71: (1, {'@': 235}), 72: (1, {'@': 235}), 73: (1, {'@': 235}), 38: (1, {'@': 235}), 39: (1, {'@': 235}), 74: (1, {'@': 235}), 75: (1, {'@': 235}), 52: (1, {'@': 235}), 76: (1, {'@': 235}), 53: (1, {'@': 235}), 78: (1, {'@': 235}), 1: (1, {'@': 235}), 43: (1, {'@': 235}), 79: (1, {'@': 235}), 80: (1, {'@': 235}), 81: (1, {'@': 235}), 24: (1, {'@': 235}), 82: (1, {'@': 235}), 48: (1, {'@': 235}), 51: (1, {'@': 235}), 50: (1, {'@': 235})}, 338: {2: (0, 156), 3: (0, 166), 4: (0, 45), 5: (0, 139), 6: (0, 11), 7: (0, 154), 8: (0, 19), 1: (0, 176), 9: (0, 142), 11: (0, 140), 12: (0, 32), 0: (0, 144), 10: (0, 57), 13: (0, 66), 14: (0, 399), 15: (0, 136), 16: (0, 147)}, 339: {2: (0, 156), 3: (0, 166), 4: (0, 45), 5: (0, 139), 6: (0, 11), 7: (0, 154), 8: (0, 19), 1: (0, 176), 9: (0, 142), 10: (0, 161), 11: (0, 140), 0: (0, 144), 12: (0, 32), 17: (0, 386), 13: (0, 66), 14: (0, 399), 15: (0, 136), 16: (0, 147)}, 340: {11: (0, 227), 13: (0, 66)}, 341: {41: (0, 344), 129: (0, 100), 51: (0, 107), 48: (0, 279)}, 342: {33: (1, {'@': 236}), 40: (1, {'@': 236}), 46: (1, {'@': 236}), 84: (1, {'@': 236}), 47: (1, {'@': 236}), 41: (1, {'@': 236}), 42: (1, {'@': 236}), 65: (1, {'@': 236}), 48: (1, {'@': 236}), 49: (1, {'@': 236}), 68: (1, {'@': 236}), 44: (1, {'@': 236}), 50: (1, {'@': 236}), 45: (1, {'@': 236}), 51: (1, {'@': 236}), 38: (1, {'@': 236}), 39: (1, {'@': 236}), 52: (1, {'@': 236}), 53: (1, {'@': 236}), 54: (1, {'@': 236}), 55: (1, {'@': 236}), 43: (1, {'@': 236}), 56: (1, {'@': 236}), 24: (1, {'@': 236})}, 343: {48: (0, 187)}, 344: {41: (0, 215)}, 345: {85: (0, 162), 86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 87: (0, 146), 7: (0, 154), 88: (0, 152), 10: (0, 161), 11: (0, 140), 9: (0, 142), 0: (0, 144), 89: (0, 153), 90: (0, 155), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 45: (0, 411), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 38: (0, 73), 4: (0, 45), 43: (0, 22), 41: (0, 28), 8: (0, 19), 95: (0, 61), 6: (0, 11), 1: (0, 176), 12: (0, 32), 96: (0, 0), 42: (0, 3), 20: (0, 59), 13: (0, 66), 24: (0, 145), 40: (0, 141), 97: (0, 366), 16: (0, 147)}, 346: {51: (1, {'@': 237}), 48: (1, {'@': 237})}, 347: {40: (0, 300), 130: (0, 311), 67: (0, 318), 39: (0, 321), 43: (0, 283), 72: (0, 312), 33: (0, 295), 73: (0, 306), 131: (0, 288), 82: (0, 286), 132: (0, 298), 57: (1, {'@': 238}), 38: (1, {'@': 238}), 58: (1, {'@': 238}), 74: (1, {'@': 238}), 59: (1, {'@': 238}), 60: (1, {'@': 238}), 46: (1, {'@': 238}), 61: (1, {'@': 238}), 75: (1, {'@': 238}), 52: (1, {'@': 238}), 76: (1, {'@': 238}), 62: (1, {'@': 238}), 63: (1, {'@': 238}), 53: (1, {'@': 238}), 64: (1, {'@': 238}), 42: (1, {'@': 238}), 66: (1, {'@': 238}), 78: (1, {'@': 238}), 1: (1, {'@': 238}), 69: (1, {'@': 238}), 70: (1, {'@': 238}), 79: (1, {'@': 238}), 80: (1, {'@': 238}), 81: (1, {'@': 238}), 71: (1, {'@': 238})}, 348: {47: (1, {'@': 239}), 53: (1, {'@': 239}), 54: (1, {'@': 239}), 48: (1, {'@': 239}), 55: (1, {'@': 239}), 49: (1, {'@': 239}), 46: (1, {'@': 239}), 56: (1, {'@': 239}), 50: (1, {'@': 239}), 52: (1, {'@': 239}), 51: (1, {'@': 239})}, 349: {53: (0, 272)}, 350: {2: (0, 156), 3: (0, 166), 4: (0, 45), 5: (0, 139), 6: (0, 11), 7: (0, 154), 8: (0, 19), 1: (0, 176), 9: (0, 142), 10: (0, 161), 11: (0, 140), 0: (0, 144), 12: (0, 32), 17: (0, 125), 86: (0, 328), 13: (0, 66), 14: (0, 399), 15: (0, 136), 16: (0, 147)}, 351: {5: (0, 210), 53: (1, {'@': 240}), 48: (1, {'@': 240}), 50: (1, {'@': 240})}, 352: {85: (0, 162), 86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 87: (0, 146), 7: (0, 154), 88: (0, 152), 10: (0, 161), 11: (0, 140), 9: (0, 142), 0: (0, 144), 89: (0, 153), 90: (0, 155), 97: (0, 52), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 45: (0, 411), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 38: (0, 73), 4: (0, 45), 43: (0, 22), 41: (0, 28), 8: (0, 19), 95: (0, 61), 6: (0, 11), 1: (0, 176), 12: (0, 32), 96: (0, 0), 42: (0, 3), 20: (0, 59), 13: (0, 66), 24: (0, 145), 40: (0, 141), 16: (0, 147), 47: (1, {'@': 241}), 53: (1, {'@': 241}), 54: (1, {'@': 241}), 48: (1, {'@': 241}), 55: (1, {'@': 241}), 49: (1, {'@': 241}), 46: (1, {'@': 241}), 56: (1, {'@': 241}), 50: (1, {'@': 241}), 52: (1, {'@': 241}), 51: (1, {'@': 241})}, 353: {57: (0, 14), 38: (0, 2), 42: (0, 5), 58: (1, {'@': 242}), 59: (1, {'@': 242}), 60: (1, {'@': 242}), 46: (1, {'@': 242}), 61: (1, {'@': 242}), 62: (1, {'@': 242}), 63: (1, {'@': 242}), 64: (1, {'@': 242}), 66: (1, {'@': 242}), 69: (1, {'@': 242}), 70: (1, {'@': 242}), 71: (1, {'@': 242}), 74: (1, {'@': 242}), 75: (1, {'@': 242}), 52: (1, {'@': 242}), 76: (1, {'@': 242}), 53: (1, {'@': 242}), 78: (1, {'@': 242}), 1: (1, {'@': 242}), 79: (1, {'@': 242}), 80: (1, {'@': 242}), 81: (1, {'@': 242})}, 354: {2: (0, 156), 3: (0, 387), 4: (0, 45), 5: (0, 139), 6: (0, 11), 7: (0, 154), 8: (0, 19), 1: (0, 176), 9: (0, 142), 11: (0, 140), 12: (0, 32), 0: (0, 144), 13: (0, 66), 14: (0, 399), 15: (0, 136), 16: (0, 147)}, 355: {48: (0, 359)}, 356: {57: (1, {'@': 243}), 58: (1, {'@': 243}), 33: (1, {'@': 243}), 40: (1, {'@': 243}), 59: (1, {'@': 243}), 60: (1, {'@': 243}), 46: (1, {'@': 243}), 61: (1, {'@': 243}), 62: (1, {'@': 243}), 63: (1, {'@': 243}), 64: (1, {'@': 243}), 42: (1, {'@': 243}), 65: (1, {'@': 243}), 66: (1, {'@': 243}), 67: (1, {'@': 243}), 68: (1, {'@': 243}), 69: (1, {'@': 243}), 70: (1, {'@': 243}), 71: (1, {'@': 243}), 72: (1, {'@': 243}), 73: (1, {'@': 243}), 38: (1, {'@': 243}), 39: (1, {'@': 243}), 74: (1, {'@': 243}), 75: (1, {'@': 243}), 52: (1, {'@': 243}), 76: (1, {'@': 243}), 53: (1, {'@': 243}), 77: (1, {'@': 243}), 78: (1, {'@': 243}), 1: (1, {'@': 243}), 43: (1, {'@': 243}), 79: (1, {'@': 243}), 80: (1, {'@': 243}), 81: (1, {'@': 243}), 24: (1, {'@': 243}), 82: (1, {'@': 243}), 48: (1, {'@': 243}), 50: (1, {'@': 243}), 51: (1, {'@': 243})}, 357: {85: (0, 162), 86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 87: (0, 146), 7: (0, 154), 88: (0, 152), 10: (0, 161), 11: (0, 140), 9: (0, 142), 0: (0, 144), 89: (0, 153), 90: (0, 155), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 45: (0, 411), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 38: (0, 73), 4: (0, 45), 97: (0, 58), 43: (0, 22), 41: (0, 28), 8: (0, 19), 95: (0, 61), 6: (0, 11), 1: (0, 176), 12: (0, 32), 96: (0, 0), 42: (0, 3), 20: (0, 59), 13: (0, 66), 24: (0, 145), 40: (0, 141), 16: (0, 147)}, 358: {54: (0, 43)}, 359: {9: (0, 179), 133: (0, 207)}, 360: {0: (0, 307), 29: (0, 303), 30: (0, 281), 19: (0, 394), 7: (0, 154), 1: (0, 176), 34: (0, 256), 23: (0, 337), 24: (0, 313), 50: (0, 204), 35: (0, 282), 5: (0, 194), 37: (0, 301), 8: (0, 369)}, 361: {1: (0, 176), 0: (0, 195)}, 362: {26: (0, 270), 18: (0, 353), 19: (0, 394), 7: (0, 154), 20: (0, 315), 11: (0, 293), 21: (0, 317), 22: (0, 347), 23: (0, 337), 24: (0, 313), 25: (0, 290), 0: (0, 4), 27: (0, 392), 6: (0, 309), 8: (0, 369), 28: (0, 319), 29: (0, 303), 30: (0, 281), 31: (0, 299), 32: (0, 297), 1: (0, 176), 16: (0, 308), 13: (0, 66), 33: (0, 292), 34: (0, 316), 35: (0, 282), 5: (0, 285), 36: (0, 314), 37: (0, 301)}, 363: {0: (0, 351), 1: (0, 176)}, 364: {9: (1, {'@': 244}), 33: (1, {'@': 244}), 83: (1, {'@': 244}), 40: (1, {'@': 244}), 46: (1, {'@': 244}), 6: (1, {'@': 244}), 13: (1, {'@': 244}), 84: (1, {'@': 244}), 47: (1, {'@': 244}), 41: (1, {'@': 244}), 42: (1, {'@': 244}), 65: (1, {'@': 244}), 48: (1, {'@': 244}), 49: (1, {'@': 244}), 68: (1, {'@': 244}), 44: (1, {'@': 244}), 5: (1, {'@': 244}), 50: (1, {'@': 244}), 2: (1, {'@': 244}), 45: (1, {'@': 244}), 51: (1, {'@': 244}), 73: (1, {'@': 244}), 38: (1, {'@': 244}), 39: (1, {'@': 244}), 52: (1, {'@': 244}), 53: (1, {'@': 244}), 54: (1, {'@': 244}), 7: (1, {'@': 244}), 55: (1, {'@': 244}), 1: (1, {'@': 244}), 43: (1, {'@': 244}), 16: (1, {'@': 244}), 56: (1, {'@': 244}), 24: (1, {'@': 244}), 64: (1, {'@': 244})}, 365: {86: (0, 168), 3: (0, 166), 5: (0, 139), 7: (0, 154), 9: (0, 142), 10: (0, 161), 11: (0, 140), 95: (0, 82), 0: (0, 144), 2: (0, 156), 14: (0, 399), 17: (0, 125), 15: (0, 136), 4: (0, 45), 6: (0, 11), 8: (0, 19), 1: (0, 176), 12: (0, 32), 13: (0, 66), 16: (0, 147)}, 366: {47: (1, {'@': 245}), 53: (1, {'@': 245}), 54: (1, {'@': 245}), 48: (1, {'@': 245}), 55: (1, {'@': 245}), 49: (1, {'@': 245}), 46: (1, {'@': 245}), 56: (1, {'@': 245}), 50: (1, {'@': 245}), 52: (1, {'@': 245}), 51: (1, {'@': 245})}, 367: {40: (0, 141), 43: (0, 22), 93: (0, 29), 44: (0, 164), 41: (0, 28), 88: (0, 152), 33: (0, 415), 45: (0, 411), 39: (0, 123), 42: (0, 3), 38: (0, 73), 90: (0, 155), 47: (1, {'@': 246}), 53: (1, {'@': 246}), 54: (1, {'@': 246}), 48: (1, {'@': 246}), 55: (1, {'@': 246}), 49: (1, {'@': 246}), 46: (1, {'@': 246}), 56: (1, {'@': 246}), 50: (1, {'@': 246}), 52: (1, {'@': 246}), 51: (1, {'@': 246}), 84: (1, {'@': 246})}, 368: {86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 7: (0, 154), 11: (0, 140), 0: (0, 144), 89: (0, 153), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 97: (0, 55), 4: (0, 45), 8: (0, 19), 95: (0, 61), 12: (0, 32), 96: (0, 0), 42: (0, 3), 13: (0, 66), 88: (0, 152), 53: (0, 53), 85: (0, 162), 87: (0, 146), 10: (0, 161), 9: (0, 142), 90: (0, 155), 45: (0, 411), 38: (0, 73), 43: (0, 22), 41: (0, 28), 6: (0, 11), 1: (0, 176), 20: (0, 59), 24: (0, 145), 40: (0, 141), 16: (0, 147)}, 369: {57: (1, {'@': 247}), 58: (1, {'@': 247}), 33: (1, {'@': 247}), 40: (1, {'@': 247}), 59: (1, {'@': 247}), 60: (1, {'@': 247}), 46: (1, {'@': 247}), 61: (1, {'@': 247}), 62: (1, {'@': 247}), 63: (1, {'@': 247}), 64: (1, {'@': 247}), 42: (1, {'@': 247}), 65: (1, {'@': 247}), 66: (1, {'@': 247}), 67: (1, {'@': 247}), 68: (1, {'@': 247}), 69: (1, {'@': 247}), 70: (1, {'@': 247}), 71: (1, {'@': 247}), 72: (1, {'@': 247}), 73: (1, {'@': 247}), 38: (1, {'@': 247}), 39: (1, {'@': 247}), 74: (1, {'@': 247}), 75: (1, {'@': 247}), 52: (1, {'@': 247}), 76: (1, {'@': 247}), 53: (1, {'@': 247}), 77: (1, {'@': 247}), 78: (1, {'@': 247}), 1: (1, {'@': 247}), 43: (1, {'@': 247}), 79: (1, {'@': 247}), 80: (1, {'@': 247}), 81: (1, {'@': 247}), 24: (1, {'@': 247}), 82: (1, {'@': 247}), 48: (1, {'@': 247}), 50: (1, {'@': 247}), 51: (1, {'@': 247})}, 370: {18: (0, 353), 19: (0, 394), 7: (0, 154), 20: (0, 315), 11: (0, 293), 21: (0, 317), 22: (0, 347), 23: (0, 337), 24: (0, 313), 25: (0, 290), 0: (0, 4), 27: (0, 392), 6: (0, 309), 8: (0, 369), 26: (0, 16), 28: (0, 319), 29: (0, 303), 30: (0, 281), 31: (0, 299), 32: (0, 297), 1: (0, 176), 16: (0, 308), 13: (0, 66), 33: (0, 292), 34: (0, 316), 35: (0, 282), 5: (0, 285), 36: (0, 314), 37: (0, 301)}, 371: {2: (0, 72), 77: (0, 163), 5: (0, 46), 57: (1, {'@': 70}), 38: (1, {'@': 70}), 39: (1, {'@': 70}), 33: (1, {'@': 70}), 74: (1, {'@': 70}), 40: (1, {'@': 70}), 64: (1, {'@': 70}), 42: (1, {'@': 70}), 65: (1, {'@': 70}), 67: (1, {'@': 70}), 68: (1, {'@': 70}), 43: (1, {'@': 70}), 82: (1, {'@': 70}), 24: (1, {'@': 70}), 72: (1, {'@': 70}), 73: (1, {'@': 70})}, 372: {9: (0, 142), 12: (0, 86)}, 373: {0: (0, 148), 110: (0, 379), 1: (0, 176)}, 374: {51: (0, 263)}, 375: {85: (0, 162), 86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 87: (0, 146), 7: (0, 154), 88: (0, 152), 10: (0, 161), 11: (0, 140), 9: (0, 142), 0: (0, 144), 89: (0, 153), 90: (0, 155), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 45: (0, 411), 17: (0, 125), 39: (0, 123), 15: (0, 136), 94: (0, 24), 38: (0, 73), 4: (0, 45), 43: (0, 22), 41: (0, 28), 8: (0, 19), 97: (0, 245), 95: (0, 61), 6: (0, 11), 1: (0, 176), 12: (0, 32), 96: (0, 0), 42: (0, 3), 20: (0, 59), 13: (0, 66), 24: (0, 145), 40: (0, 141), 16: (0, 147)}, 376: {64: (0, 304), 58: (1, {'@': 248}), 59: (1, {'@': 248}), 60: (1, {'@': 248}), 46: (1, {'@': 248}), 61: (1, {'@': 248}), 62: (1, {'@': 248}), 63: (1, {'@': 248}), 66: (1, {'@': 248}), 69: (1, {'@': 248}), 70: (1, {'@': 248}), 71: (1, {'@': 248}), 74: (1, {'@': 248}), 75: (1, {'@': 248}), 52: (1, {'@': 248}), 76: (1, {'@': 248}), 53: (1, {'@': 248}), 78: (1, {'@': 248}), 1: (1, {'@': 248}), 79: (1, {'@': 248}), 80: (1, {'@': 248}), 81: (1, {'@': 248})}, 377: {11: (0, 329), 13: (0, 66)}, 378: {33: (1, {'@': 249}), 40: (1, {'@': 249}), 46: (1, {'@': 249}), 84: (1, {'@': 249}), 47: (1, {'@': 249}), 41: (1, {'@': 249}), 42: (1, {'@': 249}), 48: (1, {'@': 249}), 49: (1, {'@': 249}), 44: (1, {'@': 249}), 50: (1, {'@': 249}), 51: (1, {'@': 249}), 45: (1, {'@': 249}), 38: (1, {'@': 249}), 39: (1, {'@': 249}), 52: (1, {'@': 249}), 53: (1, {'@': 249}), 54: (1, {'@': 249}), 55: (1, {'@': 249}), 43: (1, {'@': 249}), 56: (1, {'@': 249}), 24: (1, {'@': 249})}, 379: {53: (0, 235)}, 380: {35: (0, 13), 0: (0, 307), 19: (0, 394), 7: (0, 154), 1: (0, 176), 5: (0, 194), 37: (0, 301), 8: (0, 369), 24: (0, 313)}, 381: {38: (1, {'@': 250}), 41: (1, {'@': 250}), 39: (1, {'@': 250}), 42: (1, {'@': 250}), 9: (1, {'@': 250}), 7: (1, {'@': 250}), 33: (1, {'@': 250}), 40: (1, {'@': 250}), 1: (1, {'@': 250}), 43: (1, {'@': 250}), 44: (1, {'@': 250}), 6: (1, {'@': 250}), 16: (1, {'@': 250}), 5: (1, {'@': 250}), 13: (1, {'@': 250}), 2: (1, {'@': 250}), 45: (1, {'@': 250}), 24: (1, {'@': 250}), 46: (1, {'@': 250}), 52: (1, {'@': 250}), 51: (1, {'@': 250}), 47: (1, {'@': 250}), 53: (1, {'@': 250}), 54: (1, {'@': 250}), 48: (1, {'@': 250}), 55: (1, {'@': 250}), 49: (1, {'@': 250}), 56: (1, {'@': 250}), 50: (1, {'@': 250})}, 382: {48: (0, 385)}, 383: {57: (1, {'@': 251}), 58: (1, {'@': 251}), 33: (1, {'@': 251}), 59: (1, {'@': 251}), 60: (1, {'@': 251}), 40: (1, {'@': 251}), 46: (1, {'@': 251}), 61: (1, {'@': 251}), 62: (1, {'@': 251}), 63: (1, {'@': 251}), 64: (1, {'@': 251}), 42: (1, {'@': 251}), 65: (1, {'@': 251}), 48: (1, {'@': 251}), 66: (1, {'@': 251}), 67: (1, {'@': 251}), 68: (1, {'@': 251}), 69: (1, {'@': 251}), 70: (1, {'@': 251}), 50: (1, {'@': 251}), 51: (1, {'@': 251}), 71: (1, {'@': 251}), 72: (1, {'@': 251}), 73: (1, {'@': 251}), 38: (1, {'@': 251}), 39: (1, {'@': 251}), 74: (1, {'@': 251}), 75: (1, {'@': 251}), 52: (1, {'@': 251}), 76: (1, {'@': 251}), 53: (1, {'@': 251}), 78: (1, {'@': 251}), 1: (1, {'@': 251}), 43: (1, {'@': 251}), 79: (1, {'@': 251}), 80: (1, {'@': 251}), 81: (1, {'@': 251}), 24: (1, {'@': 251}), 82: (1, {'@': 251})}, 384: {0: (0, 265), 118: (0, 343), 1: (0, 176)}, 385: {0: (0, 265), 118: (0, 189), 1: (0, 176)}, 386: {33: (1, {'@': 252}), 40: (1, {'@': 252}), 46: (1, {'@': 252}), 84: (1, {'@': 252}), 47: (1, {'@': 252}), 41: (1, {'@': 252}), 42: (1, {'@': 252}), 65: (1, {'@': 252}), 48: (1, {'@': 252}), 49: (1, {'@': 252}), 68: (1, {'@': 252}), 44: (1, {'@': 252}), 50: (1, {'@': 252}), 45: (1, {'@': 252}), 51: (1, {'@': 252}), 38: (1, {'@': 252}), 39: (1, {'@': 252}), 52: (1, {'@': 252}), 53: (1, {'@': 252}), 54: (1, {'@': 252}), 55: (1, {'@': 252}), 43: (1, {'@': 252}), 56: (1, {'@': 252}), 24: (1, {'@': 252})}, 387: {2: (0, 156), 4: (0, 45), 5: (0, 139), 6: (0, 11), 7: (0, 154), 8: (0, 19), 1: (0, 176), 9: (0, 142), 11: (0, 140), 12: (0, 32), 0: (0, 144), 13: (0, 66), 15: (0, 259), 14: (0, 399), 16: (0, 147), 33: (1, {'@': 253}), 83: (1, {'@': 253}), 40: (1, {'@': 253}), 46: (1, {'@': 253}), 84: (1, {'@': 253}), 47: (1, {'@': 253}), 41: (1, {'@': 253}), 42: (1, {'@': 253}), 65: (1, {'@': 253}), 48: (1, {'@': 253}), 49: (1, {'@': 253}), 68: (1, {'@': 253}), 44: (1, {'@': 253}), 50: (1, {'@': 253}), 45: (1, {'@': 253}), 51: (1, {'@': 253}), 73: (1, {'@': 253}), 38: (1, {'@': 253}), 39: (1, {'@': 253}), 52: (1, {'@': 253}), 53: (1, {'@': 253}), 54: (1, {'@': 253}), 55: (1, {'@': 253}), 43: (1, {'@': 253}), 56: (1, {'@': 253}), 24: (1, {'@': 253})}, 388: {48: (0, 361)}, 389: {85: (0, 162), 86: (0, 168), 3: (0, 166), 44: (0, 164), 5: (0, 139), 87: (0, 146), 7: (0, 154), 88: (0, 152), 10: (0, 161), 11: (0, 140), 9: (0, 142), 0: (0, 144), 89: (0, 153), 90: (0, 155), 91: (0, 159), 2: (0, 156), 92: (0, 158), 14: (0, 399), 33: (0, 415), 93: (0, 402), 45: (0, 411), 17: (0, 125), 39: (0, 123), 15: (0, 136), 97: (0, 105), 94: (0, 24), 38: (0, 73), 4: (0, 45), 43: (0, 22), 41: (0, 28), 8: (0, 19), 95: (0, 61), 6: (0, 11), 1: (0, 176), 12: (0, 32), 96: (0, 0), 42: (0, 3), 20: (0, 59), 13: (0, 66), 24: (0, 145), 40: (0, 141), 16: (0, 147)}, 390: {57: (1, {'@': 254}), 38: (1, {'@': 254}), 58: (1, {'@': 254}), 74: (1, {'@': 254}), 59: (1, {'@': 254}), 60: (1, {'@': 254}), 46: (1, {'@': 254}), 61: (1, {'@': 254}), 75: (1, {'@': 254}), 52: (1, {'@': 254}), 76: (1, {'@': 254}), 62: (1, {'@': 254}), 63: (1, {'@': 254}), 53: (1, {'@': 254}), 64: (1, {'@': 254}), 42: (1, {'@': 254}), 66: (1, {'@': 254}), 78: (1, {'@': 254}), 1: (1, {'@': 254}), 69: (1, {'@': 254}), 70: (1, {'@': 254}), 79: (1, {'@': 254}), 80: (1, {'@': 254}), 81: (1, {'@': 254}), 71: (1, {'@': 254})}, 391: {41: (0, 344), 48: (0, 252)}, 392: {1: (1, {'@': 255})}, 393: {9: (1, {'@': 256}), 33: (1, {'@': 256}), 83: (1, {'@': 256}), 40: (1, {'@': 256}), 46: (1, {'@': 256}), 6: (1, {'@': 256}), 13: (1, {'@': 256}), 84: (1, {'@': 256}), 47: (1, {'@': 256}), 41: (1, {'@': 256}), 42: (1, {'@': 256}), 65: (1, {'@': 256}), 48: (1, {'@': 256}), 49: (1, {'@': 256}), 68: (1, {'@': 256}), 44: (1, {'@': 256}), 5: (1, {'@': 256}), 50: (1, {'@': 256}), 2: (1, {'@': 256}), 45: (1, {'@': 256}), 51: (1, {'@': 256}), 73: (1, {'@': 256}), 38: (1, {'@': 256}), 39: (1, {'@': 256}), 52: (1, {'@': 256}), 53: (1, {'@': 256}), 54: (1, {'@': 256}), 7: (1, {'@': 256}), 55: (1, {'@': 256}), 1: (1, {'@': 256}), 43: (1, {'@': 256}), 16: (1, {'@': 256}), 56: (1, {'@': 256}), 24: (1, {'@': 256}), 64: (1, {'@': 256})}, 394: {73: (0, 20), 77: (0, 9), 134: (0, 67), 57: (1, {'@': 257}), 58: (1, {'@': 257}), 33: (1, {'@': 257}), 40: (1, {'@': 257}), 59: (1, {'@': 257}), 60: (1, {'@': 257}), 46: (1, {'@': 257}), 61: (1, {'@': 257}), 62: (1, {'@': 257}), 63: (1, {'@': 257}), 64: (1, {'@': 257}), 42: (1, {'@': 257}), 65: (1, {'@': 257}), 66: (1, {'@': 257}), 67: (1, {'@': 257}), 68: (1, {'@': 257}), 69: (1, {'@': 257}), 70: (1, {'@': 257}), 71: (1, {'@': 257}), 72: (1, {'@': 257}), 38: (1, {'@': 257}), 39: (1, {'@': 257}), 74: (1, {'@': 257}), 75: (1, {'@': 257}), 52: (1, {'@': 257}), 76: (1, {'@': 257}), 53: (1, {'@': 257}), 78: (1, {'@': 257}), 1: (1, {'@': 257}), 43: (1, {'@': 257}), 79: (1, {'@': 257}), 80: (1, {'@': 257}), 81: (1, {'@': 257}), 24: (1, {'@': 257}), 82: (1, {'@': 257}), 48: (1, {'@': 257}), 50: (1, {'@': 257}), 51: (1, {'@': 257})}, 395: {0: (0, 251), 1: (0, 176)}, 396: {18: (0, 353), 19: (0, 394), 7: (0, 154), 20: (0, 315), 11: (0, 293), 21: (0, 317), 22: (0, 347), 23: (0, 337), 24: (0, 313), 25: (0, 290), 0: (0, 4), 27: (0, 392), 6: (0, 309), 8: (0, 369), 28: (0, 319), 29: (0, 303), 30: (0, 281), 26: (0, 27), 31: (0, 299), 32: (0, 297), 1: (0, 176), 16: (0, 308), 13: (0, 66), 33: (0, 292), 34: (0, 316), 35: (0, 282), 5: (0, 285), 36: (0, 314), 37: (0, 301)}, 397: {53: (1, {'@': 258})}, 398: {53: (0, 405)}, 399: {9: (1, {'@': 259}), 33: (1, {'@': 259}), 83: (1, {'@': 259}), 40: (1, {'@': 259}), 46: (1, {'@': 259}), 6: (1, {'@': 259}), 13: (1, {'@': 259}), 84: (1, {'@': 259}), 47: (1, {'@': 259}), 41: (1, {'@': 259}), 42: (1, {'@': 259}), 65: (1, {'@': 259}), 48: (1, {'@': 259}), 49: (1, {'@': 259}), 68: (1, {'@': 259}), 44: (1, {'@': 259}), 5: (1, {'@': 259}), 50: (1, {'@': 259}), 2: (1, {'@': 259}), 45: (1, {'@': 259}), 51: (1, {'@': 259}), 73: (1, {'@': 259}), 38: (1, {'@': 259}), 39: (1, {'@': 259}), 52: (1, {'@': 259}), 53: (1, {'@': 259}), 54: (1, {'@': 259}), 7: (1, {'@': 259}), 55: (1, {'@': 259}), 1: (1, {'@': 259}), 43: (1, {'@': 259}), 16: (1, {'@': 259}), 56: (1, {'@': 259}), 24: (1, {'@': 259}), 64: (1, {'@': 259})}, 400: {58: (1, {'@': 260}), 59: (1, {'@': 260}), 60: (1, {'@': 260}), 61: (1, {'@': 260}), 75: (1, {'@': 260}), 76: (1, {'@': 260}), 62: (1, {'@': 260}), 63: (1, {'@': 260}), 66: (1, {'@': 260}), 78: (1, {'@': 260}), 1: (1, {'@': 260}), 79: (1, {'@': 260}), 70: (1, {'@': 260}), 80: (1, {'@': 260}), 69: (1, {'@': 260}), 81: (1, {'@': 260}), 71: (1, {'@': 260}), 74: (1, {'@': 260})}, 401: {57: (1, {'@': 261}), 58: (1, {'@': 261}), 33: (1, {'@': 261}), 40: (1, {'@': 261}), 59: (1, {'@': 261}), 60: (1, {'@': 261}), 46: (1, {'@': 261}), 61: (1, {'@': 261}), 62: (1, {'@': 261}), 63: (1, {'@': 261}), 64: (1, {'@': 261}), 42: (1, {'@': 261}), 66: (1, {'@': 261}), 67: (1, {'@': 261}), 69: (1, {'@': 261}), 70: (1, {'@': 261}), 71: (1, {'@': 261}), 72: (1, {'@': 261}), 73: (1, {'@': 261}), 38: (1, {'@': 261}), 39: (1, {'@': 261}), 74: (1, {'@': 261}), 75: (1, {'@': 261}), 52: (1, {'@': 261}), 76: (1, {'@': 261}), 53: (1, {'@': 261}), 78: (1, {'@': 261}), 1: (1, {'@': 261}), 43: (1, {'@': 261}), 79: (1, {'@': 261}), 80: (1, {'@': 261}), 81: (1, {'@': 261}), 82: (1, {'@': 261}), 48: (1, {'@': 261})}, 402: {86: (0, 168), 3: (0, 166), 5: (0, 139), 7: (0, 154), 9: (0, 142), 10: (0, 161), 11: (0, 140), 0: (0, 144), 92: (0, 62), 89: (0, 153), 2: (0, 156), 14: (0, 399), 17: (0, 125), 15: (0, 136), 94: (0, 24), 4: (0, 45), 6: (0, 11), 8: (0, 19), 95: (0, 61), 1: (0, 176), 12: (0, 32), 13: (0, 66), 24: (0, 145), 16: (0, 147)}, 403: {58: (1, {'@': 262}), 59: (1, {'@': 262}), 60: (1, {'@': 262}), 61: (1, {'@': 262}), 75: (1, {'@': 262}), 76: (1, {'@': 262}), 62: (1, {'@': 262}), 63: (1, {'@': 262}), 66: (1, {'@': 262}), 78: (1, {'@': 262}), 1: (1, {'@': 262}), 79: (1, {'@': 262}), 70: (1, {'@': 262}), 80: (1, {'@': 262}), 69: (1, {'@': 262}), 81: (1, {'@': 262}), 71: (1, {'@': 262}), 74: (1, {'@': 262})}, 404: {58: (1, {'@': 263}), 59: (1, {'@': 263}), 60: (1, {'@': 263}), 61: (1, {'@': 263}), 75: (1, {'@': 263}), 76: (1, {'@': 263}), 62: (1, {'@': 263}), 63: (1, {'@': 263}), 66: (1, {'@': 263}), 78: (1, {'@': 263}), 1: (1, {'@': 263}), 79: (1, {'@': 263}), 70: (1, {'@': 263}), 80: (1, {'@': 263}), 69: (1, {'@': 263}), 81: (1, {'@': 263}), 71: (1, {'@': 263}), 74: (1, {'@': 263})}, 405: {74: (1, {'@': 264}), 48: (1, {'@': 264})}, 406: {53: (0, 91)}, 407: {58: (1, {'@': 265}), 59: (1, {'@': 265}), 60: (1, {'@': 265}), 61: (1, {'@': 265}), 75: (1, {'@': 265}), 76: (1, {'@': 265}), 62: (1, {'@': 265}), 63: (1, {'@': 265}), 66: (1, {'@': 265}), 78: (1, {'@': 265}), 1: (1, {'@': 265}), 79: (1, {'@': 265}), 70: (1, {'@': 265}), 80: (1, {'@': 265}), 69: (1, {'@': 265}), 81: (1, {'@': 265}), 71: (1, {'@': 265}), 74: (1, {'@': 265})}, 408: {41: (0, 344), 51: (1, {'@': 266}), 48: (1, {'@': 266})}, 409: {58: (1, {'@': 267}), 59: (1, {'@': 267}), 60: (1, {'@': 267}), 61: (1, {'@': 267}), 75: (1, {'@': 267}), 76: (1, {'@': 267}), 62: (1, {'@': 267}), 63: (1, {'@': 267}), 66: (1, {'@': 267}), 78: (1, {'@': 267}), 1: (1, {'@': 267}), 79: (1, {'@': 267}), 70: (1, {'@': 267}), 80: (1, {'@': 267}), 69: (1, {'@': 267}), 81: (1, {'@': 267}), 71: (1, {'@': 267}), 74: (1, {'@': 267})}, 410: {0: (0, 4), 19: (0, 394), 30: (0, 281), 29: (0, 303), 22: (0, 60), 7: (0, 154), 1: (0, 176), 23: (0, 337), 101: (0, 277), 24: (0, 313), 34: (0, 316), 35: (0, 282), 102: (0, 398), 5: (0, 194), 37: (0, 301), 8: (0, 369), 53: (1, {'@': 95})}, 411: {38: (1, {'@': 268}), 39: (1, {'@': 268}), 9: (1, {'@': 268}), 33: (1, {'@': 268}), 40: (1, {'@': 268}), 6: (1, {'@': 268}), 13: (1, {'@': 268}), 41: (1, {'@': 268}), 42: (1, {'@': 268}), 7: (1, {'@': 268}), 1: (1, {'@': 268}), 43: (1, {'@': 268}), 44: (1, {'@': 268}), 16: (1, {'@': 268}), 5: (1, {'@': 268}), 2: (1, {'@': 268}), 45: (1, {'@': 268}), 24: (1, {'@': 268}), 46: (1, {'@': 268}), 47: (1, {'@': 268}), 48: (1, {'@': 268}), 49: (1, {'@': 268}), 50: (1, {'@': 268}), 51: (1, {'@': 268}), 52: (1, {'@': 268}), 53: (1, {'@': 268}), 54: (1, {'@': 268}), 55: (1, {'@': 268}), 56: (1, {'@': 268})}, 412: {53: (0, 94)}, 413: {51: (0, 401)}, 414: {53: (0, 79)}, 415: {38: (1, {'@': 269}), 39: (1, {'@': 269}), 9: (1, {'@': 269}), 33: (1, {'@': 269}), 40: (1, {'@': 269}), 6: (1, {'@': 269}), 13: (1, {'@': 269}), 41: (1, {'@': 269}), 42: (1, {'@': 269}), 7: (1, {'@': 269}), 1: (1, {'@': 269}), 43: (1, {'@': 269}), 44: (1, {'@': 269}), 16: (1, {'@': 269}), 5: (1, {'@': 269}), 2: (1, {'@': 269}), 45: (1, {'@': 269}), 24: (1, {'@': 269}), 46: (1, {'@': 269}), 47: (1, {'@': 269}), 48: (1, {'@': 269}), 49: (1, {'@': 269}), 50: (1, {'@': 269}), 51: (1, {'@': 269}), 52: (1, {'@': 269}), 53: (1, {'@': 269}), 54: (1, {'@': 269}), 55: (1, {'@': 269}), 56: (1, {'@': 269})}, 416: {41: (0, 104)}, 417: {135: (0, 117), 74: (0, 138), 48: (0, 132)}, 418: {74: (1, {'@': 270}), 48: (1, {'@': 270})}, 419: {0: (0, 265), 1: (0, 176), 118: (0, 88)}, 420: {50: (0, 75)}}, 'start_states': {'start': 64}, 'end_states': {'start': 198}}, 'lexer_conf': {'tokens': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}], 'ignore': ['WS', 'COMMENT'], '__type__': 'LexerConf'}, 'start': ['start'], '__type__': 'LALR_ContextualLexer'}, 'rules': [{'@': 175}, {'@': 107}, {'@': 185}, {'@': 262}, {'@': 267}, {'@': 265}, {'@': 232}, {'@': 124}, {'@': 263}, {'@': 187}, {'@': 173}, {'@': 260}, {'@': 122}, {'@': 118}, {'@': 184}, {'@': 201}, {'@': 207}, {'@': 134}, {'@': 116}, {'@': 168}, {'@': 150}, {'@': 245}, {'@': 137}, {'@': 144}, {'@': 177}, {'@': 241}, {'@': 111}, {'@': 73}, {'@': 228}, {'@': 162}, {'@': 226}, {'@': 106}, {'@': 189}, {'@': 108}, {'@': 74}, {'@': 90}, {'@': 136}, {'@': 131}, {'@': 233}, {'@': 132}, {'@': 133}, {'@': 200}, {'@': 246}, {'@': 81}, {'@': 158}, {'@': 268}, {'@': 140}, {'@': 79}, {'@': 153}, {'@': 85}, {'@': 69}, {'@': 114}, {'@': 269}, {'@': 164}, {'@': 89}, {'@': 159}, {'@': 83}, {'@': 105}, {'@': 167}, {'@': 166}, {'@': 115}, {'@': 142}, {'@': 231}, {'@': 163}, {'@': 183}, {'@': 165}, {'@': 194}, {'@': 149}, {'@': 154}, {'@': 78}, {'@': 152}, {'@': 75}, {'@': 155}, {'@': 86}, {'@': 88}, {'@': 259}, {'@': 96}, {'@': 212}, {'@': 113}, {'@': 234}, {'@': 92}, {'@': 210}, {'@': 196}, {'@': 244}, {'@': 256}, {'@': 100}, {'@': 182}, {'@': 151}, {'@': 258}, {'@': 264}, {'@': 199}, {'@': 119}, {'@': 147}, {'@': 117}, {'@': 178}, {'@': 198}, {'@': 186}, {'@': 240}, {'@': 126}, {'@': 191}, {'@': 156}, {'@': 242}, {'@': 248}, {'@': 202}, {'@': 77}, {'@': 127}, {'@': 141}, {'@': 130}, {'@': 91}, {'@': 84}, {'@': 71}, {'@': 238}, {'@': 219}, {'@': 218}, {'@': 214}, {'@': 254}, {'@': 222}, {'@': 206}, {'@': 188}, {'@': 195}, {'@': 190}, {'@': 197}, {'@': 204}, {'@': 220}, {'@': 98}, {'@': 261}, {'@': 139}, {'@': 208}, {'@': 225}, {'@': 217}, {'@': 93}, {'@': 235}, {'@': 97}, {'@': 209}, {'@': 110}, {'@': 257}, {'@': 70}, {'@': 247}, {'@': 82}, {'@': 243}, {'@': 216}, {'@': 170}, {'@': 205}, {'@': 95}, {'@': 104}, {'@': 80}, {'@': 148}, {'@': 203}, {'@': 160}, {'@': 169}, {'@': 109}, {'@': 172}, {'@': 174}, {'@': 211}, {'@': 180}, {'@': 223}, {'@': 176}, {'@': 221}, {'@': 213}, {'@': 255}, {'@': 224}, {'@': 215}, {'@': 179}, {'@': 157}, {'@': 143}, {'@': 171}, {'@': 239}, {'@': 99}, {'@': 135}, {'@': 266}, {'@': 193}, {'@': 128}, {'@': 161}, {'@': 250}, {'@': 249}, {'@': 121}, {'@': 229}, {'@': 230}, {'@': 236}, {'@': 252}, {'@': 102}, {'@': 123}, {'@': 72}, {'@': 253}, {'@': 237}, {'@': 103}, {'@': 112}, {'@': 129}, {'@': 138}, {'@': 270}, {'@': 192}, {'@': 145}, {'@': 227}, {'@': 94}, {'@': 181}, {'@': 101}, {'@': 251}, {'@': 76}, {'@': 120}, {'@': 87}, {'@': 125}, {'@': 146}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache_grammar': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': None, 'ambiguity': 'auto', 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'PERCENT', 'pattern': {'value': '%', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 1: {'name': '_DEFEQ', 'pattern': {'value': ':=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 2: {'name': 'EQ', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 3: {'name': 'GT', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 4: {'name': 'LT', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 5: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 6: {'name': '_IS', 'pattern': {'value': '(?:(?:are|is)|\\∈)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 7: {'name': 'PROP_VAL', 'pattern': {'value': '(?:(?i:(?:(?i:sometimes)|(?i:true)))|(?i:false))', 'flags': ['i'], '_width': [4, 9], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 8: {'name': 'COMP', 'pattern': {'value': '(?:(?:(?:\\!|\\~)|\\¬)|not)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 9: {'name': '_IMPLIES', 'pattern': {'value': '(?:(?:\\=\\>|\\⇒)|\\⟹\\ )', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 10: {'name': '_IFF', 'pattern': {'value': '(?:(?:(?:\\<\\=\\>|\\⟺)|\\⇔)|iff)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 11: {'name': 'CONJ', 'pattern': {'value': '(?:(?:(?:\\&|\\/\\\\)|\\∧)|and)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 12: {'name': 'DISJ', 'pattern': {'value': '(?:(?:(?:\\||\\\\\\/)|\\∨)|or)', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 13: {'name': 'VAR', 'pattern': {'value': '(?!(match|with|do|if|then|else|otherwise|iff|is|are|forall|exists|not|or|and|sometimes|true|false)\\b)[a-zA-Z_][a-zA-Z_0-9]*', 'flags': ['i'], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 14: {'name': 'COMMENT', 'pattern': {'value': '\\/\\/[^\n]*', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 15: {'name': 'INT', 'pattern': {'value': '(?:[0-9])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 16: {'name': 'WS', 'pattern': {'value': '(?:[ \t\x0c\r\n])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 17: {'name': 'ESCAPED_STRING', 'pattern': {'value': '\\".*?(?<!\\\\)(\\\\\\\\)*?\\"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 18: {'name': '__ANON_0', 'pattern': {'value': '#save_aut', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 19: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 20: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 21: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 22: {'name': '__ANON_1', 'pattern': {'value': '#save_aut_img', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 23: {'name': '__ANON_2', 'pattern': {'value': '#context', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 24: {'name': '__ANON_3', 'pattern': {'value': '#end_context', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 25: {'name': '__ANON_4', 'pattern': {'value': '#load', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 26: {'name': '__ANON_5', 'pattern': {'value': '#assert_prop', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 27: {'name': '__ANON_6', 'pattern': {'value': '#import', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 28: {'name': '__ANON_7', 'pattern': {'value': '#forget', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 29: {'name': '__ANON_8', 'pattern': {'value': '#type', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 30: {'name': '__ANON_9', 'pattern': {'value': '#shuffle', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 31: {'name': '__ANON_10', 'pattern': {'value': '#shuffle_or', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 32: {'name': 'RESTRICT', 'pattern': {'value': 'Restrict', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 33: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 34: {'name': 'DEFINE', 'pattern': {'value': 'Define', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 35: {'name': 'EXECUTE', 'pattern': {'value': 'Execute', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 36: {'name': 'DISPLAY', 'pattern': {'value': 'Display', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 37: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 38: {'name': 'THEN', 'pattern': {'value': 'then', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 39: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 40: {'name': 'BACKSLASH', 'pattern': {'value': '\\', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 41: {'name': 'LET', 'pattern': {'value': 'let', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 42: {'name': 'BE', 'pattern': {'value': 'be', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 43: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 44: {'name': 'MATCH', 'pattern': {'value': 'match', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 45: {'name': 'WITH', 'pattern': {'value': 'with', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 46: {'name': 'END', 'pattern': {'value': 'end', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 47: {'name': 'SEMICOLON', 'pattern': {'value': ';', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 48: {'name': 'DO', 'pattern': {'value': 'do', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 49: {'name': 'CASE', 'pattern': {'value': 'case', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 50: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 51: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 52: {'name': '__ANON_11', 'pattern': {'value': '[^\x00-ÿ]', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 53: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 54: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 55: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 56: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 57: {'name': 'CIRCUMFLEX', 'pattern': {'value': '^', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 58: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 59: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 60: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 61: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 62: {'name': '__ANON_12', 'pattern': {'value': '≠', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 63: {'name': '__ANON_13', 'pattern': {'value': '≥', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 64: {'name': '__ANON_14', 'pattern': {'value': '≤', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 65: {'name': 'FORALL', 'pattern': {'value': 'forall', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 66: {'name': '__ANON_15', 'pattern': {'value': '∀', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 67: {'name': 'EXISTS', 'pattern': {'value': 'exists', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 68: {'name': '__ANON_16', 'pattern': {'value': '∃', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 69: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 70: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'var_ref', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 71: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 9, 'alias': 'comp', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 72: {'origin': {'name': '__praline_exponent_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 73: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 74: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_match_string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 75: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 76: {'origin': {'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 77: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'if_then_else', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [False, False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_int', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'call_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': 'praline_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}, {'name': '__praline_sub_star_6', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'exists_sym', '__type__': 'NonTerminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'exists', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': '__div_expr_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__div_expr_star_18', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pecan_term', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_match_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'forall_sym', '__type__': 'NonTerminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'forall', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': 'add_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mul_expr', '__type__': 'NonTerminal'}, {'name': '__add_expr_star_16', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': '__sub_expr_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__sub_expr_star_15', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_tuple', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': 'mul_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'div_expr', '__type__': 'NonTerminal'}, {'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'index', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': '__term_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__term_star_2', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': 'praline_tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': '__add_expr_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__add_expr_star_16', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': '__praline_div_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': '__praline_list_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_list_star_11', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': 'arg', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'partial_op_snd', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': 'prog', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_match_int', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': 'string', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ESCAPED_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'escaped_str', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': 'div_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '__div_expr_star_18', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__term_star_2', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': 'pecan_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_pecan_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}, {'name': '__praline_mul_star_8', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXECUTE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_execute', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'def_pred_is', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_10', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': 'directive_shuffle_or', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': 'restriction', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'restrict_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': '__div_expr_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': '__praline_sub_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_sub_star_6', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_9', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': 'directive_shuffle', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': '__praline_div_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_div_star_9', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_4', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'directive_load_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': '__args_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'formal_is_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': '_IFF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'iff', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'conj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'praline_match_prepend', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'praline_match_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEFINE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_def', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': '__match_expr_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '__match_expr_star_3', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'BE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pecan_term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_let_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': '__val_dict_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'index_range', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'disj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': '__term_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_arm', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'praline_let', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': '__varlist_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__varlist_star_14', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': '__args_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__args_star_19', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'def_pred_standard', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'call_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_if', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': 'varlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'def', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': 'operator_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__operator_sym_plus_5', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'operator_sym', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': 'int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'int_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': '__operator_sym_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_11', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': 'praline_exponent', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_exponent', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}, {'name': '__praline_add_star_7', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DISPLAY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_display', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': 'var', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'var_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg', '__type__': 'NonTerminal'}, {'name': '__args_star_19', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': '__term_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__term_plus_1', '__type__': 'NonTerminal'}, {'name': 'match_arm', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': '_ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_7', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'directive_forget', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': '_ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'prog', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': 'le', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_le', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'WITH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__term_plus_1', '__type__': 'NonTerminal'}, {'name': 'END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_match', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'def_pred_is_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'def', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': 'ge', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': '__add_expr_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': '__val_dict_star_13', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': 'praline_exponent', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': '__praline_exponent_star_10', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_exponent', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RESTRICT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'restriction', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pred_definition', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'formal_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'directive_import', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '_ne', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'not_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': 'match_arm', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CASE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_match_arm', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'greater', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': 'varlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '__varlist_star_14', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': '__varlist_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': 'praline_atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_app', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'less', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_list_gen', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'le', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'less_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'formal_var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': 'restriction', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'restrict_is', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'praline_match_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'if_then_else', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'call_is_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'ge', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'greater_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': 'prop_val', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PROP_VAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'prop_val_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': 'arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'sub_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': 'mul_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': '_ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_12', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': 'pecan_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_pecan_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FORALL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'spot_formula', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 215: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_16', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'call', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': 'sub_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'formal_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'formula_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 220: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arith', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': 'le', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_14', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comparison', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 223: {'origin': {'name': 'ge', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_13', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 224: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXISTS', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 225: {'origin': {'name': 'sub_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_expr', '__type__': 'NonTerminal'}, {'name': '__sub_expr_star_15', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'partial_op_fst', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': '__sub_expr_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 229: {'origin': {'name': '__praline_add_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': '__praline_add_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_add_star_7', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exponent', '__type__': 'NonTerminal'}, {'name': '__praline_div_star_9', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'directive_end_context', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 234: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__praline_list_star_11', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': 'add_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': '__praline_mul_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': '__praline_list_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': '__term_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'formal_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__term_star_2', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 243: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_list_gen', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BACKSLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_lambda', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': 'praline_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_operator', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'int_const', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pred', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'implies', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': '__praline_sub_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': '__operator_sym_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__operator_sym_plus_5', '__type__': 'NonTerminal'}, {'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 251: {'origin': {'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': '__praline_mul_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_mul_star_8', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': '__praline_exponent_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_exponent_star_10', '__type__': 'NonTerminal'}, {'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 254: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 255: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_15', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 256: {'origin': {'name': 'praline_tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 257: {'origin': {'name': 'div_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 258: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 259: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_list', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 260: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_8', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'val_dict', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'directive_type', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 261: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'index_range', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 262: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'directive_save_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 263: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'prop_val', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'directive_assert_prop', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 264: {'origin': {'name': 'kv_pair', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'kv_pair', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 265: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'directive_context', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 266: {'origin': {'name': '__match_expr_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__match_expr_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'directive_save_aut_img', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 268: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 269: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 270: {'origin': {'name': '__val_dict_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__val_dict_star_13', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(transformer=None, postlex=None):
  namespace = {'Rule': Rule, 'TerminalDef': TerminalDef}
  return Lark.deserialize(DATA, namespace, MEMO, transformer=transformer, postlex=postlex)
