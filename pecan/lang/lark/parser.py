# The file was automatically generated by Lark v0.8.5
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

import os
from io import open

class LarkError(Exception):
    pass

class GrammarError(LarkError):
    pass

class ParseError(LarkError):
    pass

class LexError(LarkError):
    pass

class UnexpectedEOF(ParseError):
    def __init__(self, expected):
        self.expected = expected

        message = ("Unexpected end-of-input. Expected one of: \n\t* %s\n" % '\n\t* '.join(x.name for x in self.expected))
        super(UnexpectedEOF, self).__init__(message)


class UnexpectedInput(LarkError):
    pos_in_stream = None

    def get_context(self, text, span=40):
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        before = text[start:pos].rsplit('\n', 1)[-1]
        after = text[pos:end].split('\n', 1)[0]
        return before + after + '\n' + ' ' * len(before) + '^\n'

    def match_examples(self, parse_fn, examples):
        """ Given a parser instance and a dictionary mapping some label with
            some malformed syntax examples, it'll return the label for the
            example that bests matches the current error.
        """
        assert self.state is not None, "Not supported for this exception"

        candidate = None
        for label, example in examples.items():
            assert not isinstance(example, STRING_TYPE)

            for malformed in example:
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        try:
                            if ut.token == self.token:  # Try exact match first
                                return label
                        except AttributeError:
                            pass
                        if not candidate:
                            candidate = label

        return candidate


class UnexpectedCharacters(LexError, UnexpectedInput):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None):
        message = "No terminal defined for '%s' at line %d col %d" % (seq[lex_pos], line, column)

        self.line = line
        self.column = column
        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.pos_in_stream = lex_pos
        self.state = state

        message += '\n\n' + self.get_context(seq)
        if allowed:
            message += '\nExpecting: %s\n' % allowed
        if token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in token_history)

        super(UnexpectedCharacters, self).__init__(message)



class UnexpectedToken(ParseError, UnexpectedInput):
    def __init__(self, token, expected, considered_rules=None, state=None):
        self.token = token
        self.expected = expected     # XXX str shouldn't necessary
        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.considered_rules = considered_rules
        self.state = state
        self.pos_in_stream = getattr(token, 'pos_in_stream', None)

        message = ("Unexpected token %r at line %s, column %s.\n"
                   "Expected one of: \n\t* %s\n"
                   % (token, self.line, self.column, '\n\t* '.join(self.expected)))

        super(UnexpectedToken, self).__init__(message)

class VisitError(LarkError):
    """VisitError is raised when visitors are interrupted by an exception

    It provides the following attributes for inspection:
    - obj: the tree node or token it was processing when the exception was raised
    - orig_exc: the exception that cause it to fail
    """
    def __init__(self, rule, obj, orig_exc):
        self.obj = obj
        self.orig_exc = orig_exc

        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

def classify(seq, key=None, value=None):
    d = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data, namespace, memo):
    if isinstance(data, dict):
        if '__type__' in data: # Object
            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


class Serialize(object):
    def memo_serialize(self, types_to_memoize):
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None):
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        postprocess = getattr(self, '_serialize', None)
        if postprocess:
            postprocess(res, memo)
        return res

    @classmethod
    def deserialize(cls, data, memo):
        namespace = getattr(cls, '__serialize_namespace__', {})
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)
        postprocess = getattr(inst, '_deserialize', None)
        if postprocess:
            postprocess()
        return inst


class SerializeMemoizer(Serialize):
    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize):
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value):
        return isinstance(value, self.types_to_memoize)

    def serialize(self):
        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data, namespace, memo):
        return _deserialize(data, namespace, memo)



try:
    STRING_TYPE = basestring
except NameError:   # Python 3
    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')
try:
    classtype = types.ClassType # Python2
except AttributeError:
    classtype = type    # Python3

def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (classtype, type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        return wraps(f.func)(create_decorator(lambda *args, **kw: f(*args[1:], **kw), True))

    else:
        return create_decorator(f.__func__.__call__, True)

import sys, re
Py36 = (sys.version_info[:2] >= (3, 6))

import sre_parse
import sre_constants
def get_regexp_width(regexp):
    try:
        return [int(x) for x in sre_parse.parse(regexp).getwidth()]
    except sre_constants.error:
        raise ValueError(regexp)


class Meta:
    def __init__(self):
        self.empty = True

class Tree(object):
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self):
        # TODO: Re-write as a more efficient version

        visited = set()
        q = [self]

        l = []
        while q:
            subtree = q.pop()
            l.append( subtree )
            if id(subtree) in visited:
                continue    # already been here from another branch
            visited.add(id(subtree))
            q += [c for c in subtree.children if isinstance(c, Tree)]

        seen = set()
        for x in reversed(l):
            if id(x) not in seen:
                yield x
                seen.add(id(x))

    def find_pred(self, pred):
        "Find all nodes where pred(tree) == True"
        return filter(pred, self.iter_subtrees())

    def find_data(self, data):
        "Find all nodes where tree.data == data"
        return self.find_pred(lambda t: t.data == data)


from inspect import getmembers, getmro

class Discard(Exception):
    pass

# Transformers

class _Decoratable:
    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            # Make sure the function isn't inherited (unless it's overwritten)
            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(cls.__dict__[name]):
                continue

            # Skip if v_args already applied (at the function level)
            if hasattr(cls.__dict__[name], 'vargs_applied'):
                continue

            static = isinstance(cls.__dict__[name], (staticmethod, classmethod))
            setattr(cls, name, decorator(value, static=static, **kwargs))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable):
    """Visits the tree recursively, starting with the leaves and finally the root (bottom-up)

    Calls its methods (provided by user via inheritance) according to tree.data
    The returned value replaces the old one in the structure.

    Can be used to implement map or reduce.
    """
    __visit_tokens__ = True   # For backwards compatibility

    def __init__(self,  visit_tokens=True):
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)


    def _transform_children(self, children):
        for c in children:
            try:
                if isinstance(c, Tree):
                    yield self._transform_tree(c)
                elif self.__visit_tokens__ and isinstance(c, Token):
                    yield self._call_userfunc_token(c)
                else:
                    yield c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        return self._transform_tree(tree)

    def __mul__(self, other):
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        "Default operation on tree (for override)"
        return Tree(data, children, meta)

    def __default_token__(self, token):
        "Default operation on token (for override)"
        return token



class InlineTransformer(Transformer):   # XXX Deprecated
    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    "Non-recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):           # Cancel recursion
        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_InPlaceRecursive(Transformer):
    "Recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)



# Visitors

class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        "Default operation on tree (for override)"
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase):
    """Bottom-up visitor, non-recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self,tree):
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree

class Visitor_Recursive(VisitorBase):
    """Bottom-up visitor, recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree):
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree



def visit_children_decor(func):
    "See Interpreter"
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter(_Decoratable):
    """Top-down visitor, recursive

    Visits the tree, starting with the root and finally the leaves (top-down)
    Calls its methods (provided by user via inheritance) according to tree.data

    Unlike Transformer and Visitor, the Interpreter doesn't automatically visit its sub-branches.
    The user has to explicitly call visit_children, or use the @visit_children_decor
    """

    def visit(self, tree):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)




# Decorators

def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)



def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   # XXX Deprecated
    return _apply_decorator(obj, _inline_args__func)



def _visitor_args_func_dec(func, visit_wrapper=None, static=False):
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    if static:
        f = wraps(func)(create_decorator(func, False))
    else:
        f = smart_decorator(func, create_decorator)
    f.vargs_applied = True
    f.visit_wrapper = visit_wrapper
    return f


def _vargs_inline(f, data, children, meta):
    return f(*children)
def _vargs_meta_inline(f, data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, data, children, meta):
    return f(children, meta)   # TODO swap these for consistency? Backwards incompatible!
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))

def v_args(inline=False, meta=False, tree=False, wrapper=None):
    "A convenience decorator factory, for modifying the behavior of user-supplied visitor methods"
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, visit_wrapper=func)
    return _visitor_args_dec



class Indenter:
    def __init__(self):
        self.paren_level = None
        self.indent_level = None
        assert self.tab_len > 0

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)



class Symbol(Serialize):
    __slots__ = ('name',)

    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)



class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term = False



class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'empty_indices'

    def __init__(self, keep_all_tokens=False, expand1=False, priority=None, empty_indices=()):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
        )


class Rule(Serialize):
    """
        origin : a symbol
        expansion : a list of symbols
        order : index of this expansion amongst all rules of the same name
    """
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion





class Pattern(Serialize):

    def __init__(self, value, flags=()):
        self.value = value
        self.flags = frozenset(flags)

    def __repr__(self):
        return repr(self.to_regexp())

    # Pattern Hashing assumes all subclasses have a different priority!
    def __hash__(self):
        return hash((type(self), self.value, self.flags))
    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    def to_regexp(self):
        raise NotImplementedError()

    if Py36:
        # Python 3.6 changed syntax for flags in regular expression
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s:%s)' % (f, value))
            return value

    else:
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s)' % f) + value
            return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type = "str"

    def to_regexp(self):
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self):
        return len(self.value)
    max_width = min_width

class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type = "re"

    def to_regexp(self):
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self):
        return self._get_width()[0]
    @property
    def max_width(self):
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    def __init__(self, name, pattern, priority=1):
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)



class Token(Str):
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        try:
            self = super(Token, cls).__new__(cls, value)
        except UnicodeDecodeError:
            value = value.decode('latin1')
            self = super(Token, cls).__new__(cls, value)

        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        self.end_line = end_line
        self.end_column = end_column
        self.end_pos = end_pos
        return self

    def update(self, type_=None, value=None):
        return Token.new_borrow_pos(
            type_ if type_ is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer, state=None):
        self.lexer = lexer
        self.state = state

    def lex(self, stream, newline_types, ignore_types):
        newline_types = frozenset(newline_types)
        ignore_types = frozenset(ignore_types)
        line_ctr = LineCounter()
        last_token = None

        while line_ctr.char_pos < len(stream):
            lexer = self.lexer
            res = lexer.match(stream, line_ctr.char_pos)
            if not res:
                allowed = {v for m, tfi in lexer.mres for v in tfi.values()} - ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column, allowed=allowed, state=self.state, token_history=last_token and [last_token])

            value, type_ = res

            if type_ not in ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                line_ctr.feed(value, type_ in newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in lexer.callback:
                    t = lexer.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise ValueError("Callbacks must return a token (returned %r)" % t)
                yield t
                last_token = t
            else:
                if type_ in lexer.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    lexer.callback[type_](t2)
                line_ctr.feed(value, type_ in newline_types)




class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t

class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2





def _create_unless(terminals, g_regex_flags):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = [] # {}
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority > retok.priority:
                continue
            s = strtok.pattern.value
            m = re.match(retok.pattern.to_regexp(), s, g_regex_flags)
            if m and m.group(0) == s:
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(build_mres(unless, g_regex_flags, match_whole=True))

    terminals = [t for t in terminals if t not in embedded_strs]
    return terminals, callback


def _build_mres(terminals, max_size, g_regex_flags, match_whole):
    # Python sets an unreasonable group limit (currently 100) in its re module
    # Worse, the only way to know we reached it is by catching an AssertionError!
    # This function recursively tries less and less groups until it's successful.
    postfix = '$' if match_whole else ''
    mres = []
    while terminals:
        try:
            mre = re.compile(u'|'.join(u'(?P<%s>%s)'%(t.name, t.pattern.to_regexp()+postfix) for t in terminals[:max_size]), g_regex_flags)
        except AssertionError:  # Yes, this is what Python provides us.. :/
            return _build_mres(terminals, max_size//2, g_regex_flags, match_whole)

        # terms_from_name = {t.name: t for t in terminals[:max_size]}
        mres.append((mre, {i:n for n,i in mre.groupindex.items()} ))
        terminals = terminals[max_size:]
    return mres

def build_mres(terminals, g_regex_flags, match_whole=False):
    return _build_mres(terminals, len(terminals), g_regex_flags, match_whole)

def _regexp_has_newline(r):
    r"""Expressions that may indicate newlines in a regexp:
        - newlines (\n)
        - escaped newline (\\n)
        - anything but ([^...])
        - any-char (.) when the flag (?s) exists
        - spaces (\s)
    """
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)

class Lexer(object):
    """Lexer interface

    Method Signatures:
        lex(self, stream) -> Iterator[Token]
    """
    lex = NotImplemented


class TraditionalLexer(Lexer):

    def __init__(self, terminals, ignore=(), user_callbacks={}, g_regex_flags=0):
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        terminals = list(terminals)

        # Sanitization
        for t in terminals:
            try:
                re.compile(t.pattern.to_regexp(), g_regex_flags)
            except re.error:
                raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

            if t.pattern.min_width == 0:
                raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

        assert set(ignore) <= {t.name for t in terminals}

        # Init
        self.newline_types = [t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp())]
        self.ignore_types = list(ignore)

        terminals.sort(key=lambda x:(-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = user_callbacks
        self.build(g_regex_flags)

    def build(self, g_regex_flags=0):
        terminals, self.callback = _create_unless(self.terminals, g_regex_flags)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                # Already a callback there, probably UnlessCallback
                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self.mres = build_mres(terminals, g_regex_flags)

    def match(self, stream, pos):
        for mre, type_from_index in self.mres:
            m = mre.match(stream, pos)
            if m:
                return m.group(0), type_from_index[m.lastindex]

    def lex(self, stream):
        return _Lex(self).lex(stream, self.newline_types, self.ignore_types)




class ContextualLexer(Lexer):

    def __init__(self, terminals, states, ignore=(), always_accept=(), user_callbacks={}, g_regex_flags=0):
        tokens_by_name = {}
        for t in terminals:
            assert t.name not in tokens_by_name, t
            tokens_by_name[t.name] = t

        lexer_by_tokens = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(ignore) | set(always_accept)
                state_tokens = [tokens_by_name[n] for n in accepts if n and n in tokens_by_name]
                lexer = TraditionalLexer(state_tokens, ignore=ignore, user_callbacks=user_callbacks, g_regex_flags=g_regex_flags)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        self.root_lexer = TraditionalLexer(terminals, ignore=ignore, user_callbacks=user_callbacks, g_regex_flags=g_regex_flags)

    def lex(self, stream, get_parser_state):
        parser_state = get_parser_state()
        l = _Lex(self.lexers[parser_state], parser_state)
        try:
            for x in l.lex(stream, self.root_lexer.newline_types, self.root_lexer.ignore_types):
                yield x
                parser_state = get_parser_state()
                l.lexer = self.lexers[parser_state]
                l.state = parser_state # For debug only, no need to worry about multithreading
        except UnexpectedCharacters as e:
            # In the contextual lexer, UnexpectedCharacters can mean that the terminal is defined,
            # but not in the current context.
            # This tests the input against the global context, to provide a nicer error.
            root_match = self.root_lexer.match(stream, e.pos_in_stream)
            if not root_match:
                raise

            value, type_ = root_match
            t = Token(type_, value, e.pos_in_stream, e.line, e.column)
            raise UnexpectedToken(t, e.allowed, state=e.state)



class LexerConf(Serialize):
    __serialize_fields__ = 'tokens', 'ignore', 'g_regex_flags'
    __serialize_namespace__ = TerminalDef,

    def __init__(self, tokens, ignore=(), postlex=None, callbacks=None, g_regex_flags=0):
        self.tokens = tokens
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags

    def _deserialize(self):
        self.callbacks = {} # TODO


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)

class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            for c in children:
                if isinstance(c, Tree) and not c.meta.empty:
                    res.meta.line = c.meta.line
                    res.meta.column = c.meta.column
                    res.meta.start_pos = c.meta.start_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.line = c.line
                    res.meta.column = c.column
                    res.meta.start_pos = c.pos_in_stream
                    res.meta.empty = False
                    break

            for c in reversed(children):
                if isinstance(c, Tree) and not c.meta.empty:
                    res.meta.end_line = c.meta.end_line
                    res.meta.end_column = c.meta.end_column
                    res.meta.end_pos = c.meta.end_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.end_line = c.end_line
                    res.meta.end_column = c.end_column
                    res.meta.end_pos = c.end_pos
                    res.meta.empty = False
                    break

        return res


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR_NoPlaceholders(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)

def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')

def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices):
    # Prepare empty_indices as: How many Nones to insert at each index?
    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            # LALR without placeholders
            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])

class AmbiguousExpander:
    """Deal with the case where we're expanding children ('_rule') into a parent but the children
       are ambiguous. i.e. (parent->_ambig->_expand_this_rule). In this case, make the parent itself
       ambiguous with as many copies as their are ambiguous children, and then copy the ambiguous children
       into the right parents in the right places, essentially shifting the ambiguiuty up the tree."""
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(child):
            return hasattr(child, 'data') and child.data == '_ambig'

        #### When we're repeatedly expanding ambiguities we can end up with nested ambiguities.
        #    All children of an _ambig node should be a derivation of that ambig node, hence
        #    it is safe to assume that if we see an _ambig node nested within an ambig node
        #    it is safe to simply expand it into the parent _ambig node as an alternative derivation.
        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                to_expand = [j for j, grandchild in enumerate(child.children) if _is_ambig_tree(grandchild)]
                child.expand_kids_by_index(*to_expand)

        if not ambiguous:
            return self.node_builder(children)

        expand = [ iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children) ]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])

def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)

def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f

def inplace_transformer(func):
    @wraps(func)
    def f(children):
        # function name in a Transformer is a rule name.
        tree = Tree(func.__name__, children)
        return func(tree)
    return f

def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")
    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, keep_all_tokens=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                self.propagate_positions and PropagatePositions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
            ]))

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callbacks = {}

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                # XXX InlineTransformer is deprecated!
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                else:
                    if isinstance(transformer, InlineTransformer):
                        f = ptb_inline_args(f)
                    elif isinstance(transformer, Transformer_InPlace):
                        f = inplace_transformer(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks


class LALR_Parser(object):
    def __init__(self, parser_conf, debug=False):
        assert all(r.options.priority is None for r in parser_conf.rules), "LALR doesn't yet support prioritization"
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks)

    @classmethod
    def deserialize(cls, data, memo, callbacks):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks)
        return inst

    def serialize(self, memo):
        return self._parse_table.serialize(memo)

    def parse(self, *args):
        return self.parser.parse(*args)


class _Parser:
    def __init__(self, parse_table, callbacks):
        self.states = parse_table.states
        self.start_states = parse_table.start_states
        self.end_states = parse_table.end_states
        self.callbacks = callbacks

    def parse(self, seq, start, set_state=None):
        token = None
        stream = iter(seq)
        states = self.states

        start_state = self.start_states[start]
        end_state = self.end_states[start]

        state_stack = [start_state]
        value_stack = []

        if set_state: set_state(start_state)

        def get_action(token):
            state = state_stack[-1]
            try:
                return states[state][token.type]
            except KeyError:
                expected = [s for s in states[state].keys() if s.isupper()]
                raise UnexpectedToken(token, expected, state=state)

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = states[state_stack[-1]][rule.origin.name]
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        for token in stream:
            while True:
                action, arg = get_action(token)
                assert arg != end_state

                if action is Shift:
                    state_stack.append(arg)
                    value_stack.append(token)
                    if set_state: set_state(arg)
                    break # next token
                else:
                    reduce(arg)

        token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
        while True:
            _action, arg = get_action(token)
            assert(_action is Reduce)
            reduce(arg)
            if state_stack[-1] == end_state:
                return value_stack[-1]



class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()
        rules = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def get_frontend(parser, lexer):
    if parser=='lalr':
        if lexer is None:
            raise ValueError('The LALR parser requires use of a lexer')
        elif lexer == 'standard':
            return LALR_TraditionalLexer
        elif lexer == 'contextual':
            return LALR_ContextualLexer
        elif issubclass(lexer, Lexer):
            return partial(LALR_CustomLexer, lexer)
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser=='earley':
        if lexer=='standard':
            return Earley
        elif lexer=='dynamic':
            return XEarley
        elif lexer=='dynamic_complete':
            return XEarley_CompleteLex
        elif lexer=='contextual':
            raise ValueError('The Earley parser does not support the contextual parser')
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser == 'cyk':
        if lexer == 'standard':
            return CYK
        else:
            raise ValueError('CYK parser requires using standard parser.')
    else:
        raise ValueError('Unknown parser: %s' % parser)


class _ParserFrontend(Serialize):
    def _parse(self, input, start, *args):
        if start is None:
            start = self.start
            if len(start) > 1:
                raise ValueError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start)
            start ,= start
        return self.parser.parse(input, start, *args)


class WithLexer(_ParserFrontend):
    lexer = None
    parser = None
    lexer_conf = None
    start = None

    __serialize_fields__ = 'parser', 'lexer_conf', 'start'
    __serialize_namespace__ = LexerConf,

    def __init__(self, lexer_conf, parser_conf, options=None):
        self.lexer_conf = lexer_conf
        self.start = parser_conf.start
        self.postlex = lexer_conf.postlex

    @classmethod
    def deserialize(cls, data, memo, callbacks, postlex):
        inst = super(WithLexer, cls).deserialize(data, memo)
        inst.postlex = postlex
        inst.parser = LALR_Parser.deserialize(inst.parser, memo, callbacks)
        inst.init_lexer()
        return inst

    def _serialize(self, data, memo):
        data['parser'] = data['parser'].serialize(memo)

    def lex(self, *args):
        stream = self.lexer.lex(*args)
        return self.postlex.process(stream) if self.postlex else stream

    def parse(self, text, start=None):
        token_stream = self.lex(text)
        return self._parse(token_stream, start)

    def init_traditional_lexer(self):
        self.lexer = TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks, g_regex_flags=self.lexer_conf.g_regex_flags)

class LALR_WithLexer(WithLexer):
    def __init__(self, lexer_conf, parser_conf, options=None):
        debug = options.debug if options else False
        self.parser = LALR_Parser(parser_conf, debug=debug)
        WithLexer.__init__(self, lexer_conf, parser_conf, options)

        self.init_lexer()

    def init_lexer(self):
        raise NotImplementedError()

class LALR_TraditionalLexer(LALR_WithLexer):
    def init_lexer(self):
        self.init_traditional_lexer()

class LALR_ContextualLexer(LALR_WithLexer):
    def init_lexer(self):
        states = {idx:list(t.keys()) for idx, t in self.parser._parse_table.states.items()}
        always_accept = self.postlex.always_accept if self.postlex else ()
        self.lexer = ContextualLexer(self.lexer_conf.tokens, states,
                                     ignore=self.lexer_conf.ignore,
                                     always_accept=always_accept,
                                     user_callbacks=self.lexer_conf.callbacks,
                                     g_regex_flags=self.lexer_conf.g_regex_flags)


    def parse(self, text, start=None):
        parser_state = [None]
        def set_parser_state(s):
            parser_state[0] = s

        token_stream = self.lex(text, lambda: parser_state[0])
        return self._parse(token_stream, start, set_parser_state)


class LarkOptions(Serialize):
    """Specifies the options for Lark

    """
    OPTIONS_DOC = """
# General

    start - The start symbol. Either a string, or a list of strings for
            multiple possible starts (Default: "start")
    debug - Display debug information, such as warnings (default: False)
    transformer - Applies the transformer to every parse tree (equivlent to
                  applying it after the parse, but faster)
    propagate_positions - Propagates (line, column, end_line, end_column)
                          attributes into all tree branches.
    maybe_placeholders - When True, the `[]` operator returns `None` when not matched.
                         When `False`,  `[]` behaves like the `?` operator,
                             and returns no value at all.
                         (default=`False`. Recommended to set to `True`)
    cache_grammar - Cache the Lark grammar (Default: False)
    g_regex_flags - Flags that are applied to all terminals
                    (both regex and strings)
    keep_all_tokens - Prevent the tree builder from automagically
                      removing "punctuation" tokens (default: False)

# Algorithm

    parser - Decides which parser engine to use
             Accepts "earley" or "lalr". (Default: "earley")
             (there is also a "cyk" option for legacy)

    lexer - Decides whether or not to use a lexer stage
        "auto" (default): Choose for me based on the parser
        "standard": Use a standard lexer
        "contextual": Stronger lexer (only works with parser="lalr")
        "dynamic": Flexible and powerful (only with parser="earley")
        "dynamic_complete": Same as dynamic, but tries *every* variation
                            of tokenizing possible.

    ambiguity - Decides how to handle ambiguity in the parse.
                Only relevant if parser="earley"
        "resolve": The parser will automatically choose the simplest
                    derivation (it chooses consistently: greedy for
                    tokens, non-greedy for rules)
        "explicit": The parser will return all derivations wrapped
                    in "_ambig" tree nodes (i.e. a forest).

# Domain Specific

    postlex - Lexer post-processing (Default: None) Only works with the
                standard and contextual lexers.
    priority - How priorities should be evaluated - auto, none, normal,
                invert (Default: auto)
    lexer_callbacks - Dictionary of callbacks for the lexer. May alter
                        tokens during lexing. Use with caution.
    edit_terminals - A callback
    """
    if __doc__:
        __doc__ += OPTIONS_DOC

    _defaults = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache_grammar': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': False,
        'edit_terminals': None,
        'g_regex_flags': 0,
    }

    def __init__(self, options_dict):
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], STRING_TYPE):
            options['start'] = [options['start']]

        self.__dict__['options'] = options

        assert self.parser in ('earley', 'lalr', 'cyk', None)

        if self.parser == 'earley' and self.transformer:
            raise ValueError('Cannot specify an embedded transformer when using the Earley algorithm.'
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ValueError("Unknown options: %s" % o.keys())

    def __getattr__(self, name):
        try:
            return self.options[name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name, value):
        assert name in self.options
        self.options[name] = value

    def serialize(self, memo):
        return self.options

    @classmethod
    def deserialize(cls, data, memo):
        return cls(data)


class Lark(Serialize):
    def __init__(self, grammar, **options):
        """
            grammar : a string or file-object containing the grammar spec (using Lark's ebnf syntax)
            options : a dictionary controlling various aspects of Lark.
        """
        self.options = LarkOptions(options)

        # Some, but not all file-like objects have a 'name' attribute
        try:
            self.source = grammar.name
        except AttributeError:
            self.source = '<string>'

        # Drain file-like objects to get their contents
        try:
            read = grammar.read
        except AttributeError:
            pass
        else:
            grammar = read()

        assert isinstance(grammar, STRING_TYPE)

        if self.options.cache_grammar:
            raise NotImplementedError("Not available yet")

        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'standard'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        assert lexer in ('standard', 'contextual', 'dynamic', 'dynamic_complete') or issubclass(lexer, Lexer)

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            disambig_parsers = ['earley', 'cyk']
            assert self.options.parser in disambig_parsers, (
                'Only %s supports disambiguation right now') % ', '.join(disambig_parsers)

        if self.options.priority == 'auto':
            if self.options.parser in ('earley', 'cyk', ):
                self.options.priority = 'normal'
            elif self.options.parser in ('lalr', ):
                self.options.priority = None
        elif self.options.priority in ('invert', 'normal'):
            assert self.options.parser in ('earley', 'cyk'), "priorities are not supported for LALR at this time"

        assert self.options.priority in ('auto', None, 'normal', 'invert'), 'invalid priority option specified: {}. options are auto, none, normal, invert.'.format(self.options.priority)
        assert self.options.ambiguity not in ('resolve__antiscore_sum', ), 'resolve__antiscore_sum has been replaced with the option priority="invert"'
        assert self.options.ambiguity in ('resolve', 'explicit', 'auto', )

        # Parse the grammar file and compose the grammars (TODO)
        self.grammar = load_grammar(grammar, self.source)

        # Compile the EBNF grammar into BNF
        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name:t for t in self.terminals}

        # If the user asked to invert the priorities, negate them all here.
        # This replaces the old 'resolve__antiscore_sum' option.
        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
        # Else, if the user asked to disable priorities, strip them from the
        # rules. This allows the Earley parsers to skip an extra forest walk
        # for improved performance, if you don't need them (or didn't specify any).
        elif self.options.priority == None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None

        # TODO Deprecate lexer_callbacks?
        lexer_callbacks = dict(self.options.lexer_callbacks)
        if self.options.transformer:
            t = self.options.transformer
            for term in self.terminals:
                if hasattr(t, term.name):
                    lexer_callbacks[term.name] = getattr(t, term.name)

        self.lexer_conf = LexerConf(self.terminals, self.ignore_tokens, self.options.postlex, lexer_callbacks, self.options.g_regex_flags)

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

    if __init__.__doc__:
        __init__.__doc__ += "\nOptions:\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self):
        return TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks, g_regex_flags=self.lexer_conf.g_regex_flags)

    def _prepare_callbacks(self):
        self.parser_class = get_frontend(self.options.parser, self.options.lexer)
        self._parse_tree_builder = ParseTreeBuilder(self.rules, self.options.tree_class or Tree, self.options.propagate_positions, self.options.keep_all_tokens, self.options.parser!='lalr' and self.options.ambiguity=='explicit', self.options.maybe_placeholders)
        self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)

    def _build_parser(self):
        self._prepare_callbacks()
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return self.parser_class(self.lexer_conf, parser_conf, options=self.options)

    @classmethod
    def deserialize(cls, data, namespace, memo, transformer=None, postlex=None):
        if memo:
            memo = SerializeMemoizer.deserialize(memo, namespace, {})
        inst = cls.__new__(cls)
        options = dict(data['options'])
        if transformer is not None:
            options['transformer'] = transformer
        if postlex is not None:
            options['postlex'] = postlex
        inst.options = LarkOptions.deserialize(options, memo)
        inst.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        inst.source = '<deserialized>'
        inst._prepare_callbacks()
        inst.parser = inst.parser_class.deserialize(data['parser'], memo, inst._callbacks, inst.options.postlex)
        return inst

    def save(self, f):
        data, m = self.memo_serialize([TerminalDef, Rule])
        pickle.dump({'data': data, 'memo': m}, f)

    @classmethod
    def load(cls, f):
        d = pickle.load(f)
        namespace = {'Rule': Rule, 'TerminalDef': TerminalDef}
        memo = d['memo']
        return Lark.deserialize(d['data'], namespace, memo)


    @classmethod
    def open(cls, grammar_filename, rel_to=None, **options):
        """Create an instance of Lark with the grammar given by its filename

        If rel_to is provided, the function will find the grammar filename in relation to it.

        Example:

            >>> Lark.open("grammar_file.lark", rel_to=__file__, parser="lalr")
            Lark(...)

        """
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source, self.options.parser, self.options.lexer)


    def lex(self, text):
        "Only lex (and postlex) the text, without parsing it. Only relevant when lexer='standard'"
        if not hasattr(self, 'lexer'):
            self.lexer = self._build_lexer()
        stream = self.lexer.lex(text)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name):
        "Get information about a terminal"
        return self._terminals_dict[name]

    def parse(self, text, start=None):
        """Parse the given text, according to the options provided.

        The 'start' parameter is required if Lark was given multiple possible start symbols (using the start option).

        Returns a tree, unless specified otherwise.
        """
        return self.parser.parse(text, start=start)


DATA = (
{'parser': {'parser': {'tokens': {0: 'DO', 1: 'LPAR', 2: 'LT', 3: 'praline_operator', 4: 'praline_arith', 5: 'app', 6: 'TRUE', 7: 'praline_mul', 8: 'praline_atom', 9: 'MATCH', 10: 'VAR', 11: 'praline_div', 12: 'DISJ', 13: 'LET', 14: 'COLON', 15: '__ANON_6', 16: 'var', 17: 'operator_sym_char', 18: 'COMP', 19: 'CONJ', 20: 'LSQB', 21: 'pecan_term', 22: 'AT', 23: 'LBRACE', 24: 'GT', 25: 'ESCAPED_STRING', 26: 'INT', 27: 'praline_sub', 28: 'IF', 29: 'string', 30: 'praline_exponent', 31: 'EQ', 32: 'int', 33: 'praline_add', 34: '__operator_sym_plus_5', 35: 'operator_sym', 36: 'praline_tuple', 37: 'PERCENT', 38: 'praline_list', 39: 'term', 40: 'MINUS', 41: 'BACKSLASH', 42: 'FALSE', 43: 'ALIAS', 44: '_IMPLIES', 45: 'THEN', 46: 'SLASH', 47: '__ANON_8', 48: 'RBRACE', 49: 'STRUCTURE', 50: 'RESTRICT', 51: '$END', 52: 'RSQB', 53: 'DEFINE', 54: 'RPAR', 55: '_IFF', 56: '__ANON_7', 57: 'ELSE', 58: '__ANON_9', 59: '__ANON_5', 60: 'HASH', 61: 'COMMA', 62: 'DOT', 63: 'kv_pair', 64: '__term_plus_1', 65: 'match_arm', 66: 'CASE', 67: 'STAR', 68: 'IN', 69: 'PLUS', 70: 'CIRCUMFLEX', 71: '_DEFEQ', 72: 'SEMICOLON', 73: 'WITH', 74: 'END', 75: '_IS', 76: 'DEFINING', 77: 'BE', 78: '__ANON_0', 79: '__ANON_4', 80: 'LOAD', 81: 'FORGET', 82: 'SHUFFLE', 83: '__ANON_1', 84: 'CONTEXT', 85: 'IMPORT', 86: '__ANON_2', 87: '__ANON_3', 88: 'formal', 89: 'atom', 90: 'expr', 91: 'bool', 92: 'mul_expr', 93: 'pred', 94: 'div_expr', 95: 'arith', 96: 'add_expr', 97: 'FORALL', 98: 'EXISTS', 99: 'sub_expr', 100: 'call', 101: 'ANNOTATION', 102: 'exists_sym', 103: 'forall_sym', 104: '__ANON_10', 105: '__ANON_11', 106: 'comparison', 107: 'varlist', 108: 'restriction', 109: 'args', 110: 'arg', 111: 'praline', 112: 'pred_definition', 113: 'directive_name', 114: 'def', 115: 'PROP_VAL', 116: 'prop_val', 117: 'val_dict', 118: '__add_expr_star_16', 119: '__div_expr_star_18', 120: '__mul_expr_star_17', 121: '__match_expr_plus_4', 122: 'match_expr', 123: '__sub_expr_star_15', 124: 'ne', 125: 'le', 126: 'ge', 127: '__term_star_2', 128: '__praline_exponent_star_10', 129: 'quant_formal', 130: '__praline_tuple_plus_12', 131: '__praline_add_star_7', 132: '__match_expr_star_3', 133: '__praline_mul_star_8', 134: 'start', 135: '__start_star_0', 136: '__praline_list_star_11', 137: '__praline_div_star_9', 138: '__praline_sub_star_6', 139: '__varlist_star_14', 140: '__val_dict_star_13', 141: '__args_star_19'}, 'states': {0: {0: (0, 291), 1: (0, 283), 2: (0, 257), 3: (0, 287), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 9: (0, 306), 10: (0, 8), 11: (0, 309), 12: (0, 295), 13: (0, 245), 14: (0, 249), 15: (0, 278), 16: (0, 296), 17: (0, 310), 18: (0, 308), 19: (0, 266), 20: (0, 288), 21: (0, 244), 22: (0, 252), 23: (0, 300), 24: (0, 269), 25: (0, 264), 26: (0, 237), 27: (0, 311), 28: (0, 239), 29: (0, 411), 30: (0, 380), 31: (0, 384), 32: (0, 394), 33: (0, 402), 34: (0, 397), 35: (0, 429), 36: (0, 420), 37: (0, 442), 38: (0, 427), 39: (0, 339), 40: (0, 435), 41: (0, 432), 42: (0, 415)}, 1: {40: (0, 396), 43: (1, {'@': 73}), 12: (1, {'@': 73}), 44: (1, {'@': 73}), 18: (1, {'@': 73}), 45: (1, {'@': 73}), 46: (1, {'@': 73}), 47: (1, {'@': 73}), 10: (1, {'@': 73}), 48: (1, {'@': 73}), 49: (1, {'@': 73}), 50: (1, {'@': 73}), 51: (1, {'@': 73}), 19: (1, {'@': 73}), 52: (1, {'@': 73}), 53: (1, {'@': 73}), 54: (1, {'@': 73}), 31: (1, {'@': 73}), 2: (1, {'@': 73}), 55: (1, {'@': 73}), 56: (1, {'@': 73}), 57: (1, {'@': 73}), 24: (1, {'@': 73}), 58: (1, {'@': 73}), 59: (1, {'@': 73}), 60: (1, {'@': 73}), 61: (1, {'@': 73}), 62: (1, {'@': 73})}, 2: {63: (0, 307), 25: (0, 264), 29: (0, 407)}, 3: {28: (1, {'@': 74}), 18: (1, {'@': 74}), 37: (1, {'@': 74}), 10: (1, {'@': 74}), 26: (1, {'@': 74}), 13: (1, {'@': 74}), 1: (1, {'@': 74}), 41: (1, {'@': 74}), 23: (1, {'@': 74}), 25: (1, {'@': 74}), 14: (1, {'@': 74}), 0: (1, {'@': 74}), 2: (1, {'@': 74}), 40: (1, {'@': 74}), 24: (1, {'@': 74}), 20: (1, {'@': 74}), 12: (1, {'@': 74}), 9: (1, {'@': 74}), 15: (1, {'@': 74}), 6: (1, {'@': 74}), 22: (1, {'@': 74}), 19: (1, {'@': 74}), 31: (1, {'@': 74}), 42: (1, {'@': 74})}, 4: {43: (1, {'@': 75}), 51: (1, {'@': 75}), 53: (1, {'@': 75}), 49: (1, {'@': 75}), 10: (1, {'@': 75}), 59: (1, {'@': 75}), 60: (1, {'@': 75}), 50: (1, {'@': 75})}, 5: {1: (0, 69)}, 6: {1: (0, 71)}, 7: {64: (0, 189), 65: (0, 317), 66: (0, 320)}, 8: {67: (1, {'@': 76}), 12: (1, {'@': 76}), 18: (1, {'@': 76}), 46: (1, {'@': 76}), 15: (1, {'@': 76}), 6: (1, {'@': 76}), 37: (1, {'@': 76}), 10: (1, {'@': 76}), 68: (1, {'@': 76}), 26: (1, {'@': 76}), 1: (1, {'@': 76}), 69: (1, {'@': 76}), 22: (1, {'@': 76}), 23: (1, {'@': 76}), 25: (1, {'@': 76}), 19: (1, {'@': 76}), 14: (1, {'@': 76}), 31: (1, {'@': 76}), 2: (1, {'@': 76}), 70: (1, {'@': 76}), 40: (1, {'@': 76}), 24: (1, {'@': 76}), 42: (1, {'@': 76}), 20: (1, {'@': 76}), 54: (1, {'@': 76}), 45: (1, {'@': 76}), 62: (1, {'@': 76}), 61: (1, {'@': 76}), 71: (1, {'@': 76}), 66: (1, {'@': 76}), 72: (1, {'@': 76}), 73: (1, {'@': 76}), 52: (1, {'@': 76}), 57: (1, {'@': 76}), 74: (1, {'@': 76}), 75: (1, {'@': 76}), 76: (1, {'@': 76}), 43: (1, {'@': 76}), 44: (1, {'@': 76}), 47: (1, {'@': 76}), 48: (1, {'@': 76}), 49: (1, {'@': 76}), 50: (1, {'@': 76}), 51: (1, {'@': 76}), 53: (1, {'@': 76}), 55: (1, {'@': 76}), 56: (1, {'@': 76}), 58: (1, {'@': 76}), 59: (1, {'@': 76}), 60: (1, {'@': 76}), 77: (1, {'@': 76})}, 9: {44: (1, {'@': 77}), 18: (1, {'@': 77}), 45: (1, {'@': 77}), 10: (1, {'@': 77}), 49: (1, {'@': 77}), 50: (1, {'@': 77}), 62: (1, {'@': 77}), 61: (1, {'@': 77}), 51: (1, {'@': 77}), 55: (1, {'@': 77}), 2: (1, {'@': 77}), 40: (1, {'@': 77}), 24: (1, {'@': 77}), 59: (1, {'@': 77}), 60: (1, {'@': 77}), 43: (1, {'@': 77}), 12: (1, {'@': 77}), 46: (1, {'@': 77}), 47: (1, {'@': 77}), 48: (1, {'@': 77}), 19: (1, {'@': 77}), 53: (1, {'@': 77}), 54: (1, {'@': 77}), 52: (1, {'@': 77}), 31: (1, {'@': 77}), 57: (1, {'@': 77}), 56: (1, {'@': 77}), 58: (1, {'@': 77})}, 10: {16: (0, 156), 10: (0, 8)}, 11: {67: (0, 386), 43: (1, {'@': 78}), 12: (1, {'@': 78}), 44: (1, {'@': 78}), 18: (1, {'@': 78}), 45: (1, {'@': 78}), 46: (1, {'@': 78}), 47: (1, {'@': 78}), 10: (1, {'@': 78}), 48: (1, {'@': 78}), 49: (1, {'@': 78}), 69: (1, {'@': 78}), 50: (1, {'@': 78}), 51: (1, {'@': 78}), 19: (1, {'@': 78}), 52: (1, {'@': 78}), 53: (1, {'@': 78}), 54: (1, {'@': 78}), 31: (1, {'@': 78}), 2: (1, {'@': 78}), 55: (1, {'@': 78}), 56: (1, {'@': 78}), 40: (1, {'@': 78}), 57: (1, {'@': 78}), 24: (1, {'@': 78}), 58: (1, {'@': 78}), 59: (1, {'@': 78}), 60: (1, {'@': 78}), 61: (1, {'@': 78}), 62: (1, {'@': 78})}, 12: {}, 13: {1: (0, 89)}, 14: {1: (0, 283), 23: (0, 300), 6: (0, 251), 20: (0, 288), 32: (0, 394), 10: (0, 8), 29: (0, 411), 36: (0, 420), 16: (0, 296), 38: (0, 427), 26: (0, 237), 21: (0, 244), 8: (0, 128), 42: (0, 415), 25: (0, 264), 67: (1, {'@': 79}), 18: (1, {'@': 79}), 45: (1, {'@': 79}), 37: (1, {'@': 79}), 68: (1, {'@': 79}), 62: (1, {'@': 79}), 61: (1, {'@': 79}), 14: (1, {'@': 79}), 2: (1, {'@': 79}), 71: (1, {'@': 79}), 40: (1, {'@': 79}), 24: (1, {'@': 79}), 66: (1, {'@': 79}), 12: (1, {'@': 79}), 46: (1, {'@': 79}), 15: (1, {'@': 79}), 72: (1, {'@': 79}), 69: (1, {'@': 79}), 22: (1, {'@': 79}), 73: (1, {'@': 79}), 19: (1, {'@': 79}), 52: (1, {'@': 79}), 54: (1, {'@': 79}), 31: (1, {'@': 79}), 57: (1, {'@': 79}), 74: (1, {'@': 79}), 70: (1, {'@': 79})}, 15: {31: (0, 99)}, 16: {78: (0, 61), 79: (0, 62), 80: (0, 55), 81: (0, 65), 82: (0, 38), 83: (0, 39), 84: (0, 6), 85: (0, 13), 86: (0, 43), 87: (0, 5)}, 17: {62: (1, {'@': 80}), 43: (1, {'@': 80}), 51: (1, {'@': 80}), 53: (1, {'@': 80}), 60: (1, {'@': 80}), 10: (1, {'@': 80}), 59: (1, {'@': 80}), 48: (1, {'@': 80}), 49: (1, {'@': 80}), 50: (1, {'@': 80})}, 18: {76: (0, 79)}, 19: {61: (0, 114), 54: (1, {'@': 81}), 75: (1, {'@': 81}), 62: (1, {'@': 81})}, 20: {29: (0, 409), 25: (0, 264)}, 21: {88: (0, 18), 16: (0, 22), 10: (0, 8)}, 22: {1: (0, 26), 75: (0, 102), 76: (1, {'@': 82}), 61: (1, {'@': 82}), 54: (1, {'@': 82})}, 23: {0: (0, 291), 1: (0, 283), 2: (0, 257), 3: (0, 287), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 39: (0, 277), 9: (0, 306), 10: (0, 8), 11: (0, 309), 12: (0, 295), 13: (0, 245), 14: (0, 249), 15: (0, 278), 16: (0, 296), 17: (0, 310), 18: (0, 308), 19: (0, 266), 20: (0, 288), 21: (0, 244), 22: (0, 252), 23: (0, 300), 24: (0, 269), 25: (0, 264), 26: (0, 237), 27: (0, 311), 28: (0, 239), 29: (0, 411), 30: (0, 380), 31: (0, 384), 32: (0, 394), 33: (0, 402), 34: (0, 397), 35: (0, 429), 36: (0, 420), 37: (0, 442), 38: (0, 427), 40: (0, 435), 41: (0, 432), 42: (0, 415)}, 24: {89: (0, 83), 90: (0, 164), 28: (0, 133), 6: (0, 267), 91: (0, 242), 32: (0, 388), 10: (0, 8), 92: (0, 82), 93: (0, 145), 94: (0, 117), 16: (0, 77), 95: (0, 143), 18: (0, 253), 96: (0, 157), 97: (0, 284), 42: (0, 312), 98: (0, 265), 25: (0, 264), 26: (0, 237), 29: (0, 293), 99: (0, 412), 100: (0, 398), 1: (0, 304), 101: (0, 425), 102: (0, 275), 40: (0, 437), 103: (0, 289), 104: (0, 243), 105: (0, 282), 106: (0, 271)}, 25: {1: (0, 30), 75: (0, 48)}, 26: {10: (0, 8), 107: (0, 162), 16: (0, 424)}, 27: {31: (0, 90)}, 28: {107: (0, 393), 16: (0, 424), 10: (0, 8), 108: (0, 422)}, 29: {67: (1, {'@': 83}), 12: (1, {'@': 83}), 18: (1, {'@': 83}), 46: (1, {'@': 83}), 15: (1, {'@': 83}), 6: (1, {'@': 83}), 37: (1, {'@': 83}), 10: (1, {'@': 83}), 68: (1, {'@': 83}), 26: (1, {'@': 83}), 1: (1, {'@': 83}), 69: (1, {'@': 83}), 22: (1, {'@': 83}), 23: (1, {'@': 83}), 25: (1, {'@': 83}), 19: (1, {'@': 83}), 14: (1, {'@': 83}), 31: (1, {'@': 83}), 2: (1, {'@': 83}), 70: (1, {'@': 83}), 40: (1, {'@': 83}), 24: (1, {'@': 83}), 42: (1, {'@': 83}), 20: (1, {'@': 83}), 45: (1, {'@': 83}), 62: (1, {'@': 83}), 61: (1, {'@': 83}), 71: (1, {'@': 83}), 66: (1, {'@': 83}), 72: (1, {'@': 83}), 73: (1, {'@': 83}), 52: (1, {'@': 83}), 54: (1, {'@': 83}), 57: (1, {'@': 83}), 74: (1, {'@': 83}), 44: (1, {'@': 83})}, 30: {92: (0, 82), 16: (0, 77), 89: (0, 83), 99: (0, 412), 100: (0, 398), 109: (0, 399), 101: (0, 425), 32: (0, 388), 40: (0, 437), 110: (0, 444), 10: (0, 8), 94: (0, 117), 95: (0, 143), 96: (0, 157), 90: (0, 171), 1: (0, 167), 26: (0, 237), 54: (1, {'@': 84})}, 31: {89: (0, 83), 90: (0, 164), 28: (0, 133), 6: (0, 267), 91: (0, 242), 32: (0, 388), 10: (0, 8), 92: (0, 82), 94: (0, 117), 16: (0, 77), 95: (0, 143), 18: (0, 253), 96: (0, 157), 97: (0, 284), 42: (0, 312), 98: (0, 265), 25: (0, 264), 26: (0, 237), 29: (0, 293), 99: (0, 412), 100: (0, 398), 1: (0, 304), 101: (0, 425), 102: (0, 275), 40: (0, 437), 93: (0, 247), 103: (0, 289), 104: (0, 243), 105: (0, 282), 106: (0, 271)}, 32: {89: (0, 83), 90: (0, 164), 28: (0, 133), 6: (0, 267), 91: (0, 242), 32: (0, 388), 10: (0, 8), 92: (0, 82), 94: (0, 117), 16: (0, 77), 95: (0, 143), 18: (0, 253), 96: (0, 157), 97: (0, 284), 42: (0, 312), 98: (0, 265), 25: (0, 264), 26: (0, 237), 29: (0, 293), 93: (0, 169), 99: (0, 412), 100: (0, 398), 1: (0, 304), 101: (0, 425), 102: (0, 275), 40: (0, 437), 103: (0, 289), 104: (0, 243), 105: (0, 282), 106: (0, 271)}, 33: {60: (0, 16), 111: (0, 37), 49: (0, 21), 16: (0, 25), 10: (0, 8), 112: (0, 47), 50: (0, 28), 43: (0, 20), 59: (0, 3), 113: (0, 23), 114: (0, 390), 53: (0, 50), 51: (1, {'@': 85})}, 34: {1: (0, 283), 23: (0, 300), 6: (0, 251), 30: (0, 279), 20: (0, 288), 8: (0, 281), 32: (0, 394), 10: (0, 8), 29: (0, 411), 36: (0, 420), 5: (0, 261), 16: (0, 296), 38: (0, 427), 26: (0, 237), 21: (0, 244), 42: (0, 415), 25: (0, 264)}, 35: {68: (1, {'@': 86}), 62: (1, {'@': 86}), 54: (1, {'@': 86}), 61: (1, {'@': 86}), 57: (1, {'@': 86}), 45: (1, {'@': 86}), 72: (1, {'@': 86}), 73: (1, {'@': 86}), 52: (1, {'@': 86}), 74: (1, {'@': 86}), 66: (1, {'@': 86})}, 36: {67: (1, {'@': 87}), 12: (1, {'@': 87}), 18: (1, {'@': 87}), 46: (1, {'@': 87}), 15: (1, {'@': 87}), 6: (1, {'@': 87}), 37: (1, {'@': 87}), 10: (1, {'@': 87}), 68: (1, {'@': 87}), 26: (1, {'@': 87}), 1: (1, {'@': 87}), 69: (1, {'@': 87}), 22: (1, {'@': 87}), 23: (1, {'@': 87}), 25: (1, {'@': 87}), 19: (1, {'@': 87}), 14: (1, {'@': 87}), 31: (1, {'@': 87}), 2: (1, {'@': 87}), 70: (1, {'@': 87}), 40: (1, {'@': 87}), 24: (1, {'@': 87}), 42: (1, {'@': 87}), 20: (1, {'@': 87}), 45: (1, {'@': 87}), 62: (1, {'@': 87}), 61: (1, {'@': 87}), 71: (1, {'@': 87}), 66: (1, {'@': 87}), 72: (1, {'@': 87}), 73: (1, {'@': 87}), 52: (1, {'@': 87}), 54: (1, {'@': 87}), 57: (1, {'@': 87}), 74: (1, {'@': 87}), 44: (1, {'@': 87})}, 37: {43: (1, {'@': 88}), 51: (1, {'@': 88}), 53: (1, {'@': 88}), 49: (1, {'@': 88}), 10: (1, {'@': 88}), 59: (1, {'@': 88}), 60: (1, {'@': 88}), 50: (1, {'@': 88}), 48: (1, {'@': 88})}, 38: {1: (0, 44)}, 39: {1: (0, 107)}, 40: {44: (0, 49), 43: (1, {'@': 89}), 51: (1, {'@': 89}), 53: (1, {'@': 89}), 49: (1, {'@': 89}), 10: (1, {'@': 89}), 59: (1, {'@': 89}), 60: (1, {'@': 89}), 50: (1, {'@': 89}), 48: (1, {'@': 89})}, 41: {89: (0, 83), 90: (0, 164), 28: (0, 133), 6: (0, 267), 91: (0, 242), 32: (0, 388), 10: (0, 8), 92: (0, 82), 94: (0, 117), 16: (0, 77), 95: (0, 143), 18: (0, 253), 96: (0, 157), 97: (0, 284), 42: (0, 312), 98: (0, 265), 93: (0, 151), 25: (0, 264), 26: (0, 237), 29: (0, 293), 99: (0, 412), 100: (0, 398), 1: (0, 304), 101: (0, 425), 102: (0, 275), 40: (0, 437), 103: (0, 289), 104: (0, 243), 105: (0, 282), 106: (0, 271)}, 42: {92: (0, 82), 16: (0, 77), 89: (0, 83), 99: (0, 412), 100: (0, 398), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 94: (0, 117), 95: (0, 143), 96: (0, 157), 1: (0, 167), 90: (0, 180), 26: (0, 237)}, 43: {1: (0, 115)}, 44: {16: (0, 22), 10: (0, 8), 88: (0, 121)}, 45: {43: (1, {'@': 90}), 12: (1, {'@': 90}), 44: (1, {'@': 90}), 45: (1, {'@': 90}), 10: (1, {'@': 90}), 48: (1, {'@': 90}), 49: (1, {'@': 90}), 50: (1, {'@': 90}), 51: (1, {'@': 90}), 19: (1, {'@': 90}), 52: (1, {'@': 90}), 53: (1, {'@': 90}), 54: (1, {'@': 90}), 55: (1, {'@': 90}), 57: (1, {'@': 90}), 59: (1, {'@': 90}), 60: (1, {'@': 90})}, 46: {10: (0, 8), 16: (0, 332)}, 47: {43: (1, {'@': 91}), 51: (1, {'@': 91}), 53: (1, {'@': 91}), 49: (1, {'@': 91}), 10: (1, {'@': 91}), 59: (1, {'@': 91}), 60: (1, {'@': 91}), 50: (1, {'@': 91}), 48: (1, {'@': 91})}, 48: {10: (0, 8), 16: (0, 303)}, 49: {89: (0, 83), 93: (0, 185), 90: (0, 164), 28: (0, 133), 6: (0, 267), 91: (0, 242), 32: (0, 388), 10: (0, 8), 92: (0, 82), 94: (0, 117), 16: (0, 77), 95: (0, 143), 18: (0, 253), 96: (0, 157), 97: (0, 284), 42: (0, 312), 98: (0, 265), 25: (0, 264), 26: (0, 237), 29: (0, 293), 99: (0, 412), 100: (0, 398), 1: (0, 304), 101: (0, 425), 102: (0, 275), 40: (0, 437), 103: (0, 289), 104: (0, 243), 105: (0, 282), 106: (0, 271)}, 50: {1: (0, 283), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 10: (0, 8), 11: (0, 309), 16: (0, 296), 20: (0, 288), 21: (0, 244), 23: (0, 300), 25: (0, 264), 26: (0, 237), 29: (0, 411), 27: (0, 311), 30: (0, 380), 3: (0, 418), 32: (0, 394), 33: (0, 402), 36: (0, 420), 38: (0, 427), 40: (0, 435), 42: (0, 415)}, 51: {43: (1, {'@': 92}), 51: (1, {'@': 92}), 53: (1, {'@': 92}), 49: (1, {'@': 92}), 10: (1, {'@': 92}), 59: (1, {'@': 92}), 60: (1, {'@': 92}), 50: (1, {'@': 92}), 48: (1, {'@': 92})}, 52: {76: (1, {'@': 93}), 61: (1, {'@': 93}), 54: (1, {'@': 93})}, 53: {101: (1, {'@': 94}), 40: (1, {'@': 94}), 10: (1, {'@': 94}), 26: (1, {'@': 94}), 1: (1, {'@': 94})}, 54: {14: (0, 113), 52: (1, {'@': 95}), 61: (1, {'@': 95})}, 55: {1: (0, 112)}, 56: {92: (0, 82), 89: (0, 83), 99: (0, 412), 100: (0, 398), 16: (0, 326), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 95: (0, 103), 94: (0, 117), 96: (0, 157), 1: (0, 167), 26: (0, 237)}, 57: {46: (0, 34), 67: (1, {'@': 96}), 12: (1, {'@': 96}), 19: (1, {'@': 96}), 14: (1, {'@': 96}), 18: (1, {'@': 96}), 15: (1, {'@': 96}), 31: (1, {'@': 96}), 2: (1, {'@': 96}), 40: (1, {'@': 96}), 37: (1, {'@': 96}), 24: (1, {'@': 96}), 68: (1, {'@': 96}), 69: (1, {'@': 96}), 22: (1, {'@': 96}), 62: (1, {'@': 96}), 71: (1, {'@': 96}), 61: (1, {'@': 96}), 54: (1, {'@': 96}), 57: (1, {'@': 96}), 45: (1, {'@': 96}), 72: (1, {'@': 96}), 73: (1, {'@': 96}), 52: (1, {'@': 96}), 74: (1, {'@': 96}), 66: (1, {'@': 96})}, 58: {57: (0, 60), 44: (0, 49), 43: (1, {'@': 97}), 45: (1, {'@': 97}), 10: (1, {'@': 97}), 48: (1, {'@': 97}), 49: (1, {'@': 97}), 50: (1, {'@': 97}), 51: (1, {'@': 97}), 52: (1, {'@': 97}), 53: (1, {'@': 97}), 54: (1, {'@': 97}), 59: (1, {'@': 97}), 60: (1, {'@': 97})}, 59: {92: (0, 82), 89: (0, 83), 99: (0, 412), 62: (0, 56), 100: (0, 398), 16: (0, 326), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 94: (0, 117), 96: (0, 157), 1: (0, 167), 95: (0, 149), 26: (0, 237)}, 60: {89: (0, 83), 90: (0, 164), 28: (0, 133), 6: (0, 267), 91: (0, 242), 32: (0, 388), 10: (0, 8), 92: (0, 82), 94: (0, 117), 16: (0, 77), 95: (0, 143), 18: (0, 253), 96: (0, 157), 97: (0, 284), 42: (0, 312), 98: (0, 265), 93: (0, 354), 25: (0, 264), 26: (0, 237), 29: (0, 293), 99: (0, 412), 100: (0, 398), 1: (0, 304), 101: (0, 425), 102: (0, 275), 40: (0, 437), 103: (0, 289), 104: (0, 243), 105: (0, 282), 106: (0, 271)}, 61: {1: (0, 93)}, 62: {1: (0, 91)}, 63: {45: (0, 75)}, 64: {0: (0, 291), 1: (0, 283), 7: (0, 292), 8: (0, 281), 9: (0, 306), 12: (0, 295), 13: (0, 245), 16: (0, 296), 39: (0, 147), 20: (0, 288), 54: (0, 215), 21: (0, 244), 24: (0, 269), 26: (0, 237), 3: (0, 287), 28: (0, 239), 23: (0, 300), 31: (0, 384), 30: (0, 380), 33: (0, 402), 37: (0, 442), 11: (0, 309), 38: (0, 427), 5: (0, 261), 41: (0, 432), 34: (0, 397), 42: (0, 415), 17: (0, 310), 2: (0, 257), 4: (0, 258), 6: (0, 251), 10: (0, 8), 14: (0, 249), 15: (0, 278), 18: (0, 308), 19: (0, 266), 22: (0, 252), 25: (0, 264), 27: (0, 311), 29: (0, 411), 32: (0, 394), 35: (0, 429), 36: (0, 420), 40: (0, 435)}, 65: {1: (0, 10)}, 66: {77: (0, 0), 71: (1, {'@': 98}), 14: (1, {'@': 98})}, 67: {14: (1, {'@': 98}), 54: (1, {'@': 98}), 61: (1, {'@': 98}), 52: (1, {'@': 98}), 44: (1, {'@': 98}), 71: (1, {'@': 98})}, 68: {1: (0, 283), 23: (0, 300), 6: (0, 251), 20: (0, 288), 8: (0, 281), 32: (0, 394), 10: (0, 8), 29: (0, 411), 36: (0, 420), 5: (0, 261), 16: (0, 296), 38: (0, 427), 30: (0, 195), 26: (0, 237), 21: (0, 244), 42: (0, 415), 25: (0, 264)}, 69: {115: (0, 184), 116: (0, 126)}, 70: {62: (0, 333)}, 71: {29: (0, 150), 25: (0, 264)}, 72: {24: (0, 240)}, 73: {68: (1, {'@': 99}), 62: (1, {'@': 99}), 54: (1, {'@': 99}), 61: (1, {'@': 99}), 57: (1, {'@': 99}), 45: (1, {'@': 99}), 72: (1, {'@': 99}), 73: (1, {'@': 99}), 52: (1, {'@': 99}), 74: (1, {'@': 99}), 66: (1, {'@': 99})}, 74: {67: (1, {'@': 100}), 12: (1, {'@': 100}), 18: (1, {'@': 100}), 46: (1, {'@': 100}), 15: (1, {'@': 100}), 6: (1, {'@': 100}), 37: (1, {'@': 100}), 10: (1, {'@': 100}), 68: (1, {'@': 100}), 26: (1, {'@': 100}), 1: (1, {'@': 100}), 69: (1, {'@': 100}), 22: (1, {'@': 100}), 23: (1, {'@': 100}), 25: (1, {'@': 100}), 19: (1, {'@': 100}), 14: (1, {'@': 100}), 31: (1, {'@': 100}), 2: (1, {'@': 100}), 70: (1, {'@': 100}), 40: (1, {'@': 100}), 24: (1, {'@': 100}), 42: (1, {'@': 100}), 20: (1, {'@': 100}), 45: (1, {'@': 100}), 62: (1, {'@': 100}), 61: (1, {'@': 100}), 71: (1, {'@': 100}), 66: (1, {'@': 100}), 72: (1, {'@': 100}), 73: (1, {'@': 100}), 52: (1, {'@': 100}), 54: (1, {'@': 100}), 57: (1, {'@': 100}), 74: (1, {'@': 100}), 44: (1, {'@': 100})}, 75: {0: (0, 291), 1: (0, 283), 2: (0, 257), 3: (0, 287), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 9: (0, 306), 10: (0, 8), 11: (0, 309), 12: (0, 295), 13: (0, 245), 14: (0, 249), 15: (0, 278), 16: (0, 296), 17: (0, 310), 18: (0, 308), 19: (0, 266), 20: (0, 288), 21: (0, 244), 22: (0, 252), 23: (0, 300), 24: (0, 269), 25: (0, 264), 26: (0, 237), 27: (0, 311), 28: (0, 239), 29: (0, 411), 39: (0, 259), 30: (0, 380), 31: (0, 384), 32: (0, 394), 33: (0, 402), 34: (0, 397), 35: (0, 429), 36: (0, 420), 37: (0, 442), 38: (0, 427), 40: (0, 435), 41: (0, 432), 42: (0, 415)}, 76: {18: (1, {'@': 101}), 45: (1, {'@': 101}), 37: (1, {'@': 101}), 68: (1, {'@': 101}), 62: (1, {'@': 101}), 61: (1, {'@': 101}), 14: (1, {'@': 101}), 2: (1, {'@': 101}), 71: (1, {'@': 101}), 40: (1, {'@': 101}), 24: (1, {'@': 101}), 66: (1, {'@': 101}), 12: (1, {'@': 101}), 15: (1, {'@': 101}), 72: (1, {'@': 101}), 22: (1, {'@': 101}), 73: (1, {'@': 101}), 19: (1, {'@': 101}), 52: (1, {'@': 101}), 54: (1, {'@': 101}), 31: (1, {'@': 101}), 57: (1, {'@': 101}), 74: (1, {'@': 101})}, 77: {1: (0, 123), 20: (0, 346), 43: (1, {'@': 102}), 67: (1, {'@': 102}), 12: (1, {'@': 102}), 44: (1, {'@': 102}), 18: (1, {'@': 102}), 45: (1, {'@': 102}), 46: (1, {'@': 102}), 47: (1, {'@': 102}), 75: (1, {'@': 102}), 10: (1, {'@': 102}), 48: (1, {'@': 102}), 49: (1, {'@': 102}), 69: (1, {'@': 102}), 50: (1, {'@': 102}), 51: (1, {'@': 102}), 19: (1, {'@': 102}), 52: (1, {'@': 102}), 53: (1, {'@': 102}), 54: (1, {'@': 102}), 31: (1, {'@': 102}), 2: (1, {'@': 102}), 55: (1, {'@': 102}), 56: (1, {'@': 102}), 40: (1, {'@': 102}), 57: (1, {'@': 102}), 24: (1, {'@': 102}), 58: (1, {'@': 102}), 59: (1, {'@': 102}), 60: (1, {'@': 102}), 61: (1, {'@': 102})}, 78: {12: (1, {'@': 103}), 19: (1, {'@': 103}), 14: (1, {'@': 103}), 18: (1, {'@': 103}), 15: (1, {'@': 103}), 31: (1, {'@': 103}), 2: (1, {'@': 103}), 37: (1, {'@': 103}), 24: (1, {'@': 103}), 68: (1, {'@': 103}), 22: (1, {'@': 103}), 62: (1, {'@': 103}), 71: (1, {'@': 103}), 61: (1, {'@': 103}), 54: (1, {'@': 103}), 57: (1, {'@': 103}), 45: (1, {'@': 103}), 72: (1, {'@': 103}), 73: (1, {'@': 103}), 52: (1, {'@': 103}), 74: (1, {'@': 103}), 66: (1, {'@': 103})}, 79: {117: (0, 188), 23: (0, 194)}, 80: {25: (0, 264), 29: (0, 205)}, 81: {67: (1, {'@': 104}), 12: (1, {'@': 104}), 18: (1, {'@': 104}), 46: (1, {'@': 104}), 15: (1, {'@': 104}), 6: (1, {'@': 104}), 37: (1, {'@': 104}), 10: (1, {'@': 104}), 68: (1, {'@': 104}), 26: (1, {'@': 104}), 1: (1, {'@': 104}), 69: (1, {'@': 104}), 22: (1, {'@': 104}), 23: (1, {'@': 104}), 25: (1, {'@': 104}), 19: (1, {'@': 104}), 14: (1, {'@': 104}), 31: (1, {'@': 104}), 2: (1, {'@': 104}), 70: (1, {'@': 104}), 40: (1, {'@': 104}), 24: (1, {'@': 104}), 42: (1, {'@': 104}), 20: (1, {'@': 104}), 45: (1, {'@': 104}), 62: (1, {'@': 104}), 61: (1, {'@': 104}), 71: (1, {'@': 104}), 66: (1, {'@': 104}), 72: (1, {'@': 104}), 73: (1, {'@': 104}), 52: (1, {'@': 104}), 54: (1, {'@': 104}), 57: (1, {'@': 104}), 74: (1, {'@': 104}), 44: (1, {'@': 104})}, 82: {118: (0, 349), 69: (0, 336), 43: (1, {'@': 105}), 12: (1, {'@': 105}), 44: (1, {'@': 105}), 18: (1, {'@': 105}), 45: (1, {'@': 105}), 46: (1, {'@': 105}), 47: (1, {'@': 105}), 10: (1, {'@': 105}), 48: (1, {'@': 105}), 49: (1, {'@': 105}), 50: (1, {'@': 105}), 51: (1, {'@': 105}), 19: (1, {'@': 105}), 52: (1, {'@': 105}), 53: (1, {'@': 105}), 54: (1, {'@': 105}), 31: (1, {'@': 105}), 2: (1, {'@': 105}), 55: (1, {'@': 105}), 56: (1, {'@': 105}), 40: (1, {'@': 105}), 57: (1, {'@': 105}), 24: (1, {'@': 105}), 58: (1, {'@': 105}), 59: (1, {'@': 105}), 60: (1, {'@': 105}), 61: (1, {'@': 105}), 62: (1, {'@': 105})}, 83: {119: (0, 179), 75: (0, 152), 46: (0, 330), 43: (1, {'@': 106}), 67: (1, {'@': 106}), 12: (1, {'@': 106}), 44: (1, {'@': 106}), 18: (1, {'@': 106}), 45: (1, {'@': 106}), 47: (1, {'@': 106}), 10: (1, {'@': 106}), 48: (1, {'@': 106}), 49: (1, {'@': 106}), 69: (1, {'@': 106}), 50: (1, {'@': 106}), 51: (1, {'@': 106}), 19: (1, {'@': 106}), 52: (1, {'@': 106}), 53: (1, {'@': 106}), 54: (1, {'@': 106}), 31: (1, {'@': 106}), 2: (1, {'@': 106}), 55: (1, {'@': 106}), 56: (1, {'@': 106}), 40: (1, {'@': 106}), 57: (1, {'@': 106}), 24: (1, {'@': 106}), 58: (1, {'@': 106}), 59: (1, {'@': 106}), 60: (1, {'@': 106}), 61: (1, {'@': 106}), 62: (1, {'@': 106})}, 84: {14: (1, {'@': 107}), 54: (1, {'@': 107}), 61: (1, {'@': 107}), 52: (1, {'@': 107}), 71: (1, {'@': 107}), 44: (1, {'@': 107})}, 85: {1: (0, 283), 33: (0, 290), 6: (0, 251), 7: (0, 292), 8: (0, 281), 10: (0, 8), 16: (0, 296), 20: (0, 288), 21: (0, 244), 23: (0, 300), 25: (0, 264), 26: (0, 237), 29: (0, 411), 30: (0, 380), 32: (0, 394), 36: (0, 420), 5: (0, 261), 11: (0, 309), 38: (0, 427), 42: (0, 415)}, 86: {62: (0, 406)}, 87: {62: (0, 153)}, 88: {68: (1, {'@': 108}), 62: (1, {'@': 108}), 54: (1, {'@': 108}), 61: (1, {'@': 108}), 57: (1, {'@': 108}), 45: (1, {'@': 108}), 72: (1, {'@': 108}), 73: (1, {'@': 108}), 52: (1, {'@': 108}), 74: (1, {'@': 108}), 66: (1, {'@': 108})}, 89: {29: (0, 141), 25: (0, 264)}, 90: {101: (1, {'@': 109}), 40: (1, {'@': 109}), 10: (1, {'@': 109}), 26: (1, {'@': 109}), 1: (1, {'@': 109})}, 91: {16: (0, 22), 10: (0, 8), 88: (0, 134)}, 92: {10: (0, 8), 107: (0, 214), 16: (0, 424)}, 93: {10: (0, 8), 25: (0, 264), 16: (0, 241), 29: (0, 159)}, 94: {0: (0, 291), 1: (0, 283), 2: (0, 257), 3: (0, 287), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 9: (0, 306), 10: (0, 8), 11: (0, 309), 12: (0, 295), 13: (0, 245), 14: (0, 249), 15: (0, 278), 16: (0, 296), 39: (0, 119), 18: (0, 308), 19: (0, 266), 17: (0, 310), 20: (0, 288), 21: (0, 244), 22: (0, 252), 23: (0, 300), 24: (0, 269), 25: (0, 264), 26: (0, 237), 27: (0, 311), 28: (0, 239), 29: (0, 411), 30: (0, 380), 31: (0, 384), 32: (0, 394), 33: (0, 402), 34: (0, 397), 35: (0, 429), 36: (0, 420), 37: (0, 442), 38: (0, 427), 40: (0, 435), 41: (0, 432), 42: (0, 415)}, 95: {0: (0, 291), 1: (0, 283), 2: (0, 257), 3: (0, 287), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 9: (0, 306), 10: (0, 8), 11: (0, 309), 12: (0, 295), 13: (0, 245), 14: (0, 249), 15: (0, 278), 16: (0, 296), 17: (0, 310), 18: (0, 308), 19: (0, 266), 20: (0, 288), 42: (0, 415), 21: (0, 244), 22: (0, 252), 23: (0, 300), 24: (0, 269), 25: (0, 264), 26: (0, 237), 27: (0, 311), 28: (0, 239), 29: (0, 411), 30: (0, 380), 31: (0, 384), 32: (0, 394), 33: (0, 402), 34: (0, 397), 35: (0, 429), 36: (0, 420), 37: (0, 442), 38: (0, 427), 40: (0, 435), 41: (0, 432), 39: (0, 302)}, 96: {14: (0, 113), 61: (0, 315), 54: (0, 353)}, 97: {0: (0, 291), 1: (0, 283), 2: (0, 257), 3: (0, 287), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 9: (0, 306), 39: (0, 383), 10: (0, 8), 11: (0, 309), 12: (0, 295), 13: (0, 245), 14: (0, 249), 15: (0, 278), 16: (0, 296), 17: (0, 310), 18: (0, 308), 19: (0, 266), 20: (0, 288), 21: (0, 244), 22: (0, 252), 23: (0, 300), 24: (0, 269), 25: (0, 264), 26: (0, 237), 27: (0, 311), 28: (0, 239), 29: (0, 411), 30: (0, 380), 31: (0, 384), 32: (0, 394), 33: (0, 402), 34: (0, 397), 35: (0, 429), 36: (0, 420), 37: (0, 442), 38: (0, 427), 40: (0, 435), 41: (0, 432), 42: (0, 415)}, 98: {52: (0, 405), 61: (0, 392)}, 99: {101: (1, {'@': 110}), 40: (1, {'@': 110}), 10: (1, {'@': 110}), 26: (1, {'@': 110}), 1: (1, {'@': 110})}, 100: {62: (0, 268)}, 101: {0: (0, 291), 1: (0, 283), 2: (0, 257), 3: (0, 287), 4: (0, 258), 39: (0, 161), 6: (0, 251), 5: (0, 261), 7: (0, 292), 8: (0, 281), 9: (0, 306), 10: (0, 8), 11: (0, 309), 12: (0, 295), 13: (0, 245), 14: (0, 249), 15: (0, 278), 16: (0, 296), 17: (0, 310), 18: (0, 308), 19: (0, 266), 20: (0, 288), 21: (0, 244), 22: (0, 252), 23: (0, 300), 24: (0, 269), 25: (0, 264), 26: (0, 237), 27: (0, 311), 28: (0, 239), 29: (0, 411), 30: (0, 380), 31: (0, 384), 32: (0, 394), 33: (0, 402), 34: (0, 397), 35: (0, 429), 36: (0, 420), 37: (0, 442), 38: (0, 427), 40: (0, 435), 41: (0, 432), 42: (0, 415)}, 102: {10: (0, 8), 16: (0, 136)}, 103: {52: (0, 381)}, 104: {92: (0, 82), 16: (0, 77), 89: (0, 83), 99: (0, 412), 100: (0, 398), 109: (0, 338), 101: (0, 425), 32: (0, 388), 40: (0, 437), 110: (0, 444), 10: (0, 8), 94: (0, 117), 95: (0, 143), 96: (0, 157), 90: (0, 171), 1: (0, 167), 26: (0, 237), 54: (1, {'@': 84})}, 105: {14: (0, 113), 52: (1, {'@': 111}), 61: (1, {'@': 111})}, 106: {52: (0, 166)}, 107: {25: (0, 264), 29: (0, 120)}, 108: {16: (0, 273), 10: (0, 8)}, 109: {88: (0, 294), 16: (0, 22), 10: (0, 8)}, 110: {54: (0, 440), 12: (1, {'@': 112}), 44: (1, {'@': 112}), 19: (1, {'@': 112}), 18: (1, {'@': 112}), 46: (1, {'@': 112}), 31: (1, {'@': 112}), 2: (1, {'@': 112}), 55: (1, {'@': 112}), 56: (1, {'@': 112}), 47: (1, {'@': 112}), 24: (1, {'@': 112}), 58: (1, {'@': 112})}, 111: {68: (1, {'@': 113}), 62: (1, {'@': 113}), 54: (1, {'@': 113}), 61: (1, {'@': 113}), 57: (1, {'@': 113}), 45: (1, {'@': 113}), 72: (1, {'@': 113}), 73: (1, {'@': 113}), 52: (1, {'@': 113}), 74: (1, {'@': 113}), 66: (1, {'@': 113})}, 112: {29: (0, 168), 25: (0, 264)}, 113: {14: (0, 313)}, 114: {10: (0, 8), 16: (0, 321)}, 115: {25: (0, 264), 29: (0, 173)}, 116: {74: (1, {'@': 114}), 66: (1, {'@': 114})}, 117: {120: (0, 11), 67: (0, 331), 43: (1, {'@': 115}), 12: (1, {'@': 115}), 44: (1, {'@': 115}), 18: (1, {'@': 115}), 45: (1, {'@': 115}), 46: (1, {'@': 115}), 47: (1, {'@': 115}), 10: (1, {'@': 115}), 48: (1, {'@': 115}), 49: (1, {'@': 115}), 69: (1, {'@': 115}), 50: (1, {'@': 115}), 51: (1, {'@': 115}), 19: (1, {'@': 115}), 52: (1, {'@': 115}), 53: (1, {'@': 115}), 54: (1, {'@': 115}), 31: (1, {'@': 115}), 2: (1, {'@': 115}), 55: (1, {'@': 115}), 56: (1, {'@': 115}), 40: (1, {'@': 115}), 57: (1, {'@': 115}), 24: (1, {'@': 115}), 58: (1, {'@': 115}), 59: (1, {'@': 115}), 60: (1, {'@': 115}), 61: (1, {'@': 115}), 62: (1, {'@': 115})}, 118: {1: (0, 118), 21: (0, 187), 20: (0, 155), 121: (0, 210), 23: (0, 300), 10: (0, 8), 122: (0, 96), 29: (0, 176), 32: (0, 175), 16: (0, 67), 25: (0, 264), 26: (0, 237)}, 119: {68: (0, 373)}, 120: {61: (0, 142)}, 121: {61: (0, 410)}, 122: {67: (0, 198), 12: (1, {'@': 116}), 19: (1, {'@': 116}), 14: (1, {'@': 116}), 18: (1, {'@': 116}), 15: (1, {'@': 116}), 31: (1, {'@': 116}), 2: (1, {'@': 116}), 40: (1, {'@': 116}), 37: (1, {'@': 116}), 24: (1, {'@': 116}), 68: (1, {'@': 116}), 69: (1, {'@': 116}), 22: (1, {'@': 116}), 62: (1, {'@': 116}), 71: (1, {'@': 116}), 61: (1, {'@': 116}), 54: (1, {'@': 116}), 57: (1, {'@': 116}), 45: (1, {'@': 116}), 72: (1, {'@': 116}), 73: (1, {'@': 116}), 52: (1, {'@': 116}), 74: (1, {'@': 116}), 66: (1, {'@': 116})}, 123: {92: (0, 82), 16: (0, 77), 89: (0, 83), 99: (0, 412), 100: (0, 398), 101: (0, 425), 32: (0, 388), 40: (0, 437), 110: (0, 444), 10: (0, 8), 94: (0, 117), 95: (0, 143), 96: (0, 157), 90: (0, 171), 1: (0, 167), 109: (0, 370), 26: (0, 237), 54: (1, {'@': 84})}, 124: {12: (1, {'@': 117}), 18: (1, {'@': 117}), 15: (1, {'@': 117}), 6: (1, {'@': 117}), 37: (1, {'@': 117}), 10: (1, {'@': 117}), 26: (1, {'@': 117}), 1: (1, {'@': 117}), 22: (1, {'@': 117}), 23: (1, {'@': 117}), 25: (1, {'@': 117}), 19: (1, {'@': 117}), 14: (1, {'@': 117}), 31: (1, {'@': 117}), 2: (1, {'@': 117}), 40: (1, {'@': 117}), 24: (1, {'@': 117}), 42: (1, {'@': 117}), 20: (1, {'@': 117}), 45: (1, {'@': 117}), 72: (1, {'@': 117}), 68: (1, {'@': 117}), 73: (1, {'@': 117}), 62: (1, {'@': 117}), 61: (1, {'@': 117}), 52: (1, {'@': 117}), 54: (1, {'@': 117}), 57: (1, {'@': 117}), 74: (1, {'@': 117}), 66: (1, {'@': 117})}, 125: {54: (0, 359)}, 126: {61: (0, 419)}, 127: {44: (0, 49), 43: (1, {'@': 118}), 51: (1, {'@': 118}), 53: (1, {'@': 118}), 49: (1, {'@': 118}), 10: (1, {'@': 118}), 59: (1, {'@': 118}), 60: (1, {'@': 118}), 50: (1, {'@': 118}), 48: (1, {'@': 118})}, 128: {67: (1, {'@': 119}), 12: (1, {'@': 119}), 18: (1, {'@': 119}), 46: (1, {'@': 119}), 15: (1, {'@': 119}), 6: (1, {'@': 119}), 37: (1, {'@': 119}), 10: (1, {'@': 119}), 68: (1, {'@': 119}), 26: (1, {'@': 119}), 1: (1, {'@': 119}), 69: (1, {'@': 119}), 22: (1, {'@': 119}), 23: (1, {'@': 119}), 25: (1, {'@': 119}), 19: (1, {'@': 119}), 14: (1, {'@': 119}), 31: (1, {'@': 119}), 2: (1, {'@': 119}), 70: (1, {'@': 119}), 40: (1, {'@': 119}), 24: (1, {'@': 119}), 42: (1, {'@': 119}), 20: (1, {'@': 119}), 62: (1, {'@': 119}), 45: (1, {'@': 119}), 61: (1, {'@': 119}), 71: (1, {'@': 119}), 66: (1, {'@': 119}), 72: (1, {'@': 119}), 73: (1, {'@': 119}), 52: (1, {'@': 119}), 54: (1, {'@': 119}), 57: (1, {'@': 119}), 74: (1, {'@': 119}), 44: (1, {'@': 119})}, 129: {54: (0, 223), 61: (0, 225)}, 130: {89: (0, 83), 90: (0, 164), 28: (0, 133), 6: (0, 267), 91: (0, 242), 93: (0, 58), 32: (0, 388), 92: (0, 82), 10: (0, 8), 94: (0, 117), 16: (0, 77), 95: (0, 143), 18: (0, 253), 96: (0, 157), 97: (0, 284), 42: (0, 312), 98: (0, 265), 25: (0, 264), 26: (0, 237), 29: (0, 293), 99: (0, 412), 100: (0, 398), 1: (0, 304), 101: (0, 425), 102: (0, 275), 40: (0, 437), 103: (0, 289), 104: (0, 243), 105: (0, 282), 106: (0, 271)}, 131: {1: (0, 283), 23: (0, 300), 6: (0, 251), 20: (0, 288), 32: (0, 394), 10: (0, 8), 29: (0, 411), 36: (0, 420), 16: (0, 296), 38: (0, 427), 26: (0, 237), 21: (0, 244), 8: (0, 128), 42: (0, 415), 25: (0, 264), 67: (1, {'@': 120}), 18: (1, {'@': 120}), 45: (1, {'@': 120}), 37: (1, {'@': 120}), 68: (1, {'@': 120}), 62: (1, {'@': 120}), 61: (1, {'@': 120}), 14: (1, {'@': 120}), 2: (1, {'@': 120}), 71: (1, {'@': 120}), 40: (1, {'@': 120}), 24: (1, {'@': 120}), 66: (1, {'@': 120}), 12: (1, {'@': 120}), 46: (1, {'@': 120}), 15: (1, {'@': 120}), 72: (1, {'@': 120}), 69: (1, {'@': 120}), 22: (1, {'@': 120}), 73: (1, {'@': 120}), 19: (1, {'@': 120}), 52: (1, {'@': 120}), 54: (1, {'@': 120}), 31: (1, {'@': 120}), 57: (1, {'@': 120}), 74: (1, {'@': 120}), 70: (1, {'@': 120})}, 132: {1: (0, 283), 23: (0, 300), 30: (0, 380), 6: (0, 251), 20: (0, 288), 8: (0, 281), 32: (0, 394), 10: (0, 8), 11: (0, 309), 36: (0, 420), 7: (0, 163), 5: (0, 261), 16: (0, 296), 38: (0, 427), 26: (0, 237), 21: (0, 244), 42: (0, 415), 25: (0, 264), 29: (0, 411)}, 133: {89: (0, 83), 90: (0, 164), 28: (0, 133), 6: (0, 267), 91: (0, 242), 32: (0, 388), 92: (0, 82), 10: (0, 8), 94: (0, 117), 16: (0, 77), 95: (0, 143), 18: (0, 253), 96: (0, 157), 97: (0, 284), 42: (0, 312), 98: (0, 265), 25: (0, 264), 26: (0, 237), 93: (0, 301), 29: (0, 293), 99: (0, 412), 100: (0, 398), 1: (0, 304), 101: (0, 425), 102: (0, 275), 40: (0, 437), 103: (0, 289), 104: (0, 243), 105: (0, 282), 106: (0, 271)}, 134: {61: (0, 204)}, 135: {62: (1, {'@': 121})}, 136: {1: (0, 395), 76: (1, {'@': 122}), 61: (1, {'@': 122}), 54: (1, {'@': 122})}, 137: {28: (1, {'@': 123}), 18: (1, {'@': 123}), 37: (1, {'@': 123}), 10: (1, {'@': 123}), 26: (1, {'@': 123}), 13: (1, {'@': 123}), 1: (1, {'@': 123}), 41: (1, {'@': 123}), 23: (1, {'@': 123}), 25: (1, {'@': 123}), 14: (1, {'@': 123}), 0: (1, {'@': 123}), 2: (1, {'@': 123}), 40: (1, {'@': 123}), 24: (1, {'@': 123}), 20: (1, {'@': 123}), 12: (1, {'@': 123}), 9: (1, {'@': 123}), 15: (1, {'@': 123}), 6: (1, {'@': 123}), 22: (1, {'@': 123}), 19: (1, {'@': 123}), 54: (1, {'@': 123}), 31: (1, {'@': 123}), 42: (1, {'@': 123})}, 138: {40: (0, 85), 12: (1, {'@': 124}), 19: (1, {'@': 124}), 14: (1, {'@': 124}), 18: (1, {'@': 124}), 15: (1, {'@': 124}), 31: (1, {'@': 124}), 2: (1, {'@': 124}), 37: (1, {'@': 124}), 24: (1, {'@': 124}), 68: (1, {'@': 124}), 22: (1, {'@': 124}), 62: (1, {'@': 124}), 71: (1, {'@': 124}), 61: (1, {'@': 124}), 54: (1, {'@': 124}), 57: (1, {'@': 124}), 45: (1, {'@': 124}), 72: (1, {'@': 124}), 73: (1, {'@': 124}), 52: (1, {'@': 124}), 74: (1, {'@': 124}), 66: (1, {'@': 124})}, 139: {43: (1, {'@': 125}), 12: (1, {'@': 125}), 44: (1, {'@': 125}), 45: (1, {'@': 125}), 10: (1, {'@': 125}), 48: (1, {'@': 125}), 49: (1, {'@': 125}), 50: (1, {'@': 125}), 51: (1, {'@': 125}), 19: (1, {'@': 125}), 52: (1, {'@': 125}), 53: (1, {'@': 125}), 54: (1, {'@': 125}), 55: (1, {'@': 125}), 57: (1, {'@': 125}), 59: (1, {'@': 125}), 60: (1, {'@': 125})}, 140: {1: (0, 283), 6: (0, 251), 7: (0, 292), 8: (0, 281), 33: (0, 76), 10: (0, 8), 16: (0, 296), 20: (0, 288), 21: (0, 244), 23: (0, 300), 25: (0, 264), 26: (0, 237), 29: (0, 411), 30: (0, 380), 32: (0, 394), 36: (0, 420), 5: (0, 261), 11: (0, 309), 38: (0, 427), 42: (0, 415)}, 141: {54: (0, 391)}, 142: {16: (0, 212), 10: (0, 8)}, 143: {43: (1, {'@': 112}), 12: (1, {'@': 112}), 44: (1, {'@': 112}), 18: (1, {'@': 112}), 45: (1, {'@': 112}), 46: (1, {'@': 112}), 47: (1, {'@': 112}), 10: (1, {'@': 112}), 48: (1, {'@': 112}), 49: (1, {'@': 112}), 50: (1, {'@': 112}), 51: (1, {'@': 112}), 19: (1, {'@': 112}), 52: (1, {'@': 112}), 53: (1, {'@': 112}), 54: (1, {'@': 112}), 31: (1, {'@': 112}), 2: (1, {'@': 112}), 55: (1, {'@': 112}), 56: (1, {'@': 112}), 57: (1, {'@': 112}), 24: (1, {'@': 112}), 58: (1, {'@': 112}), 59: (1, {'@': 112}), 60: (1, {'@': 112}), 61: (1, {'@': 112})}, 144: {0: (0, 291), 1: (0, 283), 2: (0, 257), 3: (0, 287), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 9: (0, 306), 10: (0, 8), 11: (0, 309), 12: (0, 295), 13: (0, 245), 14: (0, 249), 15: (0, 278), 16: (0, 296), 17: (0, 310), 18: (0, 308), 19: (0, 266), 20: (0, 288), 21: (0, 244), 22: (0, 252), 23: (0, 300), 24: (0, 269), 25: (0, 264), 26: (0, 237), 27: (0, 311), 28: (0, 239), 29: (0, 411), 30: (0, 380), 31: (0, 384), 32: (0, 394), 33: (0, 402), 34: (0, 397), 35: (0, 429), 36: (0, 420), 37: (0, 442), 38: (0, 427), 40: (0, 435), 41: (0, 432), 42: (0, 415), 39: (0, 87)}, 145: {44: (0, 49), 43: (1, {'@': 126}), 45: (1, {'@': 126}), 10: (1, {'@': 126}), 48: (1, {'@': 126}), 49: (1, {'@': 126}), 50: (1, {'@': 126}), 51: (1, {'@': 126}), 52: (1, {'@': 126}), 53: (1, {'@': 126}), 54: (1, {'@': 126}), 57: (1, {'@': 126}), 59: (1, {'@': 126}), 60: (1, {'@': 126})}, 146: {73: (0, 7)}, 147: {54: (0, 148), 61: (0, 137)}, 148: {67: (1, {'@': 127}), 12: (1, {'@': 127}), 18: (1, {'@': 127}), 46: (1, {'@': 127}), 15: (1, {'@': 127}), 6: (1, {'@': 127}), 37: (1, {'@': 127}), 10: (1, {'@': 127}), 68: (1, {'@': 127}), 26: (1, {'@': 127}), 1: (1, {'@': 127}), 69: (1, {'@': 127}), 22: (1, {'@': 127}), 23: (1, {'@': 127}), 25: (1, {'@': 127}), 19: (1, {'@': 127}), 14: (1, {'@': 127}), 31: (1, {'@': 127}), 2: (1, {'@': 127}), 70: (1, {'@': 127}), 40: (1, {'@': 127}), 24: (1, {'@': 127}), 42: (1, {'@': 127}), 20: (1, {'@': 127}), 45: (1, {'@': 127}), 62: (1, {'@': 127}), 61: (1, {'@': 127}), 71: (1, {'@': 127}), 66: (1, {'@': 127}), 72: (1, {'@': 127}), 73: (1, {'@': 127}), 52: (1, {'@': 127}), 54: (1, {'@': 127}), 57: (1, {'@': 127}), 74: (1, {'@': 127}), 44: (1, {'@': 127})}, 149: {52: (0, 401)}, 150: {61: (0, 413)}, 151: {44: (0, 49), 43: (1, {'@': 128}), 45: (1, {'@': 128}), 10: (1, {'@': 128}), 48: (1, {'@': 128}), 49: (1, {'@': 128}), 50: (1, {'@': 128}), 51: (1, {'@': 128}), 52: (1, {'@': 128}), 53: (1, {'@': 128}), 54: (1, {'@': 128}), 57: (1, {'@': 128}), 59: (1, {'@': 128}), 60: (1, {'@': 128})}, 152: {10: (0, 8), 16: (0, 341)}, 153: {43: (1, {'@': 129}), 51: (1, {'@': 129}), 53: (1, {'@': 129}), 49: (1, {'@': 129}), 10: (1, {'@': 129}), 59: (1, {'@': 129}), 60: (1, {'@': 129}), 50: (1, {'@': 129}), 48: (1, {'@': 129})}, 154: {43: (1, {'@': 130}), 51: (1, {'@': 130}), 53: (1, {'@': 130}), 49: (1, {'@': 130}), 10: (1, {'@': 130}), 59: (1, {'@': 130}), 60: (1, {'@': 130}), 50: (1, {'@': 130}), 48: (1, {'@': 130})}, 155: {1: (0, 118), 21: (0, 187), 20: (0, 155), 23: (0, 300), 10: (0, 8), 122: (0, 297), 29: (0, 176), 52: (0, 84), 32: (0, 175), 16: (0, 67), 25: (0, 264), 26: (0, 237)}, 156: {54: (0, 385)}, 157: {123: (0, 1), 40: (0, 325), 43: (1, {'@': 131}), 12: (1, {'@': 131}), 44: (1, {'@': 131}), 18: (1, {'@': 131}), 45: (1, {'@': 131}), 46: (1, {'@': 131}), 47: (1, {'@': 131}), 10: (1, {'@': 131}), 48: (1, {'@': 131}), 49: (1, {'@': 131}), 50: (1, {'@': 131}), 51: (1, {'@': 131}), 19: (1, {'@': 131}), 52: (1, {'@': 131}), 53: (1, {'@': 131}), 54: (1, {'@': 131}), 31: (1, {'@': 131}), 2: (1, {'@': 131}), 55: (1, {'@': 131}), 56: (1, {'@': 131}), 57: (1, {'@': 131}), 24: (1, {'@': 131}), 58: (1, {'@': 131}), 59: (1, {'@': 131}), 60: (1, {'@': 131}), 61: (1, {'@': 131}), 62: (1, {'@': 131})}, 158: {14: (0, 113), 71: (0, 94)}, 159: {61: (0, 318)}, 160: {16: (0, 334), 10: (0, 8)}, 161: {74: (1, {'@': 132}), 66: (1, {'@': 132})}, 162: {54: (0, 314)}, 163: {18: (1, {'@': 133}), 45: (1, {'@': 133}), 37: (1, {'@': 133}), 68: (1, {'@': 133}), 62: (1, {'@': 133}), 61: (1, {'@': 133}), 14: (1, {'@': 133}), 2: (1, {'@': 133}), 71: (1, {'@': 133}), 40: (1, {'@': 133}), 24: (1, {'@': 133}), 66: (1, {'@': 133}), 12: (1, {'@': 133}), 15: (1, {'@': 133}), 72: (1, {'@': 133}), 69: (1, {'@': 133}), 22: (1, {'@': 133}), 73: (1, {'@': 133}), 19: (1, {'@': 133}), 52: (1, {'@': 133}), 54: (1, {'@': 133}), 31: (1, {'@': 133}), 57: (1, {'@': 133}), 74: (1, {'@': 133})}, 164: {24: (0, 192), 124: (0, 328), 56: (0, 322), 125: (0, 337), 31: (0, 355), 47: (0, 327), 2: (0, 319), 18: (0, 27), 46: (0, 15), 58: (0, 53), 126: (0, 42), 43: (1, {'@': 134}), 12: (1, {'@': 134}), 44: (1, {'@': 134}), 45: (1, {'@': 134}), 10: (1, {'@': 134}), 48: (1, {'@': 134}), 49: (1, {'@': 134}), 50: (1, {'@': 134}), 51: (1, {'@': 134}), 19: (1, {'@': 134}), 52: (1, {'@': 134}), 53: (1, {'@': 134}), 54: (1, {'@': 134}), 55: (1, {'@': 134}), 57: (1, {'@': 134}), 59: (1, {'@': 134}), 60: (1, {'@': 134})}, 165: {0: (0, 291), 1: (0, 283), 39: (0, 228), 7: (0, 292), 8: (0, 281), 9: (0, 306), 12: (0, 295), 13: (0, 245), 16: (0, 296), 20: (0, 288), 21: (0, 244), 24: (0, 269), 26: (0, 237), 3: (0, 287), 28: (0, 239), 23: (0, 300), 31: (0, 384), 30: (0, 380), 33: (0, 402), 37: (0, 442), 11: (0, 309), 38: (0, 427), 5: (0, 261), 41: (0, 432), 34: (0, 397), 42: (0, 415), 17: (0, 310), 2: (0, 257), 4: (0, 258), 6: (0, 251), 10: (0, 8), 14: (0, 249), 15: (0, 278), 18: (0, 308), 19: (0, 266), 22: (0, 252), 25: (0, 264), 27: (0, 311), 29: (0, 411), 32: (0, 394), 35: (0, 429), 36: (0, 420), 40: (0, 435), 68: (1, {'@': 135}), 62: (1, {'@': 135}), 54: (1, {'@': 135}), 61: (1, {'@': 135}), 57: (1, {'@': 135}), 45: (1, {'@': 135}), 72: (1, {'@': 135}), 73: (1, {'@': 135}), 52: (1, {'@': 135}), 74: (1, {'@': 135}), 66: (1, {'@': 135})}, 166: {67: (1, {'@': 136}), 12: (1, {'@': 136}), 18: (1, {'@': 136}), 46: (1, {'@': 136}), 15: (1, {'@': 136}), 6: (1, {'@': 136}), 37: (1, {'@': 136}), 10: (1, {'@': 136}), 68: (1, {'@': 136}), 26: (1, {'@': 136}), 1: (1, {'@': 136}), 69: (1, {'@': 136}), 22: (1, {'@': 136}), 23: (1, {'@': 136}), 25: (1, {'@': 136}), 19: (1, {'@': 136}), 14: (1, {'@': 136}), 31: (1, {'@': 136}), 2: (1, {'@': 136}), 70: (1, {'@': 136}), 40: (1, {'@': 136}), 24: (1, {'@': 136}), 42: (1, {'@': 136}), 20: (1, {'@': 136}), 45: (1, {'@': 136}), 62: (1, {'@': 136}), 61: (1, {'@': 136}), 71: (1, {'@': 136}), 66: (1, {'@': 136}), 72: (1, {'@': 136}), 73: (1, {'@': 136}), 52: (1, {'@': 136}), 54: (1, {'@': 136}), 57: (1, {'@': 136}), 74: (1, {'@': 136}), 44: (1, {'@': 136})}, 167: {92: (0, 82), 95: (0, 342), 89: (0, 83), 99: (0, 412), 100: (0, 398), 16: (0, 326), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 94: (0, 117), 96: (0, 157), 1: (0, 167), 26: (0, 237)}, 168: {61: (0, 80)}, 169: {44: (0, 49), 43: (1, {'@': 137}), 51: (1, {'@': 137}), 53: (1, {'@': 137}), 49: (1, {'@': 137}), 10: (1, {'@': 137}), 59: (1, {'@': 137}), 60: (1, {'@': 137}), 50: (1, {'@': 137}), 48: (1, {'@': 137})}, 170: {1: (0, 283), 23: (0, 300), 6: (0, 251), 20: (0, 288), 8: (0, 281), 32: (0, 394), 10: (0, 8), 29: (0, 411), 5: (0, 131), 36: (0, 420), 16: (0, 296), 38: (0, 427), 26: (0, 237), 21: (0, 244), 42: (0, 415), 25: (0, 264)}, 171: {54: (1, {'@': 138}), 61: (1, {'@': 138})}, 172: {70: (0, 170), 67: (1, {'@': 139}), 12: (1, {'@': 139}), 19: (1, {'@': 139}), 14: (1, {'@': 139}), 18: (1, {'@': 139}), 46: (1, {'@': 139}), 15: (1, {'@': 139}), 31: (1, {'@': 139}), 2: (1, {'@': 139}), 40: (1, {'@': 139}), 37: (1, {'@': 139}), 24: (1, {'@': 139}), 68: (1, {'@': 139}), 69: (1, {'@': 139}), 22: (1, {'@': 139}), 62: (1, {'@': 139}), 45: (1, {'@': 139}), 72: (1, {'@': 139}), 73: (1, {'@': 139}), 61: (1, {'@': 139}), 52: (1, {'@': 139}), 54: (1, {'@': 139}), 57: (1, {'@': 139}), 71: (1, {'@': 139}), 74: (1, {'@': 139}), 66: (1, {'@': 139})}, 173: {54: (0, 433)}, 174: {1: (0, 283), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 10: (0, 8), 3: (0, 229), 11: (0, 309), 16: (0, 296), 20: (0, 288), 21: (0, 244), 23: (0, 300), 25: (0, 264), 26: (0, 237), 29: (0, 411), 27: (0, 311), 30: (0, 380), 32: (0, 394), 33: (0, 402), 36: (0, 420), 38: (0, 427), 40: (0, 435), 42: (0, 415)}, 175: {14: (1, {'@': 140}), 54: (1, {'@': 140}), 61: (1, {'@': 140}), 52: (1, {'@': 140}), 71: (1, {'@': 140}), 44: (1, {'@': 140})}, 176: {14: (1, {'@': 141}), 54: (1, {'@': 141}), 61: (1, {'@': 141}), 52: (1, {'@': 141}), 71: (1, {'@': 141}), 44: (1, {'@': 141})}, 177: {54: (1, {'@': 142}), 61: (1, {'@': 142})}, 178: {101: (1, {'@': 143}), 40: (1, {'@': 143}), 10: (1, {'@': 143}), 26: (1, {'@': 143}), 1: (1, {'@': 143})}, 179: {46: (0, 368), 43: (1, {'@': 144}), 67: (1, {'@': 144}), 12: (1, {'@': 144}), 44: (1, {'@': 144}), 18: (1, {'@': 144}), 45: (1, {'@': 144}), 47: (1, {'@': 144}), 10: (1, {'@': 144}), 48: (1, {'@': 144}), 49: (1, {'@': 144}), 69: (1, {'@': 144}), 50: (1, {'@': 144}), 51: (1, {'@': 144}), 19: (1, {'@': 144}), 52: (1, {'@': 144}), 53: (1, {'@': 144}), 54: (1, {'@': 144}), 31: (1, {'@': 144}), 2: (1, {'@': 144}), 55: (1, {'@': 144}), 56: (1, {'@': 144}), 40: (1, {'@': 144}), 57: (1, {'@': 144}), 24: (1, {'@': 144}), 58: (1, {'@': 144}), 59: (1, {'@': 144}), 60: (1, {'@': 144}), 61: (1, {'@': 144}), 62: (1, {'@': 144})}, 180: {43: (1, {'@': 145}), 12: (1, {'@': 145}), 44: (1, {'@': 145}), 45: (1, {'@': 145}), 10: (1, {'@': 145}), 48: (1, {'@': 145}), 49: (1, {'@': 145}), 50: (1, {'@': 145}), 51: (1, {'@': 145}), 19: (1, {'@': 145}), 52: (1, {'@': 145}), 53: (1, {'@': 145}), 54: (1, {'@': 145}), 55: (1, {'@': 145}), 57: (1, {'@': 145}), 59: (1, {'@': 145}), 60: (1, {'@': 145})}, 181: {54: (0, 135)}, 182: {67: (1, {'@': 146}), 12: (1, {'@': 146}), 18: (1, {'@': 146}), 46: (1, {'@': 146}), 15: (1, {'@': 146}), 6: (1, {'@': 146}), 37: (1, {'@': 146}), 10: (1, {'@': 146}), 68: (1, {'@': 146}), 26: (1, {'@': 146}), 1: (1, {'@': 146}), 69: (1, {'@': 146}), 22: (1, {'@': 146}), 23: (1, {'@': 146}), 25: (1, {'@': 146}), 19: (1, {'@': 146}), 14: (1, {'@': 146}), 31: (1, {'@': 146}), 2: (1, {'@': 146}), 70: (1, {'@': 146}), 40: (1, {'@': 146}), 24: (1, {'@': 146}), 42: (1, {'@': 146}), 20: (1, {'@': 146}), 45: (1, {'@': 146}), 62: (1, {'@': 146}), 61: (1, {'@': 146}), 71: (1, {'@': 146}), 66: (1, {'@': 146}), 72: (1, {'@': 146}), 73: (1, {'@': 146}), 52: (1, {'@': 146}), 54: (1, {'@': 146}), 57: (1, {'@': 146}), 74: (1, {'@': 146}), 44: (1, {'@': 146})}, 183: {1: (0, 283), 23: (0, 300), 30: (0, 380), 6: (0, 251), 20: (0, 288), 8: (0, 281), 32: (0, 394), 10: (0, 8), 29: (0, 411), 36: (0, 420), 5: (0, 261), 16: (0, 296), 11: (0, 191), 38: (0, 427), 26: (0, 237), 21: (0, 244), 42: (0, 415), 25: (0, 264)}, 184: {61: (1, {'@': 147})}, 185: {44: (0, 49), 43: (1, {'@': 148}), 45: (1, {'@': 148}), 10: (1, {'@': 148}), 48: (1, {'@': 148}), 49: (1, {'@': 148}), 50: (1, {'@': 148}), 51: (1, {'@': 148}), 52: (1, {'@': 148}), 53: (1, {'@': 148}), 54: (1, {'@': 148}), 57: (1, {'@': 148}), 59: (1, {'@': 148}), 60: (1, {'@': 148})}, 186: {1: (0, 283), 23: (0, 300), 6: (0, 251), 20: (0, 288), 8: (0, 281), 32: (0, 394), 10: (0, 8), 29: (0, 411), 5: (0, 14), 36: (0, 420), 16: (0, 296), 38: (0, 427), 26: (0, 237), 21: (0, 244), 42: (0, 415), 25: (0, 264)}, 187: {14: (1, {'@': 149}), 54: (1, {'@': 149}), 61: (1, {'@': 149}), 52: (1, {'@': 149}), 71: (1, {'@': 149}), 44: (1, {'@': 149})}, 188: {62: (0, 439), 43: (1, {'@': 150}), 51: (1, {'@': 150}), 53: (1, {'@': 150}), 49: (1, {'@': 150}), 10: (1, {'@': 150}), 59: (1, {'@': 150}), 60: (1, {'@': 150}), 50: (1, {'@': 150}), 48: (1, {'@': 150})}, 189: {65: (0, 116), 74: (0, 111), 66: (0, 320)}, 190: {67: (1, {'@': 151}), 18: (1, {'@': 151}), 45: (1, {'@': 151}), 37: (1, {'@': 151}), 68: (1, {'@': 151}), 62: (1, {'@': 151}), 61: (1, {'@': 151}), 14: (1, {'@': 151}), 2: (1, {'@': 151}), 71: (1, {'@': 151}), 40: (1, {'@': 151}), 24: (1, {'@': 151}), 66: (1, {'@': 151}), 12: (1, {'@': 151}), 15: (1, {'@': 151}), 72: (1, {'@': 151}), 69: (1, {'@': 151}), 22: (1, {'@': 151}), 73: (1, {'@': 151}), 19: (1, {'@': 151}), 52: (1, {'@': 151}), 54: (1, {'@': 151}), 31: (1, {'@': 151}), 57: (1, {'@': 151}), 74: (1, {'@': 151})}, 191: {67: (1, {'@': 152}), 18: (1, {'@': 152}), 45: (1, {'@': 152}), 37: (1, {'@': 152}), 68: (1, {'@': 152}), 62: (1, {'@': 152}), 61: (1, {'@': 152}), 14: (1, {'@': 152}), 2: (1, {'@': 152}), 71: (1, {'@': 152}), 40: (1, {'@': 152}), 24: (1, {'@': 152}), 66: (1, {'@': 152}), 12: (1, {'@': 152}), 15: (1, {'@': 152}), 72: (1, {'@': 152}), 69: (1, {'@': 152}), 22: (1, {'@': 152}), 73: (1, {'@': 152}), 19: (1, {'@': 152}), 52: (1, {'@': 152}), 54: (1, {'@': 152}), 31: (1, {'@': 152}), 57: (1, {'@': 152}), 74: (1, {'@': 152})}, 192: {92: (0, 82), 16: (0, 77), 89: (0, 83), 99: (0, 412), 100: (0, 398), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 31: (0, 178), 94: (0, 117), 95: (0, 143), 96: (0, 157), 1: (0, 167), 90: (0, 426), 26: (0, 237)}, 193: {31: (0, 72)}, 194: {63: (0, 428), 29: (0, 407), 25: (0, 264), 48: (0, 431)}, 195: {67: (1, {'@': 153}), 18: (1, {'@': 153}), 45: (1, {'@': 153}), 37: (1, {'@': 153}), 68: (1, {'@': 153}), 62: (1, {'@': 153}), 61: (1, {'@': 153}), 14: (1, {'@': 153}), 2: (1, {'@': 153}), 71: (1, {'@': 153}), 40: (1, {'@': 153}), 24: (1, {'@': 153}), 66: (1, {'@': 153}), 12: (1, {'@': 153}), 46: (1, {'@': 153}), 15: (1, {'@': 153}), 72: (1, {'@': 153}), 69: (1, {'@': 153}), 22: (1, {'@': 153}), 73: (1, {'@': 153}), 19: (1, {'@': 153}), 52: (1, {'@': 153}), 54: (1, {'@': 153}), 31: (1, {'@': 153}), 57: (1, {'@': 153}), 74: (1, {'@': 153})}, 196: {71: (0, 382)}, 197: {54: (0, 270)}, 198: {1: (0, 283), 23: (0, 300), 30: (0, 380), 6: (0, 251), 20: (0, 288), 8: (0, 281), 32: (0, 394), 11: (0, 190), 10: (0, 8), 29: (0, 411), 36: (0, 420), 5: (0, 261), 16: (0, 296), 38: (0, 427), 26: (0, 237), 21: (0, 244), 42: (0, 415), 25: (0, 264)}, 199: {43: (1, {'@': 154}), 51: (1, {'@': 154}), 53: (1, {'@': 154}), 49: (1, {'@': 154}), 10: (1, {'@': 154}), 59: (1, {'@': 154}), 60: (1, {'@': 154}), 50: (1, {'@': 154}), 48: (1, {'@': 154})}, 200: {54: (0, 276)}, 201: {89: (0, 83), 90: (0, 164), 28: (0, 133), 6: (0, 267), 91: (0, 242), 32: (0, 388), 10: (0, 8), 92: (0, 82), 94: (0, 117), 16: (0, 77), 95: (0, 143), 18: (0, 253), 93: (0, 127), 96: (0, 157), 97: (0, 284), 42: (0, 312), 98: (0, 265), 25: (0, 264), 26: (0, 237), 29: (0, 293), 99: (0, 412), 100: (0, 398), 1: (0, 304), 101: (0, 425), 102: (0, 275), 40: (0, 437), 103: (0, 289), 104: (0, 243), 105: (0, 282), 106: (0, 271)}, 202: {0: (0, 291), 1: (0, 283), 7: (0, 292), 8: (0, 281), 9: (0, 306), 12: (0, 295), 13: (0, 245), 16: (0, 296), 20: (0, 288), 21: (0, 244), 24: (0, 269), 26: (0, 237), 3: (0, 287), 28: (0, 239), 23: (0, 300), 31: (0, 384), 30: (0, 380), 33: (0, 402), 37: (0, 442), 11: (0, 309), 38: (0, 427), 5: (0, 261), 41: (0, 432), 34: (0, 397), 42: (0, 415), 17: (0, 310), 2: (0, 257), 4: (0, 258), 6: (0, 251), 10: (0, 8), 14: (0, 249), 15: (0, 278), 18: (0, 308), 19: (0, 266), 22: (0, 252), 25: (0, 264), 27: (0, 311), 29: (0, 411), 39: (0, 417), 32: (0, 394), 35: (0, 429), 36: (0, 420), 40: (0, 435), 68: (1, {'@': 155}), 62: (1, {'@': 155}), 54: (1, {'@': 155}), 61: (1, {'@': 155}), 57: (1, {'@': 155}), 45: (1, {'@': 155}), 72: (1, {'@': 155}), 73: (1, {'@': 155}), 52: (1, {'@': 155}), 74: (1, {'@': 155}), 66: (1, {'@': 155})}, 203: {67: (1, {'@': 156}), 44: (1, {'@': 156}), 18: (1, {'@': 156}), 45: (1, {'@': 156}), 10: (1, {'@': 156}), 49: (1, {'@': 156}), 50: (1, {'@': 156}), 62: (1, {'@': 156}), 61: (1, {'@': 156}), 51: (1, {'@': 156}), 55: (1, {'@': 156}), 2: (1, {'@': 156}), 40: (1, {'@': 156}), 24: (1, {'@': 156}), 59: (1, {'@': 156}), 60: (1, {'@': 156}), 43: (1, {'@': 156}), 12: (1, {'@': 156}), 46: (1, {'@': 156}), 47: (1, {'@': 156}), 48: (1, {'@': 156}), 69: (1, {'@': 156}), 19: (1, {'@': 156}), 53: (1, {'@': 156}), 52: (1, {'@': 156}), 54: (1, {'@': 156}), 57: (1, {'@': 156}), 31: (1, {'@': 156}), 56: (1, {'@': 156}), 58: (1, {'@': 156})}, 204: {16: (0, 22), 10: (0, 8), 88: (0, 255)}, 205: {61: (0, 366)}, 206: {25: (0, 264), 29: (0, 407), 63: (0, 286)}, 207: {1: (0, 283), 23: (0, 300), 6: (0, 251), 20: (0, 288), 32: (0, 394), 10: (0, 8), 29: (0, 411), 36: (0, 420), 44: (0, 95), 16: (0, 296), 38: (0, 427), 26: (0, 237), 21: (0, 244), 8: (0, 128), 42: (0, 415), 25: (0, 264)}, 208: {61: (0, 2), 48: (0, 17)}, 209: {61: (0, 109)}, 210: {122: (0, 329), 1: (0, 118), 21: (0, 187), 20: (0, 155), 23: (0, 300), 10: (0, 8), 54: (0, 323), 29: (0, 176), 32: (0, 175), 16: (0, 67), 25: (0, 264), 26: (0, 237)}, 211: {43: (1, {'@': 157}), 51: (1, {'@': 157}), 53: (1, {'@': 157}), 49: (1, {'@': 157}), 10: (1, {'@': 157}), 59: (1, {'@': 157}), 60: (1, {'@': 157}), 50: (1, {'@': 157}), 48: (1, {'@': 157})}, 212: {54: (0, 360)}, 213: {44: (1, {'@': 158}), 18: (1, {'@': 158}), 45: (1, {'@': 158}), 10: (1, {'@': 158}), 49: (1, {'@': 158}), 50: (1, {'@': 158}), 62: (1, {'@': 158}), 61: (1, {'@': 158}), 51: (1, {'@': 158}), 55: (1, {'@': 158}), 2: (1, {'@': 158}), 40: (1, {'@': 158}), 24: (1, {'@': 158}), 59: (1, {'@': 158}), 60: (1, {'@': 158}), 43: (1, {'@': 158}), 12: (1, {'@': 158}), 46: (1, {'@': 158}), 47: (1, {'@': 158}), 48: (1, {'@': 158}), 69: (1, {'@': 158}), 19: (1, {'@': 158}), 52: (1, {'@': 158}), 53: (1, {'@': 158}), 54: (1, {'@': 158}), 31: (1, {'@': 158}), 57: (1, {'@': 158}), 56: (1, {'@': 158}), 58: (1, {'@': 158})}, 214: {54: (0, 387)}, 215: {67: (1, {'@': 159}), 12: (1, {'@': 159}), 18: (1, {'@': 159}), 46: (1, {'@': 159}), 15: (1, {'@': 159}), 6: (1, {'@': 159}), 37: (1, {'@': 159}), 10: (1, {'@': 159}), 68: (1, {'@': 159}), 26: (1, {'@': 159}), 1: (1, {'@': 159}), 69: (1, {'@': 159}), 22: (1, {'@': 159}), 23: (1, {'@': 159}), 25: (1, {'@': 159}), 19: (1, {'@': 159}), 14: (1, {'@': 159}), 31: (1, {'@': 159}), 2: (1, {'@': 159}), 70: (1, {'@': 159}), 40: (1, {'@': 159}), 24: (1, {'@': 159}), 42: (1, {'@': 159}), 20: (1, {'@': 159}), 45: (1, {'@': 159}), 62: (1, {'@': 159}), 61: (1, {'@': 159}), 71: (1, {'@': 159}), 66: (1, {'@': 159}), 72: (1, {'@': 159}), 73: (1, {'@': 159}), 52: (1, {'@': 159}), 54: (1, {'@': 159}), 57: (1, {'@': 159}), 74: (1, {'@': 159}), 44: (1, {'@': 159})}, 216: {62: (1, {'@': 160}), 43: (1, {'@': 160}), 51: (1, {'@': 160}), 53: (1, {'@': 160}), 60: (1, {'@': 160}), 10: (1, {'@': 160}), 59: (1, {'@': 160}), 48: (1, {'@': 160}), 49: (1, {'@': 160}), 50: (1, {'@': 160})}, 217: {71: (0, 32)}, 218: {43: (1, {'@': 161}), 51: (1, {'@': 161}), 53: (1, {'@': 161}), 49: (1, {'@': 161}), 10: (1, {'@': 161}), 59: (1, {'@': 161}), 60: (1, {'@': 161}), 50: (1, {'@': 161}), 48: (1, {'@': 161})}, 219: {44: (1, {'@': 162}), 18: (1, {'@': 162}), 45: (1, {'@': 162}), 10: (1, {'@': 162}), 49: (1, {'@': 162}), 50: (1, {'@': 162}), 62: (1, {'@': 162}), 61: (1, {'@': 162}), 51: (1, {'@': 162}), 55: (1, {'@': 162}), 2: (1, {'@': 162}), 40: (1, {'@': 162}), 24: (1, {'@': 162}), 59: (1, {'@': 162}), 60: (1, {'@': 162}), 43: (1, {'@': 162}), 12: (1, {'@': 162}), 46: (1, {'@': 162}), 47: (1, {'@': 162}), 48: (1, {'@': 162}), 69: (1, {'@': 162}), 19: (1, {'@': 162}), 52: (1, {'@': 162}), 53: (1, {'@': 162}), 54: (1, {'@': 162}), 31: (1, {'@': 162}), 57: (1, {'@': 162}), 56: (1, {'@': 162}), 58: (1, {'@': 162})}, 220: {43: (1, {'@': 163}), 12: (1, {'@': 163}), 44: (1, {'@': 163}), 18: (1, {'@': 163}), 45: (1, {'@': 163}), 46: (1, {'@': 163}), 47: (1, {'@': 163}), 10: (1, {'@': 163}), 48: (1, {'@': 163}), 49: (1, {'@': 163}), 50: (1, {'@': 163}), 51: (1, {'@': 163}), 19: (1, {'@': 163}), 52: (1, {'@': 163}), 53: (1, {'@': 163}), 54: (1, {'@': 163}), 31: (1, {'@': 163}), 2: (1, {'@': 163}), 55: (1, {'@': 163}), 56: (1, {'@': 163}), 57: (1, {'@': 163}), 24: (1, {'@': 163}), 58: (1, {'@': 163}), 59: (1, {'@': 163}), 60: (1, {'@': 163}), 61: (1, {'@': 163})}, 221: {43: (1, {'@': 164}), 51: (1, {'@': 164}), 53: (1, {'@': 164}), 49: (1, {'@': 164}), 10: (1, {'@': 164}), 59: (1, {'@': 164}), 60: (1, {'@': 164}), 50: (1, {'@': 164}), 48: (1, {'@': 164})}, 222: {62: (0, 59)}, 223: {67: (1, {'@': 165}), 12: (1, {'@': 165}), 18: (1, {'@': 165}), 46: (1, {'@': 165}), 15: (1, {'@': 165}), 6: (1, {'@': 165}), 37: (1, {'@': 165}), 10: (1, {'@': 165}), 68: (1, {'@': 165}), 26: (1, {'@': 165}), 1: (1, {'@': 165}), 69: (1, {'@': 165}), 22: (1, {'@': 165}), 23: (1, {'@': 165}), 25: (1, {'@': 165}), 19: (1, {'@': 165}), 14: (1, {'@': 165}), 31: (1, {'@': 165}), 2: (1, {'@': 165}), 70: (1, {'@': 165}), 40: (1, {'@': 165}), 24: (1, {'@': 165}), 42: (1, {'@': 165}), 20: (1, {'@': 165}), 45: (1, {'@': 165}), 62: (1, {'@': 165}), 61: (1, {'@': 165}), 71: (1, {'@': 165}), 66: (1, {'@': 165}), 72: (1, {'@': 165}), 73: (1, {'@': 165}), 52: (1, {'@': 165}), 54: (1, {'@': 165}), 57: (1, {'@': 165}), 74: (1, {'@': 165}), 44: (1, {'@': 165})}, 224: {75: (0, 152), 67: (1, {'@': 166}), 44: (1, {'@': 166}), 18: (1, {'@': 166}), 45: (1, {'@': 166}), 10: (1, {'@': 166}), 49: (1, {'@': 166}), 50: (1, {'@': 166}), 62: (1, {'@': 166}), 61: (1, {'@': 166}), 51: (1, {'@': 166}), 55: (1, {'@': 166}), 2: (1, {'@': 166}), 40: (1, {'@': 166}), 24: (1, {'@': 166}), 59: (1, {'@': 166}), 60: (1, {'@': 166}), 43: (1, {'@': 166}), 12: (1, {'@': 166}), 46: (1, {'@': 166}), 47: (1, {'@': 166}), 48: (1, {'@': 166}), 69: (1, {'@': 166}), 52: (1, {'@': 166}), 19: (1, {'@': 166}), 53: (1, {'@': 166}), 54: (1, {'@': 166}), 31: (1, {'@': 166}), 57: (1, {'@': 166}), 56: (1, {'@': 166}), 58: (1, {'@': 166})}, 225: {28: (1, {'@': 167}), 18: (1, {'@': 167}), 37: (1, {'@': 167}), 10: (1, {'@': 167}), 26: (1, {'@': 167}), 13: (1, {'@': 167}), 1: (1, {'@': 167}), 41: (1, {'@': 167}), 23: (1, {'@': 167}), 25: (1, {'@': 167}), 14: (1, {'@': 167}), 0: (1, {'@': 167}), 2: (1, {'@': 167}), 40: (1, {'@': 167}), 24: (1, {'@': 167}), 20: (1, {'@': 167}), 12: (1, {'@': 167}), 9: (1, {'@': 167}), 15: (1, {'@': 167}), 6: (1, {'@': 167}), 22: (1, {'@': 167}), 19: (1, {'@': 167}), 54: (1, {'@': 167}), 31: (1, {'@': 167}), 42: (1, {'@': 167})}, 226: {75: (0, 238), 62: (1, {'@': 168})}, 227: {43: (1, {'@': 169}), 67: (1, {'@': 169}), 12: (1, {'@': 169}), 44: (1, {'@': 169}), 18: (1, {'@': 169}), 45: (1, {'@': 169}), 46: (1, {'@': 169}), 47: (1, {'@': 169}), 75: (1, {'@': 169}), 10: (1, {'@': 169}), 48: (1, {'@': 169}), 49: (1, {'@': 169}), 69: (1, {'@': 169}), 50: (1, {'@': 169}), 51: (1, {'@': 169}), 19: (1, {'@': 169}), 52: (1, {'@': 169}), 53: (1, {'@': 169}), 54: (1, {'@': 169}), 31: (1, {'@': 169}), 2: (1, {'@': 169}), 55: (1, {'@': 169}), 56: (1, {'@': 169}), 40: (1, {'@': 169}), 57: (1, {'@': 169}), 24: (1, {'@': 169}), 58: (1, {'@': 169}), 59: (1, {'@': 169}), 60: (1, {'@': 169}), 61: (1, {'@': 169}), 62: (1, {'@': 169})}, 228: {45: (1, {'@': 170}), 72: (1, {'@': 170}), 68: (1, {'@': 170}), 73: (1, {'@': 170}), 62: (1, {'@': 170}), 61: (1, {'@': 170}), 52: (1, {'@': 170}), 54: (1, {'@': 170}), 57: (1, {'@': 170}), 74: (1, {'@': 170}), 66: (1, {'@': 170})}, 229: {35: (0, 174), 2: (0, 257), 37: (0, 442), 14: (0, 249), 15: (0, 278), 18: (0, 308), 19: (0, 266), 31: (0, 384), 22: (0, 252), 34: (0, 397), 24: (0, 269), 12: (0, 295), 17: (0, 310), 68: (1, {'@': 171}), 62: (1, {'@': 171}), 71: (1, {'@': 171}), 61: (1, {'@': 171}), 54: (1, {'@': 171}), 57: (1, {'@': 171}), 45: (1, {'@': 171}), 72: (1, {'@': 171}), 73: (1, {'@': 171}), 52: (1, {'@': 171}), 74: (1, {'@': 171}), 66: (1, {'@': 171})}, 230: {44: (0, 49), 54: (0, 139)}, 231: {43: (1, {'@': 172}), 67: (1, {'@': 172}), 12: (1, {'@': 172}), 44: (1, {'@': 172}), 18: (1, {'@': 172}), 45: (1, {'@': 172}), 46: (1, {'@': 172}), 47: (1, {'@': 172}), 75: (1, {'@': 172}), 10: (1, {'@': 172}), 48: (1, {'@': 172}), 49: (1, {'@': 172}), 69: (1, {'@': 172}), 50: (1, {'@': 172}), 51: (1, {'@': 172}), 19: (1, {'@': 172}), 52: (1, {'@': 172}), 53: (1, {'@': 172}), 54: (1, {'@': 172}), 31: (1, {'@': 172}), 2: (1, {'@': 172}), 55: (1, {'@': 172}), 56: (1, {'@': 172}), 40: (1, {'@': 172}), 57: (1, {'@': 172}), 24: (1, {'@': 172}), 58: (1, {'@': 172}), 59: (1, {'@': 172}), 60: (1, {'@': 172}), 61: (1, {'@': 172}), 62: (1, {'@': 172})}, 232: {54: (1, {'@': 173}), 61: (1, {'@': 173})}, 233: {54: (0, 389)}, 234: {92: (0, 82), 16: (0, 77), 89: (0, 83), 99: (0, 412), 100: (0, 398), 101: (0, 425), 32: (0, 388), 40: (0, 437), 110: (0, 444), 10: (0, 8), 109: (0, 125), 94: (0, 117), 95: (0, 143), 96: (0, 157), 90: (0, 171), 1: (0, 167), 26: (0, 237), 54: (1, {'@': 84})}, 235: {44: (1, {'@': 174}), 18: (1, {'@': 174}), 45: (1, {'@': 174}), 10: (1, {'@': 174}), 49: (1, {'@': 174}), 50: (1, {'@': 174}), 62: (1, {'@': 174}), 61: (1, {'@': 174}), 51: (1, {'@': 174}), 55: (1, {'@': 174}), 2: (1, {'@': 174}), 40: (1, {'@': 174}), 24: (1, {'@': 174}), 59: (1, {'@': 174}), 60: (1, {'@': 174}), 43: (1, {'@': 174}), 12: (1, {'@': 174}), 46: (1, {'@': 174}), 47: (1, {'@': 174}), 48: (1, {'@': 174}), 19: (1, {'@': 174}), 53: (1, {'@': 174}), 54: (1, {'@': 174}), 52: (1, {'@': 174}), 31: (1, {'@': 174}), 57: (1, {'@': 174}), 56: (1, {'@': 174}), 58: (1, {'@': 174})}, 236: {43: (1, {'@': 175}), 51: (1, {'@': 175}), 53: (1, {'@': 175}), 49: (1, {'@': 175}), 10: (1, {'@': 175}), 59: (1, {'@': 175}), 60: (1, {'@': 175}), 50: (1, {'@': 175}), 48: (1, {'@': 175})}, 237: {67: (1, {'@': 176}), 12: (1, {'@': 176}), 18: (1, {'@': 176}), 46: (1, {'@': 176}), 15: (1, {'@': 176}), 6: (1, {'@': 176}), 37: (1, {'@': 176}), 10: (1, {'@': 176}), 68: (1, {'@': 176}), 26: (1, {'@': 176}), 1: (1, {'@': 176}), 69: (1, {'@': 176}), 22: (1, {'@': 176}), 23: (1, {'@': 176}), 25: (1, {'@': 176}), 19: (1, {'@': 176}), 14: (1, {'@': 176}), 31: (1, {'@': 176}), 2: (1, {'@': 176}), 70: (1, {'@': 176}), 40: (1, {'@': 176}), 24: (1, {'@': 176}), 42: (1, {'@': 176}), 20: (1, {'@': 176}), 45: (1, {'@': 176}), 62: (1, {'@': 176}), 61: (1, {'@': 176}), 71: (1, {'@': 176}), 66: (1, {'@': 176}), 72: (1, {'@': 176}), 73: (1, {'@': 176}), 52: (1, {'@': 176}), 54: (1, {'@': 176}), 57: (1, {'@': 176}), 74: (1, {'@': 176}), 43: (1, {'@': 176}), 44: (1, {'@': 176}), 47: (1, {'@': 176}), 75: (1, {'@': 176}), 48: (1, {'@': 176}), 49: (1, {'@': 176}), 50: (1, {'@': 176}), 51: (1, {'@': 176}), 53: (1, {'@': 176}), 55: (1, {'@': 176}), 56: (1, {'@': 176}), 58: (1, {'@': 176}), 59: (1, {'@': 176}), 60: (1, {'@': 176})}, 238: {16: (0, 377), 10: (0, 8)}, 239: {0: (0, 291), 1: (0, 283), 2: (0, 257), 3: (0, 287), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 9: (0, 306), 10: (0, 8), 39: (0, 63), 11: (0, 309), 12: (0, 295), 13: (0, 245), 14: (0, 249), 15: (0, 278), 16: (0, 296), 17: (0, 310), 18: (0, 308), 19: (0, 266), 20: (0, 288), 21: (0, 244), 22: (0, 252), 23: (0, 300), 24: (0, 269), 25: (0, 264), 26: (0, 237), 27: (0, 311), 28: (0, 239), 29: (0, 411), 30: (0, 380), 31: (0, 384), 32: (0, 394), 33: (0, 402), 34: (0, 397), 35: (0, 429), 36: (0, 420), 37: (0, 442), 38: (0, 427), 40: (0, 435), 41: (0, 432), 42: (0, 415)}, 240: {59: (0, 3), 113: (0, 374)}, 241: {61: (0, 108)}, 242: {12: (0, 41), 55: (0, 24), 19: (0, 31), 43: (1, {'@': 177}), 44: (1, {'@': 177}), 45: (1, {'@': 177}), 10: (1, {'@': 177}), 48: (1, {'@': 177}), 49: (1, {'@': 177}), 50: (1, {'@': 177}), 51: (1, {'@': 177}), 52: (1, {'@': 177}), 53: (1, {'@': 177}), 54: (1, {'@': 177}), 57: (1, {'@': 177}), 59: (1, {'@': 177}), 60: (1, {'@': 177})}, 243: {10: (1, {'@': 178})}, 244: {67: (1, {'@': 179}), 12: (1, {'@': 179}), 18: (1, {'@': 179}), 46: (1, {'@': 179}), 15: (1, {'@': 179}), 6: (1, {'@': 179}), 37: (1, {'@': 179}), 10: (1, {'@': 179}), 68: (1, {'@': 179}), 26: (1, {'@': 179}), 1: (1, {'@': 179}), 69: (1, {'@': 179}), 22: (1, {'@': 179}), 23: (1, {'@': 179}), 25: (1, {'@': 179}), 19: (1, {'@': 179}), 14: (1, {'@': 179}), 31: (1, {'@': 179}), 2: (1, {'@': 179}), 70: (1, {'@': 179}), 40: (1, {'@': 179}), 24: (1, {'@': 179}), 42: (1, {'@': 179}), 20: (1, {'@': 179}), 45: (1, {'@': 179}), 62: (1, {'@': 179}), 61: (1, {'@': 179}), 71: (1, {'@': 179}), 66: (1, {'@': 179}), 72: (1, {'@': 179}), 73: (1, {'@': 179}), 52: (1, {'@': 179}), 54: (1, {'@': 179}), 57: (1, {'@': 179}), 74: (1, {'@': 179}), 44: (1, {'@': 179})}, 245: {16: (0, 66), 1: (0, 118), 21: (0, 187), 20: (0, 155), 23: (0, 300), 10: (0, 8), 122: (0, 158), 29: (0, 176), 32: (0, 175), 25: (0, 264), 26: (0, 237)}, 246: {1: (0, 283), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 10: (0, 8), 3: (0, 229), 11: (0, 309), 16: (0, 296), 20: (0, 288), 21: (0, 244), 23: (0, 300), 25: (0, 264), 26: (0, 237), 29: (0, 411), 27: (0, 311), 30: (0, 380), 32: (0, 394), 33: (0, 402), 36: (0, 420), 38: (0, 427), 40: (0, 435), 42: (0, 415), 68: (1, {'@': 180}), 62: (1, {'@': 180}), 54: (1, {'@': 180}), 61: (1, {'@': 180}), 57: (1, {'@': 180}), 45: (1, {'@': 180}), 72: (1, {'@': 180}), 73: (1, {'@': 180}), 52: (1, {'@': 180}), 74: (1, {'@': 180}), 66: (1, {'@': 180})}, 247: {44: (0, 49), 43: (1, {'@': 181}), 45: (1, {'@': 181}), 10: (1, {'@': 181}), 48: (1, {'@': 181}), 49: (1, {'@': 181}), 50: (1, {'@': 181}), 51: (1, {'@': 181}), 52: (1, {'@': 181}), 53: (1, {'@': 181}), 54: (1, {'@': 181}), 57: (1, {'@': 181}), 59: (1, {'@': 181}), 60: (1, {'@': 181})}, 248: {1: (0, 104), 75: (0, 48), 20: (0, 346), 67: (1, {'@': 102}), 12: (1, {'@': 102}), 44: (1, {'@': 102}), 18: (1, {'@': 102}), 46: (1, {'@': 102}), 47: (1, {'@': 102}), 48: (1, {'@': 102}), 69: (1, {'@': 102}), 19: (1, {'@': 102}), 31: (1, {'@': 102}), 2: (1, {'@': 102}), 55: (1, {'@': 102}), 56: (1, {'@': 102}), 40: (1, {'@': 102}), 24: (1, {'@': 102}), 58: (1, {'@': 102})}, 249: {12: (1, {'@': 182}), 18: (1, {'@': 182}), 15: (1, {'@': 182}), 6: (1, {'@': 182}), 37: (1, {'@': 182}), 10: (1, {'@': 182}), 26: (1, {'@': 182}), 1: (1, {'@': 182}), 22: (1, {'@': 182}), 23: (1, {'@': 182}), 25: (1, {'@': 182}), 19: (1, {'@': 182}), 14: (1, {'@': 182}), 31: (1, {'@': 182}), 2: (1, {'@': 182}), 40: (1, {'@': 182}), 24: (1, {'@': 182}), 42: (1, {'@': 182}), 20: (1, {'@': 182}), 45: (1, {'@': 182}), 72: (1, {'@': 182}), 68: (1, {'@': 182}), 73: (1, {'@': 182}), 62: (1, {'@': 182}), 61: (1, {'@': 182}), 52: (1, {'@': 182}), 54: (1, {'@': 182}), 57: (1, {'@': 182}), 74: (1, {'@': 182}), 66: (1, {'@': 182})}, 250: {107: (0, 181), 10: (0, 8), 16: (0, 424)}, 251: {67: (1, {'@': 183}), 12: (1, {'@': 183}), 18: (1, {'@': 183}), 46: (1, {'@': 183}), 15: (1, {'@': 183}), 6: (1, {'@': 183}), 37: (1, {'@': 183}), 10: (1, {'@': 183}), 68: (1, {'@': 183}), 26: (1, {'@': 183}), 1: (1, {'@': 183}), 69: (1, {'@': 183}), 22: (1, {'@': 183}), 23: (1, {'@': 183}), 25: (1, {'@': 183}), 19: (1, {'@': 183}), 14: (1, {'@': 183}), 31: (1, {'@': 183}), 2: (1, {'@': 183}), 70: (1, {'@': 183}), 40: (1, {'@': 183}), 24: (1, {'@': 183}), 42: (1, {'@': 183}), 20: (1, {'@': 183}), 45: (1, {'@': 183}), 62: (1, {'@': 183}), 61: (1, {'@': 183}), 71: (1, {'@': 183}), 66: (1, {'@': 183}), 72: (1, {'@': 183}), 73: (1, {'@': 183}), 52: (1, {'@': 183}), 54: (1, {'@': 183}), 57: (1, {'@': 183}), 74: (1, {'@': 183}), 44: (1, {'@': 183})}, 252: {12: (1, {'@': 184}), 18: (1, {'@': 184}), 15: (1, {'@': 184}), 6: (1, {'@': 184}), 37: (1, {'@': 184}), 10: (1, {'@': 184}), 26: (1, {'@': 184}), 1: (1, {'@': 184}), 22: (1, {'@': 184}), 23: (1, {'@': 184}), 25: (1, {'@': 184}), 19: (1, {'@': 184}), 14: (1, {'@': 184}), 31: (1, {'@': 184}), 2: (1, {'@': 184}), 40: (1, {'@': 184}), 24: (1, {'@': 184}), 42: (1, {'@': 184}), 20: (1, {'@': 184}), 45: (1, {'@': 184}), 72: (1, {'@': 184}), 68: (1, {'@': 184}), 73: (1, {'@': 184}), 62: (1, {'@': 184}), 61: (1, {'@': 184}), 52: (1, {'@': 184}), 54: (1, {'@': 184}), 57: (1, {'@': 184}), 74: (1, {'@': 184}), 66: (1, {'@': 184})}, 253: {89: (0, 83), 90: (0, 164), 6: (0, 267), 32: (0, 388), 10: (0, 8), 92: (0, 82), 94: (0, 117), 16: (0, 77), 95: (0, 143), 18: (0, 253), 96: (0, 157), 42: (0, 312), 25: (0, 264), 26: (0, 237), 29: (0, 293), 99: (0, 412), 100: (0, 398), 1: (0, 304), 101: (0, 425), 40: (0, 437), 106: (0, 271), 91: (0, 45)}, 254: {54: (0, 365)}, 255: {61: (0, 369)}, 256: {48: (0, 182)}, 257: {12: (1, {'@': 185}), 18: (1, {'@': 185}), 15: (1, {'@': 185}), 6: (1, {'@': 185}), 37: (1, {'@': 185}), 10: (1, {'@': 185}), 26: (1, {'@': 185}), 1: (1, {'@': 185}), 22: (1, {'@': 185}), 23: (1, {'@': 185}), 25: (1, {'@': 185}), 19: (1, {'@': 185}), 14: (1, {'@': 185}), 31: (1, {'@': 185}), 2: (1, {'@': 185}), 40: (1, {'@': 185}), 24: (1, {'@': 185}), 42: (1, {'@': 185}), 20: (1, {'@': 185}), 45: (1, {'@': 185}), 72: (1, {'@': 185}), 68: (1, {'@': 185}), 73: (1, {'@': 185}), 62: (1, {'@': 185}), 61: (1, {'@': 185}), 52: (1, {'@': 185}), 54: (1, {'@': 185}), 57: (1, {'@': 185}), 74: (1, {'@': 185}), 66: (1, {'@': 185})}, 258: {12: (1, {'@': 186}), 19: (1, {'@': 186}), 14: (1, {'@': 186}), 18: (1, {'@': 186}), 15: (1, {'@': 186}), 31: (1, {'@': 186}), 2: (1, {'@': 186}), 37: (1, {'@': 186}), 24: (1, {'@': 186}), 68: (1, {'@': 186}), 22: (1, {'@': 186}), 62: (1, {'@': 186}), 71: (1, {'@': 186}), 61: (1, {'@': 186}), 54: (1, {'@': 186}), 57: (1, {'@': 186}), 45: (1, {'@': 186}), 72: (1, {'@': 186}), 73: (1, {'@': 186}), 52: (1, {'@': 186}), 74: (1, {'@': 186}), 66: (1, {'@': 186})}, 259: {57: (0, 362)}, 260: {127: (0, 441), 72: (0, 202), 68: (1, {'@': 187}), 62: (1, {'@': 187}), 54: (1, {'@': 187}), 61: (1, {'@': 187}), 57: (1, {'@': 187}), 45: (1, {'@': 187}), 73: (1, {'@': 187}), 52: (1, {'@': 187}), 74: (1, {'@': 187}), 66: (1, {'@': 187})}, 261: {1: (0, 283), 70: (0, 186), 23: (0, 300), 6: (0, 251), 20: (0, 288), 128: (0, 172), 32: (0, 394), 10: (0, 8), 29: (0, 411), 36: (0, 420), 16: (0, 296), 38: (0, 427), 26: (0, 237), 21: (0, 244), 8: (0, 128), 42: (0, 415), 25: (0, 264), 67: (1, {'@': 188}), 12: (1, {'@': 188}), 19: (1, {'@': 188}), 14: (1, {'@': 188}), 18: (1, {'@': 188}), 46: (1, {'@': 188}), 15: (1, {'@': 188}), 31: (1, {'@': 188}), 2: (1, {'@': 188}), 40: (1, {'@': 188}), 37: (1, {'@': 188}), 24: (1, {'@': 188}), 68: (1, {'@': 188}), 69: (1, {'@': 188}), 22: (1, {'@': 188}), 62: (1, {'@': 188}), 45: (1, {'@': 188}), 72: (1, {'@': 188}), 73: (1, {'@': 188}), 61: (1, {'@': 188}), 52: (1, {'@': 188}), 54: (1, {'@': 188}), 57: (1, {'@': 188}), 71: (1, {'@': 188}), 74: (1, {'@': 188}), 66: (1, {'@': 188})}, 262: {54: (0, 221)}, 263: {35: (0, 174), 2: (0, 257), 37: (0, 442), 14: (0, 249), 15: (0, 278), 18: (0, 308), 19: (0, 266), 31: (0, 384), 22: (0, 252), 34: (0, 397), 24: (0, 269), 12: (0, 295), 17: (0, 310), 68: (1, {'@': 189}), 62: (1, {'@': 189}), 54: (1, {'@': 189}), 61: (1, {'@': 189}), 57: (1, {'@': 189}), 45: (1, {'@': 189}), 72: (1, {'@': 189}), 73: (1, {'@': 189}), 52: (1, {'@': 189}), 74: (1, {'@': 189}), 66: (1, {'@': 189})}, 264: {67: (1, {'@': 190}), 12: (1, {'@': 190}), 18: (1, {'@': 190}), 46: (1, {'@': 190}), 15: (1, {'@': 190}), 6: (1, {'@': 190}), 37: (1, {'@': 190}), 10: (1, {'@': 190}), 68: (1, {'@': 190}), 26: (1, {'@': 190}), 1: (1, {'@': 190}), 69: (1, {'@': 190}), 22: (1, {'@': 190}), 23: (1, {'@': 190}), 25: (1, {'@': 190}), 19: (1, {'@': 190}), 14: (1, {'@': 190}), 31: (1, {'@': 190}), 2: (1, {'@': 190}), 70: (1, {'@': 190}), 40: (1, {'@': 190}), 24: (1, {'@': 190}), 42: (1, {'@': 190}), 20: (1, {'@': 190}), 45: (1, {'@': 190}), 62: (1, {'@': 190}), 61: (1, {'@': 190}), 71: (1, {'@': 190}), 66: (1, {'@': 190}), 72: (1, {'@': 190}), 73: (1, {'@': 190}), 52: (1, {'@': 190}), 54: (1, {'@': 190}), 57: (1, {'@': 190}), 74: (1, {'@': 190}), 43: (1, {'@': 190}), 44: (1, {'@': 190}), 48: (1, {'@': 190}), 49: (1, {'@': 190}), 50: (1, {'@': 190}), 51: (1, {'@': 190}), 53: (1, {'@': 190}), 55: (1, {'@': 190}), 59: (1, {'@': 190}), 60: (1, {'@': 190})}, 265: {10: (1, {'@': 191})}, 266: {12: (1, {'@': 192}), 18: (1, {'@': 192}), 15: (1, {'@': 192}), 6: (1, {'@': 192}), 37: (1, {'@': 192}), 10: (1, {'@': 192}), 26: (1, {'@': 192}), 1: (1, {'@': 192}), 22: (1, {'@': 192}), 23: (1, {'@': 192}), 25: (1, {'@': 192}), 19: (1, {'@': 192}), 14: (1, {'@': 192}), 31: (1, {'@': 192}), 2: (1, {'@': 192}), 40: (1, {'@': 192}), 24: (1, {'@': 192}), 42: (1, {'@': 192}), 20: (1, {'@': 192}), 45: (1, {'@': 192}), 72: (1, {'@': 192}), 68: (1, {'@': 192}), 73: (1, {'@': 192}), 62: (1, {'@': 192}), 61: (1, {'@': 192}), 52: (1, {'@': 192}), 54: (1, {'@': 192}), 57: (1, {'@': 192}), 74: (1, {'@': 192}), 66: (1, {'@': 192})}, 267: {43: (1, {'@': 193}), 12: (1, {'@': 193}), 44: (1, {'@': 193}), 45: (1, {'@': 193}), 10: (1, {'@': 193}), 48: (1, {'@': 193}), 49: (1, {'@': 193}), 50: (1, {'@': 193}), 51: (1, {'@': 193}), 19: (1, {'@': 193}), 52: (1, {'@': 193}), 53: (1, {'@': 193}), 54: (1, {'@': 193}), 55: (1, {'@': 193}), 57: (1, {'@': 193}), 59: (1, {'@': 193}), 60: (1, {'@': 193})}, 268: {89: (0, 83), 90: (0, 164), 28: (0, 133), 6: (0, 267), 91: (0, 242), 32: (0, 388), 10: (0, 8), 92: (0, 82), 94: (0, 117), 16: (0, 77), 95: (0, 143), 18: (0, 253), 96: (0, 157), 97: (0, 284), 42: (0, 312), 98: (0, 265), 25: (0, 264), 26: (0, 237), 29: (0, 293), 99: (0, 412), 100: (0, 398), 1: (0, 304), 101: (0, 425), 102: (0, 275), 40: (0, 437), 93: (0, 375), 103: (0, 289), 104: (0, 243), 105: (0, 282), 106: (0, 271)}, 269: {12: (1, {'@': 194}), 18: (1, {'@': 194}), 15: (1, {'@': 194}), 6: (1, {'@': 194}), 37: (1, {'@': 194}), 10: (1, {'@': 194}), 26: (1, {'@': 194}), 1: (1, {'@': 194}), 22: (1, {'@': 194}), 23: (1, {'@': 194}), 25: (1, {'@': 194}), 19: (1, {'@': 194}), 14: (1, {'@': 194}), 31: (1, {'@': 194}), 2: (1, {'@': 194}), 40: (1, {'@': 194}), 24: (1, {'@': 194}), 42: (1, {'@': 194}), 20: (1, {'@': 194}), 45: (1, {'@': 194}), 72: (1, {'@': 194}), 68: (1, {'@': 194}), 73: (1, {'@': 194}), 62: (1, {'@': 194}), 61: (1, {'@': 194}), 52: (1, {'@': 194}), 54: (1, {'@': 194}), 57: (1, {'@': 194}), 74: (1, {'@': 194}), 66: (1, {'@': 194})}, 270: {43: (1, {'@': 195}), 51: (1, {'@': 195}), 53: (1, {'@': 195}), 49: (1, {'@': 195}), 10: (1, {'@': 195}), 59: (1, {'@': 195}), 60: (1, {'@': 195}), 50: (1, {'@': 195}), 48: (1, {'@': 195})}, 271: {43: (1, {'@': 196}), 12: (1, {'@': 196}), 44: (1, {'@': 196}), 45: (1, {'@': 196}), 10: (1, {'@': 196}), 48: (1, {'@': 196}), 49: (1, {'@': 196}), 50: (1, {'@': 196}), 51: (1, {'@': 196}), 19: (1, {'@': 196}), 52: (1, {'@': 196}), 53: (1, {'@': 196}), 54: (1, {'@': 196}), 55: (1, {'@': 196}), 57: (1, {'@': 196}), 59: (1, {'@': 196}), 60: (1, {'@': 196})}, 272: {48: (0, 36), 44: (0, 49)}, 273: {54: (0, 51)}, 274: {92: (0, 82), 16: (0, 77), 89: (0, 83), 99: (0, 412), 100: (0, 398), 101: (0, 425), 32: (0, 388), 40: (0, 437), 110: (0, 444), 10: (0, 8), 94: (0, 117), 109: (0, 233), 95: (0, 143), 96: (0, 157), 90: (0, 171), 1: (0, 167), 26: (0, 237), 54: (1, {'@': 84})}, 275: {107: (0, 226), 129: (0, 86), 10: (0, 8), 16: (0, 424)}, 276: {43: (1, {'@': 197}), 51: (1, {'@': 197}), 53: (1, {'@': 197}), 49: (1, {'@': 197}), 10: (1, {'@': 197}), 59: (1, {'@': 197}), 60: (1, {'@': 197}), 50: (1, {'@': 197}), 48: (1, {'@': 197})}, 277: {62: (0, 154)}, 278: {12: (1, {'@': 198}), 18: (1, {'@': 198}), 15: (1, {'@': 198}), 6: (1, {'@': 198}), 37: (1, {'@': 198}), 10: (1, {'@': 198}), 26: (1, {'@': 198}), 1: (1, {'@': 198}), 22: (1, {'@': 198}), 23: (1, {'@': 198}), 25: (1, {'@': 198}), 19: (1, {'@': 198}), 14: (1, {'@': 198}), 31: (1, {'@': 198}), 2: (1, {'@': 198}), 40: (1, {'@': 198}), 24: (1, {'@': 198}), 42: (1, {'@': 198}), 20: (1, {'@': 198}), 45: (1, {'@': 198}), 72: (1, {'@': 198}), 68: (1, {'@': 198}), 73: (1, {'@': 198}), 62: (1, {'@': 198}), 61: (1, {'@': 198}), 52: (1, {'@': 198}), 54: (1, {'@': 198}), 57: (1, {'@': 198}), 74: (1, {'@': 198}), 66: (1, {'@': 198})}, 279: {67: (1, {'@': 199}), 18: (1, {'@': 199}), 45: (1, {'@': 199}), 37: (1, {'@': 199}), 68: (1, {'@': 199}), 62: (1, {'@': 199}), 61: (1, {'@': 199}), 14: (1, {'@': 199}), 2: (1, {'@': 199}), 71: (1, {'@': 199}), 40: (1, {'@': 199}), 24: (1, {'@': 199}), 66: (1, {'@': 199}), 12: (1, {'@': 199}), 46: (1, {'@': 199}), 15: (1, {'@': 199}), 72: (1, {'@': 199}), 69: (1, {'@': 199}), 22: (1, {'@': 199}), 73: (1, {'@': 199}), 19: (1, {'@': 199}), 52: (1, {'@': 199}), 54: (1, {'@': 199}), 31: (1, {'@': 199}), 57: (1, {'@': 199}), 74: (1, {'@': 199})}, 280: {54: (0, 211)}, 281: {67: (1, {'@': 200}), 12: (1, {'@': 200}), 18: (1, {'@': 200}), 46: (1, {'@': 200}), 15: (1, {'@': 200}), 6: (1, {'@': 200}), 37: (1, {'@': 200}), 10: (1, {'@': 200}), 68: (1, {'@': 200}), 26: (1, {'@': 200}), 1: (1, {'@': 200}), 69: (1, {'@': 200}), 22: (1, {'@': 200}), 23: (1, {'@': 200}), 25: (1, {'@': 200}), 19: (1, {'@': 200}), 14: (1, {'@': 200}), 31: (1, {'@': 200}), 2: (1, {'@': 200}), 70: (1, {'@': 200}), 40: (1, {'@': 200}), 24: (1, {'@': 200}), 42: (1, {'@': 200}), 20: (1, {'@': 200}), 62: (1, {'@': 200}), 45: (1, {'@': 200}), 61: (1, {'@': 200}), 71: (1, {'@': 200}), 66: (1, {'@': 200}), 72: (1, {'@': 200}), 73: (1, {'@': 200}), 52: (1, {'@': 200}), 54: (1, {'@': 200}), 57: (1, {'@': 200}), 74: (1, {'@': 200}), 44: (1, {'@': 200})}, 282: {10: (1, {'@': 201})}, 283: {0: (0, 291), 1: (0, 283), 130: (0, 64), 7: (0, 292), 8: (0, 281), 9: (0, 306), 12: (0, 295), 13: (0, 245), 16: (0, 296), 20: (0, 288), 21: (0, 244), 24: (0, 269), 26: (0, 237), 3: (0, 287), 28: (0, 239), 23: (0, 300), 31: (0, 384), 30: (0, 380), 33: (0, 402), 37: (0, 442), 11: (0, 309), 38: (0, 427), 5: (0, 261), 41: (0, 432), 34: (0, 397), 42: (0, 415), 17: (0, 310), 2: (0, 257), 4: (0, 258), 6: (0, 251), 10: (0, 8), 14: (0, 249), 15: (0, 278), 18: (0, 308), 19: (0, 266), 22: (0, 252), 25: (0, 264), 27: (0, 311), 29: (0, 411), 39: (0, 129), 32: (0, 394), 35: (0, 429), 36: (0, 420), 40: (0, 435)}, 284: {10: (1, {'@': 202})}, 285: {89: (0, 83), 100: (0, 398), 16: (0, 326), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 92: (0, 213), 94: (0, 117), 1: (0, 167), 26: (0, 237)}, 286: {48: (1, {'@': 203}), 61: (1, {'@': 203})}, 287: {35: (0, 246), 2: (0, 257), 31: (0, 384), 34: (0, 397), 12: (0, 295), 37: (0, 442), 14: (0, 249), 15: (0, 278), 18: (0, 308), 19: (0, 266), 22: (0, 252), 24: (0, 269), 17: (0, 310), 68: (1, {'@': 204}), 62: (1, {'@': 204}), 54: (1, {'@': 204}), 61: (1, {'@': 204}), 57: (1, {'@': 204}), 45: (1, {'@': 204}), 72: (1, {'@': 204}), 73: (1, {'@': 204}), 52: (1, {'@': 204}), 74: (1, {'@': 204}), 66: (1, {'@': 204})}, 288: {52: (0, 29), 0: (0, 291), 1: (0, 283), 39: (0, 348), 7: (0, 292), 8: (0, 281), 9: (0, 306), 12: (0, 295), 13: (0, 245), 16: (0, 296), 20: (0, 288), 21: (0, 244), 24: (0, 269), 26: (0, 237), 3: (0, 287), 28: (0, 239), 23: (0, 300), 31: (0, 384), 30: (0, 380), 33: (0, 402), 37: (0, 442), 11: (0, 309), 38: (0, 427), 5: (0, 261), 41: (0, 432), 34: (0, 397), 42: (0, 415), 17: (0, 310), 2: (0, 257), 4: (0, 258), 6: (0, 251), 10: (0, 8), 14: (0, 249), 15: (0, 278), 18: (0, 308), 19: (0, 266), 22: (0, 252), 25: (0, 264), 27: (0, 311), 29: (0, 411), 32: (0, 394), 35: (0, 429), 36: (0, 420), 40: (0, 435)}, 289: {107: (0, 226), 10: (0, 8), 129: (0, 100), 16: (0, 424)}, 290: {18: (1, {'@': 205}), 45: (1, {'@': 205}), 37: (1, {'@': 205}), 68: (1, {'@': 205}), 62: (1, {'@': 205}), 61: (1, {'@': 205}), 14: (1, {'@': 205}), 2: (1, {'@': 205}), 71: (1, {'@': 205}), 40: (1, {'@': 205}), 24: (1, {'@': 205}), 66: (1, {'@': 205}), 12: (1, {'@': 205}), 15: (1, {'@': 205}), 72: (1, {'@': 205}), 22: (1, {'@': 205}), 73: (1, {'@': 205}), 19: (1, {'@': 205}), 52: (1, {'@': 205}), 54: (1, {'@': 205}), 31: (1, {'@': 205}), 57: (1, {'@': 205}), 74: (1, {'@': 205})}, 291: {0: (0, 291), 1: (0, 283), 7: (0, 292), 8: (0, 281), 9: (0, 306), 12: (0, 295), 13: (0, 245), 16: (0, 296), 20: (0, 288), 21: (0, 244), 24: (0, 269), 26: (0, 237), 3: (0, 287), 28: (0, 239), 23: (0, 300), 31: (0, 384), 30: (0, 380), 39: (0, 260), 33: (0, 402), 37: (0, 442), 11: (0, 309), 38: (0, 427), 5: (0, 261), 41: (0, 432), 34: (0, 397), 42: (0, 415), 17: (0, 310), 2: (0, 257), 4: (0, 258), 6: (0, 251), 10: (0, 8), 14: (0, 249), 15: (0, 278), 18: (0, 308), 19: (0, 266), 22: (0, 252), 25: (0, 264), 27: (0, 311), 29: (0, 411), 32: (0, 394), 35: (0, 429), 36: (0, 420), 40: (0, 435)}, 292: {131: (0, 430), 69: (0, 132), 12: (1, {'@': 206}), 19: (1, {'@': 206}), 14: (1, {'@': 206}), 18: (1, {'@': 206}), 15: (1, {'@': 206}), 31: (1, {'@': 206}), 2: (1, {'@': 206}), 40: (1, {'@': 206}), 37: (1, {'@': 206}), 24: (1, {'@': 206}), 68: (1, {'@': 206}), 22: (1, {'@': 206}), 62: (1, {'@': 206}), 71: (1, {'@': 206}), 61: (1, {'@': 206}), 54: (1, {'@': 206}), 57: (1, {'@': 206}), 45: (1, {'@': 206}), 72: (1, {'@': 206}), 73: (1, {'@': 206}), 52: (1, {'@': 206}), 74: (1, {'@': 206}), 66: (1, {'@': 206})}, 293: {43: (1, {'@': 207}), 12: (1, {'@': 207}), 44: (1, {'@': 207}), 45: (1, {'@': 207}), 10: (1, {'@': 207}), 48: (1, {'@': 207}), 49: (1, {'@': 207}), 50: (1, {'@': 207}), 51: (1, {'@': 207}), 19: (1, {'@': 207}), 52: (1, {'@': 207}), 53: (1, {'@': 207}), 54: (1, {'@': 207}), 55: (1, {'@': 207}), 57: (1, {'@': 207}), 59: (1, {'@': 207}), 60: (1, {'@': 207})}, 294: {54: (0, 236)}, 295: {12: (1, {'@': 208}), 18: (1, {'@': 208}), 15: (1, {'@': 208}), 6: (1, {'@': 208}), 37: (1, {'@': 208}), 10: (1, {'@': 208}), 26: (1, {'@': 208}), 1: (1, {'@': 208}), 22: (1, {'@': 208}), 23: (1, {'@': 208}), 25: (1, {'@': 208}), 19: (1, {'@': 208}), 14: (1, {'@': 208}), 31: (1, {'@': 208}), 2: (1, {'@': 208}), 40: (1, {'@': 208}), 24: (1, {'@': 208}), 42: (1, {'@': 208}), 20: (1, {'@': 208}), 45: (1, {'@': 208}), 72: (1, {'@': 208}), 68: (1, {'@': 208}), 73: (1, {'@': 208}), 62: (1, {'@': 208}), 61: (1, {'@': 208}), 52: (1, {'@': 208}), 54: (1, {'@': 208}), 57: (1, {'@': 208}), 74: (1, {'@': 208}), 66: (1, {'@': 208})}, 296: {67: (1, {'@': 209}), 12: (1, {'@': 209}), 18: (1, {'@': 209}), 46: (1, {'@': 209}), 15: (1, {'@': 209}), 6: (1, {'@': 209}), 37: (1, {'@': 209}), 10: (1, {'@': 209}), 68: (1, {'@': 209}), 26: (1, {'@': 209}), 1: (1, {'@': 209}), 69: (1, {'@': 209}), 22: (1, {'@': 209}), 23: (1, {'@': 209}), 25: (1, {'@': 209}), 19: (1, {'@': 209}), 14: (1, {'@': 209}), 31: (1, {'@': 209}), 2: (1, {'@': 209}), 70: (1, {'@': 209}), 40: (1, {'@': 209}), 24: (1, {'@': 209}), 42: (1, {'@': 209}), 20: (1, {'@': 209}), 45: (1, {'@': 209}), 62: (1, {'@': 209}), 61: (1, {'@': 209}), 71: (1, {'@': 209}), 66: (1, {'@': 209}), 72: (1, {'@': 209}), 73: (1, {'@': 209}), 52: (1, {'@': 209}), 54: (1, {'@': 209}), 57: (1, {'@': 209}), 74: (1, {'@': 209}), 44: (1, {'@': 209})}, 297: {132: (0, 340), 14: (0, 113), 61: (0, 335), 52: (0, 423)}, 298: {1: (0, 274)}, 299: {16: (0, 298), 10: (0, 8)}, 300: {111: (0, 37), 89: (0, 83), 90: (0, 164), 28: (0, 133), 6: (0, 267), 92: (0, 82), 60: (0, 16), 95: (0, 143), 96: (0, 157), 97: (0, 284), 26: (0, 237), 29: (0, 293), 16: (0, 248), 49: (0, 21), 1: (0, 304), 112: (0, 47), 93: (0, 272), 104: (0, 243), 105: (0, 282), 53: (0, 50), 114: (0, 256), 91: (0, 242), 32: (0, 388), 10: (0, 8), 94: (0, 117), 18: (0, 253), 42: (0, 312), 98: (0, 265), 50: (0, 28), 43: (0, 20), 59: (0, 3), 25: (0, 264), 113: (0, 23), 99: (0, 412), 100: (0, 398), 101: (0, 425), 102: (0, 275), 40: (0, 437), 103: (0, 289), 106: (0, 271)}, 301: {45: (0, 130), 44: (0, 49)}, 302: {68: (1, {'@': 210}), 62: (1, {'@': 210}), 54: (1, {'@': 210}), 61: (1, {'@': 210}), 57: (1, {'@': 210}), 45: (1, {'@': 210}), 72: (1, {'@': 210}), 73: (1, {'@': 210}), 52: (1, {'@': 210}), 74: (1, {'@': 210}), 66: (1, {'@': 210})}, 303: {1: (0, 347), 71: (0, 201)}, 304: {89: (0, 83), 90: (0, 164), 28: (0, 133), 6: (0, 267), 91: (0, 242), 32: (0, 388), 10: (0, 8), 92: (0, 82), 93: (0, 230), 94: (0, 117), 16: (0, 77), 95: (0, 110), 18: (0, 253), 96: (0, 157), 97: (0, 284), 42: (0, 312), 98: (0, 265), 25: (0, 264), 26: (0, 237), 29: (0, 293), 99: (0, 412), 100: (0, 398), 1: (0, 304), 101: (0, 425), 102: (0, 275), 40: (0, 437), 103: (0, 289), 104: (0, 243), 105: (0, 282), 106: (0, 271)}, 305: {54: (0, 52)}, 306: {0: (0, 291), 1: (0, 283), 2: (0, 257), 3: (0, 287), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 9: (0, 306), 10: (0, 8), 11: (0, 309), 12: (0, 295), 13: (0, 245), 14: (0, 249), 15: (0, 278), 16: (0, 296), 17: (0, 310), 18: (0, 308), 19: (0, 266), 20: (0, 288), 21: (0, 244), 22: (0, 252), 23: (0, 300), 24: (0, 269), 25: (0, 264), 26: (0, 237), 27: (0, 311), 28: (0, 239), 29: (0, 411), 30: (0, 380), 31: (0, 384), 32: (0, 394), 33: (0, 402), 34: (0, 397), 35: (0, 429), 36: (0, 420), 37: (0, 442), 38: (0, 427), 39: (0, 146), 40: (0, 435), 41: (0, 432), 42: (0, 415)}, 307: {48: (1, {'@': 211}), 61: (1, {'@': 211})}, 308: {12: (1, {'@': 212}), 18: (1, {'@': 212}), 15: (1, {'@': 212}), 6: (1, {'@': 212}), 37: (1, {'@': 212}), 10: (1, {'@': 212}), 26: (1, {'@': 212}), 1: (1, {'@': 212}), 22: (1, {'@': 212}), 23: (1, {'@': 212}), 25: (1, {'@': 212}), 19: (1, {'@': 212}), 14: (1, {'@': 212}), 31: (1, {'@': 212}), 2: (1, {'@': 212}), 40: (1, {'@': 212}), 24: (1, {'@': 212}), 42: (1, {'@': 212}), 20: (1, {'@': 212}), 45: (1, {'@': 212}), 72: (1, {'@': 212}), 68: (1, {'@': 212}), 73: (1, {'@': 212}), 62: (1, {'@': 212}), 61: (1, {'@': 212}), 52: (1, {'@': 212}), 54: (1, {'@': 212}), 57: (1, {'@': 212}), 74: (1, {'@': 212}), 66: (1, {'@': 212})}, 309: {133: (0, 122), 67: (0, 183), 12: (1, {'@': 213}), 19: (1, {'@': 213}), 14: (1, {'@': 213}), 18: (1, {'@': 213}), 15: (1, {'@': 213}), 31: (1, {'@': 213}), 2: (1, {'@': 213}), 40: (1, {'@': 213}), 37: (1, {'@': 213}), 24: (1, {'@': 213}), 68: (1, {'@': 213}), 69: (1, {'@': 213}), 22: (1, {'@': 213}), 62: (1, {'@': 213}), 71: (1, {'@': 213}), 61: (1, {'@': 213}), 54: (1, {'@': 213}), 57: (1, {'@': 213}), 45: (1, {'@': 213}), 72: (1, {'@': 213}), 73: (1, {'@': 213}), 52: (1, {'@': 213}), 74: (1, {'@': 213}), 66: (1, {'@': 213})}, 310: {12: (1, {'@': 214}), 18: (1, {'@': 214}), 15: (1, {'@': 214}), 6: (1, {'@': 214}), 37: (1, {'@': 214}), 10: (1, {'@': 214}), 26: (1, {'@': 214}), 1: (1, {'@': 214}), 22: (1, {'@': 214}), 23: (1, {'@': 214}), 25: (1, {'@': 214}), 19: (1, {'@': 214}), 14: (1, {'@': 214}), 31: (1, {'@': 214}), 2: (1, {'@': 214}), 40: (1, {'@': 214}), 24: (1, {'@': 214}), 42: (1, {'@': 214}), 20: (1, {'@': 214}), 45: (1, {'@': 214}), 72: (1, {'@': 214}), 68: (1, {'@': 214}), 73: (1, {'@': 214}), 62: (1, {'@': 214}), 61: (1, {'@': 214}), 52: (1, {'@': 214}), 54: (1, {'@': 214}), 57: (1, {'@': 214}), 74: (1, {'@': 214}), 66: (1, {'@': 214})}, 311: {12: (1, {'@': 215}), 19: (1, {'@': 215}), 14: (1, {'@': 215}), 18: (1, {'@': 215}), 15: (1, {'@': 215}), 31: (1, {'@': 215}), 2: (1, {'@': 215}), 37: (1, {'@': 215}), 24: (1, {'@': 215}), 68: (1, {'@': 215}), 22: (1, {'@': 215}), 62: (1, {'@': 215}), 71: (1, {'@': 215}), 61: (1, {'@': 215}), 54: (1, {'@': 215}), 57: (1, {'@': 215}), 45: (1, {'@': 215}), 72: (1, {'@': 215}), 73: (1, {'@': 215}), 52: (1, {'@': 215}), 74: (1, {'@': 215}), 66: (1, {'@': 215})}, 312: {43: (1, {'@': 216}), 12: (1, {'@': 216}), 44: (1, {'@': 216}), 45: (1, {'@': 216}), 10: (1, {'@': 216}), 48: (1, {'@': 216}), 49: (1, {'@': 216}), 50: (1, {'@': 216}), 51: (1, {'@': 216}), 19: (1, {'@': 216}), 52: (1, {'@': 216}), 53: (1, {'@': 216}), 54: (1, {'@': 216}), 55: (1, {'@': 216}), 57: (1, {'@': 216}), 59: (1, {'@': 216}), 60: (1, {'@': 216})}, 313: {1: (0, 118), 21: (0, 187), 20: (0, 155), 23: (0, 300), 10: (0, 8), 122: (0, 361), 29: (0, 176), 32: (0, 175), 16: (0, 67), 25: (0, 264), 26: (0, 237)}, 314: {76: (1, {'@': 217}), 61: (1, {'@': 217}), 54: (1, {'@': 217})}, 315: {25: (1, {'@': 218}), 54: (1, {'@': 218}), 10: (1, {'@': 218}), 26: (1, {'@': 218}), 1: (1, {'@': 218}), 20: (1, {'@': 218}), 23: (1, {'@': 218})}, 316: {60: (0, 16), 111: (0, 37), 49: (0, 21), 59: (0, 3), 16: (0, 25), 10: (0, 8), 113: (0, 23), 112: (0, 47), 134: (0, 12), 135: (0, 33), 114: (0, 4), 50: (0, 28), 43: (0, 20), 53: (0, 50), 51: (1, {'@': 219})}, 317: {74: (1, {'@': 220}), 66: (1, {'@': 220})}, 318: {16: (0, 254), 10: (0, 8)}, 319: {92: (0, 82), 16: (0, 77), 89: (0, 83), 99: (0, 412), 100: (0, 398), 90: (0, 403), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 31: (0, 400), 94: (0, 117), 95: (0, 143), 96: (0, 157), 1: (0, 167), 26: (0, 237)}, 320: {1: (0, 118), 21: (0, 187), 20: (0, 155), 23: (0, 300), 10: (0, 8), 122: (0, 379), 29: (0, 176), 32: (0, 175), 16: (0, 67), 25: (0, 264), 26: (0, 237)}, 321: {62: (1, {'@': 221}), 75: (1, {'@': 221}), 61: (1, {'@': 221}), 54: (1, {'@': 221})}, 322: {101: (1, {'@': 222}), 40: (1, {'@': 222}), 10: (1, {'@': 222}), 26: (1, {'@': 222}), 1: (1, {'@': 222})}, 323: {14: (1, {'@': 223}), 54: (1, {'@': 223}), 61: (1, {'@': 223}), 52: (1, {'@': 223}), 71: (1, {'@': 223}), 44: (1, {'@': 223})}, 324: {14: (1, {'@': 224}), 54: (1, {'@': 224}), 61: (1, {'@': 224}), 52: (1, {'@': 224}), 71: (1, {'@': 224}), 44: (1, {'@': 224})}, 325: {92: (0, 82), 89: (0, 83), 100: (0, 398), 16: (0, 326), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 96: (0, 9), 94: (0, 117), 1: (0, 167), 26: (0, 237)}, 326: {1: (0, 123), 75: (1, {'@': 102}), 67: (1, {'@': 102}), 40: (1, {'@': 102}), 52: (1, {'@': 102}), 69: (1, {'@': 102}), 46: (1, {'@': 102}), 54: (1, {'@': 102}), 44: (1, {'@': 102}), 18: (1, {'@': 102}), 45: (1, {'@': 102}), 10: (1, {'@': 102}), 49: (1, {'@': 102}), 50: (1, {'@': 102}), 62: (1, {'@': 102}), 61: (1, {'@': 102}), 51: (1, {'@': 102}), 55: (1, {'@': 102}), 2: (1, {'@': 102}), 24: (1, {'@': 102}), 59: (1, {'@': 102}), 60: (1, {'@': 102}), 43: (1, {'@': 102}), 12: (1, {'@': 102}), 47: (1, {'@': 102}), 48: (1, {'@': 102}), 19: (1, {'@': 102}), 53: (1, {'@': 102}), 31: (1, {'@': 102}), 57: (1, {'@': 102}), 56: (1, {'@': 102}), 58: (1, {'@': 102})}, 327: {101: (1, {'@': 225}), 40: (1, {'@': 225}), 10: (1, {'@': 225}), 26: (1, {'@': 225}), 1: (1, {'@': 225})}, 328: {92: (0, 82), 16: (0, 77), 89: (0, 83), 99: (0, 412), 100: (0, 398), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 94: (0, 117), 95: (0, 143), 96: (0, 157), 1: (0, 167), 90: (0, 438), 26: (0, 237)}, 329: {14: (0, 113), 54: (0, 324), 61: (0, 371)}, 330: {89: (0, 416), 16: (0, 326), 100: (0, 398), 1: (0, 167), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 26: (0, 237)}, 331: {16: (0, 326), 89: (0, 83), 94: (0, 344), 100: (0, 398), 1: (0, 167), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 26: (0, 237)}, 332: {1: (0, 250), 62: (1, {'@': 226})}, 333: {0: (0, 291), 1: (0, 283), 7: (0, 292), 8: (0, 281), 9: (0, 306), 12: (0, 295), 13: (0, 245), 16: (0, 296), 20: (0, 288), 21: (0, 244), 24: (0, 269), 26: (0, 237), 3: (0, 287), 28: (0, 239), 23: (0, 300), 31: (0, 384), 30: (0, 380), 33: (0, 402), 37: (0, 442), 11: (0, 309), 38: (0, 427), 5: (0, 261), 41: (0, 432), 34: (0, 397), 42: (0, 415), 17: (0, 310), 2: (0, 257), 4: (0, 258), 6: (0, 251), 10: (0, 8), 62: (0, 376), 14: (0, 249), 15: (0, 278), 18: (0, 308), 19: (0, 266), 22: (0, 252), 25: (0, 264), 27: (0, 311), 29: (0, 411), 39: (0, 364), 32: (0, 394), 35: (0, 429), 36: (0, 420), 40: (0, 435)}, 334: {62: (1, {'@': 227}), 75: (1, {'@': 227}), 61: (1, {'@': 227}), 54: (1, {'@': 227})}, 335: {1: (0, 118), 21: (0, 187), 20: (0, 155), 23: (0, 300), 10: (0, 8), 122: (0, 54), 29: (0, 176), 26: (0, 237), 32: (0, 175), 16: (0, 67), 25: (0, 264)}, 336: {89: (0, 83), 100: (0, 398), 16: (0, 326), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 94: (0, 117), 1: (0, 167), 92: (0, 219), 26: (0, 237)}, 337: {92: (0, 82), 16: (0, 77), 89: (0, 83), 99: (0, 412), 100: (0, 398), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 90: (0, 414), 94: (0, 117), 95: (0, 143), 96: (0, 157), 1: (0, 167), 26: (0, 237)}, 338: {54: (0, 358)}, 339: {68: (0, 357)}, 340: {61: (0, 356), 52: (0, 363)}, 341: {1: (0, 234), 43: (1, {'@': 228}), 67: (1, {'@': 228}), 12: (1, {'@': 228}), 44: (1, {'@': 228}), 18: (1, {'@': 228}), 45: (1, {'@': 228}), 46: (1, {'@': 228}), 47: (1, {'@': 228}), 75: (1, {'@': 228}), 10: (1, {'@': 228}), 48: (1, {'@': 228}), 49: (1, {'@': 228}), 69: (1, {'@': 228}), 50: (1, {'@': 228}), 51: (1, {'@': 228}), 19: (1, {'@': 228}), 52: (1, {'@': 228}), 53: (1, {'@': 228}), 54: (1, {'@': 228}), 31: (1, {'@': 228}), 2: (1, {'@': 228}), 55: (1, {'@': 228}), 56: (1, {'@': 228}), 40: (1, {'@': 228}), 57: (1, {'@': 228}), 24: (1, {'@': 228}), 58: (1, {'@': 228}), 59: (1, {'@': 228}), 60: (1, {'@': 228}), 61: (1, {'@': 228}), 62: (1, {'@': 228})}, 342: {54: (0, 440)}, 343: {89: (0, 83), 93: (0, 436), 90: (0, 164), 28: (0, 133), 6: (0, 267), 91: (0, 242), 32: (0, 388), 10: (0, 8), 92: (0, 82), 94: (0, 117), 16: (0, 77), 95: (0, 143), 18: (0, 253), 96: (0, 157), 97: (0, 284), 42: (0, 312), 98: (0, 265), 25: (0, 264), 26: (0, 237), 29: (0, 293), 99: (0, 412), 100: (0, 398), 1: (0, 304), 101: (0, 425), 102: (0, 275), 40: (0, 437), 103: (0, 289), 104: (0, 243), 105: (0, 282), 106: (0, 271)}, 344: {67: (1, {'@': 229}), 44: (1, {'@': 229}), 18: (1, {'@': 229}), 45: (1, {'@': 229}), 10: (1, {'@': 229}), 49: (1, {'@': 229}), 50: (1, {'@': 229}), 62: (1, {'@': 229}), 61: (1, {'@': 229}), 51: (1, {'@': 229}), 55: (1, {'@': 229}), 2: (1, {'@': 229}), 40: (1, {'@': 229}), 24: (1, {'@': 229}), 59: (1, {'@': 229}), 60: (1, {'@': 229}), 43: (1, {'@': 229}), 12: (1, {'@': 229}), 46: (1, {'@': 229}), 47: (1, {'@': 229}), 48: (1, {'@': 229}), 69: (1, {'@': 229}), 19: (1, {'@': 229}), 53: (1, {'@': 229}), 52: (1, {'@': 229}), 54: (1, {'@': 229}), 57: (1, {'@': 229}), 31: (1, {'@': 229}), 56: (1, {'@': 229}), 58: (1, {'@': 229})}, 345: {75: (0, 152), 43: (1, {'@': 230}), 67: (1, {'@': 230}), 12: (1, {'@': 230}), 44: (1, {'@': 230}), 18: (1, {'@': 230}), 45: (1, {'@': 230}), 46: (1, {'@': 230}), 47: (1, {'@': 230}), 10: (1, {'@': 230}), 48: (1, {'@': 230}), 49: (1, {'@': 230}), 69: (1, {'@': 230}), 50: (1, {'@': 230}), 51: (1, {'@': 230}), 19: (1, {'@': 230}), 52: (1, {'@': 230}), 53: (1, {'@': 230}), 54: (1, {'@': 230}), 31: (1, {'@': 230}), 2: (1, {'@': 230}), 55: (1, {'@': 230}), 56: (1, {'@': 230}), 40: (1, {'@': 230}), 57: (1, {'@': 230}), 24: (1, {'@': 230}), 58: (1, {'@': 230}), 59: (1, {'@': 230}), 60: (1, {'@': 230}), 61: (1, {'@': 230}), 62: (1, {'@': 230})}, 346: {92: (0, 82), 89: (0, 83), 99: (0, 412), 100: (0, 398), 95: (0, 367), 16: (0, 326), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 94: (0, 117), 96: (0, 157), 1: (0, 167), 26: (0, 237)}, 347: {92: (0, 82), 16: (0, 77), 89: (0, 83), 99: (0, 412), 109: (0, 421), 100: (0, 398), 101: (0, 425), 32: (0, 388), 40: (0, 437), 110: (0, 444), 10: (0, 8), 94: (0, 117), 95: (0, 143), 96: (0, 157), 90: (0, 171), 1: (0, 167), 26: (0, 237), 54: (1, {'@': 84})}, 348: {61: (0, 97), 136: (0, 98), 62: (0, 70), 52: (0, 74)}, 349: {69: (0, 285), 43: (1, {'@': 231}), 12: (1, {'@': 231}), 44: (1, {'@': 231}), 18: (1, {'@': 231}), 45: (1, {'@': 231}), 46: (1, {'@': 231}), 47: (1, {'@': 231}), 10: (1, {'@': 231}), 48: (1, {'@': 231}), 49: (1, {'@': 231}), 50: (1, {'@': 231}), 51: (1, {'@': 231}), 19: (1, {'@': 231}), 52: (1, {'@': 231}), 53: (1, {'@': 231}), 54: (1, {'@': 231}), 31: (1, {'@': 231}), 2: (1, {'@': 231}), 55: (1, {'@': 231}), 56: (1, {'@': 231}), 40: (1, {'@': 231}), 57: (1, {'@': 231}), 24: (1, {'@': 231}), 58: (1, {'@': 231}), 59: (1, {'@': 231}), 60: (1, {'@': 231}), 61: (1, {'@': 231}), 62: (1, {'@': 231})}, 350: {92: (0, 82), 16: (0, 77), 89: (0, 83), 99: (0, 412), 100: (0, 398), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 94: (0, 117), 95: (0, 143), 96: (0, 157), 90: (0, 171), 1: (0, 167), 26: (0, 237), 110: (0, 177)}, 351: {62: (0, 218)}, 352: {61: (0, 443), 54: (1, {'@': 232})}, 353: {14: (1, {'@': 233}), 54: (1, {'@': 233}), 61: (1, {'@': 233}), 52: (1, {'@': 233}), 71: (1, {'@': 233}), 44: (1, {'@': 233})}, 354: {44: (0, 49), 43: (1, {'@': 234}), 45: (1, {'@': 234}), 10: (1, {'@': 234}), 48: (1, {'@': 234}), 49: (1, {'@': 234}), 50: (1, {'@': 234}), 51: (1, {'@': 234}), 52: (1, {'@': 234}), 53: (1, {'@': 234}), 54: (1, {'@': 234}), 57: (1, {'@': 234}), 59: (1, {'@': 234}), 60: (1, {'@': 234})}, 355: {92: (0, 82), 16: (0, 77), 89: (0, 83), 99: (0, 412), 100: (0, 398), 101: (0, 425), 32: (0, 388), 40: (0, 437), 90: (0, 404), 10: (0, 8), 94: (0, 117), 95: (0, 143), 96: (0, 157), 1: (0, 167), 26: (0, 237)}, 356: {1: (0, 118), 21: (0, 187), 20: (0, 155), 23: (0, 300), 10: (0, 8), 122: (0, 105), 29: (0, 176), 32: (0, 175), 16: (0, 67), 25: (0, 264), 26: (0, 237)}, 357: {0: (0, 291), 1: (0, 283), 2: (0, 257), 3: (0, 287), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 39: (0, 88), 9: (0, 306), 10: (0, 8), 11: (0, 309), 12: (0, 295), 13: (0, 245), 14: (0, 249), 15: (0, 278), 16: (0, 296), 17: (0, 310), 18: (0, 308), 19: (0, 266), 20: (0, 288), 21: (0, 244), 22: (0, 252), 23: (0, 300), 24: (0, 269), 25: (0, 264), 26: (0, 237), 27: (0, 311), 28: (0, 239), 29: (0, 411), 30: (0, 380), 31: (0, 384), 32: (0, 394), 33: (0, 402), 34: (0, 397), 35: (0, 429), 36: (0, 420), 37: (0, 442), 38: (0, 427), 40: (0, 435), 41: (0, 432), 42: (0, 415)}, 358: {71: (0, 382), 67: (1, {'@': 172}), 12: (1, {'@': 172}), 44: (1, {'@': 172}), 18: (1, {'@': 172}), 46: (1, {'@': 172}), 47: (1, {'@': 172}), 75: (1, {'@': 172}), 48: (1, {'@': 172}), 69: (1, {'@': 172}), 19: (1, {'@': 172}), 31: (1, {'@': 172}), 2: (1, {'@': 172}), 55: (1, {'@': 172}), 56: (1, {'@': 172}), 40: (1, {'@': 172}), 24: (1, {'@': 172}), 58: (1, {'@': 172})}, 359: {43: (1, {'@': 235}), 67: (1, {'@': 235}), 12: (1, {'@': 235}), 44: (1, {'@': 235}), 18: (1, {'@': 235}), 45: (1, {'@': 235}), 46: (1, {'@': 235}), 47: (1, {'@': 235}), 75: (1, {'@': 235}), 10: (1, {'@': 235}), 48: (1, {'@': 235}), 49: (1, {'@': 235}), 69: (1, {'@': 235}), 50: (1, {'@': 235}), 51: (1, {'@': 235}), 19: (1, {'@': 235}), 52: (1, {'@': 235}), 53: (1, {'@': 235}), 54: (1, {'@': 235}), 31: (1, {'@': 235}), 2: (1, {'@': 235}), 55: (1, {'@': 235}), 56: (1, {'@': 235}), 40: (1, {'@': 235}), 57: (1, {'@': 235}), 24: (1, {'@': 235}), 58: (1, {'@': 235}), 59: (1, {'@': 235}), 60: (1, {'@': 235}), 61: (1, {'@': 235}), 62: (1, {'@': 235})}, 360: {43: (1, {'@': 236}), 51: (1, {'@': 236}), 53: (1, {'@': 236}), 49: (1, {'@': 236}), 10: (1, {'@': 236}), 59: (1, {'@': 236}), 60: (1, {'@': 236}), 50: (1, {'@': 236}), 48: (1, {'@': 236})}, 361: {14: (0, 113), 54: (1, {'@': 237}), 61: (1, {'@': 237}), 52: (1, {'@': 237}), 71: (1, {'@': 237}), 44: (1, {'@': 237})}, 362: {0: (0, 291), 1: (0, 283), 2: (0, 257), 3: (0, 287), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 9: (0, 306), 10: (0, 8), 11: (0, 309), 12: (0, 295), 13: (0, 245), 14: (0, 249), 15: (0, 278), 16: (0, 296), 17: (0, 310), 18: (0, 308), 19: (0, 266), 20: (0, 288), 21: (0, 244), 22: (0, 252), 23: (0, 300), 24: (0, 269), 25: (0, 264), 26: (0, 237), 27: (0, 311), 28: (0, 239), 29: (0, 411), 30: (0, 380), 31: (0, 384), 32: (0, 394), 33: (0, 402), 34: (0, 397), 35: (0, 429), 36: (0, 420), 37: (0, 442), 38: (0, 427), 39: (0, 35), 40: (0, 435), 41: (0, 432), 42: (0, 415)}, 363: {14: (1, {'@': 238}), 54: (1, {'@': 238}), 61: (1, {'@': 238}), 52: (1, {'@': 238}), 71: (1, {'@': 238}), 44: (1, {'@': 238})}, 364: {52: (0, 81)}, 365: {43: (1, {'@': 239}), 51: (1, {'@': 239}), 53: (1, {'@': 239}), 49: (1, {'@': 239}), 10: (1, {'@': 239}), 59: (1, {'@': 239}), 60: (1, {'@': 239}), 50: (1, {'@': 239}), 48: (1, {'@': 239})}, 366: {88: (0, 262), 16: (0, 22), 10: (0, 8)}, 367: {52: (0, 220), 62: (0, 222)}, 368: {16: (0, 326), 89: (0, 224), 100: (0, 398), 1: (0, 167), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 26: (0, 237)}, 369: {16: (0, 22), 88: (0, 280), 10: (0, 8)}, 370: {54: (0, 231)}, 371: {25: (1, {'@': 240}), 54: (1, {'@': 240}), 10: (1, {'@': 240}), 26: (1, {'@': 240}), 1: (1, {'@': 240}), 20: (1, {'@': 240}), 23: (1, {'@': 240})}, 372: {44: (0, 49), 43: (1, {'@': 241}), 45: (1, {'@': 241}), 10: (1, {'@': 241}), 48: (1, {'@': 241}), 49: (1, {'@': 241}), 50: (1, {'@': 241}), 51: (1, {'@': 241}), 52: (1, {'@': 241}), 53: (1, {'@': 241}), 54: (1, {'@': 241}), 57: (1, {'@': 241}), 59: (1, {'@': 241}), 60: (1, {'@': 241})}, 373: {0: (0, 291), 1: (0, 283), 2: (0, 257), 3: (0, 287), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 9: (0, 306), 10: (0, 8), 11: (0, 309), 12: (0, 295), 13: (0, 245), 14: (0, 249), 15: (0, 278), 16: (0, 296), 17: (0, 310), 18: (0, 308), 19: (0, 266), 20: (0, 288), 21: (0, 244), 22: (0, 252), 23: (0, 300), 24: (0, 269), 25: (0, 264), 26: (0, 237), 27: (0, 311), 28: (0, 239), 29: (0, 411), 30: (0, 380), 31: (0, 384), 39: (0, 73), 32: (0, 394), 33: (0, 402), 34: (0, 397), 35: (0, 429), 36: (0, 420), 37: (0, 442), 38: (0, 427), 40: (0, 435), 41: (0, 432), 42: (0, 415)}, 374: {0: (0, 291), 1: (0, 283), 2: (0, 257), 3: (0, 287), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 9: (0, 306), 10: (0, 8), 11: (0, 309), 12: (0, 295), 13: (0, 245), 14: (0, 249), 15: (0, 278), 16: (0, 296), 17: (0, 310), 18: (0, 308), 19: (0, 266), 20: (0, 288), 21: (0, 244), 22: (0, 252), 23: (0, 300), 24: (0, 269), 25: (0, 264), 26: (0, 237), 27: (0, 311), 39: (0, 351), 28: (0, 239), 29: (0, 411), 30: (0, 380), 31: (0, 384), 32: (0, 394), 33: (0, 402), 34: (0, 397), 35: (0, 429), 36: (0, 420), 37: (0, 442), 38: (0, 427), 40: (0, 435), 41: (0, 432), 42: (0, 415)}, 375: {44: (0, 49), 43: (1, {'@': 242}), 45: (1, {'@': 242}), 10: (1, {'@': 242}), 48: (1, {'@': 242}), 49: (1, {'@': 242}), 50: (1, {'@': 242}), 51: (1, {'@': 242}), 52: (1, {'@': 242}), 53: (1, {'@': 242}), 54: (1, {'@': 242}), 57: (1, {'@': 242}), 59: (1, {'@': 242}), 60: (1, {'@': 242})}, 376: {0: (0, 291), 1: (0, 283), 2: (0, 257), 3: (0, 287), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 9: (0, 306), 10: (0, 8), 11: (0, 309), 12: (0, 295), 13: (0, 245), 14: (0, 249), 15: (0, 278), 16: (0, 296), 17: (0, 310), 18: (0, 308), 19: (0, 266), 20: (0, 288), 21: (0, 244), 22: (0, 252), 23: (0, 300), 24: (0, 269), 25: (0, 264), 26: (0, 237), 27: (0, 311), 28: (0, 239), 29: (0, 411), 30: (0, 380), 31: (0, 384), 32: (0, 394), 33: (0, 402), 34: (0, 397), 35: (0, 429), 36: (0, 420), 37: (0, 442), 38: (0, 427), 40: (0, 435), 41: (0, 432), 42: (0, 415), 39: (0, 106)}, 377: {1: (0, 92), 62: (1, {'@': 243})}, 378: {52: (1, {'@': 244}), 61: (1, {'@': 244})}, 379: {44: (0, 101), 14: (0, 113)}, 380: {137: (0, 57), 46: (0, 68), 67: (1, {'@': 245}), 12: (1, {'@': 245}), 19: (1, {'@': 245}), 14: (1, {'@': 245}), 18: (1, {'@': 245}), 15: (1, {'@': 245}), 31: (1, {'@': 245}), 2: (1, {'@': 245}), 40: (1, {'@': 245}), 37: (1, {'@': 245}), 24: (1, {'@': 245}), 68: (1, {'@': 245}), 69: (1, {'@': 245}), 22: (1, {'@': 245}), 62: (1, {'@': 245}), 71: (1, {'@': 245}), 61: (1, {'@': 245}), 54: (1, {'@': 245}), 57: (1, {'@': 245}), 45: (1, {'@': 245}), 72: (1, {'@': 245}), 73: (1, {'@': 245}), 52: (1, {'@': 245}), 74: (1, {'@': 245}), 66: (1, {'@': 245})}, 381: {43: (1, {'@': 246}), 12: (1, {'@': 246}), 44: (1, {'@': 246}), 18: (1, {'@': 246}), 45: (1, {'@': 246}), 46: (1, {'@': 246}), 47: (1, {'@': 246}), 10: (1, {'@': 246}), 48: (1, {'@': 246}), 49: (1, {'@': 246}), 50: (1, {'@': 246}), 51: (1, {'@': 246}), 19: (1, {'@': 246}), 52: (1, {'@': 246}), 53: (1, {'@': 246}), 54: (1, {'@': 246}), 31: (1, {'@': 246}), 2: (1, {'@': 246}), 55: (1, {'@': 246}), 56: (1, {'@': 246}), 57: (1, {'@': 246}), 24: (1, {'@': 246}), 58: (1, {'@': 246}), 59: (1, {'@': 246}), 60: (1, {'@': 246}), 61: (1, {'@': 246})}, 382: {89: (0, 83), 90: (0, 164), 28: (0, 133), 6: (0, 267), 91: (0, 242), 93: (0, 40), 32: (0, 388), 10: (0, 8), 92: (0, 82), 94: (0, 117), 16: (0, 77), 95: (0, 143), 18: (0, 253), 96: (0, 157), 97: (0, 284), 42: (0, 312), 98: (0, 265), 25: (0, 264), 26: (0, 237), 29: (0, 293), 99: (0, 412), 100: (0, 398), 1: (0, 304), 101: (0, 425), 102: (0, 275), 40: (0, 437), 103: (0, 289), 104: (0, 243), 105: (0, 282), 106: (0, 271)}, 383: {52: (1, {'@': 247}), 61: (1, {'@': 247})}, 384: {12: (1, {'@': 248}), 18: (1, {'@': 248}), 15: (1, {'@': 248}), 6: (1, {'@': 248}), 37: (1, {'@': 248}), 10: (1, {'@': 248}), 26: (1, {'@': 248}), 1: (1, {'@': 248}), 22: (1, {'@': 248}), 23: (1, {'@': 248}), 25: (1, {'@': 248}), 19: (1, {'@': 248}), 14: (1, {'@': 248}), 31: (1, {'@': 248}), 2: (1, {'@': 248}), 40: (1, {'@': 248}), 24: (1, {'@': 248}), 42: (1, {'@': 248}), 20: (1, {'@': 248}), 45: (1, {'@': 248}), 72: (1, {'@': 248}), 68: (1, {'@': 248}), 73: (1, {'@': 248}), 62: (1, {'@': 248}), 61: (1, {'@': 248}), 52: (1, {'@': 248}), 54: (1, {'@': 248}), 57: (1, {'@': 248}), 74: (1, {'@': 248}), 66: (1, {'@': 248})}, 385: {43: (1, {'@': 249}), 51: (1, {'@': 249}), 53: (1, {'@': 249}), 49: (1, {'@': 249}), 10: (1, {'@': 249}), 59: (1, {'@': 249}), 60: (1, {'@': 249}), 50: (1, {'@': 249}), 48: (1, {'@': 249})}, 386: {16: (0, 326), 89: (0, 83), 94: (0, 203), 100: (0, 398), 1: (0, 167), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 26: (0, 237)}, 387: {62: (1, {'@': 250})}, 388: {43: (1, {'@': 251}), 67: (1, {'@': 251}), 12: (1, {'@': 251}), 44: (1, {'@': 251}), 18: (1, {'@': 251}), 45: (1, {'@': 251}), 46: (1, {'@': 251}), 47: (1, {'@': 251}), 75: (1, {'@': 251}), 10: (1, {'@': 251}), 48: (1, {'@': 251}), 49: (1, {'@': 251}), 69: (1, {'@': 251}), 50: (1, {'@': 251}), 51: (1, {'@': 251}), 19: (1, {'@': 251}), 52: (1, {'@': 251}), 53: (1, {'@': 251}), 54: (1, {'@': 251}), 31: (1, {'@': 251}), 2: (1, {'@': 251}), 55: (1, {'@': 251}), 56: (1, {'@': 251}), 40: (1, {'@': 251}), 57: (1, {'@': 251}), 24: (1, {'@': 251}), 58: (1, {'@': 251}), 59: (1, {'@': 251}), 60: (1, {'@': 251}), 61: (1, {'@': 251}), 62: (1, {'@': 251})}, 389: {48: (1, {'@': 252}), 61: (1, {'@': 252})}, 390: {43: (1, {'@': 253}), 51: (1, {'@': 253}), 53: (1, {'@': 253}), 49: (1, {'@': 253}), 10: (1, {'@': 253}), 59: (1, {'@': 253}), 60: (1, {'@': 253}), 50: (1, {'@': 253})}, 391: {43: (1, {'@': 254}), 51: (1, {'@': 254}), 53: (1, {'@': 254}), 49: (1, {'@': 254}), 10: (1, {'@': 254}), 59: (1, {'@': 254}), 60: (1, {'@': 254}), 50: (1, {'@': 254}), 48: (1, {'@': 254})}, 392: {0: (0, 291), 1: (0, 283), 2: (0, 257), 3: (0, 287), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 9: (0, 306), 10: (0, 8), 11: (0, 309), 12: (0, 295), 13: (0, 245), 14: (0, 249), 15: (0, 278), 16: (0, 296), 17: (0, 310), 18: (0, 308), 19: (0, 266), 20: (0, 288), 21: (0, 244), 22: (0, 252), 23: (0, 300), 24: (0, 269), 25: (0, 264), 26: (0, 237), 27: (0, 311), 28: (0, 239), 29: (0, 411), 30: (0, 380), 31: (0, 384), 32: (0, 394), 33: (0, 402), 34: (0, 397), 35: (0, 429), 36: (0, 420), 37: (0, 442), 39: (0, 378), 38: (0, 427), 40: (0, 435), 41: (0, 432), 42: (0, 415)}, 393: {75: (0, 46)}, 394: {67: (1, {'@': 255}), 12: (1, {'@': 255}), 18: (1, {'@': 255}), 46: (1, {'@': 255}), 15: (1, {'@': 255}), 6: (1, {'@': 255}), 37: (1, {'@': 255}), 10: (1, {'@': 255}), 68: (1, {'@': 255}), 26: (1, {'@': 255}), 1: (1, {'@': 255}), 69: (1, {'@': 255}), 22: (1, {'@': 255}), 23: (1, {'@': 255}), 25: (1, {'@': 255}), 19: (1, {'@': 255}), 14: (1, {'@': 255}), 31: (1, {'@': 255}), 2: (1, {'@': 255}), 70: (1, {'@': 255}), 40: (1, {'@': 255}), 24: (1, {'@': 255}), 42: (1, {'@': 255}), 20: (1, {'@': 255}), 45: (1, {'@': 255}), 62: (1, {'@': 255}), 61: (1, {'@': 255}), 71: (1, {'@': 255}), 66: (1, {'@': 255}), 72: (1, {'@': 255}), 73: (1, {'@': 255}), 52: (1, {'@': 255}), 54: (1, {'@': 255}), 57: (1, {'@': 255}), 74: (1, {'@': 255}), 44: (1, {'@': 255})}, 395: {107: (0, 305), 10: (0, 8), 16: (0, 424)}, 396: {92: (0, 82), 89: (0, 83), 100: (0, 398), 16: (0, 326), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 96: (0, 235), 94: (0, 117), 1: (0, 167), 26: (0, 237)}, 397: {2: (0, 257), 14: (0, 249), 37: (0, 442), 15: (0, 278), 18: (0, 308), 19: (0, 266), 31: (0, 384), 17: (0, 124), 22: (0, 252), 24: (0, 269), 12: (0, 295), 25: (1, {'@': 256}), 6: (1, {'@': 256}), 40: (1, {'@': 256}), 10: (1, {'@': 256}), 42: (1, {'@': 256}), 26: (1, {'@': 256}), 1: (1, {'@': 256}), 20: (1, {'@': 256}), 23: (1, {'@': 256}), 45: (1, {'@': 256}), 72: (1, {'@': 256}), 68: (1, {'@': 256}), 73: (1, {'@': 256}), 62: (1, {'@': 256}), 61: (1, {'@': 256}), 52: (1, {'@': 256}), 54: (1, {'@': 256}), 57: (1, {'@': 256}), 74: (1, {'@': 256}), 66: (1, {'@': 256})}, 398: {43: (1, {'@': 257}), 67: (1, {'@': 257}), 12: (1, {'@': 257}), 44: (1, {'@': 257}), 18: (1, {'@': 257}), 45: (1, {'@': 257}), 46: (1, {'@': 257}), 47: (1, {'@': 257}), 75: (1, {'@': 257}), 10: (1, {'@': 257}), 48: (1, {'@': 257}), 49: (1, {'@': 257}), 69: (1, {'@': 257}), 50: (1, {'@': 257}), 51: (1, {'@': 257}), 19: (1, {'@': 257}), 52: (1, {'@': 257}), 53: (1, {'@': 257}), 54: (1, {'@': 257}), 31: (1, {'@': 257}), 2: (1, {'@': 257}), 55: (1, {'@': 257}), 56: (1, {'@': 257}), 40: (1, {'@': 257}), 57: (1, {'@': 257}), 24: (1, {'@': 257}), 58: (1, {'@': 257}), 59: (1, {'@': 257}), 60: (1, {'@': 257}), 61: (1, {'@': 257}), 62: (1, {'@': 257})}, 399: {54: (0, 196)}, 400: {101: (1, {'@': 258}), 40: (1, {'@': 258}), 10: (1, {'@': 258}), 26: (1, {'@': 258}), 1: (1, {'@': 258})}, 401: {43: (1, {'@': 259}), 12: (1, {'@': 259}), 44: (1, {'@': 259}), 18: (1, {'@': 259}), 45: (1, {'@': 259}), 46: (1, {'@': 259}), 47: (1, {'@': 259}), 10: (1, {'@': 259}), 48: (1, {'@': 259}), 49: (1, {'@': 259}), 50: (1, {'@': 259}), 51: (1, {'@': 259}), 19: (1, {'@': 259}), 52: (1, {'@': 259}), 53: (1, {'@': 259}), 54: (1, {'@': 259}), 31: (1, {'@': 259}), 2: (1, {'@': 259}), 55: (1, {'@': 259}), 56: (1, {'@': 259}), 57: (1, {'@': 259}), 24: (1, {'@': 259}), 58: (1, {'@': 259}), 59: (1, {'@': 259}), 60: (1, {'@': 259}), 61: (1, {'@': 259})}, 402: {138: (0, 138), 40: (0, 140), 12: (1, {'@': 260}), 19: (1, {'@': 260}), 14: (1, {'@': 260}), 18: (1, {'@': 260}), 15: (1, {'@': 260}), 31: (1, {'@': 260}), 2: (1, {'@': 260}), 37: (1, {'@': 260}), 24: (1, {'@': 260}), 68: (1, {'@': 260}), 22: (1, {'@': 260}), 62: (1, {'@': 260}), 71: (1, {'@': 260}), 61: (1, {'@': 260}), 54: (1, {'@': 260}), 57: (1, {'@': 260}), 45: (1, {'@': 260}), 72: (1, {'@': 260}), 73: (1, {'@': 260}), 52: (1, {'@': 260}), 74: (1, {'@': 260}), 66: (1, {'@': 260})}, 403: {43: (1, {'@': 261}), 12: (1, {'@': 261}), 44: (1, {'@': 261}), 45: (1, {'@': 261}), 10: (1, {'@': 261}), 48: (1, {'@': 261}), 49: (1, {'@': 261}), 50: (1, {'@': 261}), 51: (1, {'@': 261}), 19: (1, {'@': 261}), 52: (1, {'@': 261}), 53: (1, {'@': 261}), 54: (1, {'@': 261}), 55: (1, {'@': 261}), 57: (1, {'@': 261}), 59: (1, {'@': 261}), 60: (1, {'@': 261})}, 404: {43: (1, {'@': 262}), 12: (1, {'@': 262}), 44: (1, {'@': 262}), 45: (1, {'@': 262}), 10: (1, {'@': 262}), 48: (1, {'@': 262}), 49: (1, {'@': 262}), 50: (1, {'@': 262}), 51: (1, {'@': 262}), 19: (1, {'@': 262}), 52: (1, {'@': 262}), 53: (1, {'@': 262}), 54: (1, {'@': 262}), 55: (1, {'@': 262}), 57: (1, {'@': 262}), 59: (1, {'@': 262}), 60: (1, {'@': 262})}, 405: {67: (1, {'@': 263}), 12: (1, {'@': 263}), 18: (1, {'@': 263}), 46: (1, {'@': 263}), 15: (1, {'@': 263}), 6: (1, {'@': 263}), 37: (1, {'@': 263}), 10: (1, {'@': 263}), 68: (1, {'@': 263}), 26: (1, {'@': 263}), 1: (1, {'@': 263}), 69: (1, {'@': 263}), 22: (1, {'@': 263}), 23: (1, {'@': 263}), 25: (1, {'@': 263}), 19: (1, {'@': 263}), 14: (1, {'@': 263}), 31: (1, {'@': 263}), 2: (1, {'@': 263}), 70: (1, {'@': 263}), 40: (1, {'@': 263}), 24: (1, {'@': 263}), 42: (1, {'@': 263}), 20: (1, {'@': 263}), 45: (1, {'@': 263}), 62: (1, {'@': 263}), 61: (1, {'@': 263}), 71: (1, {'@': 263}), 66: (1, {'@': 263}), 72: (1, {'@': 263}), 73: (1, {'@': 263}), 52: (1, {'@': 263}), 54: (1, {'@': 263}), 57: (1, {'@': 263}), 74: (1, {'@': 263}), 44: (1, {'@': 263})}, 406: {89: (0, 83), 90: (0, 164), 28: (0, 133), 6: (0, 267), 91: (0, 242), 32: (0, 388), 10: (0, 8), 92: (0, 82), 94: (0, 117), 16: (0, 77), 95: (0, 143), 18: (0, 253), 96: (0, 157), 97: (0, 284), 42: (0, 312), 98: (0, 265), 25: (0, 264), 26: (0, 237), 29: (0, 293), 99: (0, 412), 100: (0, 398), 1: (0, 304), 101: (0, 425), 102: (0, 275), 40: (0, 437), 93: (0, 372), 103: (0, 289), 104: (0, 243), 105: (0, 282), 106: (0, 271)}, 407: {14: (0, 299)}, 408: {18: (1, {'@': 264}), 45: (1, {'@': 264}), 37: (1, {'@': 264}), 68: (1, {'@': 264}), 62: (1, {'@': 264}), 61: (1, {'@': 264}), 14: (1, {'@': 264}), 2: (1, {'@': 264}), 71: (1, {'@': 264}), 40: (1, {'@': 264}), 24: (1, {'@': 264}), 66: (1, {'@': 264}), 12: (1, {'@': 264}), 15: (1, {'@': 264}), 72: (1, {'@': 264}), 69: (1, {'@': 264}), 22: (1, {'@': 264}), 73: (1, {'@': 264}), 19: (1, {'@': 264}), 52: (1, {'@': 264}), 54: (1, {'@': 264}), 31: (1, {'@': 264}), 57: (1, {'@': 264}), 74: (1, {'@': 264})}, 409: {31: (0, 193)}, 410: {16: (0, 22), 88: (0, 209), 10: (0, 8)}, 411: {67: (1, {'@': 265}), 12: (1, {'@': 265}), 18: (1, {'@': 265}), 46: (1, {'@': 265}), 15: (1, {'@': 265}), 6: (1, {'@': 265}), 37: (1, {'@': 265}), 10: (1, {'@': 265}), 68: (1, {'@': 265}), 26: (1, {'@': 265}), 1: (1, {'@': 265}), 69: (1, {'@': 265}), 22: (1, {'@': 265}), 23: (1, {'@': 265}), 25: (1, {'@': 265}), 19: (1, {'@': 265}), 14: (1, {'@': 265}), 31: (1, {'@': 265}), 2: (1, {'@': 265}), 70: (1, {'@': 265}), 40: (1, {'@': 265}), 24: (1, {'@': 265}), 42: (1, {'@': 265}), 20: (1, {'@': 265}), 45: (1, {'@': 265}), 62: (1, {'@': 265}), 61: (1, {'@': 265}), 71: (1, {'@': 265}), 66: (1, {'@': 265}), 72: (1, {'@': 265}), 73: (1, {'@': 265}), 52: (1, {'@': 265}), 54: (1, {'@': 265}), 57: (1, {'@': 265}), 74: (1, {'@': 265}), 44: (1, {'@': 265})}, 412: {43: (1, {'@': 266}), 12: (1, {'@': 266}), 44: (1, {'@': 266}), 18: (1, {'@': 266}), 45: (1, {'@': 266}), 46: (1, {'@': 266}), 47: (1, {'@': 266}), 10: (1, {'@': 266}), 48: (1, {'@': 266}), 49: (1, {'@': 266}), 50: (1, {'@': 266}), 51: (1, {'@': 266}), 19: (1, {'@': 266}), 52: (1, {'@': 266}), 53: (1, {'@': 266}), 54: (1, {'@': 266}), 31: (1, {'@': 266}), 2: (1, {'@': 266}), 55: (1, {'@': 266}), 56: (1, {'@': 266}), 57: (1, {'@': 266}), 24: (1, {'@': 266}), 58: (1, {'@': 266}), 59: (1, {'@': 266}), 60: (1, {'@': 266}), 61: (1, {'@': 266}), 62: (1, {'@': 266})}, 413: {29: (0, 197), 25: (0, 264)}, 414: {43: (1, {'@': 267}), 12: (1, {'@': 267}), 44: (1, {'@': 267}), 45: (1, {'@': 267}), 10: (1, {'@': 267}), 48: (1, {'@': 267}), 49: (1, {'@': 267}), 50: (1, {'@': 267}), 51: (1, {'@': 267}), 19: (1, {'@': 267}), 52: (1, {'@': 267}), 53: (1, {'@': 267}), 54: (1, {'@': 267}), 55: (1, {'@': 267}), 57: (1, {'@': 267}), 59: (1, {'@': 267}), 60: (1, {'@': 267})}, 415: {67: (1, {'@': 268}), 12: (1, {'@': 268}), 18: (1, {'@': 268}), 46: (1, {'@': 268}), 15: (1, {'@': 268}), 6: (1, {'@': 268}), 37: (1, {'@': 268}), 10: (1, {'@': 268}), 68: (1, {'@': 268}), 26: (1, {'@': 268}), 1: (1, {'@': 268}), 69: (1, {'@': 268}), 22: (1, {'@': 268}), 23: (1, {'@': 268}), 25: (1, {'@': 268}), 19: (1, {'@': 268}), 14: (1, {'@': 268}), 31: (1, {'@': 268}), 2: (1, {'@': 268}), 70: (1, {'@': 268}), 40: (1, {'@': 268}), 24: (1, {'@': 268}), 42: (1, {'@': 268}), 20: (1, {'@': 268}), 45: (1, {'@': 268}), 62: (1, {'@': 268}), 61: (1, {'@': 268}), 71: (1, {'@': 268}), 66: (1, {'@': 268}), 72: (1, {'@': 268}), 73: (1, {'@': 268}), 52: (1, {'@': 268}), 54: (1, {'@': 268}), 57: (1, {'@': 268}), 74: (1, {'@': 268}), 44: (1, {'@': 268})}, 416: {75: (0, 152), 67: (1, {'@': 269}), 44: (1, {'@': 269}), 18: (1, {'@': 269}), 45: (1, {'@': 269}), 10: (1, {'@': 269}), 49: (1, {'@': 269}), 50: (1, {'@': 269}), 62: (1, {'@': 269}), 61: (1, {'@': 269}), 51: (1, {'@': 269}), 55: (1, {'@': 269}), 2: (1, {'@': 269}), 40: (1, {'@': 269}), 24: (1, {'@': 269}), 59: (1, {'@': 269}), 60: (1, {'@': 269}), 43: (1, {'@': 269}), 12: (1, {'@': 269}), 46: (1, {'@': 269}), 47: (1, {'@': 269}), 48: (1, {'@': 269}), 69: (1, {'@': 269}), 52: (1, {'@': 269}), 19: (1, {'@': 269}), 53: (1, {'@': 269}), 54: (1, {'@': 269}), 31: (1, {'@': 269}), 57: (1, {'@': 269}), 56: (1, {'@': 269}), 58: (1, {'@': 269})}, 417: {45: (1, {'@': 270}), 72: (1, {'@': 270}), 68: (1, {'@': 270}), 73: (1, {'@': 270}), 62: (1, {'@': 270}), 61: (1, {'@': 270}), 52: (1, {'@': 270}), 54: (1, {'@': 270}), 57: (1, {'@': 270}), 74: (1, {'@': 270}), 66: (1, {'@': 270})}, 418: {35: (0, 174), 2: (0, 257), 37: (0, 442), 14: (0, 249), 15: (0, 278), 18: (0, 308), 71: (0, 144), 19: (0, 266), 31: (0, 384), 22: (0, 252), 34: (0, 397), 24: (0, 269), 12: (0, 295), 17: (0, 310)}, 419: {16: (0, 200), 10: (0, 8)}, 420: {67: (1, {'@': 271}), 12: (1, {'@': 271}), 18: (1, {'@': 271}), 46: (1, {'@': 271}), 15: (1, {'@': 271}), 6: (1, {'@': 271}), 37: (1, {'@': 271}), 10: (1, {'@': 271}), 68: (1, {'@': 271}), 26: (1, {'@': 271}), 1: (1, {'@': 271}), 69: (1, {'@': 271}), 22: (1, {'@': 271}), 23: (1, {'@': 271}), 25: (1, {'@': 271}), 19: (1, {'@': 271}), 14: (1, {'@': 271}), 31: (1, {'@': 271}), 2: (1, {'@': 271}), 70: (1, {'@': 271}), 40: (1, {'@': 271}), 24: (1, {'@': 271}), 42: (1, {'@': 271}), 20: (1, {'@': 271}), 45: (1, {'@': 271}), 62: (1, {'@': 271}), 61: (1, {'@': 271}), 71: (1, {'@': 271}), 66: (1, {'@': 271}), 72: (1, {'@': 271}), 73: (1, {'@': 271}), 52: (1, {'@': 271}), 54: (1, {'@': 271}), 57: (1, {'@': 271}), 74: (1, {'@': 271}), 44: (1, {'@': 271})}, 421: {54: (0, 217)}, 422: {62: (0, 199)}, 423: {14: (1, {'@': 272}), 54: (1, {'@': 272}), 61: (1, {'@': 272}), 52: (1, {'@': 272}), 71: (1, {'@': 272}), 44: (1, {'@': 272})}, 424: {139: (0, 19), 61: (0, 160), 54: (1, {'@': 273}), 75: (1, {'@': 273}), 62: (1, {'@': 273})}, 425: {20: (0, 343)}, 426: {43: (1, {'@': 274}), 12: (1, {'@': 274}), 44: (1, {'@': 274}), 45: (1, {'@': 274}), 10: (1, {'@': 274}), 48: (1, {'@': 274}), 49: (1, {'@': 274}), 50: (1, {'@': 274}), 51: (1, {'@': 274}), 19: (1, {'@': 274}), 52: (1, {'@': 274}), 53: (1, {'@': 274}), 54: (1, {'@': 274}), 55: (1, {'@': 274}), 57: (1, {'@': 274}), 59: (1, {'@': 274}), 60: (1, {'@': 274})}, 427: {67: (1, {'@': 275}), 12: (1, {'@': 275}), 18: (1, {'@': 275}), 46: (1, {'@': 275}), 15: (1, {'@': 275}), 6: (1, {'@': 275}), 37: (1, {'@': 275}), 10: (1, {'@': 275}), 68: (1, {'@': 275}), 26: (1, {'@': 275}), 1: (1, {'@': 275}), 69: (1, {'@': 275}), 22: (1, {'@': 275}), 23: (1, {'@': 275}), 25: (1, {'@': 275}), 19: (1, {'@': 275}), 14: (1, {'@': 275}), 31: (1, {'@': 275}), 2: (1, {'@': 275}), 70: (1, {'@': 275}), 40: (1, {'@': 275}), 24: (1, {'@': 275}), 42: (1, {'@': 275}), 20: (1, {'@': 275}), 45: (1, {'@': 275}), 62: (1, {'@': 275}), 61: (1, {'@': 275}), 71: (1, {'@': 275}), 66: (1, {'@': 275}), 72: (1, {'@': 275}), 73: (1, {'@': 275}), 52: (1, {'@': 275}), 54: (1, {'@': 275}), 57: (1, {'@': 275}), 74: (1, {'@': 275}), 44: (1, {'@': 275})}, 428: {48: (0, 216), 61: (0, 206), 140: (0, 208)}, 429: {1: (0, 283), 4: (0, 258), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 10: (0, 8), 11: (0, 309), 16: (0, 296), 3: (0, 263), 20: (0, 288), 21: (0, 244), 23: (0, 300), 25: (0, 264), 26: (0, 237), 29: (0, 411), 27: (0, 311), 30: (0, 380), 32: (0, 394), 33: (0, 402), 36: (0, 420), 38: (0, 427), 40: (0, 435), 42: (0, 415)}, 430: {69: (0, 434), 12: (1, {'@': 276}), 19: (1, {'@': 276}), 14: (1, {'@': 276}), 18: (1, {'@': 276}), 15: (1, {'@': 276}), 31: (1, {'@': 276}), 2: (1, {'@': 276}), 40: (1, {'@': 276}), 37: (1, {'@': 276}), 24: (1, {'@': 276}), 68: (1, {'@': 276}), 22: (1, {'@': 276}), 62: (1, {'@': 276}), 71: (1, {'@': 276}), 61: (1, {'@': 276}), 54: (1, {'@': 276}), 57: (1, {'@': 276}), 45: (1, {'@': 276}), 72: (1, {'@': 276}), 73: (1, {'@': 276}), 52: (1, {'@': 276}), 74: (1, {'@': 276}), 66: (1, {'@': 276})}, 431: {62: (1, {'@': 277}), 43: (1, {'@': 277}), 51: (1, {'@': 277}), 53: (1, {'@': 277}), 60: (1, {'@': 277}), 10: (1, {'@': 277}), 59: (1, {'@': 277}), 48: (1, {'@': 277}), 49: (1, {'@': 277}), 50: (1, {'@': 277})}, 432: {1: (0, 283), 23: (0, 300), 5: (0, 207), 6: (0, 251), 20: (0, 288), 8: (0, 281), 32: (0, 394), 10: (0, 8), 29: (0, 411), 36: (0, 420), 16: (0, 296), 38: (0, 427), 26: (0, 237), 21: (0, 244), 42: (0, 415), 25: (0, 264)}, 433: {43: (1, {'@': 278}), 51: (1, {'@': 278}), 53: (1, {'@': 278}), 49: (1, {'@': 278}), 10: (1, {'@': 278}), 59: (1, {'@': 278}), 60: (1, {'@': 278}), 50: (1, {'@': 278}), 48: (1, {'@': 278})}, 434: {1: (0, 283), 23: (0, 300), 30: (0, 380), 6: (0, 251), 20: (0, 288), 8: (0, 281), 32: (0, 394), 10: (0, 8), 11: (0, 309), 36: (0, 420), 5: (0, 261), 16: (0, 296), 7: (0, 408), 38: (0, 427), 26: (0, 237), 21: (0, 244), 42: (0, 415), 25: (0, 264), 29: (0, 411)}, 435: {1: (0, 283), 5: (0, 261), 6: (0, 251), 7: (0, 292), 8: (0, 281), 10: (0, 8), 11: (0, 309), 16: (0, 296), 20: (0, 288), 21: (0, 244), 23: (0, 300), 25: (0, 264), 26: (0, 237), 29: (0, 411), 27: (0, 78), 30: (0, 380), 32: (0, 394), 33: (0, 402), 36: (0, 420), 38: (0, 427), 42: (0, 415)}, 436: {44: (0, 49), 52: (0, 227)}, 437: {16: (0, 326), 89: (0, 345), 100: (0, 398), 1: (0, 167), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 26: (0, 237)}, 438: {43: (1, {'@': 279}), 12: (1, {'@': 279}), 44: (1, {'@': 279}), 45: (1, {'@': 279}), 10: (1, {'@': 279}), 48: (1, {'@': 279}), 49: (1, {'@': 279}), 50: (1, {'@': 279}), 51: (1, {'@': 279}), 19: (1, {'@': 279}), 52: (1, {'@': 279}), 53: (1, {'@': 279}), 54: (1, {'@': 279}), 55: (1, {'@': 279}), 57: (1, {'@': 279}), 59: (1, {'@': 279}), 60: (1, {'@': 279})}, 439: {43: (1, {'@': 280}), 51: (1, {'@': 280}), 53: (1, {'@': 280}), 49: (1, {'@': 280}), 10: (1, {'@': 280}), 59: (1, {'@': 280}), 60: (1, {'@': 280}), 50: (1, {'@': 280}), 48: (1, {'@': 280})}, 440: {43: (1, {'@': 281}), 67: (1, {'@': 281}), 12: (1, {'@': 281}), 44: (1, {'@': 281}), 18: (1, {'@': 281}), 45: (1, {'@': 281}), 46: (1, {'@': 281}), 47: (1, {'@': 281}), 75: (1, {'@': 281}), 10: (1, {'@': 281}), 48: (1, {'@': 281}), 49: (1, {'@': 281}), 69: (1, {'@': 281}), 50: (1, {'@': 281}), 51: (1, {'@': 281}), 19: (1, {'@': 281}), 52: (1, {'@': 281}), 53: (1, {'@': 281}), 54: (1, {'@': 281}), 31: (1, {'@': 281}), 2: (1, {'@': 281}), 55: (1, {'@': 281}), 56: (1, {'@': 281}), 40: (1, {'@': 281}), 57: (1, {'@': 281}), 24: (1, {'@': 281}), 58: (1, {'@': 281}), 59: (1, {'@': 281}), 60: (1, {'@': 281}), 61: (1, {'@': 281}), 62: (1, {'@': 281})}, 441: {72: (0, 165), 68: (1, {'@': 282}), 62: (1, {'@': 282}), 54: (1, {'@': 282}), 61: (1, {'@': 282}), 57: (1, {'@': 282}), 45: (1, {'@': 282}), 73: (1, {'@': 282}), 52: (1, {'@': 282}), 74: (1, {'@': 282}), 66: (1, {'@': 282})}, 442: {12: (1, {'@': 283}), 18: (1, {'@': 283}), 15: (1, {'@': 283}), 6: (1, {'@': 283}), 37: (1, {'@': 283}), 10: (1, {'@': 283}), 26: (1, {'@': 283}), 1: (1, {'@': 283}), 22: (1, {'@': 283}), 23: (1, {'@': 283}), 25: (1, {'@': 283}), 19: (1, {'@': 283}), 14: (1, {'@': 283}), 31: (1, {'@': 283}), 2: (1, {'@': 283}), 40: (1, {'@': 283}), 24: (1, {'@': 283}), 42: (1, {'@': 283}), 20: (1, {'@': 283}), 45: (1, {'@': 283}), 72: (1, {'@': 283}), 68: (1, {'@': 283}), 73: (1, {'@': 283}), 62: (1, {'@': 283}), 61: (1, {'@': 283}), 52: (1, {'@': 283}), 54: (1, {'@': 283}), 57: (1, {'@': 283}), 74: (1, {'@': 283}), 66: (1, {'@': 283})}, 443: {92: (0, 82), 16: (0, 77), 89: (0, 83), 99: (0, 412), 100: (0, 398), 101: (0, 425), 32: (0, 388), 40: (0, 437), 10: (0, 8), 110: (0, 232), 94: (0, 117), 95: (0, 143), 96: (0, 157), 90: (0, 171), 1: (0, 167), 26: (0, 237)}, 444: {141: (0, 352), 61: (0, 350), 54: (1, {'@': 284})}}, 'start_states': {'start': 316}, 'end_states': {'start': 12}}, 'lexer_conf': {'tokens': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}, {'@': 72}], 'ignore': ['WS', 'COMMENT'], 'g_regex_flags': 0, '__type__': 'LexerConf'}, 'start': ['start'], '__type__': 'LALR_ContextualLexer'}, 'rules': [{'@': 85}, {'@': 219}, {'@': 91}, {'@': 239}, {'@': 92}, {'@': 236}, {'@': 195}, {'@': 278}, {'@': 164}, {'@': 197}, {'@': 254}, {'@': 249}, {'@': 280}, {'@': 150}, {'@': 175}, {'@': 157}, {'@': 154}, {'@': 88}, {'@': 147}, {'@': 129}, {'@': 161}, {'@': 130}, {'@': 74}, {'@': 86}, {'@': 210}, {'@': 108}, {'@': 99}, {'@': 113}, {'@': 135}, {'@': 282}, {'@': 155}, {'@': 187}, {'@': 204}, {'@': 180}, {'@': 189}, {'@': 132}, {'@': 140}, {'@': 141}, {'@': 98}, {'@': 238}, {'@': 272}, {'@': 107}, {'@': 237}, {'@': 224}, {'@': 223}, {'@': 233}, {'@': 149}, {'@': 171}, {'@': 186}, {'@': 256}, {'@': 283}, {'@': 248}, {'@': 194}, {'@': 185}, {'@': 182}, {'@': 208}, {'@': 192}, {'@': 212}, {'@': 198}, {'@': 184}, {'@': 103}, {'@': 215}, {'@': 124}, {'@': 260}, {'@': 276}, {'@': 206}, {'@': 116}, {'@': 213}, {'@': 96}, {'@': 245}, {'@': 139}, {'@': 188}, {'@': 119}, {'@': 200}, {'@': 209}, {'@': 255}, {'@': 265}, {'@': 183}, {'@': 268}, {'@': 165}, {'@': 179}, {'@': 275}, {'@': 271}, {'@': 87}, {'@': 146}, {'@': 263}, {'@': 100}, {'@': 83}, {'@': 136}, {'@': 104}, {'@': 127}, {'@': 159}, {'@': 80}, {'@': 160}, {'@': 277}, {'@': 252}, {'@': 226}, {'@': 121}, {'@': 89}, {'@': 118}, {'@': 137}, {'@': 82}, {'@': 217}, {'@': 122}, {'@': 93}, {'@': 168}, {'@': 243}, {'@': 250}, {'@': 81}, {'@': 273}, {'@': 177}, {'@': 148}, {'@': 234}, {'@': 97}, {'@': 126}, {'@': 128}, {'@': 181}, {'@': 242}, {'@': 241}, {'@': 134}, {'@': 193}, {'@': 216}, {'@': 207}, {'@': 125}, {'@': 196}, {'@': 90}, {'@': 262}, {'@': 279}, {'@': 261}, {'@': 274}, {'@': 267}, {'@': 145}, {'@': 112}, {'@': 163}, {'@': 246}, {'@': 259}, {'@': 266}, {'@': 73}, {'@': 131}, {'@': 231}, {'@': 105}, {'@': 78}, {'@': 115}, {'@': 144}, {'@': 106}, {'@': 102}, {'@': 251}, {'@': 230}, {'@': 281}, {'@': 257}, {'@': 169}, {'@': 232}, {'@': 284}, {'@': 84}, {'@': 138}, {'@': 172}, {'@': 228}, {'@': 235}, {'@': 176}, {'@': 76}, {'@': 190}, {'@': 109}, {'@': 110}, {'@': 222}, {'@': 143}, {'@': 225}, {'@': 258}, {'@': 94}, {'@': 202}, {'@': 178}, {'@': 191}, {'@': 201}, {'@': 75}, {'@': 253}, {'@': 220}, {'@': 114}, {'@': 270}, {'@': 170}, {'@': 95}, {'@': 111}, {'@': 218}, {'@': 240}, {'@': 214}, {'@': 117}, {'@': 101}, {'@': 205}, {'@': 133}, {'@': 264}, {'@': 152}, {'@': 151}, {'@': 153}, {'@': 199}, {'@': 79}, {'@': 120}, {'@': 247}, {'@': 244}, {'@': 167}, {'@': 123}, {'@': 203}, {'@': 211}, {'@': 227}, {'@': 221}, {'@': 77}, {'@': 174}, {'@': 162}, {'@': 158}, {'@': 229}, {'@': 156}, {'@': 269}, {'@': 166}, {'@': 142}, {'@': 173}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache_grammar': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': None, 'ambiguity': 'auto', 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'PERCENT', 'pattern': {'value': '%', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 1: {'name': '_DEFEQ', 'pattern': {'value': ':=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 2: {'name': 'EQ', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 3: {'name': 'GT', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 4: {'name': 'LT', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 5: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 6: {'name': '_IS', 'pattern': {'value': '(?:(?:are|is)|∈)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 7: {'name': 'PROP_VAL', 'pattern': {'value': '(?:(?i:(?:(?i:sometimes)|(?i:true)))|(?i:false))', 'flags': ['i'], '_width': [4, 9], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 8: {'name': 'COMP', 'pattern': {'value': '(?:(?:(?:!|\\~)|¬)|not)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 9: {'name': '_IMPLIES', 'pattern': {'value': '(?:(?:=>|⇒)|⟹\\ )', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 10: {'name': '_IFF', 'pattern': {'value': '(?:(?:(?:<=>|⟺)|⇔)|iff)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 11: {'name': 'CONJ', 'pattern': {'value': '(?:(?:(?:\\&|/\\\\)|∧)|and)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 12: {'name': 'DISJ', 'pattern': {'value': '(?:(?:(?:\\||\\\\/)|∨)|or)', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 13: {'name': 'VAR', 'pattern': {'value': '(?!(case|end|match|with|do|if|then|else|otherwise|iff|is|are|forall|exists|not|or|and|sometimes|true|false)\\b)[a-z_$][\\$a-zA-Z_0-9]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 14: {'name': 'ANNOTATION', 'pattern': {'value': '@[A-Za-z0-9_]+', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 15: {'name': 'COMMENT', 'pattern': {'value': '\\/\\/[^\n]*', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 16: {'name': 'INT', 'pattern': {'value': '(?:[0-9])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 17: {'name': 'WS', 'pattern': {'value': '(?:[ \t\x0c\r\n])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 18: {'name': 'ESCAPED_STRING', 'pattern': {'value': '".*?(?<!\\\\)(\\\\\\\\)*?"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 19: {'name': 'HASH', 'pattern': {'value': '#', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 20: {'name': '__ANON_0', 'pattern': {'value': 'save_aut', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 21: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 22: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 23: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 24: {'name': '__ANON_1', 'pattern': {'value': 'save_aut_img', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 25: {'name': 'CONTEXT', 'pattern': {'value': 'context', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 26: {'name': '__ANON_2', 'pattern': {'value': 'end_context', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 27: {'name': 'LOAD', 'pattern': {'value': 'load', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 28: {'name': '__ANON_3', 'pattern': {'value': 'assert_prop', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 29: {'name': 'IMPORT', 'pattern': {'value': 'import', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 30: {'name': 'FORGET', 'pattern': {'value': 'forget', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 31: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 32: {'name': 'STRUCTURE', 'pattern': {'value': 'Structure', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 33: {'name': 'DEFINING', 'pattern': {'value': 'defining', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 34: {'name': 'SHUFFLE', 'pattern': {'value': 'shuffle', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 35: {'name': '__ANON_4', 'pattern': {'value': 'shuffle_or', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 36: {'name': 'RESTRICT', 'pattern': {'value': 'Restrict', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 37: {'name': 'DEFINE', 'pattern': {'value': 'Define', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 38: {'name': 'ALIAS', 'pattern': {'value': 'Alias', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 39: {'name': '__ANON_5', 'pattern': {'value': '(?!(Define|Alias|Restrict)\\b)[A-Z][a-zA-Z_0-9]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 40: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 41: {'name': 'THEN', 'pattern': {'value': 'then', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 42: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 43: {'name': 'BACKSLASH', 'pattern': {'value': '\\', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 44: {'name': 'LET', 'pattern': {'value': 'let', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 45: {'name': 'BE', 'pattern': {'value': 'be', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 46: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 47: {'name': 'MATCH', 'pattern': {'value': 'match', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 48: {'name': 'WITH', 'pattern': {'value': 'with', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 49: {'name': 'END', 'pattern': {'value': 'end', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 50: {'name': 'SEMICOLON', 'pattern': {'value': ';', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 51: {'name': 'DO', 'pattern': {'value': 'do', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 52: {'name': 'CASE', 'pattern': {'value': 'case', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 53: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 54: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 55: {'name': '__ANON_6', 'pattern': {'value': '[^\x00-ÿ]', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 56: {'name': 'AT', 'pattern': {'value': '@', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 57: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 58: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 59: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 60: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 61: {'name': 'CIRCUMFLEX', 'pattern': {'value': '^', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 62: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 63: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 64: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 65: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 66: {'name': '__ANON_7', 'pattern': {'value': '≠', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 67: {'name': '__ANON_8', 'pattern': {'value': '≥', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 68: {'name': '__ANON_9', 'pattern': {'value': '≤', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 69: {'name': 'FORALL', 'pattern': {'value': 'forall', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 70: {'name': '__ANON_10', 'pattern': {'value': '∀', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 71: {'name': 'EXISTS', 'pattern': {'value': 'exists', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 72: {'name': '__ANON_11', 'pattern': {'value': '∃', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 73: {'origin': {'name': 'sub_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_expr', '__type__': 'NonTerminal'}, {'name': '__sub_expr_star_15', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 74: {'origin': {'name': 'directive_name', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_5', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 75: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'def', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 76: {'origin': {'name': 'var', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'var_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 77: {'origin': {'name': '__sub_expr_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': 'mul_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'div_expr', '__type__': 'NonTerminal'}, {'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': '__praline_exponent_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': '__val_dict_star_13', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': 'varlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '__varlist_star_14', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'formal_var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'prog', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_if', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': 'pecan_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_pecan_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'def_pred_standard', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'bool', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'comp', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pred_definition', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'directive_save_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'formal_is_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': 'le', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_9', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': '__match_expr_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exponent', '__type__': 'NonTerminal'}, {'name': '__praline_div_star_9', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'if_then_else', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [False, False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_match_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'praline_let', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': '__praline_sub_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'var_ref', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_list_gen', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': 'add_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': 'div_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'BE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_let_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': 'ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_ne', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': 'ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': '__match_expr_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__match_expr_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arith', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'WITH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__term_plus_1', '__type__': 'NonTerminal'}, {'name': 'END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_match', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': '__term_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__term_plus_1', '__type__': 'NonTerminal'}, {'name': 'match_arm', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': 'mul_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}, {'name': '__praline_mul_star_8', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': '__operator_sym_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__operator_sym_plus_5', '__type__': 'NonTerminal'}, {'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'def_pred_is', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': 'praline_atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_app', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': '__praline_exponent_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_exponent_star_10', '__type__': 'NonTerminal'}, {'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': 'restriction', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'restrict_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'formal_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}, {'name': '__praline_sub_star_6', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': '_IFF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'iff', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': 'praline_tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'disj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEFINE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_def', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'directive_name', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_directive', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': 'sub_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': 'match_arm', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CASE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_match_arm', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': '__praline_add_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__term_star_2', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_list_gen', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'def_pred_is_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': 'arg', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': 'praline_exponent', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': '__praline_exponent_star_10', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_exponent', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_match_int', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_match_string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': '__args_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': 'ge', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': 'div_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '__div_expr_star_18', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'ge', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'greater_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': 'pecan_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_pecan_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': 'prop_val', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PROP_VAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'prop_val_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pred', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'implies', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pecan_term', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'praline_match_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCTURE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'DEFINING', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'val_dict', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'directive_structure', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': '__praline_mul_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_mul_star_8', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': '__praline_mul_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': '__praline_div_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RESTRICT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'restriction', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_4', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 13, 'alias': 'directive_shuffle_or', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': '__add_expr_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__add_expr_star_16', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': 'praline_tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ALIAS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'directive_name', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_alias', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': '__add_expr_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'index', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LOAD', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'directive_load_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': '__div_expr_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__div_expr_star_18', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': '__praline_tuple_plus_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': 'quant_formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'quant_formal_list', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ANNOTATION', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'annotation', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': '__term_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__term_star_2', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': 'praline_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_operator', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'call_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': '__args_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__args_star_19', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': '__sub_expr_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__sub_expr_star_15', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SHUFFLE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'directive_shuffle', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': 'int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'int_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_10', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pecan_term', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'partial_op_fst', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'conj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': 'praline_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': 'praline_exponent', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_exponent', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'partial_op_snd', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': 'string', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ESCAPED_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'escaped_str', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXISTS', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'formula_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'CONTEXT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'directive_context', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comparison', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'prop_val', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'directive_assert_prop', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_6', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': '__praline_div_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_div_star_9', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_11', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FORALL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': '__val_dict_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': '__praline_sub_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_sub_star_6', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'spot_formula', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BACKSLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_lambda', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': '__val_dict_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__val_dict_star_13', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': '__operator_sym_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 215: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'formal_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'formal_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': 'prog', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 220: {'origin': {'name': '__term_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_arm', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': '__varlist_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__varlist_star_14', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': 'ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_7', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 223: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'praline_match_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 224: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'praline_match_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 225: {'origin': {'name': 'ge', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_8', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': 'restriction', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'restrict_is', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': '__varlist_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'call_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 229: {'origin': {'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': 'add_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mul_expr', '__type__': 'NonTerminal'}, {'name': '__add_expr_star_16', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg', '__type__': 'NonTerminal'}, {'name': '__args_star_19', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 234: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'if_then_else', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'call_is_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'directive_save_aut_img', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'praline_match_prepend', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '__match_expr_star_3', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'directive_save_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__match_expr_plus_4', '__type__': 'NonTerminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'exists_sym', '__type__': 'NonTerminal'}, {'name': 'quant_formal', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'exists', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'forall_sym', '__type__': 'NonTerminal'}, {'name': 'quant_formal', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'forall', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 243: {'origin': {'name': 'quant_formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'quant_formal_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': '__praline_list_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_list_star_11', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'index_range', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': '__praline_list_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'FORGET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'directive_forget', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': 'quant_formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'quant_formal_is_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 251: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'int_const', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': 'kv_pair', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'kv_pair', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'def', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 254: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'directive_import', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 255: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_int', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 256: {'origin': {'name': 'operator_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__operator_sym_plus_5', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'operator_sym', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 257: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'call', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 258: {'origin': {'name': 'le', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_le', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 259: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'index_range', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 260: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 261: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'less', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 262: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 263: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__praline_list_star_11', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 264: {'origin': {'name': '__praline_add_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_add_star_7', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 265: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 266: {'origin': {'name': 'arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'sub_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'le', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'less_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 268: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 269: {'origin': {'name': '__div_expr_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 270: {'origin': {'name': '__term_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 271: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_tuple', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 272: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 273: {'origin': {'name': 'varlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 274: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'greater', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 275: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_list', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 276: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}, {'name': '__praline_add_star_7', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 277: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 278: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'directive_end_context', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 279: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'ne', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'not_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 280: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCTURE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'DEFINING', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'val_dict', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': 'directive_structure', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 281: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 282: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__term_star_2', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 283: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 284: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(transformer=None, postlex=None):
  namespace = {'Rule': Rule, 'TerminalDef': TerminalDef}
  return Lark.deserialize(DATA, namespace, MEMO, transformer=transformer, postlex=postlex)
