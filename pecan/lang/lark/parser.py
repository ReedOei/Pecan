# The file was automatically generated by Lark v0.8.5
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

import os
from io import open

class LarkError(Exception):
    pass

class GrammarError(LarkError):
    pass

class ParseError(LarkError):
    pass

class LexError(LarkError):
    pass

class UnexpectedEOF(ParseError):
    def __init__(self, expected):
        self.expected = expected

        message = ("Unexpected end-of-input. Expected one of: \n\t* %s\n" % '\n\t* '.join(x.name for x in self.expected))
        super(UnexpectedEOF, self).__init__(message)


class UnexpectedInput(LarkError):
    pos_in_stream = None

    def get_context(self, text, span=40):
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        before = text[start:pos].rsplit('\n', 1)[-1]
        after = text[pos:end].split('\n', 1)[0]
        return before + after + '\n' + ' ' * len(before) + '^\n'

    def match_examples(self, parse_fn, examples):
        """ Given a parser instance and a dictionary mapping some label with
            some malformed syntax examples, it'll return the label for the
            example that bests matches the current error.
        """
        assert self.state is not None, "Not supported for this exception"

        candidate = None
        for label, example in examples.items():
            assert not isinstance(example, STRING_TYPE)

            for malformed in example:
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        try:
                            if ut.token == self.token:  # Try exact match first
                                return label
                        except AttributeError:
                            pass
                        if not candidate:
                            candidate = label

        return candidate


class UnexpectedCharacters(LexError, UnexpectedInput):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None):
        message = "No terminal defined for '%s' at line %d col %d" % (seq[lex_pos], line, column)

        self.line = line
        self.column = column
        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.pos_in_stream = lex_pos
        self.state = state

        message += '\n\n' + self.get_context(seq)
        if allowed:
            message += '\nExpecting: %s\n' % allowed
        if token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in token_history)

        super(UnexpectedCharacters, self).__init__(message)



class UnexpectedToken(ParseError, UnexpectedInput):
    def __init__(self, token, expected, considered_rules=None, state=None):
        self.token = token
        self.expected = expected     # XXX str shouldn't necessary
        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.considered_rules = considered_rules
        self.state = state
        self.pos_in_stream = getattr(token, 'pos_in_stream', None)

        message = ("Unexpected token %r at line %s, column %s.\n"
                   "Expected one of: \n\t* %s\n"
                   % (token, self.line, self.column, '\n\t* '.join(self.expected)))

        super(UnexpectedToken, self).__init__(message)

class VisitError(LarkError):
    """VisitError is raised when visitors are interrupted by an exception

    It provides the following attributes for inspection:
    - obj: the tree node or token it was processing when the exception was raised
    - orig_exc: the exception that cause it to fail
    """
    def __init__(self, rule, obj, orig_exc):
        self.obj = obj
        self.orig_exc = orig_exc

        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

def classify(seq, key=None, value=None):
    d = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data, namespace, memo):
    if isinstance(data, dict):
        if '__type__' in data: # Object
            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


class Serialize(object):
    def memo_serialize(self, types_to_memoize):
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None):
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        postprocess = getattr(self, '_serialize', None)
        if postprocess:
            postprocess(res, memo)
        return res

    @classmethod
    def deserialize(cls, data, memo):
        namespace = getattr(cls, '__serialize_namespace__', {})
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)
        postprocess = getattr(inst, '_deserialize', None)
        if postprocess:
            postprocess()
        return inst


class SerializeMemoizer(Serialize):
    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize):
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value):
        return isinstance(value, self.types_to_memoize)

    def serialize(self):
        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data, namespace, memo):
        return _deserialize(data, namespace, memo)



try:
    STRING_TYPE = basestring
except NameError:   # Python 3
    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')
try:
    classtype = types.ClassType # Python2
except AttributeError:
    classtype = type    # Python3

def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (classtype, type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        return wraps(f.func)(create_decorator(lambda *args, **kw: f(*args[1:], **kw), True))

    else:
        return create_decorator(f.__func__.__call__, True)

import sys, re
Py36 = (sys.version_info[:2] >= (3, 6))

import sre_parse
import sre_constants
def get_regexp_width(regexp):
    try:
        return [int(x) for x in sre_parse.parse(regexp).getwidth()]
    except sre_constants.error:
        raise ValueError(regexp)


class Meta:
    def __init__(self):
        self.empty = True

class Tree(object):
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self):
        # TODO: Re-write as a more efficient version

        visited = set()
        q = [self]

        l = []
        while q:
            subtree = q.pop()
            l.append( subtree )
            if id(subtree) in visited:
                continue    # already been here from another branch
            visited.add(id(subtree))
            q += [c for c in subtree.children if isinstance(c, Tree)]

        seen = set()
        for x in reversed(l):
            if id(x) not in seen:
                yield x
                seen.add(id(x))

    def find_pred(self, pred):
        "Find all nodes where pred(tree) == True"
        return filter(pred, self.iter_subtrees())

    def find_data(self, data):
        "Find all nodes where tree.data == data"
        return self.find_pred(lambda t: t.data == data)


from inspect import getmembers, getmro

class Discard(Exception):
    pass

# Transformers

class _Decoratable:
    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            # Make sure the function isn't inherited (unless it's overwritten)
            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(cls.__dict__[name]):
                continue

            # Skip if v_args already applied (at the function level)
            if hasattr(cls.__dict__[name], 'vargs_applied'):
                continue

            static = isinstance(cls.__dict__[name], (staticmethod, classmethod))
            setattr(cls, name, decorator(value, static=static, **kwargs))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable):
    """Visits the tree recursively, starting with the leaves and finally the root (bottom-up)

    Calls its methods (provided by user via inheritance) according to tree.data
    The returned value replaces the old one in the structure.

    Can be used to implement map or reduce.
    """
    __visit_tokens__ = True   # For backwards compatibility

    def __init__(self,  visit_tokens=True):
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)


    def _transform_children(self, children):
        for c in children:
            try:
                if isinstance(c, Tree):
                    yield self._transform_tree(c)
                elif self.__visit_tokens__ and isinstance(c, Token):
                    yield self._call_userfunc_token(c)
                else:
                    yield c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        return self._transform_tree(tree)

    def __mul__(self, other):
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        "Default operation on tree (for override)"
        return Tree(data, children, meta)

    def __default_token__(self, token):
        "Default operation on token (for override)"
        return token



class InlineTransformer(Transformer):   # XXX Deprecated
    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    "Non-recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):           # Cancel recursion
        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_InPlaceRecursive(Transformer):
    "Recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)



# Visitors

class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        "Default operation on tree (for override)"
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase):
    """Bottom-up visitor, non-recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self,tree):
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree

class Visitor_Recursive(VisitorBase):
    """Bottom-up visitor, recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree):
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree



def visit_children_decor(func):
    "See Interpreter"
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter(_Decoratable):
    """Top-down visitor, recursive

    Visits the tree, starting with the root and finally the leaves (top-down)
    Calls its methods (provided by user via inheritance) according to tree.data

    Unlike Transformer and Visitor, the Interpreter doesn't automatically visit its sub-branches.
    The user has to explicitly call visit_children, or use the @visit_children_decor
    """

    def visit(self, tree):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)




# Decorators

def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)



def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   # XXX Deprecated
    return _apply_decorator(obj, _inline_args__func)



def _visitor_args_func_dec(func, visit_wrapper=None, static=False):
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    if static:
        f = wraps(func)(create_decorator(func, False))
    else:
        f = smart_decorator(func, create_decorator)
    f.vargs_applied = True
    f.visit_wrapper = visit_wrapper
    return f


def _vargs_inline(f, data, children, meta):
    return f(*children)
def _vargs_meta_inline(f, data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, data, children, meta):
    return f(children, meta)   # TODO swap these for consistency? Backwards incompatible!
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))

def v_args(inline=False, meta=False, tree=False, wrapper=None):
    "A convenience decorator factory, for modifying the behavior of user-supplied visitor methods"
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, visit_wrapper=func)
    return _visitor_args_dec



class Indenter:
    def __init__(self):
        self.paren_level = None
        self.indent_level = None
        assert self.tab_len > 0

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)



class Symbol(Serialize):
    __slots__ = ('name',)

    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)



class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term = False



class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'empty_indices'

    def __init__(self, keep_all_tokens=False, expand1=False, priority=None, empty_indices=()):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
        )


class Rule(Serialize):
    """
        origin : a symbol
        expansion : a list of symbols
        order : index of this expansion amongst all rules of the same name
    """
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion





class Pattern(Serialize):

    def __init__(self, value, flags=()):
        self.value = value
        self.flags = frozenset(flags)

    def __repr__(self):
        return repr(self.to_regexp())

    # Pattern Hashing assumes all subclasses have a different priority!
    def __hash__(self):
        return hash((type(self), self.value, self.flags))
    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    def to_regexp(self):
        raise NotImplementedError()

    if Py36:
        # Python 3.6 changed syntax for flags in regular expression
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s:%s)' % (f, value))
            return value

    else:
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s)' % f) + value
            return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type = "str"

    def to_regexp(self):
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self):
        return len(self.value)
    max_width = min_width

class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type = "re"

    def to_regexp(self):
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self):
        return self._get_width()[0]
    @property
    def max_width(self):
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    def __init__(self, name, pattern, priority=1):
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)



class Token(Str):
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        try:
            self = super(Token, cls).__new__(cls, value)
        except UnicodeDecodeError:
            value = value.decode('latin1')
            self = super(Token, cls).__new__(cls, value)

        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        self.end_line = end_line
        self.end_column = end_column
        self.end_pos = end_pos
        return self

    def update(self, type_=None, value=None):
        return Token.new_borrow_pos(
            type_ if type_ is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer, state=None):
        self.lexer = lexer
        self.state = state

    def lex(self, stream, newline_types, ignore_types):
        newline_types = frozenset(newline_types)
        ignore_types = frozenset(ignore_types)
        line_ctr = LineCounter()
        last_token = None

        while line_ctr.char_pos < len(stream):
            lexer = self.lexer
            res = lexer.match(stream, line_ctr.char_pos)
            if not res:
                allowed = {v for m, tfi in lexer.mres for v in tfi.values()} - ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column, allowed=allowed, state=self.state, token_history=last_token and [last_token])

            value, type_ = res

            if type_ not in ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                line_ctr.feed(value, type_ in newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in lexer.callback:
                    t = lexer.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise ValueError("Callbacks must return a token (returned %r)" % t)
                yield t
                last_token = t
            else:
                if type_ in lexer.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    lexer.callback[type_](t2)
                line_ctr.feed(value, type_ in newline_types)




class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t

class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2





def _create_unless(terminals, g_regex_flags):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = [] # {}
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority > retok.priority:
                continue
            s = strtok.pattern.value
            m = re.match(retok.pattern.to_regexp(), s, g_regex_flags)
            if m and m.group(0) == s:
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(build_mres(unless, g_regex_flags, match_whole=True))

    terminals = [t for t in terminals if t not in embedded_strs]
    return terminals, callback


def _build_mres(terminals, max_size, g_regex_flags, match_whole):
    # Python sets an unreasonable group limit (currently 100) in its re module
    # Worse, the only way to know we reached it is by catching an AssertionError!
    # This function recursively tries less and less groups until it's successful.
    postfix = '$' if match_whole else ''
    mres = []
    while terminals:
        try:
            mre = re.compile(u'|'.join(u'(?P<%s>%s)'%(t.name, t.pattern.to_regexp()+postfix) for t in terminals[:max_size]), g_regex_flags)
        except AssertionError:  # Yes, this is what Python provides us.. :/
            return _build_mres(terminals, max_size//2, g_regex_flags, match_whole)

        # terms_from_name = {t.name: t for t in terminals[:max_size]}
        mres.append((mre, {i:n for n,i in mre.groupindex.items()} ))
        terminals = terminals[max_size:]
    return mres

def build_mres(terminals, g_regex_flags, match_whole=False):
    return _build_mres(terminals, len(terminals), g_regex_flags, match_whole)

def _regexp_has_newline(r):
    r"""Expressions that may indicate newlines in a regexp:
        - newlines (\n)
        - escaped newline (\\n)
        - anything but ([^...])
        - any-char (.) when the flag (?s) exists
        - spaces (\s)
    """
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)

class Lexer(object):
    """Lexer interface

    Method Signatures:
        lex(self, stream) -> Iterator[Token]
    """
    lex = NotImplemented


class TraditionalLexer(Lexer):

    def __init__(self, terminals, ignore=(), user_callbacks={}, g_regex_flags=0):
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        terminals = list(terminals)

        # Sanitization
        for t in terminals:
            try:
                re.compile(t.pattern.to_regexp(), g_regex_flags)
            except re.error:
                raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

            if t.pattern.min_width == 0:
                raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

        assert set(ignore) <= {t.name for t in terminals}

        # Init
        self.newline_types = [t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp())]
        self.ignore_types = list(ignore)

        terminals.sort(key=lambda x:(-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = user_callbacks
        self.build(g_regex_flags)

    def build(self, g_regex_flags=0):
        terminals, self.callback = _create_unless(self.terminals, g_regex_flags)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                # Already a callback there, probably UnlessCallback
                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self.mres = build_mres(terminals, g_regex_flags)

    def match(self, stream, pos):
        for mre, type_from_index in self.mres:
            m = mre.match(stream, pos)
            if m:
                return m.group(0), type_from_index[m.lastindex]

    def lex(self, stream):
        return _Lex(self).lex(stream, self.newline_types, self.ignore_types)




class ContextualLexer(Lexer):

    def __init__(self, terminals, states, ignore=(), always_accept=(), user_callbacks={}, g_regex_flags=0):
        tokens_by_name = {}
        for t in terminals:
            assert t.name not in tokens_by_name, t
            tokens_by_name[t.name] = t

        lexer_by_tokens = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(ignore) | set(always_accept)
                state_tokens = [tokens_by_name[n] for n in accepts if n and n in tokens_by_name]
                lexer = TraditionalLexer(state_tokens, ignore=ignore, user_callbacks=user_callbacks, g_regex_flags=g_regex_flags)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        self.root_lexer = TraditionalLexer(terminals, ignore=ignore, user_callbacks=user_callbacks, g_regex_flags=g_regex_flags)

    def lex(self, stream, get_parser_state):
        parser_state = get_parser_state()
        l = _Lex(self.lexers[parser_state], parser_state)
        try:
            for x in l.lex(stream, self.root_lexer.newline_types, self.root_lexer.ignore_types):
                yield x
                parser_state = get_parser_state()
                l.lexer = self.lexers[parser_state]
                l.state = parser_state # For debug only, no need to worry about multithreading
        except UnexpectedCharacters as e:
            # In the contextual lexer, UnexpectedCharacters can mean that the terminal is defined,
            # but not in the current context.
            # This tests the input against the global context, to provide a nicer error.
            root_match = self.root_lexer.match(stream, e.pos_in_stream)
            if not root_match:
                raise

            value, type_ = root_match
            t = Token(type_, value, e.pos_in_stream, e.line, e.column)
            raise UnexpectedToken(t, e.allowed, state=e.state)



class LexerConf(Serialize):
    __serialize_fields__ = 'tokens', 'ignore', 'g_regex_flags'
    __serialize_namespace__ = TerminalDef,

    def __init__(self, tokens, ignore=(), postlex=None, callbacks=None, g_regex_flags=0):
        self.tokens = tokens
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags

    def _deserialize(self):
        self.callbacks = {} # TODO


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)

class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            for c in children:
                if isinstance(c, Tree) and not c.meta.empty:
                    res.meta.line = c.meta.line
                    res.meta.column = c.meta.column
                    res.meta.start_pos = c.meta.start_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.line = c.line
                    res.meta.column = c.column
                    res.meta.start_pos = c.pos_in_stream
                    res.meta.empty = False
                    break

            for c in reversed(children):
                if isinstance(c, Tree) and not c.meta.empty:
                    res.meta.end_line = c.meta.end_line
                    res.meta.end_column = c.meta.end_column
                    res.meta.end_pos = c.meta.end_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.end_line = c.end_line
                    res.meta.end_column = c.end_column
                    res.meta.end_pos = c.end_pos
                    res.meta.empty = False
                    break

        return res


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR_NoPlaceholders(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)

def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')

def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices):
    # Prepare empty_indices as: How many Nones to insert at each index?
    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            # LALR without placeholders
            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])

class AmbiguousExpander:
    """Deal with the case where we're expanding children ('_rule') into a parent but the children
       are ambiguous. i.e. (parent->_ambig->_expand_this_rule). In this case, make the parent itself
       ambiguous with as many copies as their are ambiguous children, and then copy the ambiguous children
       into the right parents in the right places, essentially shifting the ambiguiuty up the tree."""
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(child):
            return hasattr(child, 'data') and child.data == '_ambig'

        #### When we're repeatedly expanding ambiguities we can end up with nested ambiguities.
        #    All children of an _ambig node should be a derivation of that ambig node, hence
        #    it is safe to assume that if we see an _ambig node nested within an ambig node
        #    it is safe to simply expand it into the parent _ambig node as an alternative derivation.
        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                to_expand = [j for j, grandchild in enumerate(child.children) if _is_ambig_tree(grandchild)]
                child.expand_kids_by_index(*to_expand)

        if not ambiguous:
            return self.node_builder(children)

        expand = [ iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children) ]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])

def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)

def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f

def inplace_transformer(func):
    @wraps(func)
    def f(children):
        # function name in a Transformer is a rule name.
        tree = Tree(func.__name__, children)
        return func(tree)
    return f

def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")
    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, keep_all_tokens=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                self.propagate_positions and PropagatePositions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
            ]))

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callbacks = {}

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                # XXX InlineTransformer is deprecated!
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                else:
                    if isinstance(transformer, InlineTransformer):
                        f = ptb_inline_args(f)
                    elif isinstance(transformer, Transformer_InPlace):
                        f = inplace_transformer(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks


class LALR_Parser(object):
    def __init__(self, parser_conf, debug=False):
        assert all(r.options.priority is None for r in parser_conf.rules), "LALR doesn't yet support prioritization"
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks)

    @classmethod
    def deserialize(cls, data, memo, callbacks):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks)
        return inst

    def serialize(self, memo):
        return self._parse_table.serialize(memo)

    def parse(self, *args):
        return self.parser.parse(*args)


class _Parser:
    def __init__(self, parse_table, callbacks):
        self.states = parse_table.states
        self.start_states = parse_table.start_states
        self.end_states = parse_table.end_states
        self.callbacks = callbacks

    def parse(self, seq, start, set_state=None):
        token = None
        stream = iter(seq)
        states = self.states

        start_state = self.start_states[start]
        end_state = self.end_states[start]

        state_stack = [start_state]
        value_stack = []

        if set_state: set_state(start_state)

        def get_action(token):
            state = state_stack[-1]
            try:
                return states[state][token.type]
            except KeyError:
                expected = [s for s in states[state].keys() if s.isupper()]
                raise UnexpectedToken(token, expected, state=state)

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = states[state_stack[-1]][rule.origin.name]
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        for token in stream:
            while True:
                action, arg = get_action(token)
                assert arg != end_state

                if action is Shift:
                    state_stack.append(arg)
                    value_stack.append(token)
                    if set_state: set_state(arg)
                    break # next token
                else:
                    reduce(arg)

        token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
        while True:
            _action, arg = get_action(token)
            assert(_action is Reduce)
            reduce(arg)
            if state_stack[-1] == end_state:
                return value_stack[-1]



class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()
        rules = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def get_frontend(parser, lexer):
    if parser=='lalr':
        if lexer is None:
            raise ValueError('The LALR parser requires use of a lexer')
        elif lexer == 'standard':
            return LALR_TraditionalLexer
        elif lexer == 'contextual':
            return LALR_ContextualLexer
        elif issubclass(lexer, Lexer):
            return partial(LALR_CustomLexer, lexer)
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser=='earley':
        if lexer=='standard':
            return Earley
        elif lexer=='dynamic':
            return XEarley
        elif lexer=='dynamic_complete':
            return XEarley_CompleteLex
        elif lexer=='contextual':
            raise ValueError('The Earley parser does not support the contextual parser')
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser == 'cyk':
        if lexer == 'standard':
            return CYK
        else:
            raise ValueError('CYK parser requires using standard parser.')
    else:
        raise ValueError('Unknown parser: %s' % parser)


class _ParserFrontend(Serialize):
    def _parse(self, input, start, *args):
        if start is None:
            start = self.start
            if len(start) > 1:
                raise ValueError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start)
            start ,= start
        return self.parser.parse(input, start, *args)


class WithLexer(_ParserFrontend):
    lexer = None
    parser = None
    lexer_conf = None
    start = None

    __serialize_fields__ = 'parser', 'lexer_conf', 'start'
    __serialize_namespace__ = LexerConf,

    def __init__(self, lexer_conf, parser_conf, options=None):
        self.lexer_conf = lexer_conf
        self.start = parser_conf.start
        self.postlex = lexer_conf.postlex

    @classmethod
    def deserialize(cls, data, memo, callbacks, postlex):
        inst = super(WithLexer, cls).deserialize(data, memo)
        inst.postlex = postlex
        inst.parser = LALR_Parser.deserialize(inst.parser, memo, callbacks)
        inst.init_lexer()
        return inst

    def _serialize(self, data, memo):
        data['parser'] = data['parser'].serialize(memo)

    def lex(self, *args):
        stream = self.lexer.lex(*args)
        return self.postlex.process(stream) if self.postlex else stream

    def parse(self, text, start=None):
        token_stream = self.lex(text)
        return self._parse(token_stream, start)

    def init_traditional_lexer(self):
        self.lexer = TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks, g_regex_flags=self.lexer_conf.g_regex_flags)

class LALR_WithLexer(WithLexer):
    def __init__(self, lexer_conf, parser_conf, options=None):
        debug = options.debug if options else False
        self.parser = LALR_Parser(parser_conf, debug=debug)
        WithLexer.__init__(self, lexer_conf, parser_conf, options)

        self.init_lexer()

    def init_lexer(self):
        raise NotImplementedError()

class LALR_TraditionalLexer(LALR_WithLexer):
    def init_lexer(self):
        self.init_traditional_lexer()

class LALR_ContextualLexer(LALR_WithLexer):
    def init_lexer(self):
        states = {idx:list(t.keys()) for idx, t in self.parser._parse_table.states.items()}
        always_accept = self.postlex.always_accept if self.postlex else ()
        self.lexer = ContextualLexer(self.lexer_conf.tokens, states,
                                     ignore=self.lexer_conf.ignore,
                                     always_accept=always_accept,
                                     user_callbacks=self.lexer_conf.callbacks,
                                     g_regex_flags=self.lexer_conf.g_regex_flags)


    def parse(self, text, start=None):
        parser_state = [None]
        def set_parser_state(s):
            parser_state[0] = s

        token_stream = self.lex(text, lambda: parser_state[0])
        return self._parse(token_stream, start, set_parser_state)


class LarkOptions(Serialize):
    """Specifies the options for Lark

    """
    OPTIONS_DOC = """
# General

    start - The start symbol. Either a string, or a list of strings for
            multiple possible starts (Default: "start")
    debug - Display debug information, such as warnings (default: False)
    transformer - Applies the transformer to every parse tree (equivlent to
                  applying it after the parse, but faster)
    propagate_positions - Propagates (line, column, end_line, end_column)
                          attributes into all tree branches.
    maybe_placeholders - When True, the `[]` operator returns `None` when not matched.
                         When `False`,  `[]` behaves like the `?` operator,
                             and returns no value at all.
                         (default=`False`. Recommended to set to `True`)
    cache_grammar - Cache the Lark grammar (Default: False)
    g_regex_flags - Flags that are applied to all terminals
                    (both regex and strings)
    keep_all_tokens - Prevent the tree builder from automagically
                      removing "punctuation" tokens (default: False)

# Algorithm

    parser - Decides which parser engine to use
             Accepts "earley" or "lalr". (Default: "earley")
             (there is also a "cyk" option for legacy)

    lexer - Decides whether or not to use a lexer stage
        "auto" (default): Choose for me based on the parser
        "standard": Use a standard lexer
        "contextual": Stronger lexer (only works with parser="lalr")
        "dynamic": Flexible and powerful (only with parser="earley")
        "dynamic_complete": Same as dynamic, but tries *every* variation
                            of tokenizing possible.

    ambiguity - Decides how to handle ambiguity in the parse.
                Only relevant if parser="earley"
        "resolve": The parser will automatically choose the simplest
                    derivation (it chooses consistently: greedy for
                    tokens, non-greedy for rules)
        "explicit": The parser will return all derivations wrapped
                    in "_ambig" tree nodes (i.e. a forest).

# Domain Specific

    postlex - Lexer post-processing (Default: None) Only works with the
                standard and contextual lexers.
    priority - How priorities should be evaluated - auto, none, normal,
                invert (Default: auto)
    lexer_callbacks - Dictionary of callbacks for the lexer. May alter
                        tokens during lexing. Use with caution.
    edit_terminals - A callback
    """
    if __doc__:
        __doc__ += OPTIONS_DOC

    _defaults = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache_grammar': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': False,
        'edit_terminals': None,
        'g_regex_flags': 0,
    }

    def __init__(self, options_dict):
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], STRING_TYPE):
            options['start'] = [options['start']]

        self.__dict__['options'] = options

        assert self.parser in ('earley', 'lalr', 'cyk', None)

        if self.parser == 'earley' and self.transformer:
            raise ValueError('Cannot specify an embedded transformer when using the Earley algorithm.'
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ValueError("Unknown options: %s" % o.keys())

    def __getattr__(self, name):
        try:
            return self.options[name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name, value):
        assert name in self.options
        self.options[name] = value

    def serialize(self, memo):
        return self.options

    @classmethod
    def deserialize(cls, data, memo):
        return cls(data)


class Lark(Serialize):
    def __init__(self, grammar, **options):
        """
            grammar : a string or file-object containing the grammar spec (using Lark's ebnf syntax)
            options : a dictionary controlling various aspects of Lark.
        """
        self.options = LarkOptions(options)

        # Some, but not all file-like objects have a 'name' attribute
        try:
            self.source = grammar.name
        except AttributeError:
            self.source = '<string>'

        # Drain file-like objects to get their contents
        try:
            read = grammar.read
        except AttributeError:
            pass
        else:
            grammar = read()

        assert isinstance(grammar, STRING_TYPE)

        if self.options.cache_grammar:
            raise NotImplementedError("Not available yet")

        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'standard'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        assert lexer in ('standard', 'contextual', 'dynamic', 'dynamic_complete') or issubclass(lexer, Lexer)

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            disambig_parsers = ['earley', 'cyk']
            assert self.options.parser in disambig_parsers, (
                'Only %s supports disambiguation right now') % ', '.join(disambig_parsers)

        if self.options.priority == 'auto':
            if self.options.parser in ('earley', 'cyk', ):
                self.options.priority = 'normal'
            elif self.options.parser in ('lalr', ):
                self.options.priority = None
        elif self.options.priority in ('invert', 'normal'):
            assert self.options.parser in ('earley', 'cyk'), "priorities are not supported for LALR at this time"

        assert self.options.priority in ('auto', None, 'normal', 'invert'), 'invalid priority option specified: {}. options are auto, none, normal, invert.'.format(self.options.priority)
        assert self.options.ambiguity not in ('resolve__antiscore_sum', ), 'resolve__antiscore_sum has been replaced with the option priority="invert"'
        assert self.options.ambiguity in ('resolve', 'explicit', 'auto', )

        # Parse the grammar file and compose the grammars (TODO)
        self.grammar = load_grammar(grammar, self.source)

        # Compile the EBNF grammar into BNF
        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name:t for t in self.terminals}

        # If the user asked to invert the priorities, negate them all here.
        # This replaces the old 'resolve__antiscore_sum' option.
        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
        # Else, if the user asked to disable priorities, strip them from the
        # rules. This allows the Earley parsers to skip an extra forest walk
        # for improved performance, if you don't need them (or didn't specify any).
        elif self.options.priority == None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None

        # TODO Deprecate lexer_callbacks?
        lexer_callbacks = dict(self.options.lexer_callbacks)
        if self.options.transformer:
            t = self.options.transformer
            for term in self.terminals:
                if hasattr(t, term.name):
                    lexer_callbacks[term.name] = getattr(t, term.name)

        self.lexer_conf = LexerConf(self.terminals, self.ignore_tokens, self.options.postlex, lexer_callbacks, self.options.g_regex_flags)

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

    if __init__.__doc__:
        __init__.__doc__ += "\nOptions:\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self):
        return TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks, g_regex_flags=self.lexer_conf.g_regex_flags)

    def _prepare_callbacks(self):
        self.parser_class = get_frontend(self.options.parser, self.options.lexer)
        self._parse_tree_builder = ParseTreeBuilder(self.rules, self.options.tree_class or Tree, self.options.propagate_positions, self.options.keep_all_tokens, self.options.parser!='lalr' and self.options.ambiguity=='explicit', self.options.maybe_placeholders)
        self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)

    def _build_parser(self):
        self._prepare_callbacks()
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return self.parser_class(self.lexer_conf, parser_conf, options=self.options)

    @classmethod
    def deserialize(cls, data, namespace, memo, transformer=None, postlex=None):
        if memo:
            memo = SerializeMemoizer.deserialize(memo, namespace, {})
        inst = cls.__new__(cls)
        options = dict(data['options'])
        if transformer is not None:
            options['transformer'] = transformer
        if postlex is not None:
            options['postlex'] = postlex
        inst.options = LarkOptions.deserialize(options, memo)
        inst.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        inst.source = '<deserialized>'
        inst._prepare_callbacks()
        inst.parser = inst.parser_class.deserialize(data['parser'], memo, inst._callbacks, inst.options.postlex)
        return inst

    def save(self, f):
        data, m = self.memo_serialize([TerminalDef, Rule])
        pickle.dump({'data': data, 'memo': m}, f)

    @classmethod
    def load(cls, f):
        d = pickle.load(f)
        namespace = {'Rule': Rule, 'TerminalDef': TerminalDef}
        memo = d['memo']
        return Lark.deserialize(d['data'], namespace, memo)


    @classmethod
    def open(cls, grammar_filename, rel_to=None, **options):
        """Create an instance of Lark with the grammar given by its filename

        If rel_to is provided, the function will find the grammar filename in relation to it.

        Example:

            >>> Lark.open("grammar_file.lark", rel_to=__file__, parser="lalr")
            Lark(...)

        """
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source, self.options.parser, self.options.lexer)


    def lex(self, text):
        "Only lex (and postlex) the text, without parsing it. Only relevant when lexer='standard'"
        if not hasattr(self, 'lexer'):
            self.lexer = self._build_lexer()
        stream = self.lexer.lex(text)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name):
        "Get information about a terminal"
        return self._terminals_dict[name]

    def parse(self, text, start=None):
        """Parse the given text, according to the options provided.

        The 'start' parameter is required if Lark was given multiple possible start symbols (using the start option).

        Returns a tree, unless specified otherwise.
        """
        return self.parser.parse(text, start=start)


DATA = (
{'parser': {'parser': {'tokens': {0: 'INF', 1: 'MAX', 2: 'MINUS', 3: 'INT', 4: 'ANNOTATION', 5: 'LPAR', 6: 'VAR', 7: 'MIN', 8: 'SUP', 9: 'formal', 10: 'var', 11: 'GT', 12: 'TRUE', 13: 'AT', 14: 'COMP', 15: 'DISJ', 16: 'COLON', 17: '__ANON_7', 18: 'FALSE', 19: 'ESCAPED_STRING', 20: 'PERCENT', 21: 'CONJ', 22: 'LBRACE', 23: 'LT', 24: 'EQ', 25: 'LSQB', 26: 'WITH', 27: 'THEN', 28: 'RSQB', 29: 'COMMA', 30: 'RPAR', 31: 'END', 32: 'ELSE', 33: 'SEMICOLON', 34: 'IN', 35: 'CASE', 36: 'DOT', 37: 'expr', 38: 'mul_expr', 39: 'atom', 40: 'add_expr', 41: 'int', 42: 'call', 43: 'sub_expr', 44: 'div_expr', 45: 'arith', 46: 'RBRACE', 47: '_IMPLIES', 48: 'RESTRICT', 49: '$END', 50: 'LET', 51: 'ALIAS', 52: 'STRUCTURE', 53: '__ANON_5', 54: 'DEFINE', 55: 'HASH', 56: '_IFF', 57: '_IS', 58: 'NOT', 59: '__ANON_12', 60: 'PLUS', 61: '__ANON_10', 62: 'SLASH', 63: 'STAR', 64: '__ANON_11', 65: 'directive_name', 66: 'def', 67: 'pred_definition', 68: 'praline', 69: 'app', 70: 'term', 71: 'operator_sym_char', 72: 'praline_sub', 73: '__ANON_6', 74: '__operator_sym_plus_6', 75: 'praline_mul', 76: 'praline_operator', 77: 'string', 78: 'praline_tuple', 79: 'praline_div', 80: 'DO', 81: 'pecan_term', 82: 'praline_arith', 83: 'praline_exponent', 84: 'praline_list', 85: 'praline_atom', 86: 'MATCH', 87: 'operator_sym', 88: 'IF', 89: 'praline_add', 90: 'BACKSLASH', 91: '__ANON_13', 92: 'pred', 93: '__ANON_9', 94: 'bool', 95: 'FORALL', 96: 'DISTINCT', 97: 'exists_sym', 98: 'forall_sym', 99: '__ANON_8', 100: 'EXISTS', 101: 'comparison', 102: '__ANON_14', 103: '__term_star_3', 104: 'varlist', 105: 'restriction', 106: '_DEFEQ', 107: 'CIRCUMFLEX', 108: 'DEFINING', 109: 'args', 110: 'arg', 111: 'match_expr', 112: 'CONTEXT', 113: 'SHUFFLE', 114: '__ANON_0', 115: 'LOAD', 116: '__ANON_3', 117: '__ANON_1', 118: 'PLOT', 119: 'FORGET', 120: 'IMPORT', 121: '__ANON_4', 122: '__ANON_2', 123: '__start_star_0', 124: 'start', 125: '__def_star_1', 126: '__varlist_star_15', 127: '__praline_list_star_12', 128: '__praline_mul_star_9', 129: 'val_dict', 130: '__match_expr_plus_5', 131: '__praline_add_star_8', 132: 'match_arm', 133: '__praline_sub_star_7', 134: '__match_expr_star_4', 135: 'PROP_VAL', 136: 'prop_val', 137: '__args_star_20', 138: 'kv_pair', 139: 'quant_formal', 140: 'le', 141: 'ne', 142: 'ge', 143: '__val_dict_star_14', 144: '__add_expr_star_17', 145: '__mul_expr_star_18', 146: '__term_plus_2', 147: '__div_expr_star_19', 148: '__sub_expr_star_16', 149: '__praline_tuple_plus_13', 150: '__praline_div_star_10', 151: '__praline_exponent_star_11'}, 'states': {0: {0: (1, {'@': 82}), 1: (1, {'@': 82}), 2: (1, {'@': 82}), 3: (1, {'@': 82}), 4: (1, {'@': 82}), 5: (1, {'@': 82}), 6: (1, {'@': 82}), 7: (1, {'@': 82}), 8: (1, {'@': 82})}, 1: {9: (0, 431), 10: (0, 463), 6: (0, 34)}, 2: {0: (1, {'@': 83}), 1: (1, {'@': 83}), 2: (1, {'@': 83}), 3: (1, {'@': 83}), 4: (1, {'@': 83}), 5: (1, {'@': 83}), 6: (1, {'@': 83}), 7: (1, {'@': 83}), 8: (1, {'@': 83})}, 3: {11: (1, {'@': 84}), 12: (1, {'@': 84}), 2: (1, {'@': 84}), 13: (1, {'@': 84}), 14: (1, {'@': 84}), 15: (1, {'@': 84}), 6: (1, {'@': 84}), 16: (1, {'@': 84}), 17: (1, {'@': 84}), 18: (1, {'@': 84}), 19: (1, {'@': 84}), 20: (1, {'@': 84}), 3: (1, {'@': 84}), 21: (1, {'@': 84}), 22: (1, {'@': 84}), 23: (1, {'@': 84}), 5: (1, {'@': 84}), 24: (1, {'@': 84}), 25: (1, {'@': 84}), 26: (1, {'@': 84}), 27: (1, {'@': 84}), 28: (1, {'@': 84}), 29: (1, {'@': 84}), 30: (1, {'@': 84}), 31: (1, {'@': 84}), 32: (1, {'@': 84}), 33: (1, {'@': 84}), 34: (1, {'@': 84}), 35: (1, {'@': 84}), 36: (1, {'@': 84})}, 4: {7: (0, 228), 5: (0, 400), 6: (0, 34), 37: (0, 23), 38: (0, 369), 39: (0, 427), 40: (0, 428), 2: (0, 254), 10: (0, 406), 1: (0, 230), 41: (0, 262), 42: (0, 412), 43: (0, 372), 44: (0, 387), 0: (0, 378), 3: (0, 131), 45: (0, 410), 4: (0, 393), 8: (0, 419)}, 5: {46: (0, 62), 47: (0, 256)}, 6: {7: (0, 228), 38: (0, 369), 40: (0, 428), 10: (0, 406), 42: (0, 412), 24: (0, 2), 43: (0, 372), 44: (0, 387), 0: (0, 378), 45: (0, 410), 4: (0, 393), 5: (0, 400), 6: (0, 34), 39: (0, 427), 2: (0, 254), 1: (0, 230), 41: (0, 262), 3: (0, 131), 37: (0, 10), 8: (0, 419)}, 7: {48: (1, {'@': 85}), 49: (1, {'@': 85}), 50: (1, {'@': 85}), 6: (1, {'@': 85}), 51: (1, {'@': 85}), 52: (1, {'@': 85}), 53: (1, {'@': 85}), 54: (1, {'@': 85}), 55: (1, {'@': 85}), 46: (1, {'@': 85})}, 8: {16: (0, 467)}, 9: {10: (0, 463), 6: (0, 34), 9: (0, 414)}, 10: {46: (1, {'@': 86}), 27: (1, {'@': 86}), 15: (1, {'@': 86}), 49: (1, {'@': 86}), 6: (1, {'@': 86}), 28: (1, {'@': 86}), 52: (1, {'@': 86}), 30: (1, {'@': 86}), 48: (1, {'@': 86}), 32: (1, {'@': 86}), 21: (1, {'@': 86}), 50: (1, {'@': 86}), 56: (1, {'@': 86}), 51: (1, {'@': 86}), 53: (1, {'@': 86}), 54: (1, {'@': 86}), 47: (1, {'@': 86}), 55: (1, {'@': 86})}, 11: {34: (0, 401), 5: (0, 39), 25: (0, 363), 57: (0, 163), 58: (0, 28), 11: (1, {'@': 87}), 59: (1, {'@': 87}), 2: (1, {'@': 87}), 46: (1, {'@': 87}), 14: (1, {'@': 87}), 15: (1, {'@': 87}), 60: (1, {'@': 87}), 61: (1, {'@': 87}), 62: (1, {'@': 87}), 21: (1, {'@': 87}), 23: (1, {'@': 87}), 24: (1, {'@': 87}), 63: (1, {'@': 87}), 56: (1, {'@': 87}), 47: (1, {'@': 87}), 64: (1, {'@': 87})}, 12: {48: (1, {'@': 88}), 49: (1, {'@': 88}), 50: (1, {'@': 88}), 6: (1, {'@': 88}), 51: (1, {'@': 88}), 52: (1, {'@': 88}), 53: (1, {'@': 88}), 54: (1, {'@': 88}), 55: (1, {'@': 88}), 46: (1, {'@': 88})}, 13: {46: (1, {'@': 89}), 27: (1, {'@': 89}), 15: (1, {'@': 89}), 49: (1, {'@': 89}), 6: (1, {'@': 89}), 28: (1, {'@': 89}), 52: (1, {'@': 89}), 30: (1, {'@': 89}), 48: (1, {'@': 89}), 32: (1, {'@': 89}), 21: (1, {'@': 89}), 50: (1, {'@': 89}), 56: (1, {'@': 89}), 51: (1, {'@': 89}), 53: (1, {'@': 89}), 54: (1, {'@': 89}), 47: (1, {'@': 89}), 55: (1, {'@': 89})}, 14: {55: (0, 54), 65: (0, 15), 6: (0, 34), 66: (0, 505), 52: (0, 47), 51: (0, 38), 67: (0, 12), 10: (0, 19), 54: (0, 21), 48: (0, 26), 50: (0, 56), 53: (0, 17), 68: (0, 196), 49: (1, {'@': 90})}, 15: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 70: (0, 316), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103)}, 16: {0: (1, {'@': 91}), 1: (1, {'@': 91}), 2: (1, {'@': 91}), 3: (1, {'@': 91}), 4: (1, {'@': 91}), 5: (1, {'@': 91}), 6: (1, {'@': 91}), 7: (1, {'@': 91}), 8: (1, {'@': 91})}, 17: {11: (1, {'@': 92}), 2: (1, {'@': 92}), 13: (1, {'@': 92}), 15: (1, {'@': 92}), 19: (1, {'@': 92}), 90: (1, {'@': 92}), 86: (1, {'@': 92}), 21: (1, {'@': 92}), 23: (1, {'@': 92}), 24: (1, {'@': 92}), 12: (1, {'@': 92}), 80: (1, {'@': 92}), 73: (1, {'@': 92}), 14: (1, {'@': 92}), 6: (1, {'@': 92}), 16: (1, {'@': 92}), 17: (1, {'@': 92}), 18: (1, {'@': 92}), 20: (1, {'@': 92}), 3: (1, {'@': 92}), 22: (1, {'@': 92}), 5: (1, {'@': 92}), 25: (1, {'@': 92}), 88: (1, {'@': 92})}, 18: {38: (0, 369), 19: (0, 453), 8: (0, 419), 40: (0, 428), 10: (0, 379), 37: (0, 332), 42: (0, 412), 44: (0, 387), 91: (0, 296), 92: (0, 314), 45: (0, 410), 18: (0, 289), 4: (0, 393), 39: (0, 427), 93: (0, 312), 88: (0, 299), 94: (0, 281), 95: (0, 279), 1: (0, 230), 96: (0, 301), 97: (0, 272), 3: (0, 131), 98: (0, 286), 5: (0, 311), 43: (0, 372), 0: (0, 378), 99: (0, 287), 6: (0, 34), 2: (0, 254), 100: (0, 269), 101: (0, 294), 41: (0, 262), 102: (0, 323), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 19: {57: (0, 163), 5: (0, 190)}, 20: {38: (0, 369), 19: (0, 453), 8: (0, 419), 40: (0, 428), 10: (0, 379), 37: (0, 332), 98: (0, 286), 42: (0, 412), 5: (0, 311), 43: (0, 372), 44: (0, 387), 0: (0, 378), 91: (0, 296), 92: (0, 501), 99: (0, 287), 45: (0, 410), 18: (0, 289), 4: (0, 393), 94: (0, 281), 93: (0, 312), 6: (0, 34), 100: (0, 269), 88: (0, 299), 39: (0, 427), 2: (0, 254), 101: (0, 294), 95: (0, 279), 1: (0, 230), 41: (0, 262), 96: (0, 301), 102: (0, 323), 97: (0, 272), 3: (0, 131), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 21: {12: (0, 460), 76: (0, 502), 19: (0, 453), 69: (0, 477), 41: (0, 506), 82: (0, 484), 83: (0, 465), 72: (0, 509), 84: (0, 443), 5: (0, 457), 85: (0, 170), 79: (0, 171), 22: (0, 177), 75: (0, 185), 6: (0, 34), 25: (0, 152), 89: (0, 200), 10: (0, 168), 77: (0, 134), 78: (0, 199), 3: (0, 131), 2: (0, 194), 18: (0, 174), 81: (0, 160)}, 22: {7: (0, 228), 38: (0, 369), 40: (0, 428), 10: (0, 406), 42: (0, 412), 43: (0, 372), 44: (0, 387), 0: (0, 378), 45: (0, 410), 4: (0, 393), 5: (0, 400), 6: (0, 34), 39: (0, 427), 2: (0, 254), 1: (0, 230), 41: (0, 262), 37: (0, 13), 24: (0, 0), 3: (0, 131), 8: (0, 419)}, 23: {46: (1, {'@': 93}), 27: (1, {'@': 93}), 15: (1, {'@': 93}), 49: (1, {'@': 93}), 6: (1, {'@': 93}), 28: (1, {'@': 93}), 52: (1, {'@': 93}), 30: (1, {'@': 93}), 48: (1, {'@': 93}), 32: (1, {'@': 93}), 21: (1, {'@': 93}), 50: (1, {'@': 93}), 56: (1, {'@': 93}), 51: (1, {'@': 93}), 53: (1, {'@': 93}), 54: (1, {'@': 93}), 47: (1, {'@': 93}), 55: (1, {'@': 93})}, 24: {48: (1, {'@': 94}), 49: (1, {'@': 94}), 50: (1, {'@': 94}), 6: (1, {'@': 94}), 51: (1, {'@': 94}), 52: (1, {'@': 94}), 53: (1, {'@': 94}), 54: (1, {'@': 94}), 55: (1, {'@': 94}), 46: (1, {'@': 94})}, 25: {103: (0, 306), 33: (0, 376), 36: (1, {'@': 95}), 26: (1, {'@': 95}), 27: (1, {'@': 95}), 28: (1, {'@': 95}), 29: (1, {'@': 95}), 30: (1, {'@': 95}), 31: (1, {'@': 95}), 32: (1, {'@': 95}), 34: (1, {'@': 95}), 35: (1, {'@': 95})}, 26: {104: (0, 202), 10: (0, 123), 6: (0, 34), 105: (0, 210)}, 27: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 70: (0, 436), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103)}, 28: {34: (0, 353)}, 29: {48: (1, {'@': 96}), 49: (1, {'@': 96}), 50: (1, {'@': 96}), 6: (1, {'@': 96}), 51: (1, {'@': 96}), 52: (1, {'@': 96}), 53: (1, {'@': 96}), 54: (1, {'@': 96}), 55: (1, {'@': 96})}, 30: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 70: (0, 499), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103), 36: (1, {'@': 97}), 26: (1, {'@': 97}), 27: (1, {'@': 97}), 28: (1, {'@': 97}), 29: (1, {'@': 97}), 30: (1, {'@': 97}), 31: (1, {'@': 97}), 32: (1, {'@': 97}), 33: (1, {'@': 97}), 34: (1, {'@': 97}), 35: (1, {'@': 97})}, 31: {47: (0, 256), 46: (1, {'@': 98}), 27: (1, {'@': 98}), 49: (1, {'@': 98}), 6: (1, {'@': 98}), 28: (1, {'@': 98}), 52: (1, {'@': 98}), 30: (1, {'@': 98}), 48: (1, {'@': 98}), 32: (1, {'@': 98}), 50: (1, {'@': 98}), 51: (1, {'@': 98}), 53: (1, {'@': 98}), 54: (1, {'@': 98}), 55: (1, {'@': 98})}, 32: {5: (0, 485), 36: (1, {'@': 99})}, 33: {11: (1, {'@': 100}), 2: (1, {'@': 100}), 13: (1, {'@': 100}), 27: (1, {'@': 100}), 15: (1, {'@': 100}), 29: (1, {'@': 100}), 31: (1, {'@': 100}), 32: (1, {'@': 100}), 21: (1, {'@': 100}), 23: (1, {'@': 100}), 33: (1, {'@': 100}), 34: (1, {'@': 100}), 35: (1, {'@': 100}), 24: (1, {'@': 100}), 106: (1, {'@': 100}), 26: (1, {'@': 100}), 14: (1, {'@': 100}), 16: (1, {'@': 100}), 28: (1, {'@': 100}), 17: (1, {'@': 100}), 30: (1, {'@': 100}), 60: (1, {'@': 100}), 20: (1, {'@': 100}), 63: (1, {'@': 100}), 36: (1, {'@': 100})}, 34: {57: (1, {'@': 101}), 5: (1, {'@': 101}), 30: (1, {'@': 101}), 2: (1, {'@': 101}), 46: (1, {'@': 101}), 27: (1, {'@': 101}), 15: (1, {'@': 101}), 49: (1, {'@': 101}), 6: (1, {'@': 101}), 28: (1, {'@': 101}), 52: (1, {'@': 101}), 48: (1, {'@': 101}), 60: (1, {'@': 101}), 62: (1, {'@': 101}), 32: (1, {'@': 101}), 21: (1, {'@': 101}), 50: (1, {'@': 101}), 63: (1, {'@': 101}), 56: (1, {'@': 101}), 51: (1, {'@': 101}), 53: (1, {'@': 101}), 25: (1, {'@': 101}), 54: (1, {'@': 101}), 47: (1, {'@': 101}), 55: (1, {'@': 101}), 12: (1, {'@': 101}), 11: (1, {'@': 101}), 13: (1, {'@': 101}), 14: (1, {'@': 101}), 16: (1, {'@': 101}), 17: (1, {'@': 101}), 18: (1, {'@': 101}), 19: (1, {'@': 101}), 107: (1, {'@': 101}), 20: (1, {'@': 101}), 3: (1, {'@': 101}), 22: (1, {'@': 101}), 23: (1, {'@': 101}), 24: (1, {'@': 101}), 36: (1, {'@': 101}), 34: (1, {'@': 101}), 64: (1, {'@': 101}), 59: (1, {'@': 101}), 58: (1, {'@': 101}), 61: (1, {'@': 101}), 106: (1, {'@': 101}), 29: (1, {'@': 101}), 31: (1, {'@': 101}), 33: (1, {'@': 101}), 35: (1, {'@': 101}), 26: (1, {'@': 101}), 108: (1, {'@': 101})}, 35: {0: (1, {'@': 102}), 1: (1, {'@': 102}), 2: (1, {'@': 102}), 3: (1, {'@': 102}), 4: (1, {'@': 102}), 5: (1, {'@': 102}), 6: (1, {'@': 102}), 7: (1, {'@': 102}), 8: (1, {'@': 102})}, 36: {12: (1, {'@': 103}), 11: (1, {'@': 103}), 2: (1, {'@': 103}), 13: (1, {'@': 103}), 14: (1, {'@': 103}), 15: (1, {'@': 103}), 6: (1, {'@': 103}), 16: (1, {'@': 103}), 17: (1, {'@': 103}), 18: (1, {'@': 103}), 19: (1, {'@': 103}), 60: (1, {'@': 103}), 107: (1, {'@': 103}), 20: (1, {'@': 103}), 3: (1, {'@': 103}), 62: (1, {'@': 103}), 22: (1, {'@': 103}), 21: (1, {'@': 103}), 23: (1, {'@': 103}), 5: (1, {'@': 103}), 24: (1, {'@': 103}), 63: (1, {'@': 103}), 36: (1, {'@': 103}), 25: (1, {'@': 103}), 106: (1, {'@': 103}), 27: (1, {'@': 103}), 29: (1, {'@': 103}), 31: (1, {'@': 103}), 32: (1, {'@': 103}), 33: (1, {'@': 103}), 34: (1, {'@': 103}), 35: (1, {'@': 103}), 26: (1, {'@': 103}), 28: (1, {'@': 103}), 30: (1, {'@': 103}), 47: (1, {'@': 103})}, 37: {0: (1, {'@': 104}), 1: (1, {'@': 104}), 2: (1, {'@': 104}), 3: (1, {'@': 104}), 4: (1, {'@': 104}), 5: (1, {'@': 104}), 6: (1, {'@': 104}), 7: (1, {'@': 104}), 8: (1, {'@': 104})}, 38: {19: (0, 453), 77: (0, 225)}, 39: {7: (0, 228), 38: (0, 369), 8: (0, 419), 40: (0, 428), 10: (0, 406), 37: (0, 415), 42: (0, 412), 43: (0, 372), 44: (0, 387), 0: (0, 378), 45: (0, 410), 4: (0, 393), 5: (0, 400), 6: (0, 34), 109: (0, 390), 39: (0, 427), 2: (0, 254), 1: (0, 230), 110: (0, 247), 41: (0, 262), 3: (0, 131), 30: (1, {'@': 105})}, 40: {47: (0, 256), 46: (1, {'@': 106}), 27: (1, {'@': 106}), 49: (1, {'@': 106}), 6: (1, {'@': 106}), 28: (1, {'@': 106}), 52: (1, {'@': 106}), 30: (1, {'@': 106}), 48: (1, {'@': 106}), 32: (1, {'@': 106}), 50: (1, {'@': 106}), 51: (1, {'@': 106}), 53: (1, {'@': 106}), 54: (1, {'@': 106}), 55: (1, {'@': 106})}, 41: {11: (1, {'@': 107}), 2: (1, {'@': 107}), 27: (1, {'@': 107}), 15: (1, {'@': 107}), 49: (1, {'@': 107}), 29: (1, {'@': 107}), 52: (1, {'@': 107}), 32: (1, {'@': 107}), 21: (1, {'@': 107}), 23: (1, {'@': 107}), 24: (1, {'@': 107}), 56: (1, {'@': 107}), 51: (1, {'@': 107}), 54: (1, {'@': 107}), 47: (1, {'@': 107}), 64: (1, {'@': 107}), 59: (1, {'@': 107}), 46: (1, {'@': 107}), 14: (1, {'@': 107}), 6: (1, {'@': 107}), 28: (1, {'@': 107}), 30: (1, {'@': 107}), 48: (1, {'@': 107}), 60: (1, {'@': 107}), 61: (1, {'@': 107}), 62: (1, {'@': 107}), 50: (1, {'@': 107}), 63: (1, {'@': 107}), 36: (1, {'@': 107}), 53: (1, {'@': 107}), 55: (1, {'@': 107})}, 42: {47: (0, 256), 46: (1, {'@': 108}), 27: (1, {'@': 108}), 49: (1, {'@': 108}), 6: (1, {'@': 108}), 28: (1, {'@': 108}), 52: (1, {'@': 108}), 30: (1, {'@': 108}), 48: (1, {'@': 108}), 32: (1, {'@': 108}), 50: (1, {'@': 108}), 51: (1, {'@': 108}), 53: (1, {'@': 108}), 54: (1, {'@': 108}), 55: (1, {'@': 108})}, 43: {11: (1, {'@': 109}), 2: (1, {'@': 109}), 13: (1, {'@': 109}), 27: (1, {'@': 109}), 15: (1, {'@': 109}), 29: (1, {'@': 109}), 31: (1, {'@': 109}), 32: (1, {'@': 109}), 21: (1, {'@': 109}), 23: (1, {'@': 109}), 33: (1, {'@': 109}), 34: (1, {'@': 109}), 35: (1, {'@': 109}), 24: (1, {'@': 109}), 106: (1, {'@': 109}), 26: (1, {'@': 109}), 14: (1, {'@': 109}), 16: (1, {'@': 109}), 28: (1, {'@': 109}), 17: (1, {'@': 109}), 30: (1, {'@': 109}), 20: (1, {'@': 109}), 36: (1, {'@': 109})}, 44: {12: (0, 460), 19: (0, 453), 69: (0, 477), 41: (0, 506), 82: (0, 484), 83: (0, 465), 76: (0, 219), 72: (0, 509), 84: (0, 443), 5: (0, 457), 85: (0, 170), 79: (0, 171), 22: (0, 177), 75: (0, 185), 6: (0, 34), 25: (0, 152), 89: (0, 200), 10: (0, 168), 77: (0, 134), 78: (0, 199), 3: (0, 131), 2: (0, 194), 18: (0, 174), 81: (0, 160), 36: (1, {'@': 110}), 26: (1, {'@': 110}), 27: (1, {'@': 110}), 28: (1, {'@': 110}), 29: (1, {'@': 110}), 30: (1, {'@': 110}), 31: (1, {'@': 110}), 32: (1, {'@': 110}), 33: (1, {'@': 110}), 34: (1, {'@': 110}), 35: (1, {'@': 110})}, 45: {0: (1, {'@': 111}), 1: (1, {'@': 111}), 2: (1, {'@': 111}), 3: (1, {'@': 111}), 4: (1, {'@': 111}), 5: (1, {'@': 111}), 6: (1, {'@': 111}), 7: (1, {'@': 111}), 8: (1, {'@': 111})}, 46: {12: (0, 460), 22: (0, 177), 83: (0, 465), 6: (0, 34), 19: (0, 453), 69: (0, 477), 25: (0, 152), 41: (0, 506), 10: (0, 168), 77: (0, 134), 79: (0, 33), 84: (0, 443), 78: (0, 199), 5: (0, 457), 85: (0, 170), 3: (0, 131), 18: (0, 174), 81: (0, 160)}, 47: {9: (0, 459), 10: (0, 463), 6: (0, 34)}, 48: {}, 49: {109: (0, 155), 38: (0, 369), 8: (0, 419), 40: (0, 428), 10: (0, 406), 37: (0, 415), 42: (0, 412), 43: (0, 372), 44: (0, 387), 0: (0, 378), 45: (0, 410), 4: (0, 393), 5: (0, 400), 6: (0, 34), 39: (0, 427), 2: (0, 254), 1: (0, 230), 110: (0, 247), 41: (0, 262), 3: (0, 131), 7: (0, 228), 30: (1, {'@': 105})}, 50: {24: (0, 16)}, 51: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 70: (0, 161), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103)}, 52: {46: (1, {'@': 112}), 27: (1, {'@': 112}), 15: (1, {'@': 112}), 49: (1, {'@': 112}), 6: (1, {'@': 112}), 28: (1, {'@': 112}), 52: (1, {'@': 112}), 30: (1, {'@': 112}), 48: (1, {'@': 112}), 32: (1, {'@': 112}), 21: (1, {'@': 112}), 50: (1, {'@': 112}), 56: (1, {'@': 112}), 51: (1, {'@': 112}), 53: (1, {'@': 112}), 54: (1, {'@': 112}), 47: (1, {'@': 112}), 55: (1, {'@': 112})}, 53: {22: (0, 177), 6: (0, 34), 19: (0, 453), 111: (0, 413), 81: (0, 209), 5: (0, 182), 10: (0, 290), 25: (0, 207), 3: (0, 131), 41: (0, 478), 77: (0, 490)}, 54: {112: (0, 137), 113: (0, 151), 114: (0, 128), 115: (0, 214), 116: (0, 204), 117: (0, 173), 118: (0, 130), 119: (0, 140), 120: (0, 121), 121: (0, 147), 122: (0, 167)}, 55: {29: (1, {'@': 113}), 16: (1, {'@': 113}), 28: (1, {'@': 113}), 47: (1, {'@': 113}), 30: (1, {'@': 113}), 106: (1, {'@': 113})}, 56: {104: (0, 202), 10: (0, 123), 6: (0, 34), 105: (0, 217)}, 57: {46: (1, {'@': 114}), 27: (1, {'@': 114}), 15: (1, {'@': 114}), 49: (1, {'@': 114}), 6: (1, {'@': 114}), 28: (1, {'@': 114}), 52: (1, {'@': 114}), 30: (1, {'@': 114}), 48: (1, {'@': 114}), 32: (1, {'@': 114}), 21: (1, {'@': 114}), 50: (1, {'@': 114}), 56: (1, {'@': 114}), 51: (1, {'@': 114}), 53: (1, {'@': 114}), 54: (1, {'@': 114}), 47: (1, {'@': 114}), 55: (1, {'@': 114})}, 58: {7: (0, 228), 5: (0, 400), 6: (0, 34), 38: (0, 369), 39: (0, 427), 40: (0, 428), 2: (0, 254), 10: (0, 406), 1: (0, 230), 41: (0, 262), 37: (0, 52), 42: (0, 412), 43: (0, 372), 44: (0, 387), 0: (0, 378), 3: (0, 131), 45: (0, 410), 4: (0, 393), 8: (0, 419)}, 59: {46: (0, 476)}, 60: {5: (0, 400), 6: (0, 34), 38: (0, 369), 39: (0, 427), 2: (0, 254), 8: (0, 419), 10: (0, 426), 1: (0, 230), 41: (0, 262), 42: (0, 412), 44: (0, 387), 0: (0, 378), 40: (0, 425), 3: (0, 131), 4: (0, 393), 7: (0, 228)}, 61: {67: (0, 12), 55: (0, 54), 10: (0, 19), 66: (0, 29), 123: (0, 14), 52: (0, 47), 54: (0, 21), 48: (0, 26), 53: (0, 17), 65: (0, 15), 6: (0, 34), 51: (0, 38), 50: (0, 56), 124: (0, 48), 68: (0, 196), 49: (1, {'@': 115})}, 62: {2: (1, {'@': 116}), 46: (1, {'@': 116}), 27: (1, {'@': 116}), 15: (1, {'@': 116}), 49: (1, {'@': 116}), 6: (1, {'@': 116}), 28: (1, {'@': 116}), 52: (1, {'@': 116}), 30: (1, {'@': 116}), 57: (1, {'@': 116}), 48: (1, {'@': 116}), 60: (1, {'@': 116}), 62: (1, {'@': 116}), 32: (1, {'@': 116}), 21: (1, {'@': 116}), 50: (1, {'@': 116}), 63: (1, {'@': 116}), 56: (1, {'@': 116}), 51: (1, {'@': 116}), 53: (1, {'@': 116}), 54: (1, {'@': 116}), 47: (1, {'@': 116}), 55: (1, {'@': 116}), 11: (1, {'@': 116}), 59: (1, {'@': 116}), 14: (1, {'@': 116}), 61: (1, {'@': 116}), 23: (1, {'@': 116}), 24: (1, {'@': 116}), 64: (1, {'@': 116}), 29: (1, {'@': 116}), 36: (1, {'@': 116})}, 63: {12: (0, 460), 19: (0, 453), 69: (0, 477), 41: (0, 506), 83: (0, 465), 84: (0, 443), 5: (0, 457), 85: (0, 170), 79: (0, 171), 22: (0, 177), 75: (0, 185), 6: (0, 34), 25: (0, 152), 10: (0, 168), 77: (0, 134), 78: (0, 199), 89: (0, 108), 3: (0, 131), 18: (0, 174), 81: (0, 160)}, 64: {29: (0, 384)}, 65: {30: (0, 398), 125: (0, 97), 29: (0, 74)}, 66: {36: (1, {'@': 117}), 26: (1, {'@': 117}), 27: (1, {'@': 117}), 28: (1, {'@': 117}), 29: (1, {'@': 117}), 30: (1, {'@': 117}), 31: (1, {'@': 117}), 32: (1, {'@': 117}), 33: (1, {'@': 117}), 34: (1, {'@': 117}), 35: (1, {'@': 117})}, 67: {24: (0, 211)}, 68: {11: (1, {'@': 118}), 12: (1, {'@': 118}), 2: (1, {'@': 118}), 13: (1, {'@': 118}), 14: (1, {'@': 118}), 15: (1, {'@': 118}), 6: (1, {'@': 118}), 16: (1, {'@': 118}), 17: (1, {'@': 118}), 18: (1, {'@': 118}), 19: (1, {'@': 118}), 20: (1, {'@': 118}), 3: (1, {'@': 118}), 21: (1, {'@': 118}), 22: (1, {'@': 118}), 23: (1, {'@': 118}), 5: (1, {'@': 118}), 24: (1, {'@': 118}), 25: (1, {'@': 118}), 27: (1, {'@': 118}), 29: (1, {'@': 118}), 31: (1, {'@': 118}), 32: (1, {'@': 118}), 33: (1, {'@': 118}), 34: (1, {'@': 118}), 35: (1, {'@': 118}), 26: (1, {'@': 118}), 28: (1, {'@': 118}), 30: (1, {'@': 118}), 36: (1, {'@': 118})}, 69: {29: (0, 258)}, 70: {5: (0, 400), 6: (0, 34), 39: (0, 427), 2: (0, 254), 8: (0, 419), 38: (0, 344), 10: (0, 426), 1: (0, 230), 41: (0, 262), 42: (0, 412), 44: (0, 387), 0: (0, 378), 3: (0, 131), 4: (0, 393), 7: (0, 228)}, 71: {12: (0, 460), 19: (0, 453), 69: (0, 477), 41: (0, 506), 82: (0, 484), 76: (0, 492), 83: (0, 465), 72: (0, 509), 84: (0, 443), 5: (0, 457), 85: (0, 170), 79: (0, 171), 22: (0, 177), 75: (0, 185), 6: (0, 34), 25: (0, 152), 89: (0, 200), 10: (0, 168), 77: (0, 134), 78: (0, 199), 3: (0, 131), 2: (0, 194), 18: (0, 174), 81: (0, 160)}, 72: {48: (1, {'@': 119}), 49: (1, {'@': 119}), 50: (1, {'@': 119}), 6: (1, {'@': 119}), 51: (1, {'@': 119}), 52: (1, {'@': 119}), 53: (1, {'@': 119}), 54: (1, {'@': 119}), 55: (1, {'@': 119}), 46: (1, {'@': 119})}, 73: {106: (0, 157)}, 74: {6: (0, 34), 10: (0, 67)}, 75: {29: (0, 81)}, 76: {12: (0, 460), 22: (0, 177), 83: (0, 465), 6: (0, 34), 19: (0, 453), 69: (0, 477), 25: (0, 152), 41: (0, 506), 10: (0, 168), 77: (0, 134), 84: (0, 443), 78: (0, 199), 79: (0, 171), 5: (0, 457), 85: (0, 170), 3: (0, 131), 18: (0, 174), 75: (0, 488), 81: (0, 160)}, 77: {36: (0, 197)}, 78: {38: (0, 369), 19: (0, 453), 8: (0, 419), 40: (0, 428), 10: (0, 379), 37: (0, 332), 98: (0, 286), 42: (0, 412), 5: (0, 311), 43: (0, 372), 44: (0, 387), 0: (0, 378), 91: (0, 296), 92: (0, 145), 99: (0, 287), 45: (0, 410), 18: (0, 289), 4: (0, 393), 94: (0, 281), 93: (0, 312), 6: (0, 34), 100: (0, 269), 88: (0, 299), 39: (0, 427), 2: (0, 254), 101: (0, 294), 95: (0, 279), 1: (0, 230), 41: (0, 262), 96: (0, 301), 102: (0, 323), 97: (0, 272), 3: (0, 131), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 79: {38: (0, 369), 19: (0, 453), 8: (0, 419), 40: (0, 428), 10: (0, 379), 37: (0, 332), 98: (0, 286), 42: (0, 412), 5: (0, 311), 43: (0, 372), 44: (0, 387), 92: (0, 405), 0: (0, 378), 91: (0, 296), 99: (0, 287), 45: (0, 410), 18: (0, 289), 4: (0, 393), 94: (0, 281), 93: (0, 312), 6: (0, 34), 100: (0, 269), 88: (0, 299), 39: (0, 427), 2: (0, 254), 101: (0, 294), 95: (0, 279), 1: (0, 230), 41: (0, 262), 96: (0, 301), 102: (0, 323), 97: (0, 272), 3: (0, 131), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 80: {12: (1, {'@': 120}), 11: (1, {'@': 120}), 2: (1, {'@': 120}), 13: (1, {'@': 120}), 14: (1, {'@': 120}), 15: (1, {'@': 120}), 6: (1, {'@': 120}), 16: (1, {'@': 120}), 17: (1, {'@': 120}), 18: (1, {'@': 120}), 19: (1, {'@': 120}), 60: (1, {'@': 120}), 107: (1, {'@': 120}), 20: (1, {'@': 120}), 3: (1, {'@': 120}), 62: (1, {'@': 120}), 22: (1, {'@': 120}), 21: (1, {'@': 120}), 23: (1, {'@': 120}), 5: (1, {'@': 120}), 24: (1, {'@': 120}), 63: (1, {'@': 120}), 36: (1, {'@': 120}), 25: (1, {'@': 120}), 106: (1, {'@': 120}), 27: (1, {'@': 120}), 29: (1, {'@': 120}), 31: (1, {'@': 120}), 32: (1, {'@': 120}), 33: (1, {'@': 120}), 34: (1, {'@': 120}), 35: (1, {'@': 120}), 26: (1, {'@': 120}), 28: (1, {'@': 120}), 30: (1, {'@': 120}), 47: (1, {'@': 120})}, 81: {9: (0, 83), 10: (0, 463), 6: (0, 34)}, 82: {31: (1, {'@': 121}), 35: (1, {'@': 121})}, 83: {29: (0, 318)}, 84: {6: (0, 34), 10: (0, 122)}, 85: {60: (0, 114), 11: (1, {'@': 122}), 2: (1, {'@': 122}), 20: (1, {'@': 122}), 13: (1, {'@': 122}), 14: (1, {'@': 122}), 21: (1, {'@': 122}), 15: (1, {'@': 122}), 23: (1, {'@': 122}), 24: (1, {'@': 122}), 16: (1, {'@': 122}), 17: (1, {'@': 122}), 36: (1, {'@': 122}), 106: (1, {'@': 122}), 26: (1, {'@': 122}), 27: (1, {'@': 122}), 28: (1, {'@': 122}), 29: (1, {'@': 122}), 30: (1, {'@': 122}), 31: (1, {'@': 122}), 32: (1, {'@': 122}), 33: (1, {'@': 122}), 34: (1, {'@': 122}), 35: (1, {'@': 122})}, 86: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 70: (0, 454), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103)}, 87: {29: (1, {'@': 123})}, 88: {22: (0, 177), 6: (0, 34), 19: (0, 453), 111: (0, 124), 81: (0, 209), 5: (0, 182), 10: (0, 290), 25: (0, 207), 3: (0, 131), 41: (0, 478), 77: (0, 490)}, 89: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 70: (0, 313), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103)}, 90: {30: (0, 504), 29: (0, 510), 16: (0, 111)}, 91: {29: (0, 1)}, 92: {29: (0, 402)}, 93: {11: (1, {'@': 124}), 12: (1, {'@': 124}), 2: (1, {'@': 124}), 13: (1, {'@': 124}), 14: (1, {'@': 124}), 15: (1, {'@': 124}), 6: (1, {'@': 124}), 16: (1, {'@': 124}), 17: (1, {'@': 124}), 18: (1, {'@': 124}), 19: (1, {'@': 124}), 20: (1, {'@': 124}), 3: (1, {'@': 124}), 21: (1, {'@': 124}), 22: (1, {'@': 124}), 23: (1, {'@': 124}), 5: (1, {'@': 124}), 24: (1, {'@': 124}), 25: (1, {'@': 124}), 27: (1, {'@': 124}), 29: (1, {'@': 124}), 31: (1, {'@': 124}), 32: (1, {'@': 124}), 33: (1, {'@': 124}), 34: (1, {'@': 124}), 35: (1, {'@': 124}), 26: (1, {'@': 124}), 28: (1, {'@': 124}), 30: (1, {'@': 124}), 36: (1, {'@': 124})}, 94: {16: (0, 448)}, 95: {57: (1, {'@': 125}), 46: (1, {'@': 125}), 36: (1, {'@': 125}), 29: (1, {'@': 125}), 30: (1, {'@': 125})}, 96: {30: (0, 310)}, 97: {30: (0, 118), 29: (0, 84)}, 98: {46: (1, {'@': 126}), 27: (1, {'@': 126}), 15: (1, {'@': 126}), 49: (1, {'@': 126}), 6: (1, {'@': 126}), 28: (1, {'@': 126}), 52: (1, {'@': 126}), 30: (1, {'@': 126}), 48: (1, {'@': 126}), 32: (1, {'@': 126}), 21: (1, {'@': 126}), 50: (1, {'@': 126}), 56: (1, {'@': 126}), 51: (1, {'@': 126}), 53: (1, {'@': 126}), 54: (1, {'@': 126}), 47: (1, {'@': 126}), 55: (1, {'@': 126})}, 99: {16: (0, 78)}, 100: {30: (0, 24)}, 101: {30: (0, 489)}, 102: {30: (0, 380)}, 103: {11: (1, {'@': 127}), 12: (1, {'@': 127}), 2: (1, {'@': 127}), 13: (1, {'@': 127}), 14: (1, {'@': 127}), 15: (1, {'@': 127}), 6: (1, {'@': 127}), 16: (1, {'@': 127}), 17: (1, {'@': 127}), 18: (1, {'@': 127}), 19: (1, {'@': 127}), 20: (1, {'@': 127}), 3: (1, {'@': 127}), 21: (1, {'@': 127}), 22: (1, {'@': 127}), 23: (1, {'@': 127}), 5: (1, {'@': 127}), 24: (1, {'@': 127}), 25: (1, {'@': 127}), 27: (1, {'@': 127}), 29: (1, {'@': 127}), 31: (1, {'@': 127}), 32: (1, {'@': 127}), 33: (1, {'@': 127}), 34: (1, {'@': 127}), 35: (1, {'@': 127}), 26: (1, {'@': 127}), 28: (1, {'@': 127}), 30: (1, {'@': 127}), 36: (1, {'@': 127})}, 104: {29: (0, 429)}, 105: {10: (0, 99), 6: (0, 34)}, 106: {65: (0, 27), 53: (0, 17)}, 107: {28: (0, 297), 29: (0, 288)}, 108: {11: (1, {'@': 128}), 2: (1, {'@': 128}), 13: (1, {'@': 128}), 27: (1, {'@': 128}), 15: (1, {'@': 128}), 29: (1, {'@': 128}), 31: (1, {'@': 128}), 32: (1, {'@': 128}), 21: (1, {'@': 128}), 23: (1, {'@': 128}), 33: (1, {'@': 128}), 34: (1, {'@': 128}), 35: (1, {'@': 128}), 24: (1, {'@': 128}), 106: (1, {'@': 128}), 26: (1, {'@': 128}), 14: (1, {'@': 128}), 16: (1, {'@': 128}), 28: (1, {'@': 128}), 17: (1, {'@': 128}), 30: (1, {'@': 128}), 20: (1, {'@': 128}), 36: (1, {'@': 128})}, 109: {47: (0, 256), 48: (1, {'@': 129}), 49: (1, {'@': 129}), 50: (1, {'@': 129}), 6: (1, {'@': 129}), 51: (1, {'@': 129}), 52: (1, {'@': 129}), 53: (1, {'@': 129}), 54: (1, {'@': 129}), 55: (1, {'@': 129}), 46: (1, {'@': 129})}, 110: {12: (0, 460), 19: (0, 453), 69: (0, 477), 41: (0, 506), 82: (0, 484), 83: (0, 465), 76: (0, 219), 72: (0, 509), 84: (0, 443), 5: (0, 457), 85: (0, 170), 79: (0, 171), 22: (0, 177), 75: (0, 185), 6: (0, 34), 25: (0, 152), 89: (0, 200), 10: (0, 168), 77: (0, 134), 78: (0, 199), 3: (0, 131), 2: (0, 194), 18: (0, 174), 81: (0, 160)}, 111: {16: (0, 458)}, 112: {30: (0, 430)}, 113: {12: (0, 460), 22: (0, 177), 6: (0, 34), 19: (0, 453), 25: (0, 152), 41: (0, 506), 10: (0, 168), 77: (0, 134), 69: (0, 495), 84: (0, 443), 78: (0, 199), 5: (0, 457), 85: (0, 170), 3: (0, 131), 18: (0, 174), 81: (0, 160)}, 114: {12: (0, 460), 22: (0, 177), 83: (0, 465), 6: (0, 34), 19: (0, 453), 69: (0, 477), 25: (0, 152), 41: (0, 506), 10: (0, 168), 77: (0, 134), 84: (0, 443), 78: (0, 199), 79: (0, 171), 5: (0, 457), 85: (0, 170), 75: (0, 275), 3: (0, 131), 18: (0, 174), 81: (0, 160)}, 115: {30: (0, 72)}, 116: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 70: (0, 498), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103)}, 117: {29: (0, 366)}, 118: {48: (1, {'@': 130}), 49: (1, {'@': 130}), 50: (1, {'@': 130}), 6: (1, {'@': 130}), 51: (1, {'@': 130}), 52: (1, {'@': 130}), 53: (1, {'@': 130}), 54: (1, {'@': 130}), 55: (1, {'@': 130}), 46: (1, {'@': 130})}, 119: {30: (0, 73)}, 120: {10: (0, 445), 6: (0, 34)}, 121: {5: (0, 267)}, 122: {24: (0, 382)}, 123: {29: (0, 417), 126: (0, 125), 57: (1, {'@': 131}), 30: (1, {'@': 131}), 36: (1, {'@': 131}), 46: (1, {'@': 131})}, 124: {47: (0, 392), 16: (0, 111)}, 125: {29: (0, 486), 57: (1, {'@': 132}), 30: (1, {'@': 132}), 36: (1, {'@': 132}), 46: (1, {'@': 132})}, 126: {2: (1, {'@': 133}), 46: (1, {'@': 133}), 27: (1, {'@': 133}), 15: (1, {'@': 133}), 49: (1, {'@': 133}), 6: (1, {'@': 133}), 28: (1, {'@': 133}), 52: (1, {'@': 133}), 30: (1, {'@': 133}), 57: (1, {'@': 133}), 48: (1, {'@': 133}), 60: (1, {'@': 133}), 62: (1, {'@': 133}), 32: (1, {'@': 133}), 21: (1, {'@': 133}), 50: (1, {'@': 133}), 63: (1, {'@': 133}), 56: (1, {'@': 133}), 51: (1, {'@': 133}), 53: (1, {'@': 133}), 54: (1, {'@': 133}), 47: (1, {'@': 133}), 55: (1, {'@': 133}), 11: (1, {'@': 133}), 59: (1, {'@': 133}), 14: (1, {'@': 133}), 61: (1, {'@': 133}), 23: (1, {'@': 133}), 24: (1, {'@': 133}), 64: (1, {'@': 133}), 29: (1, {'@': 133}), 36: (1, {'@': 133})}, 127: {29: (1, {'@': 134}), 46: (1, {'@': 134})}, 128: {5: (0, 226)}, 129: {5: (0, 400), 6: (0, 34), 38: (0, 369), 39: (0, 427), 40: (0, 428), 2: (0, 254), 8: (0, 419), 45: (0, 201), 10: (0, 426), 1: (0, 230), 41: (0, 262), 42: (0, 412), 43: (0, 372), 44: (0, 387), 0: (0, 378), 3: (0, 131), 4: (0, 393), 7: (0, 228)}, 130: {5: (0, 235)}, 131: {2: (1, {'@': 135}), 46: (1, {'@': 135}), 27: (1, {'@': 135}), 15: (1, {'@': 135}), 49: (1, {'@': 135}), 6: (1, {'@': 135}), 28: (1, {'@': 135}), 52: (1, {'@': 135}), 30: (1, {'@': 135}), 57: (1, {'@': 135}), 48: (1, {'@': 135}), 60: (1, {'@': 135}), 62: (1, {'@': 135}), 32: (1, {'@': 135}), 21: (1, {'@': 135}), 50: (1, {'@': 135}), 63: (1, {'@': 135}), 56: (1, {'@': 135}), 51: (1, {'@': 135}), 53: (1, {'@': 135}), 54: (1, {'@': 135}), 47: (1, {'@': 135}), 55: (1, {'@': 135}), 12: (1, {'@': 135}), 11: (1, {'@': 135}), 13: (1, {'@': 135}), 14: (1, {'@': 135}), 16: (1, {'@': 135}), 17: (1, {'@': 135}), 18: (1, {'@': 135}), 19: (1, {'@': 135}), 107: (1, {'@': 135}), 20: (1, {'@': 135}), 3: (1, {'@': 135}), 22: (1, {'@': 135}), 23: (1, {'@': 135}), 5: (1, {'@': 135}), 24: (1, {'@': 135}), 36: (1, {'@': 135}), 25: (1, {'@': 135}), 59: (1, {'@': 135}), 61: (1, {'@': 135}), 64: (1, {'@': 135}), 106: (1, {'@': 135}), 29: (1, {'@': 135}), 31: (1, {'@': 135}), 33: (1, {'@': 135}), 34: (1, {'@': 135}), 35: (1, {'@': 135}), 26: (1, {'@': 135})}, 132: {28: (0, 203)}, 133: {106: (0, 86), 16: (0, 111)}, 134: {12: (1, {'@': 136}), 11: (1, {'@': 136}), 2: (1, {'@': 136}), 13: (1, {'@': 136}), 14: (1, {'@': 136}), 15: (1, {'@': 136}), 6: (1, {'@': 136}), 16: (1, {'@': 136}), 17: (1, {'@': 136}), 18: (1, {'@': 136}), 19: (1, {'@': 136}), 60: (1, {'@': 136}), 107: (1, {'@': 136}), 20: (1, {'@': 136}), 3: (1, {'@': 136}), 62: (1, {'@': 136}), 22: (1, {'@': 136}), 21: (1, {'@': 136}), 23: (1, {'@': 136}), 5: (1, {'@': 136}), 24: (1, {'@': 136}), 63: (1, {'@': 136}), 36: (1, {'@': 136}), 25: (1, {'@': 136}), 106: (1, {'@': 136}), 27: (1, {'@': 136}), 29: (1, {'@': 136}), 31: (1, {'@': 136}), 32: (1, {'@': 136}), 33: (1, {'@': 136}), 34: (1, {'@': 136}), 35: (1, {'@': 136}), 26: (1, {'@': 136}), 28: (1, {'@': 136}), 30: (1, {'@': 136}), 47: (1, {'@': 136})}, 135: {38: (0, 369), 8: (0, 419), 40: (0, 428), 10: (0, 406), 37: (0, 415), 109: (0, 136), 42: (0, 412), 43: (0, 372), 44: (0, 387), 0: (0, 378), 45: (0, 410), 4: (0, 393), 5: (0, 400), 6: (0, 34), 39: (0, 427), 2: (0, 254), 1: (0, 230), 110: (0, 247), 41: (0, 262), 3: (0, 131), 7: (0, 228), 30: (1, {'@': 105})}, 136: {30: (0, 127)}, 137: {5: (0, 266)}, 138: {10: (0, 32), 6: (0, 34)}, 139: {47: (0, 256), 48: (1, {'@': 137}), 49: (1, {'@': 137}), 50: (1, {'@': 137}), 6: (1, {'@': 137}), 51: (1, {'@': 137}), 52: (1, {'@': 137}), 53: (1, {'@': 137}), 54: (1, {'@': 137}), 55: (1, {'@': 137}), 46: (1, {'@': 137})}, 140: {5: (0, 249)}, 141: {26: (1, {'@': 138}), 27: (1, {'@': 138}), 28: (1, {'@': 138}), 29: (1, {'@': 138}), 30: (1, {'@': 138}), 31: (1, {'@': 138}), 32: (1, {'@': 138}), 33: (1, {'@': 138}), 34: (1, {'@': 138}), 35: (1, {'@': 138}), 36: (1, {'@': 138})}, 142: {30: (0, 208)}, 143: {2: (1, {'@': 139}), 46: (1, {'@': 139}), 27: (1, {'@': 139}), 15: (1, {'@': 139}), 49: (1, {'@': 139}), 6: (1, {'@': 139}), 28: (1, {'@': 139}), 52: (1, {'@': 139}), 30: (1, {'@': 139}), 57: (1, {'@': 139}), 48: (1, {'@': 139}), 60: (1, {'@': 139}), 62: (1, {'@': 139}), 32: (1, {'@': 139}), 21: (1, {'@': 139}), 50: (1, {'@': 139}), 63: (1, {'@': 139}), 56: (1, {'@': 139}), 51: (1, {'@': 139}), 53: (1, {'@': 139}), 54: (1, {'@': 139}), 47: (1, {'@': 139}), 55: (1, {'@': 139}), 11: (1, {'@': 139}), 59: (1, {'@': 139}), 14: (1, {'@': 139}), 61: (1, {'@': 139}), 23: (1, {'@': 139}), 24: (1, {'@': 139}), 64: (1, {'@': 139}), 29: (1, {'@': 139}), 36: (1, {'@': 139})}, 144: {29: (0, 89), 127: (0, 107), 36: (0, 77), 28: (0, 80)}, 145: {46: (0, 126), 47: (0, 256)}, 146: {5: (0, 400), 6: (0, 34), 39: (0, 427), 44: (0, 283), 2: (0, 254), 8: (0, 419), 10: (0, 426), 1: (0, 230), 41: (0, 262), 42: (0, 412), 0: (0, 378), 3: (0, 131), 4: (0, 393), 7: (0, 228)}, 147: {5: (0, 261)}, 148: {12: (0, 460), 22: (0, 177), 6: (0, 34), 19: (0, 453), 25: (0, 152), 41: (0, 506), 10: (0, 168), 77: (0, 134), 84: (0, 443), 78: (0, 199), 5: (0, 457), 85: (0, 277), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (1, {'@': 140}), 2: (1, {'@': 140}), 13: (1, {'@': 140}), 27: (1, {'@': 140}), 15: (1, {'@': 140}), 29: (1, {'@': 140}), 31: (1, {'@': 140}), 107: (1, {'@': 140}), 32: (1, {'@': 140}), 21: (1, {'@': 140}), 23: (1, {'@': 140}), 33: (1, {'@': 140}), 34: (1, {'@': 140}), 35: (1, {'@': 140}), 24: (1, {'@': 140}), 106: (1, {'@': 140}), 26: (1, {'@': 140}), 14: (1, {'@': 140}), 16: (1, {'@': 140}), 28: (1, {'@': 140}), 17: (1, {'@': 140}), 30: (1, {'@': 140}), 60: (1, {'@': 140}), 20: (1, {'@': 140}), 62: (1, {'@': 140}), 63: (1, {'@': 140}), 36: (1, {'@': 140})}, 149: {48: (1, {'@': 141}), 49: (1, {'@': 141}), 50: (1, {'@': 141}), 6: (1, {'@': 141}), 51: (1, {'@': 141}), 52: (1, {'@': 141}), 53: (1, {'@': 141}), 54: (1, {'@': 141}), 55: (1, {'@': 141}), 46: (1, {'@': 141})}, 150: {31: (1, {'@': 142}), 35: (1, {'@': 142})}, 151: {5: (0, 223)}, 152: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 70: (0, 144), 85: (0, 170), 15: (0, 346), 28: (0, 241), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103)}, 153: {57: (0, 243), 106: (1, {'@': 143}), 16: (1, {'@': 143})}, 154: {2: (1, {'@': 144}), 46: (1, {'@': 144}), 27: (1, {'@': 144}), 15: (1, {'@': 144}), 49: (1, {'@': 144}), 6: (1, {'@': 144}), 28: (1, {'@': 144}), 52: (1, {'@': 144}), 30: (1, {'@': 144}), 57: (1, {'@': 144}), 48: (1, {'@': 144}), 60: (1, {'@': 144}), 62: (1, {'@': 144}), 32: (1, {'@': 144}), 21: (1, {'@': 144}), 50: (1, {'@': 144}), 63: (1, {'@': 144}), 56: (1, {'@': 144}), 51: (1, {'@': 144}), 53: (1, {'@': 144}), 54: (1, {'@': 144}), 47: (1, {'@': 144}), 55: (1, {'@': 144}), 11: (1, {'@': 144}), 59: (1, {'@': 144}), 14: (1, {'@': 144}), 61: (1, {'@': 144}), 23: (1, {'@': 144}), 24: (1, {'@': 144}), 64: (1, {'@': 144}), 29: (1, {'@': 144}), 36: (1, {'@': 144})}, 155: {30: (0, 198)}, 156: {48: (1, {'@': 145}), 49: (1, {'@': 145}), 50: (1, {'@': 145}), 6: (1, {'@': 145}), 51: (1, {'@': 145}), 52: (1, {'@': 145}), 53: (1, {'@': 145}), 54: (1, {'@': 145}), 55: (1, {'@': 145}), 46: (1, {'@': 145})}, 157: {38: (0, 369), 19: (0, 453), 8: (0, 419), 40: (0, 428), 10: (0, 379), 37: (0, 332), 98: (0, 286), 42: (0, 412), 5: (0, 311), 43: (0, 372), 44: (0, 387), 0: (0, 378), 91: (0, 296), 92: (0, 139), 99: (0, 287), 45: (0, 410), 18: (0, 289), 4: (0, 393), 94: (0, 281), 93: (0, 312), 6: (0, 34), 100: (0, 269), 88: (0, 299), 39: (0, 427), 2: (0, 254), 101: (0, 294), 95: (0, 279), 1: (0, 230), 41: (0, 262), 96: (0, 301), 102: (0, 323), 97: (0, 272), 3: (0, 131), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 158: {29: (1, {'@': 146}), 30: (1, {'@': 146})}, 159: {11: (1, {'@': 147}), 12: (1, {'@': 147}), 2: (1, {'@': 147}), 13: (1, {'@': 147}), 14: (1, {'@': 147}), 15: (1, {'@': 147}), 6: (1, {'@': 147}), 16: (1, {'@': 147}), 17: (1, {'@': 147}), 18: (1, {'@': 147}), 19: (1, {'@': 147}), 20: (1, {'@': 147}), 3: (1, {'@': 147}), 21: (1, {'@': 147}), 22: (1, {'@': 147}), 23: (1, {'@': 147}), 5: (1, {'@': 147}), 24: (1, {'@': 147}), 25: (1, {'@': 147}), 27: (1, {'@': 147}), 29: (1, {'@': 147}), 31: (1, {'@': 147}), 32: (1, {'@': 147}), 33: (1, {'@': 147}), 34: (1, {'@': 147}), 35: (1, {'@': 147}), 26: (1, {'@': 147}), 28: (1, {'@': 147}), 30: (1, {'@': 147}), 36: (1, {'@': 147})}, 160: {12: (1, {'@': 148}), 11: (1, {'@': 148}), 2: (1, {'@': 148}), 13: (1, {'@': 148}), 14: (1, {'@': 148}), 15: (1, {'@': 148}), 6: (1, {'@': 148}), 16: (1, {'@': 148}), 17: (1, {'@': 148}), 18: (1, {'@': 148}), 19: (1, {'@': 148}), 60: (1, {'@': 148}), 107: (1, {'@': 148}), 20: (1, {'@': 148}), 3: (1, {'@': 148}), 62: (1, {'@': 148}), 22: (1, {'@': 148}), 21: (1, {'@': 148}), 23: (1, {'@': 148}), 5: (1, {'@': 148}), 24: (1, {'@': 148}), 63: (1, {'@': 148}), 36: (1, {'@': 148}), 25: (1, {'@': 148}), 106: (1, {'@': 148}), 27: (1, {'@': 148}), 29: (1, {'@': 148}), 31: (1, {'@': 148}), 32: (1, {'@': 148}), 33: (1, {'@': 148}), 34: (1, {'@': 148}), 35: (1, {'@': 148}), 26: (1, {'@': 148}), 28: (1, {'@': 148}), 30: (1, {'@': 148}), 47: (1, {'@': 148})}, 161: {32: (0, 232)}, 162: {46: (1, {'@': 149}), 27: (1, {'@': 149}), 15: (1, {'@': 149}), 49: (1, {'@': 149}), 6: (1, {'@': 149}), 28: (1, {'@': 149}), 52: (1, {'@': 149}), 30: (1, {'@': 149}), 48: (1, {'@': 149}), 32: (1, {'@': 149}), 21: (1, {'@': 149}), 50: (1, {'@': 149}), 56: (1, {'@': 149}), 51: (1, {'@': 149}), 53: (1, {'@': 149}), 54: (1, {'@': 149}), 47: (1, {'@': 149}), 55: (1, {'@': 149})}, 163: {10: (0, 222), 6: (0, 34)}, 164: {36: (1, {'@': 150}), 26: (1, {'@': 150}), 27: (1, {'@': 150}), 28: (1, {'@': 150}), 29: (1, {'@': 150}), 30: (1, {'@': 150}), 31: (1, {'@': 150}), 32: (1, {'@': 150}), 33: (1, {'@': 150}), 34: (1, {'@': 150}), 35: (1, {'@': 150})}, 165: {47: (0, 256), 46: (1, {'@': 151}), 27: (1, {'@': 151}), 49: (1, {'@': 151}), 6: (1, {'@': 151}), 28: (1, {'@': 151}), 52: (1, {'@': 151}), 30: (1, {'@': 151}), 48: (1, {'@': 151}), 32: (1, {'@': 151}), 50: (1, {'@': 151}), 51: (1, {'@': 151}), 53: (1, {'@': 151}), 54: (1, {'@': 151}), 55: (1, {'@': 151})}, 166: {48: (1, {'@': 152}), 49: (1, {'@': 152}), 50: (1, {'@': 152}), 6: (1, {'@': 152}), 51: (1, {'@': 152}), 52: (1, {'@': 152}), 53: (1, {'@': 152}), 54: (1, {'@': 152}), 55: (1, {'@': 152}), 46: (1, {'@': 152})}, 167: {5: (0, 244)}, 168: {12: (1, {'@': 153}), 11: (1, {'@': 153}), 2: (1, {'@': 153}), 13: (1, {'@': 153}), 14: (1, {'@': 153}), 15: (1, {'@': 153}), 6: (1, {'@': 153}), 16: (1, {'@': 153}), 17: (1, {'@': 153}), 18: (1, {'@': 153}), 19: (1, {'@': 153}), 60: (1, {'@': 153}), 107: (1, {'@': 153}), 20: (1, {'@': 153}), 3: (1, {'@': 153}), 62: (1, {'@': 153}), 22: (1, {'@': 153}), 21: (1, {'@': 153}), 23: (1, {'@': 153}), 5: (1, {'@': 153}), 24: (1, {'@': 153}), 63: (1, {'@': 153}), 36: (1, {'@': 153}), 25: (1, {'@': 153}), 106: (1, {'@': 153}), 27: (1, {'@': 153}), 29: (1, {'@': 153}), 31: (1, {'@': 153}), 32: (1, {'@': 153}), 33: (1, {'@': 153}), 34: (1, {'@': 153}), 35: (1, {'@': 153}), 26: (1, {'@': 153}), 28: (1, {'@': 153}), 30: (1, {'@': 153}), 47: (1, {'@': 153})}, 169: {29: (1, {'@': 154}), 46: (1, {'@': 154})}, 170: {12: (1, {'@': 155}), 11: (1, {'@': 155}), 2: (1, {'@': 155}), 13: (1, {'@': 155}), 14: (1, {'@': 155}), 15: (1, {'@': 155}), 6: (1, {'@': 155}), 16: (1, {'@': 155}), 17: (1, {'@': 155}), 18: (1, {'@': 155}), 19: (1, {'@': 155}), 60: (1, {'@': 155}), 107: (1, {'@': 155}), 20: (1, {'@': 155}), 3: (1, {'@': 155}), 62: (1, {'@': 155}), 22: (1, {'@': 155}), 21: (1, {'@': 155}), 23: (1, {'@': 155}), 5: (1, {'@': 155}), 24: (1, {'@': 155}), 63: (1, {'@': 155}), 36: (1, {'@': 155}), 25: (1, {'@': 155}), 106: (1, {'@': 155}), 27: (1, {'@': 155}), 29: (1, {'@': 155}), 31: (1, {'@': 155}), 32: (1, {'@': 155}), 33: (1, {'@': 155}), 34: (1, {'@': 155}), 35: (1, {'@': 155}), 26: (1, {'@': 155}), 28: (1, {'@': 155}), 30: (1, {'@': 155}), 47: (1, {'@': 155})}, 171: {63: (0, 172), 128: (0, 293), 11: (1, {'@': 156}), 60: (1, {'@': 156}), 2: (1, {'@': 156}), 20: (1, {'@': 156}), 13: (1, {'@': 156}), 14: (1, {'@': 156}), 21: (1, {'@': 156}), 15: (1, {'@': 156}), 23: (1, {'@': 156}), 24: (1, {'@': 156}), 16: (1, {'@': 156}), 17: (1, {'@': 156}), 36: (1, {'@': 156}), 106: (1, {'@': 156}), 26: (1, {'@': 156}), 27: (1, {'@': 156}), 28: (1, {'@': 156}), 29: (1, {'@': 156}), 30: (1, {'@': 156}), 31: (1, {'@': 156}), 32: (1, {'@': 156}), 33: (1, {'@': 156}), 34: (1, {'@': 156}), 35: (1, {'@': 156})}, 172: {12: (0, 460), 22: (0, 177), 83: (0, 465), 6: (0, 34), 79: (0, 221), 19: (0, 453), 69: (0, 477), 25: (0, 152), 41: (0, 506), 10: (0, 168), 77: (0, 134), 84: (0, 443), 78: (0, 199), 5: (0, 457), 85: (0, 170), 3: (0, 131), 18: (0, 174), 81: (0, 160)}, 173: {5: (0, 236)}, 174: {12: (1, {'@': 157}), 11: (1, {'@': 157}), 2: (1, {'@': 157}), 13: (1, {'@': 157}), 14: (1, {'@': 157}), 15: (1, {'@': 157}), 6: (1, {'@': 157}), 16: (1, {'@': 157}), 17: (1, {'@': 157}), 18: (1, {'@': 157}), 19: (1, {'@': 157}), 60: (1, {'@': 157}), 107: (1, {'@': 157}), 20: (1, {'@': 157}), 3: (1, {'@': 157}), 62: (1, {'@': 157}), 22: (1, {'@': 157}), 21: (1, {'@': 157}), 23: (1, {'@': 157}), 5: (1, {'@': 157}), 24: (1, {'@': 157}), 63: (1, {'@': 157}), 36: (1, {'@': 157}), 25: (1, {'@': 157}), 106: (1, {'@': 157}), 27: (1, {'@': 157}), 29: (1, {'@': 157}), 31: (1, {'@': 157}), 32: (1, {'@': 157}), 33: (1, {'@': 157}), 34: (1, {'@': 157}), 35: (1, {'@': 157}), 26: (1, {'@': 157}), 28: (1, {'@': 157}), 30: (1, {'@': 157}), 47: (1, {'@': 157})}, 175: {22: (0, 253), 129: (0, 259)}, 176: {22: (0, 177), 6: (0, 34), 19: (0, 453), 111: (0, 508), 81: (0, 209), 5: (0, 182), 10: (0, 290), 25: (0, 207), 3: (0, 131), 41: (0, 478), 77: (0, 490)}, 177: {38: (0, 369), 19: (0, 453), 8: (0, 419), 40: (0, 428), 55: (0, 54), 10: (0, 11), 37: (0, 273), 52: (0, 47), 42: (0, 412), 44: (0, 387), 54: (0, 21), 91: (0, 296), 92: (0, 304), 45: (0, 410), 18: (0, 289), 4: (0, 393), 65: (0, 15), 39: (0, 427), 93: (0, 312), 51: (0, 38), 88: (0, 299), 1: (0, 230), 68: (0, 196), 94: (0, 281), 95: (0, 279), 12: (0, 274), 96: (0, 301), 3: (0, 131), 97: (0, 272), 67: (0, 12), 98: (0, 286), 66: (0, 295), 5: (0, 311), 43: (0, 372), 0: (0, 378), 48: (0, 26), 53: (0, 17), 99: (0, 287), 6: (0, 34), 2: (0, 254), 100: (0, 269), 101: (0, 294), 41: (0, 262), 102: (0, 323), 14: (0, 333), 77: (0, 330), 50: (0, 56), 7: (0, 228)}, 178: {31: (1, {'@': 158}), 35: (1, {'@': 158})}, 179: {12: (0, 460), 22: (0, 177), 6: (0, 34), 19: (0, 453), 69: (0, 477), 25: (0, 152), 41: (0, 506), 83: (0, 324), 10: (0, 168), 77: (0, 134), 84: (0, 443), 78: (0, 199), 5: (0, 457), 85: (0, 170), 3: (0, 131), 18: (0, 174), 81: (0, 160)}, 180: {12: (1, {'@': 159}), 11: (1, {'@': 159}), 2: (1, {'@': 159}), 13: (1, {'@': 159}), 14: (1, {'@': 159}), 15: (1, {'@': 159}), 6: (1, {'@': 159}), 16: (1, {'@': 159}), 17: (1, {'@': 159}), 18: (1, {'@': 159}), 19: (1, {'@': 159}), 60: (1, {'@': 159}), 107: (1, {'@': 159}), 20: (1, {'@': 159}), 3: (1, {'@': 159}), 62: (1, {'@': 159}), 22: (1, {'@': 159}), 21: (1, {'@': 159}), 23: (1, {'@': 159}), 5: (1, {'@': 159}), 24: (1, {'@': 159}), 63: (1, {'@': 159}), 36: (1, {'@': 159}), 25: (1, {'@': 159}), 106: (1, {'@': 159}), 27: (1, {'@': 159}), 29: (1, {'@': 159}), 31: (1, {'@': 159}), 32: (1, {'@': 159}), 33: (1, {'@': 159}), 34: (1, {'@': 159}), 35: (1, {'@': 159}), 26: (1, {'@': 159}), 28: (1, {'@': 159}), 30: (1, {'@': 159}), 47: (1, {'@': 159})}, 181: {10: (0, 123), 104: (0, 246), 6: (0, 34)}, 182: {22: (0, 177), 6: (0, 34), 19: (0, 453), 130: (0, 483), 111: (0, 291), 81: (0, 209), 5: (0, 182), 10: (0, 290), 25: (0, 207), 3: (0, 131), 41: (0, 478), 77: (0, 490)}, 183: {2: (1, {'@': 160}), 46: (1, {'@': 160}), 27: (1, {'@': 160}), 15: (1, {'@': 160}), 49: (1, {'@': 160}), 6: (1, {'@': 160}), 28: (1, {'@': 160}), 52: (1, {'@': 160}), 30: (1, {'@': 160}), 57: (1, {'@': 160}), 48: (1, {'@': 160}), 60: (1, {'@': 160}), 62: (1, {'@': 160}), 32: (1, {'@': 160}), 21: (1, {'@': 160}), 50: (1, {'@': 160}), 63: (1, {'@': 160}), 56: (1, {'@': 160}), 51: (1, {'@': 160}), 53: (1, {'@': 160}), 54: (1, {'@': 160}), 47: (1, {'@': 160}), 55: (1, {'@': 160}), 11: (1, {'@': 160}), 59: (1, {'@': 160}), 14: (1, {'@': 160}), 61: (1, {'@': 160}), 23: (1, {'@': 160}), 24: (1, {'@': 160}), 64: (1, {'@': 160}), 29: (1, {'@': 160}), 36: (1, {'@': 160})}, 184: {30: (0, 193)}, 185: {131: (0, 85), 60: (0, 76), 11: (1, {'@': 161}), 2: (1, {'@': 161}), 20: (1, {'@': 161}), 13: (1, {'@': 161}), 14: (1, {'@': 161}), 21: (1, {'@': 161}), 15: (1, {'@': 161}), 23: (1, {'@': 161}), 24: (1, {'@': 161}), 16: (1, {'@': 161}), 17: (1, {'@': 161}), 36: (1, {'@': 161}), 106: (1, {'@': 161}), 26: (1, {'@': 161}), 27: (1, {'@': 161}), 28: (1, {'@': 161}), 29: (1, {'@': 161}), 30: (1, {'@': 161}), 31: (1, {'@': 161}), 32: (1, {'@': 161}), 33: (1, {'@': 161}), 34: (1, {'@': 161}), 35: (1, {'@': 161})}, 186: {29: (1, {'@': 162}), 30: (1, {'@': 162})}, 187: {29: (0, 9)}, 188: {11: (1, {'@': 163}), 2: (1, {'@': 163}), 27: (1, {'@': 163}), 15: (1, {'@': 163}), 49: (1, {'@': 163}), 29: (1, {'@': 163}), 52: (1, {'@': 163}), 32: (1, {'@': 163}), 21: (1, {'@': 163}), 23: (1, {'@': 163}), 24: (1, {'@': 163}), 56: (1, {'@': 163}), 51: (1, {'@': 163}), 54: (1, {'@': 163}), 47: (1, {'@': 163}), 64: (1, {'@': 163}), 59: (1, {'@': 163}), 46: (1, {'@': 163}), 14: (1, {'@': 163}), 6: (1, {'@': 163}), 28: (1, {'@': 163}), 30: (1, {'@': 163}), 48: (1, {'@': 163}), 61: (1, {'@': 163}), 62: (1, {'@': 163}), 50: (1, {'@': 163}), 36: (1, {'@': 163}), 53: (1, {'@': 163}), 55: (1, {'@': 163})}, 189: {48: (1, {'@': 164}), 49: (1, {'@': 164}), 50: (1, {'@': 164}), 6: (1, {'@': 164}), 51: (1, {'@': 164}), 52: (1, {'@': 164}), 53: (1, {'@': 164}), 54: (1, {'@': 164}), 55: (1, {'@': 164}), 46: (1, {'@': 164})}, 190: {7: (0, 228), 38: (0, 369), 8: (0, 419), 40: (0, 428), 10: (0, 406), 37: (0, 415), 42: (0, 412), 43: (0, 372), 44: (0, 387), 0: (0, 378), 45: (0, 410), 4: (0, 393), 5: (0, 400), 6: (0, 34), 39: (0, 427), 2: (0, 254), 1: (0, 230), 110: (0, 247), 41: (0, 262), 3: (0, 131), 109: (0, 224), 30: (1, {'@': 105})}, 191: {38: (0, 369), 19: (0, 453), 8: (0, 419), 40: (0, 428), 10: (0, 379), 37: (0, 332), 98: (0, 286), 92: (0, 487), 42: (0, 412), 5: (0, 311), 43: (0, 372), 44: (0, 387), 0: (0, 378), 91: (0, 296), 99: (0, 287), 45: (0, 410), 18: (0, 289), 4: (0, 393), 94: (0, 281), 93: (0, 312), 6: (0, 34), 100: (0, 269), 88: (0, 299), 39: (0, 427), 2: (0, 254), 101: (0, 294), 95: (0, 279), 1: (0, 230), 41: (0, 262), 96: (0, 301), 102: (0, 323), 97: (0, 272), 3: (0, 131), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 192: {29: (1, {'@': 165}), 30: (1, {'@': 165})}, 193: {36: (1, {'@': 166})}, 194: {12: (0, 460), 19: (0, 453), 69: (0, 477), 41: (0, 506), 83: (0, 465), 84: (0, 443), 5: (0, 457), 85: (0, 170), 79: (0, 171), 22: (0, 177), 72: (0, 317), 75: (0, 185), 6: (0, 34), 25: (0, 152), 89: (0, 200), 10: (0, 168), 77: (0, 134), 78: (0, 199), 3: (0, 131), 18: (0, 174), 81: (0, 160)}, 195: {31: (0, 164), 132: (0, 150), 35: (0, 88)}, 196: {48: (1, {'@': 167}), 49: (1, {'@': 167}), 50: (1, {'@': 167}), 6: (1, {'@': 167}), 51: (1, {'@': 167}), 52: (1, {'@': 167}), 53: (1, {'@': 167}), 54: (1, {'@': 167}), 55: (1, {'@': 167}), 46: (1, {'@': 167})}, 197: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 70: (0, 497), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 36: (0, 491), 90: (0, 113), 20: (0, 103)}, 198: {2: (1, {'@': 168}), 46: (1, {'@': 168}), 27: (1, {'@': 168}), 15: (1, {'@': 168}), 49: (1, {'@': 168}), 6: (1, {'@': 168}), 28: (1, {'@': 168}), 52: (1, {'@': 168}), 30: (1, {'@': 168}), 57: (1, {'@': 168}), 48: (1, {'@': 168}), 60: (1, {'@': 168}), 62: (1, {'@': 168}), 32: (1, {'@': 168}), 21: (1, {'@': 168}), 50: (1, {'@': 168}), 63: (1, {'@': 168}), 56: (1, {'@': 168}), 51: (1, {'@': 168}), 53: (1, {'@': 168}), 54: (1, {'@': 168}), 47: (1, {'@': 168}), 55: (1, {'@': 168}), 11: (1, {'@': 168}), 59: (1, {'@': 168}), 14: (1, {'@': 168}), 61: (1, {'@': 168}), 23: (1, {'@': 168}), 24: (1, {'@': 168}), 64: (1, {'@': 168}), 29: (1, {'@': 168}), 36: (1, {'@': 168})}, 199: {12: (1, {'@': 169}), 11: (1, {'@': 169}), 2: (1, {'@': 169}), 13: (1, {'@': 169}), 14: (1, {'@': 169}), 15: (1, {'@': 169}), 6: (1, {'@': 169}), 16: (1, {'@': 169}), 17: (1, {'@': 169}), 18: (1, {'@': 169}), 19: (1, {'@': 169}), 60: (1, {'@': 169}), 107: (1, {'@': 169}), 20: (1, {'@': 169}), 3: (1, {'@': 169}), 62: (1, {'@': 169}), 22: (1, {'@': 169}), 21: (1, {'@': 169}), 23: (1, {'@': 169}), 5: (1, {'@': 169}), 24: (1, {'@': 169}), 63: (1, {'@': 169}), 36: (1, {'@': 169}), 25: (1, {'@': 169}), 106: (1, {'@': 169}), 27: (1, {'@': 169}), 29: (1, {'@': 169}), 31: (1, {'@': 169}), 32: (1, {'@': 169}), 33: (1, {'@': 169}), 34: (1, {'@': 169}), 35: (1, {'@': 169}), 26: (1, {'@': 169}), 28: (1, {'@': 169}), 30: (1, {'@': 169}), 47: (1, {'@': 169})}, 200: {2: (0, 305), 133: (0, 355), 11: (1, {'@': 170}), 20: (1, {'@': 170}), 13: (1, {'@': 170}), 14: (1, {'@': 170}), 21: (1, {'@': 170}), 15: (1, {'@': 170}), 23: (1, {'@': 170}), 24: (1, {'@': 170}), 16: (1, {'@': 170}), 17: (1, {'@': 170}), 36: (1, {'@': 170}), 106: (1, {'@': 170}), 26: (1, {'@': 170}), 27: (1, {'@': 170}), 28: (1, {'@': 170}), 29: (1, {'@': 170}), 30: (1, {'@': 170}), 31: (1, {'@': 170}), 32: (1, {'@': 170}), 33: (1, {'@': 170}), 34: (1, {'@': 170}), 35: (1, {'@': 170})}, 201: {28: (0, 213)}, 202: {57: (0, 138)}, 203: {46: (1, {'@': 171}), 27: (1, {'@': 171}), 15: (1, {'@': 171}), 49: (1, {'@': 171}), 6: (1, {'@': 171}), 28: (1, {'@': 171}), 52: (1, {'@': 171}), 30: (1, {'@': 171}), 48: (1, {'@': 171}), 32: (1, {'@': 171}), 21: (1, {'@': 171}), 50: (1, {'@': 171}), 56: (1, {'@': 171}), 51: (1, {'@': 171}), 53: (1, {'@': 171}), 54: (1, {'@': 171}), 47: (1, {'@': 171}), 55: (1, {'@': 171}), 11: (1, {'@': 171}), 59: (1, {'@': 171}), 14: (1, {'@': 171}), 61: (1, {'@': 171}), 62: (1, {'@': 171}), 23: (1, {'@': 171}), 24: (1, {'@': 171}), 64: (1, {'@': 171}), 29: (1, {'@': 171})}, 204: {5: (0, 239)}, 205: {11: (1, {'@': 172}), 2: (1, {'@': 172}), 13: (1, {'@': 172}), 27: (1, {'@': 172}), 15: (1, {'@': 172}), 29: (1, {'@': 172}), 31: (1, {'@': 172}), 32: (1, {'@': 172}), 21: (1, {'@': 172}), 23: (1, {'@': 172}), 33: (1, {'@': 172}), 34: (1, {'@': 172}), 35: (1, {'@': 172}), 24: (1, {'@': 172}), 106: (1, {'@': 172}), 26: (1, {'@': 172}), 14: (1, {'@': 172}), 16: (1, {'@': 172}), 28: (1, {'@': 172}), 17: (1, {'@': 172}), 30: (1, {'@': 172}), 60: (1, {'@': 172}), 20: (1, {'@': 172}), 62: (1, {'@': 172}), 63: (1, {'@': 172}), 36: (1, {'@': 172})}, 206: {48: (1, {'@': 173}), 49: (1, {'@': 173}), 50: (1, {'@': 173}), 6: (1, {'@': 173}), 51: (1, {'@': 173}), 52: (1, {'@': 173}), 53: (1, {'@': 173}), 54: (1, {'@': 173}), 55: (1, {'@': 173}), 46: (1, {'@': 173})}, 207: {22: (0, 177), 111: (0, 231), 6: (0, 34), 19: (0, 453), 81: (0, 209), 5: (0, 182), 10: (0, 290), 25: (0, 207), 3: (0, 131), 41: (0, 478), 28: (0, 271), 77: (0, 490)}, 208: {48: (1, {'@': 174}), 49: (1, {'@': 174}), 50: (1, {'@': 174}), 6: (1, {'@': 174}), 51: (1, {'@': 174}), 52: (1, {'@': 174}), 53: (1, {'@': 174}), 54: (1, {'@': 174}), 55: (1, {'@': 174}), 46: (1, {'@': 174})}, 209: {29: (1, {'@': 175}), 16: (1, {'@': 175}), 28: (1, {'@': 175}), 47: (1, {'@': 175}), 30: (1, {'@': 175}), 106: (1, {'@': 175})}, 210: {36: (0, 149)}, 211: {77: (0, 452), 19: (0, 453), 41: (0, 158), 3: (0, 131)}, 212: {48: (1, {'@': 176}), 49: (1, {'@': 176}), 50: (1, {'@': 176}), 6: (1, {'@': 176}), 51: (1, {'@': 176}), 52: (1, {'@': 176}), 53: (1, {'@': 176}), 54: (1, {'@': 176}), 55: (1, {'@': 176}), 46: (1, {'@': 176})}, 213: {46: (1, {'@': 177}), 27: (1, {'@': 177}), 15: (1, {'@': 177}), 49: (1, {'@': 177}), 6: (1, {'@': 177}), 28: (1, {'@': 177}), 52: (1, {'@': 177}), 30: (1, {'@': 177}), 48: (1, {'@': 177}), 32: (1, {'@': 177}), 21: (1, {'@': 177}), 50: (1, {'@': 177}), 56: (1, {'@': 177}), 51: (1, {'@': 177}), 53: (1, {'@': 177}), 54: (1, {'@': 177}), 47: (1, {'@': 177}), 55: (1, {'@': 177}), 11: (1, {'@': 177}), 59: (1, {'@': 177}), 14: (1, {'@': 177}), 61: (1, {'@': 177}), 62: (1, {'@': 177}), 23: (1, {'@': 177}), 24: (1, {'@': 177}), 64: (1, {'@': 177}), 29: (1, {'@': 177})}, 214: {5: (0, 240)}, 215: {29: (0, 53), 28: (0, 55)}, 216: {5: (0, 399), 30: (1, {'@': 178}), 108: (1, {'@': 178}), 29: (1, {'@': 178})}, 217: {36: (0, 437)}, 218: {10: (0, 494), 6: (0, 34)}, 219: {11: (0, 350), 74: (0, 335), 17: (0, 68), 23: (0, 326), 16: (0, 159), 13: (0, 320), 15: (0, 346), 24: (0, 93), 21: (0, 348), 14: (0, 347), 71: (0, 343), 20: (0, 103), 87: (0, 110), 36: (1, {'@': 179}), 106: (1, {'@': 179}), 26: (1, {'@': 179}), 27: (1, {'@': 179}), 28: (1, {'@': 179}), 29: (1, {'@': 179}), 30: (1, {'@': 179}), 31: (1, {'@': 179}), 32: (1, {'@': 179}), 33: (1, {'@': 179}), 34: (1, {'@': 179}), 35: (1, {'@': 179})}, 220: {12: (1, {'@': 180}), 11: (1, {'@': 180}), 2: (1, {'@': 180}), 13: (1, {'@': 180}), 14: (1, {'@': 180}), 15: (1, {'@': 180}), 6: (1, {'@': 180}), 16: (1, {'@': 180}), 17: (1, {'@': 180}), 18: (1, {'@': 180}), 19: (1, {'@': 180}), 60: (1, {'@': 180}), 107: (1, {'@': 180}), 20: (1, {'@': 180}), 3: (1, {'@': 180}), 62: (1, {'@': 180}), 22: (1, {'@': 180}), 21: (1, {'@': 180}), 23: (1, {'@': 180}), 5: (1, {'@': 180}), 24: (1, {'@': 180}), 63: (1, {'@': 180}), 36: (1, {'@': 180}), 25: (1, {'@': 180}), 106: (1, {'@': 180}), 27: (1, {'@': 180}), 29: (1, {'@': 180}), 31: (1, {'@': 180}), 32: (1, {'@': 180}), 33: (1, {'@': 180}), 34: (1, {'@': 180}), 35: (1, {'@': 180}), 26: (1, {'@': 180}), 28: (1, {'@': 180}), 30: (1, {'@': 180}), 47: (1, {'@': 180})}, 221: {11: (1, {'@': 181}), 2: (1, {'@': 181}), 13: (1, {'@': 181}), 27: (1, {'@': 181}), 15: (1, {'@': 181}), 29: (1, {'@': 181}), 31: (1, {'@': 181}), 32: (1, {'@': 181}), 21: (1, {'@': 181}), 23: (1, {'@': 181}), 33: (1, {'@': 181}), 34: (1, {'@': 181}), 35: (1, {'@': 181}), 24: (1, {'@': 181}), 106: (1, {'@': 181}), 26: (1, {'@': 181}), 14: (1, {'@': 181}), 16: (1, {'@': 181}), 28: (1, {'@': 181}), 17: (1, {'@': 181}), 30: (1, {'@': 181}), 60: (1, {'@': 181}), 20: (1, {'@': 181}), 63: (1, {'@': 181}), 36: (1, {'@': 181})}, 222: {106: (0, 375), 5: (0, 423)}, 223: {10: (0, 463), 6: (0, 34), 9: (0, 456)}, 224: {30: (0, 386)}, 225: {24: (0, 260)}, 226: {19: (0, 453), 77: (0, 69), 6: (0, 34), 10: (0, 104)}, 227: {11: (1, {'@': 182}), 2: (1, {'@': 182}), 13: (1, {'@': 182}), 15: (1, {'@': 182}), 19: (1, {'@': 182}), 90: (1, {'@': 182}), 86: (1, {'@': 182}), 21: (1, {'@': 182}), 23: (1, {'@': 182}), 24: (1, {'@': 182}), 12: (1, {'@': 182}), 80: (1, {'@': 182}), 73: (1, {'@': 182}), 14: (1, {'@': 182}), 6: (1, {'@': 182}), 16: (1, {'@': 182}), 17: (1, {'@': 182}), 18: (1, {'@': 182}), 30: (1, {'@': 182}), 20: (1, {'@': 182}), 3: (1, {'@': 182}), 22: (1, {'@': 182}), 5: (1, {'@': 182}), 25: (1, {'@': 182}), 88: (1, {'@': 182})}, 228: {22: (0, 105)}, 229: {12: (1, {'@': 183}), 11: (1, {'@': 183}), 2: (1, {'@': 183}), 13: (1, {'@': 183}), 14: (1, {'@': 183}), 15: (1, {'@': 183}), 6: (1, {'@': 183}), 16: (1, {'@': 183}), 17: (1, {'@': 183}), 18: (1, {'@': 183}), 19: (1, {'@': 183}), 60: (1, {'@': 183}), 107: (1, {'@': 183}), 20: (1, {'@': 183}), 3: (1, {'@': 183}), 62: (1, {'@': 183}), 22: (1, {'@': 183}), 21: (1, {'@': 183}), 23: (1, {'@': 183}), 5: (1, {'@': 183}), 24: (1, {'@': 183}), 63: (1, {'@': 183}), 36: (1, {'@': 183}), 25: (1, {'@': 183}), 106: (1, {'@': 183}), 27: (1, {'@': 183}), 29: (1, {'@': 183}), 31: (1, {'@': 183}), 32: (1, {'@': 183}), 33: (1, {'@': 183}), 34: (1, {'@': 183}), 35: (1, {'@': 183}), 26: (1, {'@': 183}), 28: (1, {'@': 183}), 30: (1, {'@': 183}), 47: (1, {'@': 183})}, 230: {22: (0, 439)}, 231: {16: (0, 111), 28: (0, 433), 29: (0, 176), 134: (0, 215)}, 232: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 70: (0, 298), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103)}, 233: {30: (0, 7)}, 234: {30: (0, 385)}, 235: {10: (0, 65), 6: (0, 34)}, 236: {19: (0, 453), 77: (0, 117)}, 237: {30: (0, 408)}, 238: {36: (0, 337)}, 239: {135: (0, 87), 136: (0, 64)}, 240: {19: (0, 453), 77: (0, 92)}, 241: {12: (1, {'@': 184}), 11: (1, {'@': 184}), 2: (1, {'@': 184}), 13: (1, {'@': 184}), 14: (1, {'@': 184}), 15: (1, {'@': 184}), 6: (1, {'@': 184}), 16: (1, {'@': 184}), 17: (1, {'@': 184}), 18: (1, {'@': 184}), 19: (1, {'@': 184}), 60: (1, {'@': 184}), 107: (1, {'@': 184}), 20: (1, {'@': 184}), 3: (1, {'@': 184}), 62: (1, {'@': 184}), 22: (1, {'@': 184}), 21: (1, {'@': 184}), 23: (1, {'@': 184}), 5: (1, {'@': 184}), 24: (1, {'@': 184}), 63: (1, {'@': 184}), 36: (1, {'@': 184}), 25: (1, {'@': 184}), 106: (1, {'@': 184}), 27: (1, {'@': 184}), 29: (1, {'@': 184}), 31: (1, {'@': 184}), 32: (1, {'@': 184}), 33: (1, {'@': 184}), 34: (1, {'@': 184}), 35: (1, {'@': 184}), 26: (1, {'@': 184}), 28: (1, {'@': 184}), 30: (1, {'@': 184}), 47: (1, {'@': 184})}, 242: {26: (0, 391)}, 243: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 70: (0, 481), 20: (0, 103)}, 244: {19: (0, 453), 77: (0, 112)}, 245: {12: (1, {'@': 185}), 11: (1, {'@': 185}), 2: (1, {'@': 185}), 13: (1, {'@': 185}), 14: (1, {'@': 185}), 15: (1, {'@': 185}), 6: (1, {'@': 185}), 16: (1, {'@': 185}), 17: (1, {'@': 185}), 18: (1, {'@': 185}), 19: (1, {'@': 185}), 60: (1, {'@': 185}), 107: (1, {'@': 185}), 20: (1, {'@': 185}), 3: (1, {'@': 185}), 62: (1, {'@': 185}), 22: (1, {'@': 185}), 21: (1, {'@': 185}), 23: (1, {'@': 185}), 5: (1, {'@': 185}), 24: (1, {'@': 185}), 63: (1, {'@': 185}), 36: (1, {'@': 185}), 25: (1, {'@': 185}), 106: (1, {'@': 185}), 27: (1, {'@': 185}), 29: (1, {'@': 185}), 31: (1, {'@': 185}), 32: (1, {'@': 185}), 33: (1, {'@': 185}), 34: (1, {'@': 185}), 35: (1, {'@': 185}), 26: (1, {'@': 185}), 28: (1, {'@': 185}), 30: (1, {'@': 185}), 47: (1, {'@': 185})}, 246: {30: (0, 362)}, 247: {29: (0, 248), 137: (0, 364), 30: (1, {'@': 186})}, 248: {7: (0, 228), 38: (0, 369), 40: (0, 428), 10: (0, 406), 37: (0, 415), 42: (0, 412), 43: (0, 372), 44: (0, 387), 0: (0, 378), 45: (0, 410), 4: (0, 393), 5: (0, 400), 6: (0, 34), 39: (0, 427), 2: (0, 254), 1: (0, 230), 41: (0, 262), 3: (0, 131), 110: (0, 352), 8: (0, 419)}, 249: {6: (0, 34), 10: (0, 233)}, 250: {10: (0, 216), 6: (0, 34)}, 251: {107: (0, 407), 11: (1, {'@': 187}), 60: (1, {'@': 187}), 2: (1, {'@': 187}), 20: (1, {'@': 187}), 62: (1, {'@': 187}), 13: (1, {'@': 187}), 14: (1, {'@': 187}), 21: (1, {'@': 187}), 15: (1, {'@': 187}), 23: (1, {'@': 187}), 24: (1, {'@': 187}), 63: (1, {'@': 187}), 16: (1, {'@': 187}), 17: (1, {'@': 187}), 36: (1, {'@': 187}), 106: (1, {'@': 187}), 26: (1, {'@': 187}), 27: (1, {'@': 187}), 28: (1, {'@': 187}), 29: (1, {'@': 187}), 30: (1, {'@': 187}), 31: (1, {'@': 187}), 32: (1, {'@': 187}), 33: (1, {'@': 187}), 34: (1, {'@': 187}), 35: (1, {'@': 187})}, 252: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 70: (0, 238), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103)}, 253: {138: (0, 359), 77: (0, 349), 19: (0, 453), 46: (0, 360)}, 254: {7: (0, 228), 5: (0, 400), 6: (0, 34), 2: (0, 254), 39: (0, 307), 10: (0, 426), 1: (0, 230), 41: (0, 262), 42: (0, 412), 0: (0, 378), 3: (0, 131), 4: (0, 393), 8: (0, 419)}, 255: {48: (1, {'@': 188}), 49: (1, {'@': 188}), 50: (1, {'@': 188}), 6: (1, {'@': 188}), 51: (1, {'@': 188}), 52: (1, {'@': 188}), 53: (1, {'@': 188}), 54: (1, {'@': 188}), 55: (1, {'@': 188}), 46: (1, {'@': 188})}, 256: {38: (0, 369), 19: (0, 453), 8: (0, 419), 40: (0, 428), 10: (0, 379), 37: (0, 332), 98: (0, 286), 42: (0, 412), 5: (0, 311), 43: (0, 372), 44: (0, 387), 0: (0, 378), 91: (0, 296), 92: (0, 40), 99: (0, 287), 45: (0, 410), 18: (0, 289), 4: (0, 393), 94: (0, 281), 93: (0, 312), 6: (0, 34), 100: (0, 269), 88: (0, 299), 39: (0, 427), 2: (0, 254), 101: (0, 294), 95: (0, 279), 1: (0, 230), 41: (0, 262), 96: (0, 301), 102: (0, 323), 97: (0, 272), 3: (0, 131), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 257: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 70: (0, 264), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 30: (0, 245), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103)}, 258: {6: (0, 34), 10: (0, 96)}, 259: {36: (0, 212), 48: (1, {'@': 189}), 49: (1, {'@': 189}), 50: (1, {'@': 189}), 6: (1, {'@': 189}), 51: (1, {'@': 189}), 52: (1, {'@': 189}), 53: (1, {'@': 189}), 54: (1, {'@': 189}), 55: (1, {'@': 189}), 46: (1, {'@': 189})}, 260: {24: (0, 302)}, 261: {10: (0, 463), 6: (0, 34), 9: (0, 75)}, 262: {2: (1, {'@': 190}), 46: (1, {'@': 190}), 27: (1, {'@': 190}), 15: (1, {'@': 190}), 49: (1, {'@': 190}), 6: (1, {'@': 190}), 28: (1, {'@': 190}), 52: (1, {'@': 190}), 30: (1, {'@': 190}), 57: (1, {'@': 190}), 48: (1, {'@': 190}), 60: (1, {'@': 190}), 62: (1, {'@': 190}), 32: (1, {'@': 190}), 21: (1, {'@': 190}), 50: (1, {'@': 190}), 63: (1, {'@': 190}), 56: (1, {'@': 190}), 51: (1, {'@': 190}), 53: (1, {'@': 190}), 54: (1, {'@': 190}), 47: (1, {'@': 190}), 55: (1, {'@': 190}), 11: (1, {'@': 190}), 59: (1, {'@': 190}), 14: (1, {'@': 190}), 61: (1, {'@': 190}), 23: (1, {'@': 190}), 24: (1, {'@': 190}), 64: (1, {'@': 190}), 29: (1, {'@': 190}), 36: (1, {'@': 190})}, 263: {36: (0, 20)}, 264: {30: (0, 421), 29: (0, 434)}, 265: {30: (0, 154)}, 266: {19: (0, 453), 77: (0, 451)}, 267: {19: (0, 453), 77: (0, 115)}, 268: {36: (0, 444), 28: (0, 472)}, 269: {6: (1, {'@': 191})}, 270: {60: (0, 70), 2: (1, {'@': 192}), 46: (1, {'@': 192}), 27: (1, {'@': 192}), 15: (1, {'@': 192}), 49: (1, {'@': 192}), 6: (1, {'@': 192}), 28: (1, {'@': 192}), 52: (1, {'@': 192}), 30: (1, {'@': 192}), 48: (1, {'@': 192}), 32: (1, {'@': 192}), 21: (1, {'@': 192}), 50: (1, {'@': 192}), 56: (1, {'@': 192}), 51: (1, {'@': 192}), 53: (1, {'@': 192}), 54: (1, {'@': 192}), 47: (1, {'@': 192}), 55: (1, {'@': 192}), 11: (1, {'@': 192}), 59: (1, {'@': 192}), 14: (1, {'@': 192}), 61: (1, {'@': 192}), 62: (1, {'@': 192}), 23: (1, {'@': 192}), 24: (1, {'@': 192}), 64: (1, {'@': 192}), 29: (1, {'@': 192}), 36: (1, {'@': 192})}, 271: {29: (1, {'@': 193}), 16: (1, {'@': 193}), 28: (1, {'@': 193}), 47: (1, {'@': 193}), 30: (1, {'@': 193}), 106: (1, {'@': 193})}, 272: {139: (0, 263), 104: (0, 336), 10: (0, 123), 6: (0, 34)}, 273: {140: (0, 276), 64: (0, 35), 24: (0, 58), 14: (0, 50), 46: (0, 36), 141: (0, 4), 23: (0, 22), 11: (0, 6), 61: (0, 45), 142: (0, 361), 62: (0, 321), 59: (0, 331), 56: (1, {'@': 194}), 47: (1, {'@': 194}), 15: (1, {'@': 194}), 21: (1, {'@': 194})}, 274: {46: (1, {'@': 195}), 27: (1, {'@': 195}), 15: (1, {'@': 195}), 49: (1, {'@': 195}), 6: (1, {'@': 195}), 28: (1, {'@': 195}), 52: (1, {'@': 195}), 30: (1, {'@': 195}), 48: (1, {'@': 195}), 32: (1, {'@': 195}), 21: (1, {'@': 195}), 50: (1, {'@': 195}), 56: (1, {'@': 195}), 51: (1, {'@': 195}), 53: (1, {'@': 195}), 54: (1, {'@': 195}), 47: (1, {'@': 195}), 55: (1, {'@': 195})}, 275: {11: (1, {'@': 196}), 2: (1, {'@': 196}), 13: (1, {'@': 196}), 27: (1, {'@': 196}), 15: (1, {'@': 196}), 29: (1, {'@': 196}), 31: (1, {'@': 196}), 32: (1, {'@': 196}), 21: (1, {'@': 196}), 23: (1, {'@': 196}), 33: (1, {'@': 196}), 34: (1, {'@': 196}), 35: (1, {'@': 196}), 24: (1, {'@': 196}), 106: (1, {'@': 196}), 26: (1, {'@': 196}), 14: (1, {'@': 196}), 16: (1, {'@': 196}), 28: (1, {'@': 196}), 17: (1, {'@': 196}), 30: (1, {'@': 196}), 60: (1, {'@': 196}), 20: (1, {'@': 196}), 36: (1, {'@': 196})}, 276: {7: (0, 228), 5: (0, 400), 6: (0, 34), 38: (0, 369), 39: (0, 427), 40: (0, 428), 2: (0, 254), 10: (0, 406), 37: (0, 342), 1: (0, 230), 41: (0, 262), 42: (0, 412), 43: (0, 372), 44: (0, 387), 0: (0, 378), 3: (0, 131), 45: (0, 410), 4: (0, 393), 8: (0, 419)}, 277: {12: (1, {'@': 197}), 11: (1, {'@': 197}), 2: (1, {'@': 197}), 13: (1, {'@': 197}), 14: (1, {'@': 197}), 15: (1, {'@': 197}), 6: (1, {'@': 197}), 16: (1, {'@': 197}), 17: (1, {'@': 197}), 18: (1, {'@': 197}), 19: (1, {'@': 197}), 60: (1, {'@': 197}), 107: (1, {'@': 197}), 20: (1, {'@': 197}), 3: (1, {'@': 197}), 62: (1, {'@': 197}), 22: (1, {'@': 197}), 21: (1, {'@': 197}), 23: (1, {'@': 197}), 5: (1, {'@': 197}), 24: (1, {'@': 197}), 63: (1, {'@': 197}), 36: (1, {'@': 197}), 25: (1, {'@': 197}), 106: (1, {'@': 197}), 27: (1, {'@': 197}), 29: (1, {'@': 197}), 31: (1, {'@': 197}), 32: (1, {'@': 197}), 33: (1, {'@': 197}), 34: (1, {'@': 197}), 35: (1, {'@': 197}), 26: (1, {'@': 197}), 28: (1, {'@': 197}), 30: (1, {'@': 197}), 47: (1, {'@': 197})}, 278: {30: (0, 461)}, 279: {6: (1, {'@': 198})}, 280: {12: (0, 460), 22: (0, 177), 6: (0, 34), 19: (0, 453), 25: (0, 152), 41: (0, 506), 10: (0, 168), 77: (0, 134), 69: (0, 148), 84: (0, 443), 78: (0, 199), 5: (0, 457), 85: (0, 170), 3: (0, 131), 18: (0, 174), 81: (0, 160)}, 281: {15: (0, 368), 56: (0, 334), 21: (0, 358), 46: (1, {'@': 199}), 27: (1, {'@': 199}), 49: (1, {'@': 199}), 6: (1, {'@': 199}), 28: (1, {'@': 199}), 52: (1, {'@': 199}), 30: (1, {'@': 199}), 48: (1, {'@': 199}), 32: (1, {'@': 199}), 50: (1, {'@': 199}), 51: (1, {'@': 199}), 53: (1, {'@': 199}), 54: (1, {'@': 199}), 47: (1, {'@': 199}), 55: (1, {'@': 199})}, 282: {12: (0, 460), 22: (0, 177), 6: (0, 34), 19: (0, 453), 69: (0, 477), 25: (0, 152), 41: (0, 506), 10: (0, 168), 77: (0, 134), 84: (0, 443), 78: (0, 199), 5: (0, 457), 85: (0, 170), 3: (0, 131), 18: (0, 174), 83: (0, 205), 81: (0, 160)}, 283: {11: (1, {'@': 200}), 2: (1, {'@': 200}), 27: (1, {'@': 200}), 15: (1, {'@': 200}), 49: (1, {'@': 200}), 29: (1, {'@': 200}), 52: (1, {'@': 200}), 32: (1, {'@': 200}), 21: (1, {'@': 200}), 23: (1, {'@': 200}), 24: (1, {'@': 200}), 56: (1, {'@': 200}), 51: (1, {'@': 200}), 54: (1, {'@': 200}), 47: (1, {'@': 200}), 64: (1, {'@': 200}), 59: (1, {'@': 200}), 46: (1, {'@': 200}), 14: (1, {'@': 200}), 6: (1, {'@': 200}), 28: (1, {'@': 200}), 30: (1, {'@': 200}), 48: (1, {'@': 200}), 60: (1, {'@': 200}), 61: (1, {'@': 200}), 62: (1, {'@': 200}), 50: (1, {'@': 200}), 63: (1, {'@': 200}), 36: (1, {'@': 200}), 53: (1, {'@': 200}), 55: (1, {'@': 200})}, 284: {29: (1, {'@': 201}), 30: (1, {'@': 201})}, 285: {29: (0, 227), 30: (0, 229)}, 286: {104: (0, 336), 10: (0, 123), 6: (0, 34), 139: (0, 339)}, 287: {46: (1, {'@': 202}), 27: (1, {'@': 202}), 15: (1, {'@': 202}), 49: (1, {'@': 202}), 6: (1, {'@': 202}), 28: (1, {'@': 202}), 52: (1, {'@': 202}), 30: (1, {'@': 202}), 48: (1, {'@': 202}), 32: (1, {'@': 202}), 21: (1, {'@': 202}), 50: (1, {'@': 202}), 56: (1, {'@': 202}), 51: (1, {'@': 202}), 53: (1, {'@': 202}), 54: (1, {'@': 202}), 47: (1, {'@': 202}), 55: (1, {'@': 202})}, 288: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 70: (0, 440), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103)}, 289: {46: (1, {'@': 203}), 27: (1, {'@': 203}), 15: (1, {'@': 203}), 49: (1, {'@': 203}), 6: (1, {'@': 203}), 28: (1, {'@': 203}), 52: (1, {'@': 203}), 30: (1, {'@': 203}), 48: (1, {'@': 203}), 32: (1, {'@': 203}), 21: (1, {'@': 203}), 50: (1, {'@': 203}), 56: (1, {'@': 203}), 51: (1, {'@': 203}), 53: (1, {'@': 203}), 54: (1, {'@': 203}), 47: (1, {'@': 203}), 55: (1, {'@': 203})}, 290: {29: (1, {'@': 143}), 16: (1, {'@': 143}), 28: (1, {'@': 143}), 47: (1, {'@': 143}), 30: (1, {'@': 143}), 106: (1, {'@': 143})}, 291: {30: (0, 468), 16: (0, 111), 29: (0, 470)}, 292: {5: (0, 400), 6: (0, 34), 39: (0, 427), 2: (0, 254), 8: (0, 419), 10: (0, 426), 1: (0, 230), 41: (0, 262), 42: (0, 412), 44: (0, 41), 0: (0, 378), 3: (0, 131), 4: (0, 393), 7: (0, 228)}, 293: {63: (0, 46), 11: (1, {'@': 204}), 60: (1, {'@': 204}), 2: (1, {'@': 204}), 20: (1, {'@': 204}), 13: (1, {'@': 204}), 14: (1, {'@': 204}), 21: (1, {'@': 204}), 15: (1, {'@': 204}), 23: (1, {'@': 204}), 24: (1, {'@': 204}), 16: (1, {'@': 204}), 17: (1, {'@': 204}), 36: (1, {'@': 204}), 106: (1, {'@': 204}), 26: (1, {'@': 204}), 27: (1, {'@': 204}), 28: (1, {'@': 204}), 29: (1, {'@': 204}), 30: (1, {'@': 204}), 31: (1, {'@': 204}), 32: (1, {'@': 204}), 33: (1, {'@': 204}), 34: (1, {'@': 204}), 35: (1, {'@': 204})}, 294: {46: (1, {'@': 205}), 27: (1, {'@': 205}), 15: (1, {'@': 205}), 49: (1, {'@': 205}), 6: (1, {'@': 205}), 28: (1, {'@': 205}), 52: (1, {'@': 205}), 30: (1, {'@': 205}), 48: (1, {'@': 205}), 32: (1, {'@': 205}), 21: (1, {'@': 205}), 50: (1, {'@': 205}), 56: (1, {'@': 205}), 51: (1, {'@': 205}), 53: (1, {'@': 205}), 54: (1, {'@': 205}), 47: (1, {'@': 205}), 55: (1, {'@': 205})}, 295: {46: (0, 319)}, 296: {6: (1, {'@': 206})}, 297: {12: (1, {'@': 207}), 11: (1, {'@': 207}), 2: (1, {'@': 207}), 13: (1, {'@': 207}), 14: (1, {'@': 207}), 15: (1, {'@': 207}), 6: (1, {'@': 207}), 16: (1, {'@': 207}), 17: (1, {'@': 207}), 18: (1, {'@': 207}), 19: (1, {'@': 207}), 60: (1, {'@': 207}), 107: (1, {'@': 207}), 20: (1, {'@': 207}), 3: (1, {'@': 207}), 62: (1, {'@': 207}), 22: (1, {'@': 207}), 21: (1, {'@': 207}), 23: (1, {'@': 207}), 5: (1, {'@': 207}), 24: (1, {'@': 207}), 63: (1, {'@': 207}), 36: (1, {'@': 207}), 25: (1, {'@': 207}), 106: (1, {'@': 207}), 27: (1, {'@': 207}), 29: (1, {'@': 207}), 31: (1, {'@': 207}), 32: (1, {'@': 207}), 33: (1, {'@': 207}), 34: (1, {'@': 207}), 35: (1, {'@': 207}), 26: (1, {'@': 207}), 28: (1, {'@': 207}), 30: (1, {'@': 207}), 47: (1, {'@': 207})}, 298: {36: (1, {'@': 208}), 26: (1, {'@': 208}), 27: (1, {'@': 208}), 28: (1, {'@': 208}), 29: (1, {'@': 208}), 30: (1, {'@': 208}), 31: (1, {'@': 208}), 32: (1, {'@': 208}), 33: (1, {'@': 208}), 34: (1, {'@': 208}), 35: (1, {'@': 208})}, 299: {38: (0, 369), 19: (0, 453), 8: (0, 419), 40: (0, 428), 10: (0, 379), 37: (0, 332), 42: (0, 412), 44: (0, 387), 91: (0, 296), 92: (0, 351), 45: (0, 410), 18: (0, 289), 4: (0, 393), 39: (0, 427), 93: (0, 312), 88: (0, 299), 94: (0, 281), 95: (0, 279), 1: (0, 230), 96: (0, 301), 97: (0, 272), 3: (0, 131), 98: (0, 286), 5: (0, 311), 43: (0, 372), 0: (0, 378), 99: (0, 287), 6: (0, 34), 2: (0, 254), 100: (0, 269), 101: (0, 294), 41: (0, 262), 102: (0, 323), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 300: {46: (1, {'@': 209}), 27: (1, {'@': 209}), 15: (1, {'@': 209}), 49: (1, {'@': 209}), 6: (1, {'@': 209}), 28: (1, {'@': 209}), 52: (1, {'@': 209}), 30: (1, {'@': 209}), 48: (1, {'@': 209}), 32: (1, {'@': 209}), 21: (1, {'@': 209}), 50: (1, {'@': 209}), 56: (1, {'@': 209}), 51: (1, {'@': 209}), 53: (1, {'@': 209}), 54: (1, {'@': 209}), 47: (1, {'@': 209}), 55: (1, {'@': 209})}, 301: {22: (0, 479)}, 302: {11: (0, 106)}, 303: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 70: (0, 66), 90: (0, 113), 20: (0, 103)}, 304: {46: (0, 220), 47: (0, 256)}, 305: {12: (0, 460), 19: (0, 453), 69: (0, 477), 41: (0, 506), 83: (0, 465), 84: (0, 443), 5: (0, 457), 85: (0, 170), 79: (0, 171), 22: (0, 177), 75: (0, 185), 6: (0, 34), 89: (0, 43), 25: (0, 152), 10: (0, 168), 77: (0, 134), 78: (0, 199), 3: (0, 131), 18: (0, 174), 81: (0, 160)}, 306: {33: (0, 30), 36: (1, {'@': 210}), 26: (1, {'@': 210}), 27: (1, {'@': 210}), 28: (1, {'@': 210}), 29: (1, {'@': 210}), 30: (1, {'@': 210}), 31: (1, {'@': 210}), 32: (1, {'@': 210}), 34: (1, {'@': 210}), 35: (1, {'@': 210})}, 307: {57: (0, 416), 2: (1, {'@': 211}), 46: (1, {'@': 211}), 27: (1, {'@': 211}), 15: (1, {'@': 211}), 49: (1, {'@': 211}), 6: (1, {'@': 211}), 28: (1, {'@': 211}), 52: (1, {'@': 211}), 30: (1, {'@': 211}), 48: (1, {'@': 211}), 60: (1, {'@': 211}), 62: (1, {'@': 211}), 32: (1, {'@': 211}), 21: (1, {'@': 211}), 50: (1, {'@': 211}), 63: (1, {'@': 211}), 56: (1, {'@': 211}), 51: (1, {'@': 211}), 53: (1, {'@': 211}), 54: (1, {'@': 211}), 47: (1, {'@': 211}), 55: (1, {'@': 211}), 11: (1, {'@': 211}), 59: (1, {'@': 211}), 14: (1, {'@': 211}), 61: (1, {'@': 211}), 23: (1, {'@': 211}), 24: (1, {'@': 211}), 64: (1, {'@': 211}), 29: (1, {'@': 211}), 36: (1, {'@': 211})}, 308: {28: (0, 356), 47: (0, 256)}, 309: {11: (1, {'@': 212}), 2: (1, {'@': 212}), 27: (1, {'@': 212}), 15: (1, {'@': 212}), 49: (1, {'@': 212}), 29: (1, {'@': 212}), 52: (1, {'@': 212}), 32: (1, {'@': 212}), 21: (1, {'@': 212}), 23: (1, {'@': 212}), 24: (1, {'@': 212}), 56: (1, {'@': 212}), 51: (1, {'@': 212}), 54: (1, {'@': 212}), 47: (1, {'@': 212}), 64: (1, {'@': 212}), 59: (1, {'@': 212}), 46: (1, {'@': 212}), 14: (1, {'@': 212}), 6: (1, {'@': 212}), 28: (1, {'@': 212}), 30: (1, {'@': 212}), 48: (1, {'@': 212}), 60: (1, {'@': 212}), 61: (1, {'@': 212}), 62: (1, {'@': 212}), 50: (1, {'@': 212}), 36: (1, {'@': 212}), 53: (1, {'@': 212}), 55: (1, {'@': 212})}, 310: {48: (1, {'@': 213}), 49: (1, {'@': 213}), 50: (1, {'@': 213}), 6: (1, {'@': 213}), 51: (1, {'@': 213}), 52: (1, {'@': 213}), 53: (1, {'@': 213}), 54: (1, {'@': 213}), 55: (1, {'@': 213}), 46: (1, {'@': 213})}, 311: {38: (0, 369), 19: (0, 453), 8: (0, 419), 40: (0, 428), 10: (0, 379), 45: (0, 315), 37: (0, 332), 42: (0, 412), 44: (0, 387), 91: (0, 296), 92: (0, 327), 18: (0, 289), 4: (0, 393), 39: (0, 427), 93: (0, 312), 88: (0, 299), 94: (0, 281), 95: (0, 279), 1: (0, 230), 96: (0, 301), 97: (0, 272), 3: (0, 131), 98: (0, 286), 5: (0, 311), 43: (0, 372), 0: (0, 378), 99: (0, 287), 6: (0, 34), 2: (0, 254), 100: (0, 269), 101: (0, 294), 41: (0, 262), 102: (0, 323), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 312: {46: (1, {'@': 214}), 27: (1, {'@': 214}), 15: (1, {'@': 214}), 49: (1, {'@': 214}), 6: (1, {'@': 214}), 28: (1, {'@': 214}), 52: (1, {'@': 214}), 30: (1, {'@': 214}), 48: (1, {'@': 214}), 32: (1, {'@': 214}), 21: (1, {'@': 214}), 50: (1, {'@': 214}), 56: (1, {'@': 214}), 51: (1, {'@': 214}), 53: (1, {'@': 214}), 54: (1, {'@': 214}), 47: (1, {'@': 214}), 55: (1, {'@': 214})}, 313: {29: (1, {'@': 215}), 28: (1, {'@': 215})}, 314: {32: (0, 435), 47: (0, 256), 46: (1, {'@': 216}), 27: (1, {'@': 216}), 49: (1, {'@': 216}), 6: (1, {'@': 216}), 28: (1, {'@': 216}), 52: (1, {'@': 216}), 30: (1, {'@': 216}), 48: (1, {'@': 216}), 50: (1, {'@': 216}), 51: (1, {'@': 216}), 53: (1, {'@': 216}), 54: (1, {'@': 216}), 55: (1, {'@': 216})}, 315: {30: (0, 395), 11: (1, {'@': 217}), 59: (1, {'@': 217}), 61: (1, {'@': 217}), 62: (1, {'@': 217}), 14: (1, {'@': 217}), 15: (1, {'@': 217}), 21: (1, {'@': 217}), 23: (1, {'@': 217}), 24: (1, {'@': 217}), 56: (1, {'@': 217}), 47: (1, {'@': 217}), 64: (1, {'@': 217})}, 316: {36: (0, 156)}, 317: {11: (1, {'@': 218}), 20: (1, {'@': 218}), 13: (1, {'@': 218}), 14: (1, {'@': 218}), 21: (1, {'@': 218}), 15: (1, {'@': 218}), 23: (1, {'@': 218}), 24: (1, {'@': 218}), 16: (1, {'@': 218}), 17: (1, {'@': 218}), 36: (1, {'@': 218}), 106: (1, {'@': 218}), 26: (1, {'@': 218}), 27: (1, {'@': 218}), 28: (1, {'@': 218}), 29: (1, {'@': 218}), 30: (1, {'@': 218}), 31: (1, {'@': 218}), 32: (1, {'@': 218}), 33: (1, {'@': 218}), 34: (1, {'@': 218}), 35: (1, {'@': 218})}, 318: {10: (0, 463), 6: (0, 34), 9: (0, 142)}, 319: {12: (1, {'@': 219}), 11: (1, {'@': 219}), 2: (1, {'@': 219}), 13: (1, {'@': 219}), 14: (1, {'@': 219}), 15: (1, {'@': 219}), 6: (1, {'@': 219}), 16: (1, {'@': 219}), 17: (1, {'@': 219}), 18: (1, {'@': 219}), 19: (1, {'@': 219}), 60: (1, {'@': 219}), 107: (1, {'@': 219}), 20: (1, {'@': 219}), 3: (1, {'@': 219}), 62: (1, {'@': 219}), 22: (1, {'@': 219}), 21: (1, {'@': 219}), 23: (1, {'@': 219}), 5: (1, {'@': 219}), 24: (1, {'@': 219}), 63: (1, {'@': 219}), 36: (1, {'@': 219}), 25: (1, {'@': 219}), 106: (1, {'@': 219}), 27: (1, {'@': 219}), 29: (1, {'@': 219}), 31: (1, {'@': 219}), 32: (1, {'@': 219}), 33: (1, {'@': 219}), 34: (1, {'@': 219}), 35: (1, {'@': 219}), 26: (1, {'@': 219}), 28: (1, {'@': 219}), 30: (1, {'@': 219}), 47: (1, {'@': 219})}, 320: {11: (1, {'@': 220}), 12: (1, {'@': 220}), 2: (1, {'@': 220}), 13: (1, {'@': 220}), 14: (1, {'@': 220}), 15: (1, {'@': 220}), 6: (1, {'@': 220}), 16: (1, {'@': 220}), 17: (1, {'@': 220}), 18: (1, {'@': 220}), 19: (1, {'@': 220}), 20: (1, {'@': 220}), 3: (1, {'@': 220}), 21: (1, {'@': 220}), 22: (1, {'@': 220}), 23: (1, {'@': 220}), 5: (1, {'@': 220}), 24: (1, {'@': 220}), 25: (1, {'@': 220}), 27: (1, {'@': 220}), 29: (1, {'@': 220}), 31: (1, {'@': 220}), 32: (1, {'@': 220}), 33: (1, {'@': 220}), 34: (1, {'@': 220}), 35: (1, {'@': 220}), 26: (1, {'@': 220}), 28: (1, {'@': 220}), 30: (1, {'@': 220}), 36: (1, {'@': 220})}, 321: {24: (0, 37)}, 322: {7: (0, 228), 5: (0, 400), 6: (0, 34), 2: (0, 254), 39: (0, 455), 10: (0, 426), 1: (0, 230), 41: (0, 262), 42: (0, 412), 0: (0, 378), 3: (0, 131), 4: (0, 393), 8: (0, 419)}, 323: {6: (1, {'@': 221})}, 324: {11: (1, {'@': 222}), 2: (1, {'@': 222}), 13: (1, {'@': 222}), 27: (1, {'@': 222}), 15: (1, {'@': 222}), 29: (1, {'@': 222}), 31: (1, {'@': 222}), 32: (1, {'@': 222}), 21: (1, {'@': 222}), 23: (1, {'@': 222}), 33: (1, {'@': 222}), 34: (1, {'@': 222}), 35: (1, {'@': 222}), 24: (1, {'@': 222}), 106: (1, {'@': 222}), 26: (1, {'@': 222}), 14: (1, {'@': 222}), 16: (1, {'@': 222}), 28: (1, {'@': 222}), 17: (1, {'@': 222}), 30: (1, {'@': 222}), 60: (1, {'@': 222}), 20: (1, {'@': 222}), 62: (1, {'@': 222}), 63: (1, {'@': 222}), 36: (1, {'@': 222})}, 325: {16: (0, 111), 29: (1, {'@': 223}), 28: (1, {'@': 223}), 47: (1, {'@': 223}), 30: (1, {'@': 223}), 106: (1, {'@': 223})}, 326: {11: (1, {'@': 224}), 12: (1, {'@': 224}), 2: (1, {'@': 224}), 13: (1, {'@': 224}), 14: (1, {'@': 224}), 15: (1, {'@': 224}), 6: (1, {'@': 224}), 16: (1, {'@': 224}), 17: (1, {'@': 224}), 18: (1, {'@': 224}), 19: (1, {'@': 224}), 20: (1, {'@': 224}), 3: (1, {'@': 224}), 21: (1, {'@': 224}), 22: (1, {'@': 224}), 23: (1, {'@': 224}), 5: (1, {'@': 224}), 24: (1, {'@': 224}), 25: (1, {'@': 224}), 27: (1, {'@': 224}), 29: (1, {'@': 224}), 31: (1, {'@': 224}), 32: (1, {'@': 224}), 33: (1, {'@': 224}), 34: (1, {'@': 224}), 35: (1, {'@': 224}), 26: (1, {'@': 224}), 28: (1, {'@': 224}), 30: (1, {'@': 224}), 36: (1, {'@': 224})}, 327: {30: (0, 300), 47: (0, 256)}, 328: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 70: (0, 25), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103)}, 329: {5: (0, 447), 2: (1, {'@': 225}), 46: (1, {'@': 225}), 27: (1, {'@': 225}), 15: (1, {'@': 225}), 49: (1, {'@': 225}), 6: (1, {'@': 225}), 28: (1, {'@': 225}), 52: (1, {'@': 225}), 30: (1, {'@': 225}), 57: (1, {'@': 225}), 48: (1, {'@': 225}), 60: (1, {'@': 225}), 62: (1, {'@': 225}), 32: (1, {'@': 225}), 21: (1, {'@': 225}), 50: (1, {'@': 225}), 63: (1, {'@': 225}), 56: (1, {'@': 225}), 51: (1, {'@': 225}), 53: (1, {'@': 225}), 54: (1, {'@': 225}), 47: (1, {'@': 225}), 55: (1, {'@': 225}), 11: (1, {'@': 225}), 59: (1, {'@': 225}), 14: (1, {'@': 225}), 61: (1, {'@': 225}), 23: (1, {'@': 225}), 24: (1, {'@': 225}), 64: (1, {'@': 225}), 29: (1, {'@': 225}), 36: (1, {'@': 225})}, 330: {46: (1, {'@': 226}), 27: (1, {'@': 226}), 15: (1, {'@': 226}), 49: (1, {'@': 226}), 6: (1, {'@': 226}), 28: (1, {'@': 226}), 52: (1, {'@': 226}), 30: (1, {'@': 226}), 48: (1, {'@': 226}), 32: (1, {'@': 226}), 21: (1, {'@': 226}), 50: (1, {'@': 226}), 56: (1, {'@': 226}), 51: (1, {'@': 226}), 53: (1, {'@': 226}), 54: (1, {'@': 226}), 47: (1, {'@': 226}), 55: (1, {'@': 226})}, 331: {0: (1, {'@': 227}), 1: (1, {'@': 227}), 2: (1, {'@': 227}), 3: (1, {'@': 227}), 4: (1, {'@': 227}), 5: (1, {'@': 227}), 6: (1, {'@': 227}), 7: (1, {'@': 227}), 8: (1, {'@': 227})}, 332: {140: (0, 276), 64: (0, 35), 24: (0, 58), 14: (0, 50), 141: (0, 4), 23: (0, 22), 11: (0, 6), 61: (0, 45), 142: (0, 361), 62: (0, 321), 59: (0, 331), 46: (1, {'@': 194}), 27: (1, {'@': 194}), 15: (1, {'@': 194}), 49: (1, {'@': 194}), 6: (1, {'@': 194}), 28: (1, {'@': 194}), 52: (1, {'@': 194}), 30: (1, {'@': 194}), 48: (1, {'@': 194}), 32: (1, {'@': 194}), 21: (1, {'@': 194}), 50: (1, {'@': 194}), 56: (1, {'@': 194}), 51: (1, {'@': 194}), 53: (1, {'@': 194}), 54: (1, {'@': 194}), 47: (1, {'@': 194}), 55: (1, {'@': 194})}, 333: {38: (0, 369), 19: (0, 453), 8: (0, 419), 40: (0, 428), 10: (0, 379), 37: (0, 332), 42: (0, 412), 5: (0, 311), 43: (0, 372), 44: (0, 387), 0: (0, 378), 99: (0, 287), 45: (0, 410), 18: (0, 289), 4: (0, 393), 94: (0, 98), 6: (0, 34), 93: (0, 312), 39: (0, 427), 2: (0, 254), 101: (0, 294), 1: (0, 230), 41: (0, 262), 96: (0, 301), 3: (0, 131), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 334: {38: (0, 369), 19: (0, 453), 8: (0, 419), 40: (0, 428), 10: (0, 379), 37: (0, 332), 98: (0, 286), 42: (0, 412), 5: (0, 311), 43: (0, 372), 44: (0, 387), 0: (0, 378), 91: (0, 296), 92: (0, 31), 99: (0, 287), 45: (0, 410), 18: (0, 289), 4: (0, 393), 94: (0, 281), 93: (0, 312), 6: (0, 34), 100: (0, 269), 88: (0, 299), 39: (0, 427), 2: (0, 254), 101: (0, 294), 95: (0, 279), 1: (0, 230), 41: (0, 262), 96: (0, 301), 102: (0, 323), 97: (0, 272), 3: (0, 131), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 335: {11: (0, 350), 17: (0, 68), 23: (0, 326), 16: (0, 159), 13: (0, 320), 15: (0, 346), 24: (0, 93), 21: (0, 348), 71: (0, 3), 14: (0, 347), 20: (0, 103), 12: (1, {'@': 228}), 2: (1, {'@': 228}), 3: (1, {'@': 228}), 22: (1, {'@': 228}), 5: (1, {'@': 228}), 6: (1, {'@': 228}), 25: (1, {'@': 228}), 18: (1, {'@': 228}), 19: (1, {'@': 228}), 26: (1, {'@': 228}), 27: (1, {'@': 228}), 28: (1, {'@': 228}), 29: (1, {'@': 228}), 30: (1, {'@': 228}), 31: (1, {'@': 228}), 32: (1, {'@': 228}), 33: (1, {'@': 228}), 34: (1, {'@': 228}), 35: (1, {'@': 228}), 36: (1, {'@': 228})}, 336: {57: (0, 218), 36: (1, {'@': 229})}, 337: {48: (1, {'@': 230}), 49: (1, {'@': 230}), 50: (1, {'@': 230}), 6: (1, {'@': 230}), 51: (1, {'@': 230}), 52: (1, {'@': 230}), 53: (1, {'@': 230}), 54: (1, {'@': 230}), 55: (1, {'@': 230}), 46: (1, {'@': 230})}, 338: {10: (0, 123), 104: (0, 466), 6: (0, 34)}, 339: {36: (0, 191)}, 340: {11: (0, 350), 17: (0, 68), 23: (0, 326), 16: (0, 159), 24: (0, 93), 21: (0, 348), 14: (0, 347), 71: (0, 343), 87: (0, 44), 74: (0, 335), 13: (0, 320), 15: (0, 346), 20: (0, 103), 36: (1, {'@': 231}), 26: (1, {'@': 231}), 27: (1, {'@': 231}), 28: (1, {'@': 231}), 29: (1, {'@': 231}), 30: (1, {'@': 231}), 31: (1, {'@': 231}), 32: (1, {'@': 231}), 33: (1, {'@': 231}), 34: (1, {'@': 231}), 35: (1, {'@': 231})}, 341: {7: (0, 228), 38: (0, 369), 40: (0, 428), 10: (0, 406), 37: (0, 415), 42: (0, 412), 43: (0, 372), 44: (0, 387), 0: (0, 378), 110: (0, 284), 45: (0, 410), 4: (0, 393), 5: (0, 400), 6: (0, 34), 39: (0, 427), 2: (0, 254), 1: (0, 230), 41: (0, 262), 3: (0, 131), 8: (0, 419)}, 342: {46: (1, {'@': 232}), 27: (1, {'@': 232}), 15: (1, {'@': 232}), 49: (1, {'@': 232}), 6: (1, {'@': 232}), 28: (1, {'@': 232}), 52: (1, {'@': 232}), 30: (1, {'@': 232}), 48: (1, {'@': 232}), 32: (1, {'@': 232}), 21: (1, {'@': 232}), 50: (1, {'@': 232}), 56: (1, {'@': 232}), 51: (1, {'@': 232}), 53: (1, {'@': 232}), 54: (1, {'@': 232}), 47: (1, {'@': 232}), 55: (1, {'@': 232})}, 343: {11: (1, {'@': 233}), 12: (1, {'@': 233}), 2: (1, {'@': 233}), 13: (1, {'@': 233}), 14: (1, {'@': 233}), 15: (1, {'@': 233}), 6: (1, {'@': 233}), 16: (1, {'@': 233}), 17: (1, {'@': 233}), 18: (1, {'@': 233}), 19: (1, {'@': 233}), 20: (1, {'@': 233}), 3: (1, {'@': 233}), 21: (1, {'@': 233}), 22: (1, {'@': 233}), 23: (1, {'@': 233}), 5: (1, {'@': 233}), 24: (1, {'@': 233}), 25: (1, {'@': 233}), 26: (1, {'@': 233}), 27: (1, {'@': 233}), 28: (1, {'@': 233}), 29: (1, {'@': 233}), 30: (1, {'@': 233}), 31: (1, {'@': 233}), 32: (1, {'@': 233}), 33: (1, {'@': 233}), 34: (1, {'@': 233}), 35: (1, {'@': 233}), 36: (1, {'@': 233})}, 344: {11: (1, {'@': 234}), 2: (1, {'@': 234}), 27: (1, {'@': 234}), 15: (1, {'@': 234}), 49: (1, {'@': 234}), 29: (1, {'@': 234}), 52: (1, {'@': 234}), 32: (1, {'@': 234}), 21: (1, {'@': 234}), 23: (1, {'@': 234}), 24: (1, {'@': 234}), 56: (1, {'@': 234}), 51: (1, {'@': 234}), 54: (1, {'@': 234}), 47: (1, {'@': 234}), 64: (1, {'@': 234}), 59: (1, {'@': 234}), 46: (1, {'@': 234}), 14: (1, {'@': 234}), 6: (1, {'@': 234}), 28: (1, {'@': 234}), 30: (1, {'@': 234}), 48: (1, {'@': 234}), 60: (1, {'@': 234}), 61: (1, {'@': 234}), 62: (1, {'@': 234}), 50: (1, {'@': 234}), 36: (1, {'@': 234}), 53: (1, {'@': 234}), 55: (1, {'@': 234})}, 345: {92: (0, 473), 38: (0, 369), 19: (0, 453), 8: (0, 419), 40: (0, 428), 10: (0, 379), 37: (0, 332), 98: (0, 286), 42: (0, 412), 5: (0, 311), 43: (0, 372), 44: (0, 387), 0: (0, 378), 91: (0, 296), 99: (0, 287), 45: (0, 410), 18: (0, 289), 4: (0, 393), 94: (0, 281), 93: (0, 312), 6: (0, 34), 100: (0, 269), 88: (0, 299), 39: (0, 427), 2: (0, 254), 101: (0, 294), 95: (0, 279), 1: (0, 230), 41: (0, 262), 96: (0, 301), 102: (0, 323), 97: (0, 272), 3: (0, 131), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 346: {11: (1, {'@': 235}), 12: (1, {'@': 235}), 2: (1, {'@': 235}), 13: (1, {'@': 235}), 14: (1, {'@': 235}), 15: (1, {'@': 235}), 6: (1, {'@': 235}), 16: (1, {'@': 235}), 17: (1, {'@': 235}), 18: (1, {'@': 235}), 19: (1, {'@': 235}), 20: (1, {'@': 235}), 3: (1, {'@': 235}), 21: (1, {'@': 235}), 22: (1, {'@': 235}), 23: (1, {'@': 235}), 5: (1, {'@': 235}), 24: (1, {'@': 235}), 25: (1, {'@': 235}), 27: (1, {'@': 235}), 29: (1, {'@': 235}), 31: (1, {'@': 235}), 32: (1, {'@': 235}), 33: (1, {'@': 235}), 34: (1, {'@': 235}), 35: (1, {'@': 235}), 26: (1, {'@': 235}), 28: (1, {'@': 235}), 30: (1, {'@': 235}), 36: (1, {'@': 235})}, 347: {11: (1, {'@': 236}), 12: (1, {'@': 236}), 2: (1, {'@': 236}), 13: (1, {'@': 236}), 14: (1, {'@': 236}), 15: (1, {'@': 236}), 6: (1, {'@': 236}), 16: (1, {'@': 236}), 17: (1, {'@': 236}), 18: (1, {'@': 236}), 19: (1, {'@': 236}), 20: (1, {'@': 236}), 3: (1, {'@': 236}), 21: (1, {'@': 236}), 22: (1, {'@': 236}), 23: (1, {'@': 236}), 5: (1, {'@': 236}), 24: (1, {'@': 236}), 25: (1, {'@': 236}), 27: (1, {'@': 236}), 29: (1, {'@': 236}), 31: (1, {'@': 236}), 32: (1, {'@': 236}), 33: (1, {'@': 236}), 34: (1, {'@': 236}), 35: (1, {'@': 236}), 26: (1, {'@': 236}), 28: (1, {'@': 236}), 30: (1, {'@': 236}), 36: (1, {'@': 236})}, 348: {11: (1, {'@': 237}), 12: (1, {'@': 237}), 2: (1, {'@': 237}), 13: (1, {'@': 237}), 14: (1, {'@': 237}), 15: (1, {'@': 237}), 6: (1, {'@': 237}), 16: (1, {'@': 237}), 17: (1, {'@': 237}), 18: (1, {'@': 237}), 19: (1, {'@': 237}), 20: (1, {'@': 237}), 3: (1, {'@': 237}), 21: (1, {'@': 237}), 22: (1, {'@': 237}), 23: (1, {'@': 237}), 5: (1, {'@': 237}), 24: (1, {'@': 237}), 25: (1, {'@': 237}), 27: (1, {'@': 237}), 29: (1, {'@': 237}), 31: (1, {'@': 237}), 32: (1, {'@': 237}), 33: (1, {'@': 237}), 34: (1, {'@': 237}), 35: (1, {'@': 237}), 26: (1, {'@': 237}), 28: (1, {'@': 237}), 30: (1, {'@': 237}), 36: (1, {'@': 237})}, 349: {16: (0, 449)}, 350: {11: (1, {'@': 238}), 12: (1, {'@': 238}), 2: (1, {'@': 238}), 13: (1, {'@': 238}), 14: (1, {'@': 238}), 15: (1, {'@': 238}), 6: (1, {'@': 238}), 16: (1, {'@': 238}), 17: (1, {'@': 238}), 18: (1, {'@': 238}), 19: (1, {'@': 238}), 20: (1, {'@': 238}), 3: (1, {'@': 238}), 21: (1, {'@': 238}), 22: (1, {'@': 238}), 23: (1, {'@': 238}), 5: (1, {'@': 238}), 24: (1, {'@': 238}), 25: (1, {'@': 238}), 27: (1, {'@': 238}), 29: (1, {'@': 238}), 31: (1, {'@': 238}), 32: (1, {'@': 238}), 33: (1, {'@': 238}), 34: (1, {'@': 238}), 35: (1, {'@': 238}), 26: (1, {'@': 238}), 28: (1, {'@': 238}), 30: (1, {'@': 238}), 36: (1, {'@': 238})}, 351: {27: (0, 18), 47: (0, 256)}, 352: {29: (1, {'@': 239}), 30: (1, {'@': 239})}, 353: {22: (0, 482)}, 354: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 70: (0, 242), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103)}, 355: {2: (0, 63), 11: (1, {'@': 240}), 20: (1, {'@': 240}), 13: (1, {'@': 240}), 14: (1, {'@': 240}), 21: (1, {'@': 240}), 15: (1, {'@': 240}), 23: (1, {'@': 240}), 24: (1, {'@': 240}), 16: (1, {'@': 240}), 17: (1, {'@': 240}), 36: (1, {'@': 240}), 106: (1, {'@': 240}), 26: (1, {'@': 240}), 27: (1, {'@': 240}), 28: (1, {'@': 240}), 29: (1, {'@': 240}), 30: (1, {'@': 240}), 31: (1, {'@': 240}), 32: (1, {'@': 240}), 33: (1, {'@': 240}), 34: (1, {'@': 240}), 35: (1, {'@': 240})}, 356: {2: (1, {'@': 241}), 46: (1, {'@': 241}), 27: (1, {'@': 241}), 15: (1, {'@': 241}), 49: (1, {'@': 241}), 6: (1, {'@': 241}), 28: (1, {'@': 241}), 52: (1, {'@': 241}), 30: (1, {'@': 241}), 57: (1, {'@': 241}), 48: (1, {'@': 241}), 60: (1, {'@': 241}), 62: (1, {'@': 241}), 32: (1, {'@': 241}), 21: (1, {'@': 241}), 50: (1, {'@': 241}), 63: (1, {'@': 241}), 56: (1, {'@': 241}), 51: (1, {'@': 241}), 53: (1, {'@': 241}), 54: (1, {'@': 241}), 47: (1, {'@': 241}), 55: (1, {'@': 241}), 11: (1, {'@': 241}), 59: (1, {'@': 241}), 14: (1, {'@': 241}), 61: (1, {'@': 241}), 23: (1, {'@': 241}), 24: (1, {'@': 241}), 64: (1, {'@': 241}), 29: (1, {'@': 241}), 36: (1, {'@': 241})}, 357: {22: (0, 177), 6: (0, 34), 19: (0, 453), 111: (0, 133), 81: (0, 209), 5: (0, 182), 10: (0, 153), 25: (0, 207), 3: (0, 131), 41: (0, 478), 77: (0, 490)}, 358: {38: (0, 369), 19: (0, 453), 8: (0, 419), 92: (0, 42), 40: (0, 428), 10: (0, 379), 37: (0, 332), 98: (0, 286), 42: (0, 412), 5: (0, 311), 43: (0, 372), 44: (0, 387), 0: (0, 378), 91: (0, 296), 99: (0, 287), 45: (0, 410), 18: (0, 289), 4: (0, 393), 94: (0, 281), 93: (0, 312), 6: (0, 34), 100: (0, 269), 88: (0, 299), 39: (0, 427), 2: (0, 254), 101: (0, 294), 95: (0, 279), 1: (0, 230), 41: (0, 262), 96: (0, 301), 102: (0, 323), 97: (0, 272), 3: (0, 131), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 359: {143: (0, 464), 46: (0, 462), 29: (0, 469)}, 360: {46: (1, {'@': 242}), 49: (1, {'@': 242}), 6: (1, {'@': 242}), 52: (1, {'@': 242}), 48: (1, {'@': 242}), 50: (1, {'@': 242}), 51: (1, {'@': 242}), 36: (1, {'@': 242}), 53: (1, {'@': 242}), 54: (1, {'@': 242}), 55: (1, {'@': 242})}, 361: {7: (0, 228), 5: (0, 400), 6: (0, 34), 38: (0, 369), 39: (0, 427), 40: (0, 428), 2: (0, 254), 10: (0, 406), 1: (0, 230), 41: (0, 262), 42: (0, 412), 43: (0, 372), 44: (0, 387), 0: (0, 378), 3: (0, 131), 37: (0, 57), 45: (0, 410), 4: (0, 393), 8: (0, 419)}, 362: {30: (1, {'@': 243}), 108: (1, {'@': 243}), 29: (1, {'@': 243})}, 363: {5: (0, 400), 6: (0, 34), 38: (0, 369), 39: (0, 427), 45: (0, 268), 40: (0, 428), 2: (0, 254), 8: (0, 419), 10: (0, 426), 1: (0, 230), 41: (0, 262), 42: (0, 412), 43: (0, 372), 44: (0, 387), 0: (0, 378), 3: (0, 131), 4: (0, 393), 7: (0, 228)}, 364: {29: (0, 341), 30: (1, {'@': 244})}, 365: {5: (0, 135)}, 366: {10: (0, 102), 6: (0, 34)}, 367: {12: (0, 460), 22: (0, 177), 6: (0, 34), 19: (0, 453), 25: (0, 152), 41: (0, 506), 10: (0, 168), 77: (0, 134), 84: (0, 443), 78: (0, 199), 5: (0, 457), 85: (0, 277), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (1, {'@': 245}), 2: (1, {'@': 245}), 13: (1, {'@': 245}), 27: (1, {'@': 245}), 15: (1, {'@': 245}), 29: (1, {'@': 245}), 31: (1, {'@': 245}), 107: (1, {'@': 245}), 32: (1, {'@': 245}), 21: (1, {'@': 245}), 23: (1, {'@': 245}), 33: (1, {'@': 245}), 34: (1, {'@': 245}), 35: (1, {'@': 245}), 24: (1, {'@': 245}), 106: (1, {'@': 245}), 26: (1, {'@': 245}), 14: (1, {'@': 245}), 16: (1, {'@': 245}), 28: (1, {'@': 245}), 17: (1, {'@': 245}), 30: (1, {'@': 245}), 60: (1, {'@': 245}), 20: (1, {'@': 245}), 62: (1, {'@': 245}), 63: (1, {'@': 245}), 36: (1, {'@': 245})}, 368: {38: (0, 369), 19: (0, 453), 92: (0, 377), 8: (0, 419), 40: (0, 428), 10: (0, 379), 37: (0, 332), 98: (0, 286), 42: (0, 412), 5: (0, 311), 43: (0, 372), 44: (0, 387), 0: (0, 378), 91: (0, 296), 99: (0, 287), 45: (0, 410), 18: (0, 289), 4: (0, 393), 94: (0, 281), 93: (0, 312), 6: (0, 34), 100: (0, 269), 88: (0, 299), 39: (0, 427), 2: (0, 254), 101: (0, 294), 95: (0, 279), 1: (0, 230), 41: (0, 262), 96: (0, 301), 102: (0, 323), 97: (0, 272), 3: (0, 131), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 369: {144: (0, 270), 60: (0, 411), 2: (1, {'@': 246}), 46: (1, {'@': 246}), 27: (1, {'@': 246}), 15: (1, {'@': 246}), 49: (1, {'@': 246}), 6: (1, {'@': 246}), 28: (1, {'@': 246}), 52: (1, {'@': 246}), 30: (1, {'@': 246}), 48: (1, {'@': 246}), 32: (1, {'@': 246}), 21: (1, {'@': 246}), 50: (1, {'@': 246}), 56: (1, {'@': 246}), 51: (1, {'@': 246}), 53: (1, {'@': 246}), 54: (1, {'@': 246}), 47: (1, {'@': 246}), 55: (1, {'@': 246}), 11: (1, {'@': 246}), 59: (1, {'@': 246}), 14: (1, {'@': 246}), 61: (1, {'@': 246}), 62: (1, {'@': 246}), 23: (1, {'@': 246}), 24: (1, {'@': 246}), 64: (1, {'@': 246}), 29: (1, {'@': 246}), 36: (1, {'@': 246})}, 370: {30: (0, 255)}, 371: {19: (0, 453), 138: (0, 169), 77: (0, 349)}, 372: {46: (1, {'@': 247}), 27: (1, {'@': 247}), 15: (1, {'@': 247}), 49: (1, {'@': 247}), 6: (1, {'@': 247}), 28: (1, {'@': 247}), 52: (1, {'@': 247}), 30: (1, {'@': 247}), 48: (1, {'@': 247}), 32: (1, {'@': 247}), 21: (1, {'@': 247}), 50: (1, {'@': 247}), 56: (1, {'@': 247}), 51: (1, {'@': 247}), 53: (1, {'@': 247}), 54: (1, {'@': 247}), 47: (1, {'@': 247}), 55: (1, {'@': 247}), 11: (1, {'@': 247}), 59: (1, {'@': 247}), 14: (1, {'@': 247}), 61: (1, {'@': 247}), 62: (1, {'@': 247}), 23: (1, {'@': 247}), 24: (1, {'@': 247}), 64: (1, {'@': 247}), 29: (1, {'@': 247}), 36: (1, {'@': 247})}, 373: {36: (1, {'@': 248}), 26: (1, {'@': 248}), 27: (1, {'@': 248}), 28: (1, {'@': 248}), 29: (1, {'@': 248}), 30: (1, {'@': 248}), 31: (1, {'@': 248}), 32: (1, {'@': 248}), 33: (1, {'@': 248}), 34: (1, {'@': 248}), 35: (1, {'@': 248})}, 374: {46: (1, {'@': 249}), 49: (1, {'@': 249}), 6: (1, {'@': 249}), 52: (1, {'@': 249}), 48: (1, {'@': 249}), 50: (1, {'@': 249}), 51: (1, {'@': 249}), 36: (1, {'@': 249}), 53: (1, {'@': 249}), 54: (1, {'@': 249}), 55: (1, {'@': 249})}, 375: {38: (0, 369), 19: (0, 453), 8: (0, 419), 92: (0, 109), 40: (0, 428), 10: (0, 379), 37: (0, 332), 98: (0, 286), 42: (0, 412), 5: (0, 311), 43: (0, 372), 44: (0, 387), 0: (0, 378), 91: (0, 296), 99: (0, 287), 45: (0, 410), 18: (0, 289), 4: (0, 393), 94: (0, 281), 93: (0, 312), 6: (0, 34), 100: (0, 269), 88: (0, 299), 39: (0, 427), 2: (0, 254), 101: (0, 294), 95: (0, 279), 1: (0, 230), 41: (0, 262), 96: (0, 301), 102: (0, 323), 97: (0, 272), 3: (0, 131), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 376: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 70: (0, 141), 20: (0, 103), 36: (1, {'@': 250}), 26: (1, {'@': 250}), 27: (1, {'@': 250}), 28: (1, {'@': 250}), 29: (1, {'@': 250}), 30: (1, {'@': 250}), 31: (1, {'@': 250}), 32: (1, {'@': 250}), 33: (1, {'@': 250}), 34: (1, {'@': 250}), 35: (1, {'@': 250})}, 377: {47: (0, 256), 46: (1, {'@': 251}), 27: (1, {'@': 251}), 49: (1, {'@': 251}), 6: (1, {'@': 251}), 28: (1, {'@': 251}), 52: (1, {'@': 251}), 30: (1, {'@': 251}), 48: (1, {'@': 251}), 32: (1, {'@': 251}), 50: (1, {'@': 251}), 51: (1, {'@': 251}), 53: (1, {'@': 251}), 54: (1, {'@': 251}), 55: (1, {'@': 251})}, 378: {22: (0, 432)}, 379: {25: (0, 363), 34: (0, 401), 5: (0, 383), 58: (0, 28), 11: (1, {'@': 87}), 59: (1, {'@': 87}), 2: (1, {'@': 87}), 46: (1, {'@': 87}), 27: (1, {'@': 87}), 14: (1, {'@': 87}), 15: (1, {'@': 87}), 49: (1, {'@': 87}), 6: (1, {'@': 87}), 28: (1, {'@': 87}), 52: (1, {'@': 87}), 30: (1, {'@': 87}), 57: (1, {'@': 87}), 48: (1, {'@': 87}), 60: (1, {'@': 87}), 61: (1, {'@': 87}), 62: (1, {'@': 87}), 32: (1, {'@': 87}), 21: (1, {'@': 87}), 23: (1, {'@': 87}), 50: (1, {'@': 87}), 24: (1, {'@': 87}), 63: (1, {'@': 87}), 56: (1, {'@': 87}), 51: (1, {'@': 87}), 53: (1, {'@': 87}), 54: (1, {'@': 87}), 47: (1, {'@': 87}), 55: (1, {'@': 87}), 64: (1, {'@': 87})}, 380: {48: (1, {'@': 252}), 49: (1, {'@': 252}), 50: (1, {'@': 252}), 6: (1, {'@': 252}), 51: (1, {'@': 252}), 52: (1, {'@': 252}), 53: (1, {'@': 252}), 54: (1, {'@': 252}), 55: (1, {'@': 252}), 46: (1, {'@': 252})}, 381: {12: (1, {'@': 253}), 11: (1, {'@': 253}), 2: (1, {'@': 253}), 13: (1, {'@': 253}), 14: (1, {'@': 253}), 15: (1, {'@': 253}), 6: (1, {'@': 253}), 16: (1, {'@': 253}), 17: (1, {'@': 253}), 18: (1, {'@': 253}), 19: (1, {'@': 253}), 60: (1, {'@': 253}), 107: (1, {'@': 253}), 20: (1, {'@': 253}), 3: (1, {'@': 253}), 62: (1, {'@': 253}), 22: (1, {'@': 253}), 21: (1, {'@': 253}), 23: (1, {'@': 253}), 5: (1, {'@': 253}), 24: (1, {'@': 253}), 63: (1, {'@': 253}), 36: (1, {'@': 253}), 25: (1, {'@': 253}), 106: (1, {'@': 253}), 27: (1, {'@': 253}), 29: (1, {'@': 253}), 31: (1, {'@': 253}), 32: (1, {'@': 253}), 33: (1, {'@': 253}), 34: (1, {'@': 253}), 35: (1, {'@': 253}), 26: (1, {'@': 253}), 28: (1, {'@': 253}), 30: (1, {'@': 253}), 47: (1, {'@': 253})}, 382: {19: (0, 453), 41: (0, 192), 77: (0, 186), 3: (0, 131)}, 383: {38: (0, 369), 8: (0, 419), 40: (0, 428), 10: (0, 406), 37: (0, 415), 42: (0, 412), 43: (0, 372), 44: (0, 387), 0: (0, 378), 45: (0, 410), 4: (0, 393), 5: (0, 400), 6: (0, 34), 109: (0, 278), 39: (0, 427), 2: (0, 254), 1: (0, 230), 110: (0, 247), 41: (0, 262), 3: (0, 131), 7: (0, 228), 30: (1, {'@': 105})}, 384: {10: (0, 101), 6: (0, 34)}, 385: {30: (1, {'@': 254}), 108: (1, {'@': 254}), 29: (1, {'@': 254})}, 386: {106: (0, 345)}, 387: {63: (0, 146), 145: (0, 394), 2: (1, {'@': 255}), 46: (1, {'@': 255}), 27: (1, {'@': 255}), 15: (1, {'@': 255}), 49: (1, {'@': 255}), 6: (1, {'@': 255}), 28: (1, {'@': 255}), 52: (1, {'@': 255}), 30: (1, {'@': 255}), 48: (1, {'@': 255}), 60: (1, {'@': 255}), 32: (1, {'@': 255}), 21: (1, {'@': 255}), 50: (1, {'@': 255}), 56: (1, {'@': 255}), 51: (1, {'@': 255}), 53: (1, {'@': 255}), 54: (1, {'@': 255}), 47: (1, {'@': 255}), 55: (1, {'@': 255}), 11: (1, {'@': 255}), 59: (1, {'@': 255}), 14: (1, {'@': 255}), 61: (1, {'@': 255}), 62: (1, {'@': 255}), 23: (1, {'@': 255}), 24: (1, {'@': 255}), 64: (1, {'@': 255}), 29: (1, {'@': 255}), 36: (1, {'@': 255})}, 388: {62: (0, 322), 2: (1, {'@': 256}), 46: (1, {'@': 256}), 27: (1, {'@': 256}), 15: (1, {'@': 256}), 49: (1, {'@': 256}), 6: (1, {'@': 256}), 28: (1, {'@': 256}), 52: (1, {'@': 256}), 30: (1, {'@': 256}), 48: (1, {'@': 256}), 60: (1, {'@': 256}), 32: (1, {'@': 256}), 21: (1, {'@': 256}), 50: (1, {'@': 256}), 63: (1, {'@': 256}), 56: (1, {'@': 256}), 51: (1, {'@': 256}), 53: (1, {'@': 256}), 54: (1, {'@': 256}), 47: (1, {'@': 256}), 55: (1, {'@': 256}), 11: (1, {'@': 256}), 59: (1, {'@': 256}), 14: (1, {'@': 256}), 61: (1, {'@': 256}), 23: (1, {'@': 256}), 24: (1, {'@': 256}), 64: (1, {'@': 256}), 29: (1, {'@': 256}), 36: (1, {'@': 256})}, 389: {46: (1, {'@': 257}), 27: (1, {'@': 257}), 15: (1, {'@': 257}), 49: (1, {'@': 257}), 6: (1, {'@': 257}), 28: (1, {'@': 257}), 52: (1, {'@': 257}), 30: (1, {'@': 257}), 48: (1, {'@': 257}), 32: (1, {'@': 257}), 21: (1, {'@': 257}), 50: (1, {'@': 257}), 56: (1, {'@': 257}), 51: (1, {'@': 257}), 53: (1, {'@': 257}), 54: (1, {'@': 257}), 47: (1, {'@': 257}), 55: (1, {'@': 257})}, 390: {30: (0, 475)}, 391: {146: (0, 195), 132: (0, 82), 35: (0, 88)}, 392: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 70: (0, 178), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103)}, 393: {25: (0, 396)}, 394: {63: (0, 292), 2: (1, {'@': 258}), 46: (1, {'@': 258}), 27: (1, {'@': 258}), 15: (1, {'@': 258}), 49: (1, {'@': 258}), 6: (1, {'@': 258}), 28: (1, {'@': 258}), 52: (1, {'@': 258}), 30: (1, {'@': 258}), 48: (1, {'@': 258}), 60: (1, {'@': 258}), 32: (1, {'@': 258}), 21: (1, {'@': 258}), 50: (1, {'@': 258}), 56: (1, {'@': 258}), 51: (1, {'@': 258}), 53: (1, {'@': 258}), 54: (1, {'@': 258}), 47: (1, {'@': 258}), 55: (1, {'@': 258}), 11: (1, {'@': 258}), 59: (1, {'@': 258}), 14: (1, {'@': 258}), 61: (1, {'@': 258}), 62: (1, {'@': 258}), 23: (1, {'@': 258}), 24: (1, {'@': 258}), 64: (1, {'@': 258}), 29: (1, {'@': 258}), 36: (1, {'@': 258})}, 395: {2: (1, {'@': 259}), 46: (1, {'@': 259}), 27: (1, {'@': 259}), 15: (1, {'@': 259}), 49: (1, {'@': 259}), 6: (1, {'@': 259}), 28: (1, {'@': 259}), 52: (1, {'@': 259}), 30: (1, {'@': 259}), 57: (1, {'@': 259}), 48: (1, {'@': 259}), 60: (1, {'@': 259}), 62: (1, {'@': 259}), 32: (1, {'@': 259}), 21: (1, {'@': 259}), 50: (1, {'@': 259}), 63: (1, {'@': 259}), 56: (1, {'@': 259}), 51: (1, {'@': 259}), 53: (1, {'@': 259}), 54: (1, {'@': 259}), 47: (1, {'@': 259}), 55: (1, {'@': 259}), 11: (1, {'@': 259}), 59: (1, {'@': 259}), 14: (1, {'@': 259}), 61: (1, {'@': 259}), 23: (1, {'@': 259}), 24: (1, {'@': 259}), 64: (1, {'@': 259}), 29: (1, {'@': 259}), 36: (1, {'@': 259})}, 396: {38: (0, 369), 19: (0, 453), 8: (0, 419), 40: (0, 428), 10: (0, 379), 37: (0, 332), 98: (0, 286), 42: (0, 412), 5: (0, 311), 43: (0, 372), 44: (0, 387), 0: (0, 378), 91: (0, 296), 92: (0, 308), 99: (0, 287), 45: (0, 410), 18: (0, 289), 4: (0, 393), 94: (0, 281), 93: (0, 312), 6: (0, 34), 100: (0, 269), 88: (0, 299), 39: (0, 427), 2: (0, 254), 101: (0, 294), 95: (0, 279), 1: (0, 230), 41: (0, 262), 96: (0, 301), 102: (0, 323), 97: (0, 272), 3: (0, 131), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 397: {19: (0, 453), 77: (0, 370)}, 398: {48: (1, {'@': 260}), 49: (1, {'@': 260}), 50: (1, {'@': 260}), 6: (1, {'@': 260}), 51: (1, {'@': 260}), 52: (1, {'@': 260}), 53: (1, {'@': 260}), 54: (1, {'@': 260}), 55: (1, {'@': 260}), 46: (1, {'@': 260})}, 399: {104: (0, 234), 10: (0, 123), 6: (0, 34)}, 400: {5: (0, 400), 6: (0, 34), 38: (0, 369), 39: (0, 427), 40: (0, 428), 2: (0, 254), 8: (0, 419), 10: (0, 426), 1: (0, 230), 41: (0, 262), 45: (0, 420), 42: (0, 412), 43: (0, 372), 44: (0, 387), 0: (0, 378), 3: (0, 131), 4: (0, 393), 7: (0, 228)}, 401: {22: (0, 338)}, 402: {19: (0, 453), 77: (0, 91)}, 403: {7: (0, 228), 5: (0, 400), 6: (0, 34), 2: (0, 254), 39: (0, 442), 10: (0, 426), 1: (0, 230), 41: (0, 262), 42: (0, 412), 0: (0, 378), 3: (0, 131), 4: (0, 393), 8: (0, 419)}, 404: {57: (1, {'@': 261}), 46: (1, {'@': 261}), 36: (1, {'@': 261}), 29: (1, {'@': 261}), 30: (1, {'@': 261})}, 405: {47: (0, 256), 46: (0, 183)}, 406: {25: (0, 363), 5: (0, 383), 2: (1, {'@': 87}), 46: (1, {'@': 87}), 27: (1, {'@': 87}), 15: (1, {'@': 87}), 49: (1, {'@': 87}), 6: (1, {'@': 87}), 28: (1, {'@': 87}), 52: (1, {'@': 87}), 30: (1, {'@': 87}), 57: (1, {'@': 87}), 48: (1, {'@': 87}), 60: (1, {'@': 87}), 62: (1, {'@': 87}), 32: (1, {'@': 87}), 21: (1, {'@': 87}), 50: (1, {'@': 87}), 63: (1, {'@': 87}), 56: (1, {'@': 87}), 51: (1, {'@': 87}), 53: (1, {'@': 87}), 54: (1, {'@': 87}), 47: (1, {'@': 87}), 55: (1, {'@': 87}), 29: (1, {'@': 87})}, 407: {12: (0, 460), 22: (0, 177), 6: (0, 34), 19: (0, 453), 25: (0, 152), 41: (0, 506), 10: (0, 168), 77: (0, 134), 69: (0, 367), 84: (0, 443), 78: (0, 199), 5: (0, 457), 85: (0, 170), 3: (0, 131), 18: (0, 174), 81: (0, 160)}, 408: {36: (1, {'@': 262})}, 409: {5: (0, 400), 6: (0, 34), 38: (0, 369), 39: (0, 427), 2: (0, 254), 8: (0, 419), 40: (0, 188), 10: (0, 426), 1: (0, 230), 41: (0, 262), 42: (0, 412), 44: (0, 387), 0: (0, 378), 3: (0, 131), 4: (0, 393), 7: (0, 228)}, 410: {46: (1, {'@': 217}), 27: (1, {'@': 217}), 15: (1, {'@': 217}), 49: (1, {'@': 217}), 6: (1, {'@': 217}), 28: (1, {'@': 217}), 52: (1, {'@': 217}), 30: (1, {'@': 217}), 48: (1, {'@': 217}), 32: (1, {'@': 217}), 21: (1, {'@': 217}), 50: (1, {'@': 217}), 56: (1, {'@': 217}), 51: (1, {'@': 217}), 53: (1, {'@': 217}), 54: (1, {'@': 217}), 47: (1, {'@': 217}), 55: (1, {'@': 217}), 11: (1, {'@': 217}), 59: (1, {'@': 217}), 14: (1, {'@': 217}), 61: (1, {'@': 217}), 62: (1, {'@': 217}), 23: (1, {'@': 217}), 24: (1, {'@': 217}), 64: (1, {'@': 217}), 29: (1, {'@': 217})}, 411: {5: (0, 400), 6: (0, 34), 39: (0, 427), 2: (0, 254), 8: (0, 419), 38: (0, 309), 10: (0, 426), 1: (0, 230), 41: (0, 262), 42: (0, 412), 44: (0, 387), 0: (0, 378), 3: (0, 131), 4: (0, 393), 7: (0, 228)}, 412: {2: (1, {'@': 263}), 46: (1, {'@': 263}), 27: (1, {'@': 263}), 15: (1, {'@': 263}), 49: (1, {'@': 263}), 6: (1, {'@': 263}), 28: (1, {'@': 263}), 52: (1, {'@': 263}), 30: (1, {'@': 263}), 57: (1, {'@': 263}), 48: (1, {'@': 263}), 60: (1, {'@': 263}), 62: (1, {'@': 263}), 32: (1, {'@': 263}), 21: (1, {'@': 263}), 50: (1, {'@': 263}), 63: (1, {'@': 263}), 56: (1, {'@': 263}), 51: (1, {'@': 263}), 53: (1, {'@': 263}), 54: (1, {'@': 263}), 47: (1, {'@': 263}), 55: (1, {'@': 263}), 11: (1, {'@': 263}), 59: (1, {'@': 263}), 14: (1, {'@': 263}), 61: (1, {'@': 263}), 23: (1, {'@': 263}), 24: (1, {'@': 263}), 64: (1, {'@': 263}), 29: (1, {'@': 263}), 36: (1, {'@': 263})}, 413: {16: (0, 111), 29: (1, {'@': 264}), 28: (1, {'@': 264})}, 414: {30: (0, 189)}, 415: {29: (1, {'@': 265}), 30: (1, {'@': 265})}, 416: {58: (0, 120), 6: (0, 34), 10: (0, 329)}, 417: {10: (0, 95), 6: (0, 34)}, 418: {28: (0, 180)}, 419: {22: (0, 500)}, 420: {30: (0, 395)}, 421: {12: (1, {'@': 266}), 11: (1, {'@': 266}), 2: (1, {'@': 266}), 13: (1, {'@': 266}), 14: (1, {'@': 266}), 15: (1, {'@': 266}), 6: (1, {'@': 266}), 16: (1, {'@': 266}), 17: (1, {'@': 266}), 18: (1, {'@': 266}), 19: (1, {'@': 266}), 60: (1, {'@': 266}), 107: (1, {'@': 266}), 20: (1, {'@': 266}), 3: (1, {'@': 266}), 62: (1, {'@': 266}), 22: (1, {'@': 266}), 21: (1, {'@': 266}), 23: (1, {'@': 266}), 5: (1, {'@': 266}), 24: (1, {'@': 266}), 63: (1, {'@': 266}), 36: (1, {'@': 266}), 25: (1, {'@': 266}), 106: (1, {'@': 266}), 27: (1, {'@': 266}), 29: (1, {'@': 266}), 31: (1, {'@': 266}), 32: (1, {'@': 266}), 33: (1, {'@': 266}), 34: (1, {'@': 266}), 35: (1, {'@': 266}), 26: (1, {'@': 266}), 28: (1, {'@': 266}), 30: (1, {'@': 266}), 47: (1, {'@': 266})}, 422: {46: (0, 162)}, 423: {38: (0, 369), 8: (0, 419), 40: (0, 428), 10: (0, 406), 37: (0, 415), 42: (0, 412), 43: (0, 372), 44: (0, 387), 0: (0, 378), 45: (0, 410), 4: (0, 393), 5: (0, 400), 6: (0, 34), 39: (0, 427), 2: (0, 254), 1: (0, 230), 110: (0, 247), 41: (0, 262), 3: (0, 131), 109: (0, 119), 7: (0, 228), 30: (1, {'@': 105})}, 424: {36: (1, {'@': 267}), 26: (1, {'@': 267}), 27: (1, {'@': 267}), 28: (1, {'@': 267}), 29: (1, {'@': 267}), 30: (1, {'@': 267}), 31: (1, {'@': 267}), 32: (1, {'@': 267}), 33: (1, {'@': 267}), 34: (1, {'@': 267}), 35: (1, {'@': 267})}, 425: {11: (1, {'@': 268}), 2: (1, {'@': 268}), 27: (1, {'@': 268}), 15: (1, {'@': 268}), 49: (1, {'@': 268}), 29: (1, {'@': 268}), 52: (1, {'@': 268}), 32: (1, {'@': 268}), 21: (1, {'@': 268}), 23: (1, {'@': 268}), 24: (1, {'@': 268}), 56: (1, {'@': 268}), 51: (1, {'@': 268}), 54: (1, {'@': 268}), 47: (1, {'@': 268}), 64: (1, {'@': 268}), 59: (1, {'@': 268}), 46: (1, {'@': 268}), 14: (1, {'@': 268}), 6: (1, {'@': 268}), 28: (1, {'@': 268}), 30: (1, {'@': 268}), 48: (1, {'@': 268}), 61: (1, {'@': 268}), 62: (1, {'@': 268}), 50: (1, {'@': 268}), 36: (1, {'@': 268}), 53: (1, {'@': 268}), 55: (1, {'@': 268})}, 426: {5: (0, 383), 11: (1, {'@': 87}), 2: (1, {'@': 87}), 27: (1, {'@': 87}), 15: (1, {'@': 87}), 49: (1, {'@': 87}), 29: (1, {'@': 87}), 52: (1, {'@': 87}), 32: (1, {'@': 87}), 21: (1, {'@': 87}), 23: (1, {'@': 87}), 24: (1, {'@': 87}), 56: (1, {'@': 87}), 51: (1, {'@': 87}), 54: (1, {'@': 87}), 47: (1, {'@': 87}), 64: (1, {'@': 87}), 59: (1, {'@': 87}), 46: (1, {'@': 87}), 14: (1, {'@': 87}), 6: (1, {'@': 87}), 28: (1, {'@': 87}), 30: (1, {'@': 87}), 57: (1, {'@': 87}), 48: (1, {'@': 87}), 60: (1, {'@': 87}), 61: (1, {'@': 87}), 62: (1, {'@': 87}), 50: (1, {'@': 87}), 63: (1, {'@': 87}), 36: (1, {'@': 87}), 53: (1, {'@': 87}), 55: (1, {'@': 87})}, 427: {62: (0, 403), 147: (0, 388), 57: (0, 416), 2: (1, {'@': 269}), 46: (1, {'@': 269}), 27: (1, {'@': 269}), 15: (1, {'@': 269}), 49: (1, {'@': 269}), 6: (1, {'@': 269}), 28: (1, {'@': 269}), 52: (1, {'@': 269}), 30: (1, {'@': 269}), 48: (1, {'@': 269}), 60: (1, {'@': 269}), 32: (1, {'@': 269}), 21: (1, {'@': 269}), 50: (1, {'@': 269}), 63: (1, {'@': 269}), 56: (1, {'@': 269}), 51: (1, {'@': 269}), 53: (1, {'@': 269}), 54: (1, {'@': 269}), 47: (1, {'@': 269}), 55: (1, {'@': 269}), 11: (1, {'@': 269}), 59: (1, {'@': 269}), 14: (1, {'@': 269}), 61: (1, {'@': 269}), 23: (1, {'@': 269}), 24: (1, {'@': 269}), 64: (1, {'@': 269}), 29: (1, {'@': 269}), 36: (1, {'@': 269})}, 428: {148: (0, 493), 2: (0, 409), 46: (1, {'@': 270}), 27: (1, {'@': 270}), 15: (1, {'@': 270}), 49: (1, {'@': 270}), 6: (1, {'@': 270}), 28: (1, {'@': 270}), 52: (1, {'@': 270}), 30: (1, {'@': 270}), 48: (1, {'@': 270}), 32: (1, {'@': 270}), 21: (1, {'@': 270}), 50: (1, {'@': 270}), 56: (1, {'@': 270}), 51: (1, {'@': 270}), 53: (1, {'@': 270}), 54: (1, {'@': 270}), 47: (1, {'@': 270}), 55: (1, {'@': 270}), 11: (1, {'@': 270}), 59: (1, {'@': 270}), 14: (1, {'@': 270}), 61: (1, {'@': 270}), 62: (1, {'@': 270}), 23: (1, {'@': 270}), 24: (1, {'@': 270}), 64: (1, {'@': 270}), 29: (1, {'@': 270}), 36: (1, {'@': 270})}, 429: {10: (0, 100), 6: (0, 34)}, 430: {48: (1, {'@': 271}), 49: (1, {'@': 271}), 50: (1, {'@': 271}), 6: (1, {'@': 271}), 51: (1, {'@': 271}), 52: (1, {'@': 271}), 53: (1, {'@': 271}), 54: (1, {'@': 271}), 55: (1, {'@': 271}), 46: (1, {'@': 271})}, 431: {30: (0, 166)}, 432: {10: (0, 8), 6: (0, 34)}, 433: {29: (1, {'@': 272}), 16: (1, {'@': 272}), 28: (1, {'@': 272}), 47: (1, {'@': 272}), 30: (1, {'@': 272}), 106: (1, {'@': 272})}, 434: {11: (1, {'@': 273}), 2: (1, {'@': 273}), 13: (1, {'@': 273}), 15: (1, {'@': 273}), 19: (1, {'@': 273}), 90: (1, {'@': 273}), 86: (1, {'@': 273}), 21: (1, {'@': 273}), 23: (1, {'@': 273}), 24: (1, {'@': 273}), 12: (1, {'@': 273}), 80: (1, {'@': 273}), 73: (1, {'@': 273}), 14: (1, {'@': 273}), 6: (1, {'@': 273}), 16: (1, {'@': 273}), 17: (1, {'@': 273}), 18: (1, {'@': 273}), 30: (1, {'@': 273}), 20: (1, {'@': 273}), 3: (1, {'@': 273}), 22: (1, {'@': 273}), 5: (1, {'@': 273}), 25: (1, {'@': 273}), 88: (1, {'@': 273})}, 435: {38: (0, 369), 19: (0, 453), 8: (0, 419), 40: (0, 428), 10: (0, 379), 37: (0, 332), 98: (0, 286), 42: (0, 412), 5: (0, 311), 43: (0, 372), 44: (0, 387), 0: (0, 378), 91: (0, 296), 92: (0, 165), 99: (0, 287), 45: (0, 410), 18: (0, 289), 4: (0, 393), 94: (0, 281), 93: (0, 312), 6: (0, 34), 100: (0, 269), 88: (0, 299), 39: (0, 427), 2: (0, 254), 101: (0, 294), 95: (0, 279), 1: (0, 230), 41: (0, 262), 96: (0, 301), 102: (0, 323), 97: (0, 272), 3: (0, 131), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 436: {36: (0, 206)}, 437: {48: (1, {'@': 274}), 49: (1, {'@': 274}), 50: (1, {'@': 274}), 6: (1, {'@': 274}), 51: (1, {'@': 274}), 52: (1, {'@': 274}), 53: (1, {'@': 274}), 54: (1, {'@': 274}), 55: (1, {'@': 274}), 46: (1, {'@': 274})}, 438: {29: (1, {'@': 275}), 16: (1, {'@': 275}), 28: (1, {'@': 275}), 47: (1, {'@': 275}), 30: (1, {'@': 275}), 106: (1, {'@': 275})}, 439: {10: (0, 474), 6: (0, 34)}, 440: {29: (1, {'@': 276}), 28: (1, {'@': 276})}, 441: {46: (0, 143), 47: (0, 256)}, 442: {57: (0, 416), 11: (1, {'@': 277}), 2: (1, {'@': 277}), 27: (1, {'@': 277}), 15: (1, {'@': 277}), 49: (1, {'@': 277}), 29: (1, {'@': 277}), 52: (1, {'@': 277}), 32: (1, {'@': 277}), 21: (1, {'@': 277}), 23: (1, {'@': 277}), 24: (1, {'@': 277}), 56: (1, {'@': 277}), 51: (1, {'@': 277}), 54: (1, {'@': 277}), 47: (1, {'@': 277}), 64: (1, {'@': 277}), 59: (1, {'@': 277}), 46: (1, {'@': 277}), 14: (1, {'@': 277}), 6: (1, {'@': 277}), 28: (1, {'@': 277}), 30: (1, {'@': 277}), 48: (1, {'@': 277}), 60: (1, {'@': 277}), 61: (1, {'@': 277}), 62: (1, {'@': 277}), 50: (1, {'@': 277}), 63: (1, {'@': 277}), 36: (1, {'@': 277}), 53: (1, {'@': 277}), 55: (1, {'@': 277})}, 443: {12: (1, {'@': 278}), 11: (1, {'@': 278}), 2: (1, {'@': 278}), 13: (1, {'@': 278}), 14: (1, {'@': 278}), 15: (1, {'@': 278}), 6: (1, {'@': 278}), 16: (1, {'@': 278}), 17: (1, {'@': 278}), 18: (1, {'@': 278}), 19: (1, {'@': 278}), 60: (1, {'@': 278}), 107: (1, {'@': 278}), 20: (1, {'@': 278}), 3: (1, {'@': 278}), 62: (1, {'@': 278}), 22: (1, {'@': 278}), 21: (1, {'@': 278}), 23: (1, {'@': 278}), 5: (1, {'@': 278}), 24: (1, {'@': 278}), 63: (1, {'@': 278}), 36: (1, {'@': 278}), 25: (1, {'@': 278}), 106: (1, {'@': 278}), 27: (1, {'@': 278}), 29: (1, {'@': 278}), 31: (1, {'@': 278}), 32: (1, {'@': 278}), 33: (1, {'@': 278}), 34: (1, {'@': 278}), 35: (1, {'@': 278}), 26: (1, {'@': 278}), 28: (1, {'@': 278}), 30: (1, {'@': 278}), 47: (1, {'@': 278})}, 444: {36: (0, 496)}, 445: {5: (0, 49), 2: (1, {'@': 279}), 46: (1, {'@': 279}), 27: (1, {'@': 279}), 15: (1, {'@': 279}), 49: (1, {'@': 279}), 6: (1, {'@': 279}), 28: (1, {'@': 279}), 52: (1, {'@': 279}), 30: (1, {'@': 279}), 57: (1, {'@': 279}), 48: (1, {'@': 279}), 60: (1, {'@': 279}), 62: (1, {'@': 279}), 32: (1, {'@': 279}), 21: (1, {'@': 279}), 50: (1, {'@': 279}), 63: (1, {'@': 279}), 56: (1, {'@': 279}), 51: (1, {'@': 279}), 53: (1, {'@': 279}), 54: (1, {'@': 279}), 47: (1, {'@': 279}), 55: (1, {'@': 279}), 11: (1, {'@': 279}), 59: (1, {'@': 279}), 14: (1, {'@': 279}), 61: (1, {'@': 279}), 23: (1, {'@': 279}), 24: (1, {'@': 279}), 64: (1, {'@': 279}), 29: (1, {'@': 279}), 36: (1, {'@': 279})}, 446: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 70: (0, 424), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103)}, 447: {38: (0, 369), 8: (0, 419), 40: (0, 428), 10: (0, 406), 37: (0, 415), 42: (0, 412), 43: (0, 372), 44: (0, 387), 0: (0, 378), 109: (0, 265), 45: (0, 410), 4: (0, 393), 5: (0, 400), 6: (0, 34), 39: (0, 427), 2: (0, 254), 1: (0, 230), 110: (0, 247), 41: (0, 262), 3: (0, 131), 7: (0, 228), 30: (1, {'@': 105})}, 448: {38: (0, 369), 19: (0, 453), 8: (0, 419), 40: (0, 428), 10: (0, 379), 37: (0, 332), 98: (0, 286), 42: (0, 412), 5: (0, 311), 43: (0, 372), 44: (0, 387), 0: (0, 378), 91: (0, 296), 92: (0, 441), 99: (0, 287), 45: (0, 410), 18: (0, 289), 4: (0, 393), 94: (0, 281), 93: (0, 312), 6: (0, 34), 100: (0, 269), 88: (0, 299), 39: (0, 427), 2: (0, 254), 101: (0, 294), 95: (0, 279), 1: (0, 230), 41: (0, 262), 96: (0, 301), 102: (0, 323), 97: (0, 272), 3: (0, 131), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 449: {10: (0, 365), 6: (0, 34)}, 450: {62: (0, 179), 11: (1, {'@': 280}), 60: (1, {'@': 280}), 2: (1, {'@': 280}), 20: (1, {'@': 280}), 13: (1, {'@': 280}), 14: (1, {'@': 280}), 21: (1, {'@': 280}), 15: (1, {'@': 280}), 23: (1, {'@': 280}), 24: (1, {'@': 280}), 63: (1, {'@': 280}), 16: (1, {'@': 280}), 17: (1, {'@': 280}), 36: (1, {'@': 280}), 106: (1, {'@': 280}), 26: (1, {'@': 280}), 27: (1, {'@': 280}), 28: (1, {'@': 280}), 29: (1, {'@': 280}), 30: (1, {'@': 280}), 31: (1, {'@': 280}), 32: (1, {'@': 280}), 33: (1, {'@': 280}), 34: (1, {'@': 280}), 35: (1, {'@': 280})}, 451: {29: (0, 397)}, 452: {29: (1, {'@': 281}), 30: (1, {'@': 281})}, 453: {12: (1, {'@': 282}), 11: (1, {'@': 282}), 2: (1, {'@': 282}), 13: (1, {'@': 282}), 14: (1, {'@': 282}), 15: (1, {'@': 282}), 6: (1, {'@': 282}), 16: (1, {'@': 282}), 17: (1, {'@': 282}), 18: (1, {'@': 282}), 19: (1, {'@': 282}), 60: (1, {'@': 282}), 107: (1, {'@': 282}), 20: (1, {'@': 282}), 3: (1, {'@': 282}), 62: (1, {'@': 282}), 22: (1, {'@': 282}), 21: (1, {'@': 282}), 23: (1, {'@': 282}), 5: (1, {'@': 282}), 24: (1, {'@': 282}), 63: (1, {'@': 282}), 36: (1, {'@': 282}), 25: (1, {'@': 282}), 46: (1, {'@': 282}), 27: (1, {'@': 282}), 49: (1, {'@': 282}), 28: (1, {'@': 282}), 52: (1, {'@': 282}), 30: (1, {'@': 282}), 48: (1, {'@': 282}), 32: (1, {'@': 282}), 50: (1, {'@': 282}), 56: (1, {'@': 282}), 51: (1, {'@': 282}), 53: (1, {'@': 282}), 54: (1, {'@': 282}), 47: (1, {'@': 282}), 55: (1, {'@': 282}), 106: (1, {'@': 282}), 29: (1, {'@': 282}), 31: (1, {'@': 282}), 33: (1, {'@': 282}), 34: (1, {'@': 282}), 35: (1, {'@': 282}), 26: (1, {'@': 282})}, 454: {34: (0, 507)}, 455: {57: (0, 416), 11: (1, {'@': 283}), 2: (1, {'@': 283}), 27: (1, {'@': 283}), 15: (1, {'@': 283}), 49: (1, {'@': 283}), 29: (1, {'@': 283}), 52: (1, {'@': 283}), 32: (1, {'@': 283}), 21: (1, {'@': 283}), 23: (1, {'@': 283}), 24: (1, {'@': 283}), 56: (1, {'@': 283}), 51: (1, {'@': 283}), 54: (1, {'@': 283}), 47: (1, {'@': 283}), 64: (1, {'@': 283}), 59: (1, {'@': 283}), 46: (1, {'@': 283}), 14: (1, {'@': 283}), 6: (1, {'@': 283}), 28: (1, {'@': 283}), 30: (1, {'@': 283}), 48: (1, {'@': 283}), 60: (1, {'@': 283}), 61: (1, {'@': 283}), 62: (1, {'@': 283}), 50: (1, {'@': 283}), 63: (1, {'@': 283}), 36: (1, {'@': 283}), 53: (1, {'@': 283}), 55: (1, {'@': 283})}, 456: {29: (0, 471)}, 457: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 149: (0, 257), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 70: (0, 285), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103)}, 458: {22: (0, 177), 6: (0, 34), 19: (0, 453), 111: (0, 325), 81: (0, 209), 5: (0, 182), 10: (0, 290), 25: (0, 207), 3: (0, 131), 41: (0, 478), 77: (0, 490)}, 459: {108: (0, 175)}, 460: {12: (1, {'@': 284}), 11: (1, {'@': 284}), 2: (1, {'@': 284}), 13: (1, {'@': 284}), 14: (1, {'@': 284}), 15: (1, {'@': 284}), 6: (1, {'@': 284}), 16: (1, {'@': 284}), 17: (1, {'@': 284}), 18: (1, {'@': 284}), 19: (1, {'@': 284}), 60: (1, {'@': 284}), 107: (1, {'@': 284}), 20: (1, {'@': 284}), 3: (1, {'@': 284}), 62: (1, {'@': 284}), 22: (1, {'@': 284}), 21: (1, {'@': 284}), 23: (1, {'@': 284}), 5: (1, {'@': 284}), 24: (1, {'@': 284}), 63: (1, {'@': 284}), 36: (1, {'@': 284}), 25: (1, {'@': 284}), 106: (1, {'@': 284}), 27: (1, {'@': 284}), 29: (1, {'@': 284}), 31: (1, {'@': 284}), 32: (1, {'@': 284}), 33: (1, {'@': 284}), 34: (1, {'@': 284}), 35: (1, {'@': 284}), 26: (1, {'@': 284}), 28: (1, {'@': 284}), 30: (1, {'@': 284}), 47: (1, {'@': 284})}, 461: {2: (1, {'@': 285}), 46: (1, {'@': 285}), 27: (1, {'@': 285}), 15: (1, {'@': 285}), 49: (1, {'@': 285}), 6: (1, {'@': 285}), 28: (1, {'@': 285}), 52: (1, {'@': 285}), 30: (1, {'@': 285}), 57: (1, {'@': 285}), 48: (1, {'@': 285}), 60: (1, {'@': 285}), 62: (1, {'@': 285}), 32: (1, {'@': 285}), 21: (1, {'@': 285}), 50: (1, {'@': 285}), 63: (1, {'@': 285}), 56: (1, {'@': 285}), 51: (1, {'@': 285}), 53: (1, {'@': 285}), 54: (1, {'@': 285}), 47: (1, {'@': 285}), 55: (1, {'@': 285}), 11: (1, {'@': 285}), 59: (1, {'@': 285}), 14: (1, {'@': 285}), 61: (1, {'@': 285}), 23: (1, {'@': 285}), 24: (1, {'@': 285}), 64: (1, {'@': 285}), 29: (1, {'@': 285}), 36: (1, {'@': 285})}, 462: {46: (1, {'@': 286}), 49: (1, {'@': 286}), 6: (1, {'@': 286}), 52: (1, {'@': 286}), 48: (1, {'@': 286}), 50: (1, {'@': 286}), 51: (1, {'@': 286}), 36: (1, {'@': 286}), 53: (1, {'@': 286}), 54: (1, {'@': 286}), 55: (1, {'@': 286})}, 463: {5: (0, 181), 57: (0, 250), 30: (1, {'@': 287}), 108: (1, {'@': 287}), 29: (1, {'@': 287})}, 464: {29: (0, 371), 46: (0, 374)}, 465: {150: (0, 450), 62: (0, 282), 11: (1, {'@': 288}), 60: (1, {'@': 288}), 2: (1, {'@': 288}), 20: (1, {'@': 288}), 13: (1, {'@': 288}), 14: (1, {'@': 288}), 21: (1, {'@': 288}), 15: (1, {'@': 288}), 23: (1, {'@': 288}), 24: (1, {'@': 288}), 63: (1, {'@': 288}), 16: (1, {'@': 288}), 17: (1, {'@': 288}), 36: (1, {'@': 288}), 106: (1, {'@': 288}), 26: (1, {'@': 288}), 27: (1, {'@': 288}), 28: (1, {'@': 288}), 29: (1, {'@': 288}), 30: (1, {'@': 288}), 31: (1, {'@': 288}), 32: (1, {'@': 288}), 33: (1, {'@': 288}), 34: (1, {'@': 288}), 35: (1, {'@': 288})}, 466: {46: (0, 389)}, 467: {92: (0, 5), 38: (0, 369), 19: (0, 453), 8: (0, 419), 40: (0, 428), 10: (0, 379), 37: (0, 332), 98: (0, 286), 42: (0, 412), 5: (0, 311), 43: (0, 372), 44: (0, 387), 0: (0, 378), 91: (0, 296), 99: (0, 287), 45: (0, 410), 18: (0, 289), 4: (0, 393), 94: (0, 281), 93: (0, 312), 6: (0, 34), 100: (0, 269), 88: (0, 299), 39: (0, 427), 2: (0, 254), 101: (0, 294), 95: (0, 279), 1: (0, 230), 41: (0, 262), 96: (0, 301), 102: (0, 323), 97: (0, 272), 3: (0, 131), 14: (0, 333), 77: (0, 330), 12: (0, 274), 7: (0, 228)}, 468: {29: (1, {'@': 289}), 16: (1, {'@': 289}), 28: (1, {'@': 289}), 47: (1, {'@': 289}), 30: (1, {'@': 289}), 106: (1, {'@': 289})}, 469: {19: (0, 453), 77: (0, 349), 138: (0, 503)}, 470: {3: (1, {'@': 290}), 22: (1, {'@': 290}), 5: (1, {'@': 290}), 6: (1, {'@': 290}), 25: (1, {'@': 290}), 19: (1, {'@': 290}), 30: (1, {'@': 290})}, 471: {10: (0, 463), 6: (0, 34), 9: (0, 187)}, 472: {46: (1, {'@': 291}), 27: (1, {'@': 291}), 15: (1, {'@': 291}), 49: (1, {'@': 291}), 6: (1, {'@': 291}), 28: (1, {'@': 291}), 52: (1, {'@': 291}), 30: (1, {'@': 291}), 48: (1, {'@': 291}), 32: (1, {'@': 291}), 21: (1, {'@': 291}), 50: (1, {'@': 291}), 56: (1, {'@': 291}), 51: (1, {'@': 291}), 53: (1, {'@': 291}), 54: (1, {'@': 291}), 47: (1, {'@': 291}), 55: (1, {'@': 291}), 11: (1, {'@': 291}), 59: (1, {'@': 291}), 14: (1, {'@': 291}), 61: (1, {'@': 291}), 62: (1, {'@': 291}), 23: (1, {'@': 291}), 24: (1, {'@': 291}), 64: (1, {'@': 291}), 29: (1, {'@': 291})}, 473: {47: (0, 256), 48: (1, {'@': 292}), 49: (1, {'@': 292}), 50: (1, {'@': 292}), 6: (1, {'@': 292}), 51: (1, {'@': 292}), 52: (1, {'@': 292}), 53: (1, {'@': 292}), 54: (1, {'@': 292}), 55: (1, {'@': 292}), 46: (1, {'@': 292})}, 474: {16: (0, 79)}, 475: {106: (0, 345), 11: (1, {'@': 285}), 59: (1, {'@': 285}), 2: (1, {'@': 285}), 46: (1, {'@': 285}), 14: (1, {'@': 285}), 15: (1, {'@': 285}), 57: (1, {'@': 285}), 60: (1, {'@': 285}), 61: (1, {'@': 285}), 62: (1, {'@': 285}), 21: (1, {'@': 285}), 23: (1, {'@': 285}), 24: (1, {'@': 285}), 63: (1, {'@': 285}), 56: (1, {'@': 285}), 47: (1, {'@': 285}), 64: (1, {'@': 285})}, 476: {46: (1, {'@': 293}), 27: (1, {'@': 293}), 15: (1, {'@': 293}), 49: (1, {'@': 293}), 6: (1, {'@': 293}), 28: (1, {'@': 293}), 52: (1, {'@': 293}), 30: (1, {'@': 293}), 48: (1, {'@': 293}), 32: (1, {'@': 293}), 21: (1, {'@': 293}), 50: (1, {'@': 293}), 56: (1, {'@': 293}), 51: (1, {'@': 293}), 53: (1, {'@': 293}), 54: (1, {'@': 293}), 47: (1, {'@': 293}), 55: (1, {'@': 293})}, 477: {12: (0, 460), 22: (0, 177), 151: (0, 251), 6: (0, 34), 19: (0, 453), 25: (0, 152), 41: (0, 506), 10: (0, 168), 77: (0, 134), 84: (0, 443), 78: (0, 199), 5: (0, 457), 107: (0, 280), 85: (0, 277), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (1, {'@': 294}), 60: (1, {'@': 294}), 2: (1, {'@': 294}), 20: (1, {'@': 294}), 62: (1, {'@': 294}), 13: (1, {'@': 294}), 14: (1, {'@': 294}), 21: (1, {'@': 294}), 15: (1, {'@': 294}), 23: (1, {'@': 294}), 24: (1, {'@': 294}), 63: (1, {'@': 294}), 16: (1, {'@': 294}), 17: (1, {'@': 294}), 36: (1, {'@': 294}), 106: (1, {'@': 294}), 26: (1, {'@': 294}), 27: (1, {'@': 294}), 28: (1, {'@': 294}), 29: (1, {'@': 294}), 30: (1, {'@': 294}), 31: (1, {'@': 294}), 32: (1, {'@': 294}), 33: (1, {'@': 294}), 34: (1, {'@': 294}), 35: (1, {'@': 294})}, 478: {29: (1, {'@': 295}), 16: (1, {'@': 295}), 28: (1, {'@': 295}), 47: (1, {'@': 295}), 30: (1, {'@': 295}), 106: (1, {'@': 295})}, 479: {10: (0, 123), 104: (0, 59), 6: (0, 34)}, 480: {10: (0, 123), 104: (0, 184), 6: (0, 34)}, 481: {34: (0, 446)}, 482: {10: (0, 123), 104: (0, 422), 6: (0, 34)}, 483: {22: (0, 177), 6: (0, 34), 19: (0, 453), 111: (0, 90), 81: (0, 209), 5: (0, 182), 30: (0, 438), 10: (0, 290), 25: (0, 207), 3: (0, 131), 41: (0, 478), 77: (0, 490)}, 484: {11: (1, {'@': 296}), 20: (1, {'@': 296}), 13: (1, {'@': 296}), 14: (1, {'@': 296}), 21: (1, {'@': 296}), 15: (1, {'@': 296}), 23: (1, {'@': 296}), 24: (1, {'@': 296}), 16: (1, {'@': 296}), 17: (1, {'@': 296}), 36: (1, {'@': 296}), 106: (1, {'@': 296}), 26: (1, {'@': 296}), 27: (1, {'@': 296}), 28: (1, {'@': 296}), 29: (1, {'@': 296}), 30: (1, {'@': 296}), 31: (1, {'@': 296}), 32: (1, {'@': 296}), 33: (1, {'@': 296}), 34: (1, {'@': 296}), 35: (1, {'@': 296})}, 485: {10: (0, 123), 6: (0, 34), 104: (0, 237)}, 486: {10: (0, 404), 6: (0, 34)}, 487: {47: (0, 256), 46: (1, {'@': 297}), 27: (1, {'@': 297}), 49: (1, {'@': 297}), 6: (1, {'@': 297}), 28: (1, {'@': 297}), 52: (1, {'@': 297}), 30: (1, {'@': 297}), 48: (1, {'@': 297}), 32: (1, {'@': 297}), 50: (1, {'@': 297}), 51: (1, {'@': 297}), 53: (1, {'@': 297}), 54: (1, {'@': 297}), 55: (1, {'@': 297})}, 488: {11: (1, {'@': 298}), 2: (1, {'@': 298}), 13: (1, {'@': 298}), 27: (1, {'@': 298}), 15: (1, {'@': 298}), 29: (1, {'@': 298}), 31: (1, {'@': 298}), 32: (1, {'@': 298}), 21: (1, {'@': 298}), 23: (1, {'@': 298}), 33: (1, {'@': 298}), 34: (1, {'@': 298}), 35: (1, {'@': 298}), 24: (1, {'@': 298}), 106: (1, {'@': 298}), 26: (1, {'@': 298}), 14: (1, {'@': 298}), 16: (1, {'@': 298}), 28: (1, {'@': 298}), 17: (1, {'@': 298}), 30: (1, {'@': 298}), 60: (1, {'@': 298}), 20: (1, {'@': 298}), 36: (1, {'@': 298})}, 489: {48: (1, {'@': 299}), 49: (1, {'@': 299}), 50: (1, {'@': 299}), 6: (1, {'@': 299}), 51: (1, {'@': 299}), 52: (1, {'@': 299}), 53: (1, {'@': 299}), 54: (1, {'@': 299}), 55: (1, {'@': 299}), 46: (1, {'@': 299})}, 490: {29: (1, {'@': 300}), 16: (1, {'@': 300}), 28: (1, {'@': 300}), 47: (1, {'@': 300}), 30: (1, {'@': 300}), 106: (1, {'@': 300})}, 491: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 70: (0, 418), 75: (0, 185), 76: (0, 340), 23: (0, 326), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103)}, 492: {11: (0, 350), 74: (0, 335), 17: (0, 68), 23: (0, 326), 16: (0, 159), 13: (0, 320), 15: (0, 346), 24: (0, 93), 21: (0, 348), 14: (0, 347), 71: (0, 343), 20: (0, 103), 87: (0, 110), 36: (1, {'@': 301}), 26: (1, {'@': 301}), 27: (1, {'@': 301}), 28: (1, {'@': 301}), 29: (1, {'@': 301}), 30: (1, {'@': 301}), 31: (1, {'@': 301}), 32: (1, {'@': 301}), 33: (1, {'@': 301}), 34: (1, {'@': 301}), 35: (1, {'@': 301})}, 493: {2: (0, 60), 46: (1, {'@': 302}), 27: (1, {'@': 302}), 15: (1, {'@': 302}), 49: (1, {'@': 302}), 6: (1, {'@': 302}), 28: (1, {'@': 302}), 52: (1, {'@': 302}), 30: (1, {'@': 302}), 48: (1, {'@': 302}), 32: (1, {'@': 302}), 21: (1, {'@': 302}), 50: (1, {'@': 302}), 56: (1, {'@': 302}), 51: (1, {'@': 302}), 53: (1, {'@': 302}), 54: (1, {'@': 302}), 47: (1, {'@': 302}), 55: (1, {'@': 302}), 11: (1, {'@': 302}), 59: (1, {'@': 302}), 14: (1, {'@': 302}), 61: (1, {'@': 302}), 62: (1, {'@': 302}), 23: (1, {'@': 302}), 24: (1, {'@': 302}), 64: (1, {'@': 302}), 29: (1, {'@': 302}), 36: (1, {'@': 302})}, 494: {5: (0, 480), 36: (1, {'@': 303})}, 495: {12: (0, 460), 22: (0, 177), 6: (0, 34), 19: (0, 453), 47: (0, 303), 25: (0, 152), 41: (0, 506), 10: (0, 168), 77: (0, 134), 84: (0, 443), 78: (0, 199), 5: (0, 457), 85: (0, 277), 3: (0, 131), 18: (0, 174), 81: (0, 160)}, 496: {5: (0, 400), 6: (0, 34), 38: (0, 369), 39: (0, 427), 40: (0, 428), 2: (0, 254), 8: (0, 419), 10: (0, 426), 1: (0, 230), 41: (0, 262), 45: (0, 132), 42: (0, 412), 43: (0, 372), 4: (0, 393), 44: (0, 387), 0: (0, 378), 3: (0, 131), 36: (0, 129), 7: (0, 228)}, 497: {28: (0, 381)}, 498: {27: (0, 51)}, 499: {26: (1, {'@': 304}), 27: (1, {'@': 304}), 28: (1, {'@': 304}), 29: (1, {'@': 304}), 30: (1, {'@': 304}), 31: (1, {'@': 304}), 32: (1, {'@': 304}), 33: (1, {'@': 304}), 34: (1, {'@': 304}), 35: (1, {'@': 304}), 36: (1, {'@': 304})}, 500: {6: (0, 34), 10: (0, 94)}, 501: {47: (0, 256), 46: (1, {'@': 305}), 27: (1, {'@': 305}), 49: (1, {'@': 305}), 6: (1, {'@': 305}), 28: (1, {'@': 305}), 52: (1, {'@': 305}), 30: (1, {'@': 305}), 48: (1, {'@': 305}), 32: (1, {'@': 305}), 50: (1, {'@': 305}), 51: (1, {'@': 305}), 53: (1, {'@': 305}), 54: (1, {'@': 305}), 55: (1, {'@': 305})}, 502: {11: (0, 350), 74: (0, 335), 17: (0, 68), 23: (0, 326), 16: (0, 159), 13: (0, 320), 15: (0, 346), 24: (0, 93), 21: (0, 348), 14: (0, 347), 106: (0, 252), 71: (0, 343), 20: (0, 103), 87: (0, 110)}, 503: {29: (1, {'@': 306}), 46: (1, {'@': 306})}, 504: {29: (1, {'@': 307}), 16: (1, {'@': 307}), 28: (1, {'@': 307}), 47: (1, {'@': 307}), 30: (1, {'@': 307}), 106: (1, {'@': 307})}, 505: {48: (1, {'@': 308}), 49: (1, {'@': 308}), 50: (1, {'@': 308}), 6: (1, {'@': 308}), 51: (1, {'@': 308}), 52: (1, {'@': 308}), 53: (1, {'@': 308}), 54: (1, {'@': 308}), 55: (1, {'@': 308})}, 506: {12: (1, {'@': 309}), 11: (1, {'@': 309}), 2: (1, {'@': 309}), 13: (1, {'@': 309}), 14: (1, {'@': 309}), 15: (1, {'@': 309}), 6: (1, {'@': 309}), 16: (1, {'@': 309}), 17: (1, {'@': 309}), 18: (1, {'@': 309}), 19: (1, {'@': 309}), 60: (1, {'@': 309}), 107: (1, {'@': 309}), 20: (1, {'@': 309}), 3: (1, {'@': 309}), 62: (1, {'@': 309}), 22: (1, {'@': 309}), 21: (1, {'@': 309}), 23: (1, {'@': 309}), 5: (1, {'@': 309}), 24: (1, {'@': 309}), 63: (1, {'@': 309}), 36: (1, {'@': 309}), 25: (1, {'@': 309}), 106: (1, {'@': 309}), 27: (1, {'@': 309}), 29: (1, {'@': 309}), 31: (1, {'@': 309}), 32: (1, {'@': 309}), 33: (1, {'@': 309}), 34: (1, {'@': 309}), 35: (1, {'@': 309}), 26: (1, {'@': 309}), 28: (1, {'@': 309}), 30: (1, {'@': 309}), 47: (1, {'@': 309})}, 507: {12: (0, 460), 16: (0, 159), 19: (0, 453), 69: (0, 477), 41: (0, 506), 71: (0, 343), 72: (0, 509), 73: (0, 357), 74: (0, 335), 13: (0, 320), 5: (0, 457), 75: (0, 185), 76: (0, 340), 23: (0, 326), 70: (0, 373), 25: (0, 152), 22: (0, 177), 21: (0, 348), 10: (0, 168), 14: (0, 347), 77: (0, 134), 78: (0, 199), 79: (0, 171), 80: (0, 328), 2: (0, 194), 3: (0, 131), 18: (0, 174), 81: (0, 160), 11: (0, 350), 82: (0, 484), 83: (0, 465), 84: (0, 443), 85: (0, 170), 15: (0, 346), 86: (0, 354), 87: (0, 71), 17: (0, 68), 6: (0, 34), 88: (0, 116), 89: (0, 200), 24: (0, 93), 90: (0, 113), 20: (0, 103)}, 508: {16: (0, 111), 29: (1, {'@': 310}), 28: (1, {'@': 310})}, 509: {11: (1, {'@': 311}), 20: (1, {'@': 311}), 13: (1, {'@': 311}), 14: (1, {'@': 311}), 21: (1, {'@': 311}), 15: (1, {'@': 311}), 23: (1, {'@': 311}), 24: (1, {'@': 311}), 16: (1, {'@': 311}), 17: (1, {'@': 311}), 36: (1, {'@': 311}), 106: (1, {'@': 311}), 26: (1, {'@': 311}), 27: (1, {'@': 311}), 28: (1, {'@': 311}), 29: (1, {'@': 311}), 30: (1, {'@': 311}), 31: (1, {'@': 311}), 32: (1, {'@': 311}), 33: (1, {'@': 311}), 34: (1, {'@': 311}), 35: (1, {'@': 311})}, 510: {3: (1, {'@': 312}), 22: (1, {'@': 312}), 5: (1, {'@': 312}), 6: (1, {'@': 312}), 25: (1, {'@': 312}), 19: (1, {'@': 312}), 30: (1, {'@': 312})}}, 'start_states': {'start': 61}, 'end_states': {'start': 48}}, 'lexer_conf': {'tokens': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}, {'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}], 'ignore': ['WS', 'COMMENT'], 'g_regex_flags': 0, '__type__': 'LexerConf'}, 'start': ['start'], '__type__': 'LALR_ContextualLexer'}, 'rules': [{'@': 90}, {'@': 115}, {'@': 88}, {'@': 213}, {'@': 94}, {'@': 252}, {'@': 188}, {'@': 271}, {'@': 152}, {'@': 299}, {'@': 119}, {'@': 85}, {'@': 176}, {'@': 189}, {'@': 164}, {'@': 174}, {'@': 130}, {'@': 260}, {'@': 141}, {'@': 274}, {'@': 167}, {'@': 123}, {'@': 230}, {'@': 173}, {'@': 145}, {'@': 92}, {'@': 208}, {'@': 117}, {'@': 267}, {'@': 248}, {'@': 150}, {'@': 97}, {'@': 210}, {'@': 250}, {'@': 95}, {'@': 231}, {'@': 110}, {'@': 301}, {'@': 158}, {'@': 295}, {'@': 300}, {'@': 143}, {'@': 113}, {'@': 272}, {'@': 193}, {'@': 223}, {'@': 307}, {'@': 275}, {'@': 289}, {'@': 175}, {'@': 179}, {'@': 296}, {'@': 228}, {'@': 127}, {'@': 124}, {'@': 238}, {'@': 224}, {'@': 147}, {'@': 235}, {'@': 237}, {'@': 236}, {'@': 118}, {'@': 220}, {'@': 218}, {'@': 311}, {'@': 240}, {'@': 170}, {'@': 122}, {'@': 161}, {'@': 204}, {'@': 156}, {'@': 280}, {'@': 288}, {'@': 187}, {'@': 294}, {'@': 197}, {'@': 155}, {'@': 153}, {'@': 309}, {'@': 136}, {'@': 284}, {'@': 157}, {'@': 183}, {'@': 148}, {'@': 278}, {'@': 169}, {'@': 180}, {'@': 219}, {'@': 103}, {'@': 207}, {'@': 120}, {'@': 184}, {'@': 159}, {'@': 253}, {'@': 266}, {'@': 185}, {'@': 249}, {'@': 286}, {'@': 242}, {'@': 134}, {'@': 99}, {'@': 262}, {'@': 292}, {'@': 129}, {'@': 137}, {'@': 287}, {'@': 243}, {'@': 178}, {'@': 254}, {'@': 229}, {'@': 303}, {'@': 166}, {'@': 132}, {'@': 131}, {'@': 199}, {'@': 106}, {'@': 151}, {'@': 216}, {'@': 98}, {'@': 251}, {'@': 108}, {'@': 297}, {'@': 305}, {'@': 194}, {'@': 195}, {'@': 202}, {'@': 203}, {'@': 214}, {'@': 226}, {'@': 209}, {'@': 205}, {'@': 126}, {'@': 293}, {'@': 257}, {'@': 149}, {'@': 112}, {'@': 93}, {'@': 89}, {'@': 86}, {'@': 232}, {'@': 114}, {'@': 217}, {'@': 291}, {'@': 177}, {'@': 171}, {'@': 247}, {'@': 302}, {'@': 270}, {'@': 192}, {'@': 246}, {'@': 258}, {'@': 255}, {'@': 256}, {'@': 269}, {'@': 87}, {'@': 190}, {'@': 211}, {'@': 259}, {'@': 263}, {'@': 133}, {'@': 160}, {'@': 116}, {'@': 139}, {'@': 241}, {'@': 244}, {'@': 186}, {'@': 105}, {'@': 265}, {'@': 285}, {'@': 225}, {'@': 279}, {'@': 144}, {'@': 168}, {'@': 135}, {'@': 101}, {'@': 282}, {'@': 91}, {'@': 104}, {'@': 111}, {'@': 83}, {'@': 102}, {'@': 82}, {'@': 227}, {'@': 198}, {'@': 206}, {'@': 191}, {'@': 221}, {'@': 96}, {'@': 308}, {'@': 146}, {'@': 281}, {'@': 165}, {'@': 162}, {'@': 121}, {'@': 142}, {'@': 138}, {'@': 304}, {'@': 310}, {'@': 264}, {'@': 290}, {'@': 312}, {'@': 233}, {'@': 84}, {'@': 109}, {'@': 128}, {'@': 298}, {'@': 196}, {'@': 181}, {'@': 100}, {'@': 172}, {'@': 222}, {'@': 140}, {'@': 245}, {'@': 215}, {'@': 276}, {'@': 182}, {'@': 273}, {'@': 306}, {'@': 154}, {'@': 125}, {'@': 261}, {'@': 163}, {'@': 268}, {'@': 212}, {'@': 234}, {'@': 200}, {'@': 107}, {'@': 277}, {'@': 283}, {'@': 239}, {'@': 201}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache_grammar': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': None, 'ambiguity': 'auto', 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'PERCENT', 'pattern': {'value': '%', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 1: {'name': '_DEFEQ', 'pattern': {'value': ':=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 2: {'name': 'EQ', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 3: {'name': 'GT', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 4: {'name': 'LT', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 5: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 6: {'name': '_IS', 'pattern': {'value': '(?:(?:(?:are|is)|∈)|be)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 7: {'name': 'PROP_VAL', 'pattern': {'value': '(?:(?i:(?:(?i:sometimes)|(?i:true)))|(?i:false))', 'flags': ['i'], '_width': [4, 9], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 8: {'name': 'COMP', 'pattern': {'value': '(?:(?:(?:!|\\~)|¬)|not)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 9: {'name': '_IMPLIES', 'pattern': {'value': '(?:(?:=>|⇒)|⟹\\ )', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 10: {'name': '_IFF', 'pattern': {'value': '(?:(?:(?:<=>|⟺)|⇔)|iff)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 11: {'name': 'CONJ', 'pattern': {'value': '(?:(?:(?:\\&|/\\\\)|∧)|and)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 12: {'name': 'DISJ', 'pattern': {'value': '(?:(?:(?:\\||\\\\/)|∨)|or)', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 13: {'name': 'VAR', 'pattern': {'value': '(?!(be|sup|inf|distinct|min|max|case|end|match|with|do|if|then|else|otherwise|iff|is|are|forall|exists|not|or|and|sometimes|true|false)\\b)[a-z_$][\\$a-zA-Z_0-9]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 14: {'name': 'ANNOTATION', 'pattern': {'value': '@[A-Za-z0-9_]+', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 15: {'name': 'COMMENT', 'pattern': {'value': '\\/\\/[^\n]*', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 16: {'name': 'INT', 'pattern': {'value': '(?:[0-9])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 17: {'name': 'WS', 'pattern': {'value': '(?:[ \t\x0c\r\n])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 18: {'name': 'ESCAPED_STRING', 'pattern': {'value': '".*?(?<!\\\\)(\\\\\\\\)*?"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 19: {'name': 'HASH', 'pattern': {'value': '#', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 20: {'name': '__ANON_0', 'pattern': {'value': 'save_aut', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 21: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 22: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 23: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 24: {'name': '__ANON_1', 'pattern': {'value': 'save_aut_img', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 25: {'name': 'CONTEXT', 'pattern': {'value': 'context', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 26: {'name': '__ANON_2', 'pattern': {'value': 'end_context', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 27: {'name': 'LOAD', 'pattern': {'value': 'load', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 28: {'name': '__ANON_3', 'pattern': {'value': 'assert_prop', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 29: {'name': 'IMPORT', 'pattern': {'value': 'import', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 30: {'name': 'FORGET', 'pattern': {'value': 'forget', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 31: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 32: {'name': 'STRUCTURE', 'pattern': {'value': 'Structure', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 33: {'name': 'DEFINING', 'pattern': {'value': 'defining', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 34: {'name': 'SHUFFLE', 'pattern': {'value': 'shuffle', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 35: {'name': '__ANON_4', 'pattern': {'value': 'shuffle_or', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 36: {'name': 'PLOT', 'pattern': {'value': 'plot', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 37: {'name': 'RESTRICT', 'pattern': {'value': 'Restrict', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 38: {'name': 'LET', 'pattern': {'value': 'Let', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 39: {'name': 'DEFINE', 'pattern': {'value': 'Define', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 40: {'name': 'ALIAS', 'pattern': {'value': 'Alias', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 41: {'name': '__ANON_5', 'pattern': {'value': '(?!(Define|Alias|Restrict)\\b)[A-Z][a-zA-Z_0-9]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 42: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 43: {'name': 'THEN', 'pattern': {'value': 'then', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 44: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 45: {'name': 'BACKSLASH', 'pattern': {'value': '\\', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 46: {'name': '__ANON_6', 'pattern': {'value': 'let', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 47: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 48: {'name': 'MATCH', 'pattern': {'value': 'match', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 49: {'name': 'WITH', 'pattern': {'value': 'with', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 50: {'name': 'END', 'pattern': {'value': 'end', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 51: {'name': 'SEMICOLON', 'pattern': {'value': ';', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 52: {'name': 'DO', 'pattern': {'value': 'do', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 53: {'name': 'CASE', 'pattern': {'value': 'case', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 54: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 55: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 56: {'name': '__ANON_7', 'pattern': {'value': '[^\x00-ÿ]', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 57: {'name': 'AT', 'pattern': {'value': '@', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 58: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 59: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 60: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 61: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 62: {'name': 'CIRCUMFLEX', 'pattern': {'value': '^', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 63: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 64: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 65: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 66: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 67: {'name': '__ANON_8', 'pattern': {'value': '⊤', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 68: {'name': '__ANON_9', 'pattern': {'value': '⊥', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 69: {'name': 'DISTINCT', 'pattern': {'value': 'distinct', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 70: {'name': 'NOT', 'pattern': {'value': 'not', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 71: {'name': 'MIN', 'pattern': {'value': 'min', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 72: {'name': 'MAX', 'pattern': {'value': 'max', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 73: {'name': 'INF', 'pattern': {'value': 'inf', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 74: {'name': 'SUP', 'pattern': {'value': 'sup', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 75: {'name': '__ANON_10', 'pattern': {'value': '≠', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 76: {'name': '__ANON_11', 'pattern': {'value': '≥', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 77: {'name': '__ANON_12', 'pattern': {'value': '≤', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 78: {'name': 'FORALL', 'pattern': {'value': 'forall', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 79: {'name': '__ANON_13', 'pattern': {'value': '∀', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 80: {'name': 'EXISTS', 'pattern': {'value': 'exists', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 81: {'name': '__ANON_14', 'pattern': {'value': '∃', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 82: {'origin': {'name': 'le', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_le', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': 'ge', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': '__operator_sym_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__operator_sym_plus_6', '__type__': 'NonTerminal'}, {'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'FORGET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'directive_forget', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'greater', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'var_ref', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pred_definition', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'less', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'prog', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': 'ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_ne', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': 'directive_name', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_5', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'ne', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'not_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'directive_save_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'def', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__term_star_3', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': '_IFF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'iff', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': 'restriction', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'restrict_is', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': '__praline_mul_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_mul_star_9', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': 'var', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'var_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': 'ge', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_11', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': 'pecan_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_pecan_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': 'ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pred', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'implies', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': '__mul_expr_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__mul_expr_star_18', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'conj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': '__praline_sub_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'partial_op_fst', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': 'ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_10', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '__match_expr_star_4', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'ge', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'greater_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': 'prog', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'inf_func', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BACKSLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_lambda', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_7', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'directive_import', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': '__term_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_arm', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}, {'name': '__praline_add_star_8', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': 'prop_val', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PROP_VAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'prop_val_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': '__varlist_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'bool', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'comp', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': '__praline_sub_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_sub_star_7', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'def_pred_is', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '__def_star_1', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 14, 'alias': 'directive_plot', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': 'varlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': 'varlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '__varlist_star_15', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MIN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'min_func', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': 'kv_pair', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'kv_pair', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': 'int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'int_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'def_pred_is_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': '__term_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SUP', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'sup_func', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': '__praline_exponent_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RESTRICT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'restriction', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': '__term_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__term_plus_2', '__type__': 'NonTerminal'}, {'name': 'match_arm', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_match_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'call_is_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'directive_name', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_directive', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': '__def_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'EQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'int', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pecan_term', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'NOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': 'not_elementof', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'WITH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__term_plus_2', '__type__': 'NonTerminal'}, {'name': 'END', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_match', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'if_then_else', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LOAD', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'directive_load_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': '__val_dict_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__val_dict_star_14', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': 'match_arm', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CASE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '_IMPLIES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_match_arm', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_list_gen', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MAX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'max_func', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': '__def_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__def_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'EQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': '__sub_expr_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SHUFFLE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'directive_shuffle', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': '__def_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__def_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'EQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'int', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': 'quant_formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'quant_formal_is_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline', '__type__': 'NonTerminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'call_is_not_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_tuple', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'index_range', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': '__praline_div_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ALIAS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'directive_name', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_alias', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_4', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 13, 'alias': 'directive_shuffle_or', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pecan_term', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'praline_match_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCTURE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'DEFINING', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'val_dict', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': 'directive_structure', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'index_range', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'formal_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': 'praline_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_operator', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': 'pecan_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_pecan_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': '__praline_mul_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': '__praline_tuple_plus_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': 'praline_tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__praline_tuple_plus_13', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': 'praline_exponent', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': '__praline_exponent_star_11', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_exponent', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'CONTEXT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'directive_context', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCTURE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'formal', '__type__': 'NonTerminal'}, {'name': 'DEFINING', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'val_dict', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'directive_structure', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'int_const', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXISTS', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': 'add_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mul_expr', '__type__': 'NonTerminal'}, {'name': '__add_expr_star_17', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'formula_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': '__praline_add_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_add_star_8', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': 'praline_atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_app', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FORALL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': '__mul_expr_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': '__args_star_20', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__args_star_20', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_8', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'formula_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'formula_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}, {'name': '__praline_mul_star_9', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comparison', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_13', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__praline_list_star_12', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_list_literal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_if', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__term_star_3', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': '__add_expr_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'directive_save_aut', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_9', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'formula_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 215: {'origin': {'name': '__praline_list_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'if_then_else', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [False, False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arith', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': 'pecan_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_pecan_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 220: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_14', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': '__praline_div_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_div_star_10', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 223: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'praline_match_prepend', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 224: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 225: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'call_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'spot_formula', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': 'le', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_12', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': 'operator_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__operator_sym_plus_6', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'operator_sym', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 229: {'origin': {'name': 'quant_formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'quant_formal_list', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': 'praline', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEFINE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_def', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'le', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'less_equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': '__operator_sym_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 234: {'origin': {'name': '__add_expr_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__add_expr_star_17', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': '__args_star_20', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arg', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}, {'name': '__praline_sub_star_7', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ANNOTATION', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'annotation', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 243: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'formal_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': 'args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arg', '__type__': 'NonTerminal'}, {'name': '__args_star_20', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': '__praline_exponent_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_exponent_star_11', '__type__': 'NonTerminal'}, {'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'app', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': 'add_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': 'arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'sub_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'praline_let', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': '__val_dict_star_14', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'praline_do', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 251: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}, {'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'disj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'directive_save_aut_img', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': 'praline_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_list_gen', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 254: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'formal_is_call', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 255: {'origin': {'name': 'mul_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'div_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 256: {'origin': {'name': 'div_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '__div_expr_star_19', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 257: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': 'elementof', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 258: {'origin': {'name': 'mul_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'div_expr', '__type__': 'NonTerminal'}, {'name': '__mul_expr_star_18', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 259: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 260: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 15, 'alias': 'directive_plot', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 261: {'origin': {'name': '__varlist_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__varlist_star_15', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 262: {'origin': {'name': 'restriction', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'restrict_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 263: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'call', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 264: {'origin': {'name': '__match_expr_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__match_expr_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 265: {'origin': {'name': 'arg', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 266: {'origin': {'name': 'praline_tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__praline_tuple_plus_13', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_let_pecan', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 268: {'origin': {'name': '__sub_expr_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__sub_expr_star_16', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 269: {'origin': {'name': 'div_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 270: {'origin': {'name': 'sub_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 271: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'directive_end_context', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 272: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_match_list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 273: {'origin': {'name': '__praline_tuple_plus_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_tuple_plus_13', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 274: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'restriction', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 275: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__match_expr_plus_5', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'praline_match_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 276: {'origin': {'name': '__praline_list_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_list_star_12', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 277: {'origin': {'name': '__div_expr_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 278: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_list', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 279: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'call_is_not', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 280: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exponent', '__type__': 'NonTerminal'}, {'name': '__praline_div_star_10', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 281: {'origin': {'name': '__def_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'EQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 282: {'origin': {'name': 'string', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ESCAPED_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'escaped_str', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 283: {'origin': {'name': '__div_expr_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__div_expr_star_19', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 284: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 285: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'call_args', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 286: {'origin': {'name': 'val_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 287: {'origin': {'name': 'formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'formal_var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 288: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exponent', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 289: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 290: {'origin': {'name': '__match_expr_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 291: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'index', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 292: {'origin': {'name': 'pred_definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_DEFEQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'def_pred_standard', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 293: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DISTINCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'varlist', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'distinct', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 294: {'origin': {'name': 'praline_exponent', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_exponent', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 295: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_match_int', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 296: {'origin': {'name': 'praline_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 297: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'forall_sym', '__type__': 'NonTerminal'}, {'name': 'quant_formal', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'forall', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 298: {'origin': {'name': '__praline_add_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 299: {'origin': {'name': 'def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'prop_val', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'directive_assert_prop', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 300: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_match_string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 301: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'praline_operator', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'partial_op_snd', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 302: {'origin': {'name': 'sub_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_expr', '__type__': 'NonTerminal'}, {'name': '__sub_expr_star_16', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 303: {'origin': {'name': 'quant_formal', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlist', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'quant_formal_is', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 304: {'origin': {'name': '__term_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__term_star_3', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 305: {'origin': {'name': 'pred', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'exists_sym', '__type__': 'NonTerminal'}, {'name': 'quant_formal', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pred', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'exists', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 306: {'origin': {'name': '__val_dict_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kv_pair', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 307: {'origin': {'name': 'match_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__match_expr_plus_5', '__type__': 'NonTerminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'praline_match_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 308: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'def', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 309: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_int', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 310: {'origin': {'name': '__match_expr_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 311: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 312: {'origin': {'name': '__match_expr_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__match_expr_plus_5', '__type__': 'NonTerminal'}, {'name': 'match_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(transformer=None, postlex=None):
  namespace = {'Rule': Rule, 'TerminalDef': TerminalDef}
  return Lark.deserialize(DATA, namespace, MEMO, transformer=transformer, postlex=postlex)
