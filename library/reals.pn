#import("integers.pn")

#load("real/msd_bin_less.aut", "hoa", msd_bin_less(a, b))
#load("real/real_equal.txt", "pecan", real_equal(a, b))

one_int(x) := "!x & X(x) & X(X(G(!x)))"
zeros(x) := "G(!x)"
#shuffle(one_int(x), zeros(x), real_one(x))

not_all_ones(x) := "G(F(!x))"

any2(a, b) := true

// Build the basic recognition, addition, and comparison operators for real numbers

// Real numbers aren't allowed to end in infinitely many ones---this preserves unique representations
#shuffle(finite_num(x), not_all_ones(x), real_temp(x))
real(x) := real_temp(x) & !negative_zero(x)

#shuffle(int_less(a, b), any2(a, b), integral_less(a, b))
#shuffle(default_equal(a, b), any2(a, b), integral_equal(a, b))
#shuffle(any2(a, b), msd_bin_less(a, b), fractional_less(a, b))

real_less(a, b) := integral_less(a, b) | (integral_equal(a, b) & // integral_equal guarantees they have the same sign.
                                            ((negative(a) & negative(b) & fractional_less(b, a)) |
                                             (positive(a) & positive(b) & fractional_less(a, b))))

#load("real/real_add_same_sign.txt", "pecan", real_add_same_sign(a, b, c))

real_leq(a, b) := real_less(a, b) | a = b

real_add_neg_pos(a, b, c) := negative(a) & positive(b) & ((real_less(b, negate(a)) & negate(real_add_same_sign(_, b, negate(a)), c)) |
                                                          (real_leq(negate(a), b) & real_add_same_sign(c, negate(a), b)))

real_add(a, b, c) := a is real & b is real & c is real & (real_add_same_sign(a, b, c) | real_add_neg_pos(a, b, c) | real_add_neg_pos(b, a, c))
// #load("real/real_add.aut", "hoa", real_add(a, b, c))

Structure real defining {
    "adder": real_add(any, any, any),
    "less": real_less(any, any),
    "one": real_one(any),
    "abs": default_abs(any, any)
}

Define splitEvenOdd l :=
    match l with
    case [] => ([], [])
    case [a] => ([a], [])
    case a :: b :: xs =>
        match splitEvenOdd xs with
        case (even, odd) => (a :: even, b :: odd)
        end
    end.

Define realFormatHelper sign cycleOffset prefix cycle :=
    match (splitEvenOdd prefix, splitEvenOdd cycle) with
    case ((prefixFractional, prefixIntegralTemp), (cycleEven, cycleOdd)) =>
        let isOffset := isEven (length prefix + cycleOffset) in
        let cycleIntegral := if isOffset then cycleOdd else cycleEven in
        let cycleFractionalTemp := if isOffset then cycleEven else cycleOdd in
        let cycleFractional := if isEmpty cycleFractionalTemp then [0] else cycleFractionalTemp in
        let prefixIntegral := if isEmpty prefixIntegralTemp then [0] else prefixIntegralTemp in
        if all (= 0) cycleIntegral then
            sign ^ concatenate (reverse prefixIntegral) ^ "." ^ concatenate prefixFractional ^ "(" ^ concatenate cycleFractional ^ ")^Ï‰"
        else
            head (snd (stdFormat "" [(((if sign = "+" then 0 else 1) :: prefix), cycle)]))
                ^ " (NOT A VALID REAL NUMBER)" ^ toString (prefixIntegral, cycleIntegral, prefixFractional, cycleFractional)
    end.

Define realFormat var reps :=
    match reps with
    case [(actualPrefix, cycle)] =>
        let prefix := if actualPrefix = [] then [0] else actualPrefix in
        (var,
            if isEmpty prefix then
                realFormatHelper (if head cycle = 0 then "+" else "-") 1 (tail prefix) cycle
            else
                realFormatHelper (if head prefix = 0 then "+" else "-") 0 (tail prefix) cycle
        )
    end.

