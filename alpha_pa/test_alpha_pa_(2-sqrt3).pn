#import("../SturmianWords/ostrowski_defs.pn")

#load("./g_alpha/g_alpha_(2-sqrt3).aut", "hoa", g_alpha(a, x, y))
#load("./f_alpha_lt.txt", "walnut", f_alpha_lt(x, y))
#load("./alpha_(2-sqrt3).txt", "walnut", alpha(a))
#load("./shift2.aut", "hoa", shift2(n, m))

// fix alpha = [0;1,2,1,2,1,2...] = 2 - sqrt(3)

// find: n such that
//   1. alpha * n < 3
//   2. 2 < alpha * n
// 1 === 0 + alpha * n < 3 + alpha * 0
//   === 0 + g_alpha(n) < 3 + g_alpha(0) \/ (0 + g_alpha(n) = 3 + g_alpha(0) /\ f_alpha_lt(n, 0))
//
// 2 === 2 + alpha * 0 < 0 + alpha * n
//   === 2 + g_alpha(0) < 0 + g_alpha(n) \/ (2 + g_alpha(0) = 0 + g_alpha(n) /\ f_alpha_lt(0, n))

// well(n is ostrowski(a)) := @no_simplify[
// 	exists a is alpha.
// 	exists zero is ostrowski_zero(a).
// 	exists one is bco_succ(a, zero).
// 	exists two is bco_succ(a, one).
// 	exists three is bco_succ(a, two).
// 	exists g_n is ostrowski(a).
// 	exists g_zero is ostrowski(a).
// 	g_alpha(a, n, g_n) /\ g_alpha(a, zero, g_zero) /\
// 	(zero + g_n < three + g_zero \/ (zero + g_n = three + g_zero /\ f_alpha_lt(n, zero))) /\
// 	(two + g_zero < zero + g_n \/ (two + g_zero = zero + g_n /\ f_alpha_lt(zero, n)))
// ]

// hmm() := @no_simplify[
// 	exists a is alpha.
// 	exists zero is ostrowski_zero(a).
// 	exists one is bco_succ(a, zero).
// 	exists two is bco_succ(a, one).
// 	exists three is bco_succ(a, two).
// 	forall n is ostrowski(a). n = two => well(n)
// ]

// Example (stdFormat, { well(n) }).

// #assert_prop(true, hmm)

// Execute print (acceptingWord { well(n) }).

sanity_g_alpha() := @no_simplify[
	exists a is alpha.
	forall n is ostrowski(a).
	forall g1 is ostrowski(a).
	forall g2 is ostrowski(a).
	((g_alpha(a, n, g1) /\ g_alpha(a, n, g2)) => g1 = g2)
]

#assert_prop(true, sanity_g_alpha)

sanity_shift() := @no_simplify[
	exists a is alpha.
	forall n is ostrowski(a).
	forall g1 is ostrowski(a).
	forall g2 is ostrowski(a).
	((shift2(n, g1) /\ shift2(n, g2)) => g1 = g2)
]

#assert_prop(true, sanity_shift)

test(g) := @no_simplify[
	exists a is alpha.
	exists o0 is ostrowski_zero(a).
	exists o1 is bco_succ(a, o0).
	exists o2 is bco_succ(a, o1).
	exists o3 is bco_succ(a, o2).
	exists o4 is bco_succ(a, o3).
	exists o5 is bco_succ(a, o4).
	exists o6 is bco_succ(a, o5).
	exists o7 is bco_succ(a, o6).
	exists o8 is bco_succ(a, o7).
	exists o9 is bco_succ(a, o8).
	exists o10 is bco_succ(a, o9).
	ostrowski(a, g) /\ g_alpha(a, o5, g)
]

// test_shift(s) :=
// 	exists a is alpha.
// 	exists o0 is ostrowski_zero(a).
// 	exists o1 is bco_succ(a, o0).
// 	exists o2 is bco_succ(a, o1).
// 	exists o3 is bco_succ(a, o2).
// 	exists o4 is bco_succ(a, o3).
// 	exists o5 is bco_succ(a, o4).
// 	exists o6 is bco_succ(a, o5).
// 	exists o7 is bco_succ(a, o6).
// 	exists o8 is bco_succ(a, o7).
// 	exists o9 is bco_succ(a, o8).
// 	exists o10 is bco_succ(a, o9).
// 	ostrowski(a, s) /\ shift2(o2, s)

some_number(n is ostrowski(a)) :=
	exists a is alpha.
	exists o0 is ostrowski_zero(a).
	exists o1 is bco_succ(a, o0).
	exists o2 is bco_succ(a, o1).
	exists o3 is bco_succ(a, o2).
	exists o4 is bco_succ(a, o3).
	exists o5 is bco_succ(a, o4).
	exists o6 is bco_succ(a, o5).
	exists o7 is bco_succ(a, o6).
	exists o8 is bco_succ(a, o7).
	exists o9 is bco_succ(a, o8).
	exists o10 is bco_succ(a, o9).
	exists o11 is bco_succ(a, o10).
	exists o12 is bco_succ(a, o11).
	ostrowski(a, n) /\ n = o4

Example (ostrowskiFormat, { test(g) }).
// Example (ostrowskiFormat, { test_shift(s) }).
Example (ostrowskiFormat, { some_number(n) }).

// g_alpha
// 1 -> 1
// 2 -> 2
// 3 -> 2
// 4 -> 3
// 5 -> 4
